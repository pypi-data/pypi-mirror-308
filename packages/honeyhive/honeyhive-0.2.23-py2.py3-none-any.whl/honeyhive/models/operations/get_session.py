"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.components import sessioneventquery as components_sessioneventquery
from typing import Any, Dict, List, Optional


@dataclasses.dataclass
class GetSessionRequest:
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The maximum number of sessions to return"""
    project: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'project', 'style': 'form', 'explode': True }})
    r"""The project to query sessions for"""
    query: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""The query for finding sessions"""
    



@dataclasses.dataclass
class GetSessionResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    classes: Optional[List[components_sessioneventquery.SessionEventQuery]] = dataclasses.field(default=None)
    r"""OK"""
    

