Metadata-Version: 2.1
Name: epic_api_client
Version: 2024.1.2
Summary: EPIC API Client including authentication flow and some wrapped API calls
Author-email: Oscar van der Meer <o.m.vandermeer@amsterdamumc.nl>
Maintainer-email: Oscar van der Meer <o.m.vandermeer@amsterdamumc.nl>
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: requests
Requires-Dist: jwt
Requires-Dist: cryptography
Requires-Dist: uuid

# EPIC API Client

## Installation

use pip install EPIC-API-Client.
see example.py for usage and setup .env accordingly.
tip: use uv pip for faster pip (pip install uv)!

## functions

### handle_external_model_scores

Send predictive model scores back to the Epic Cognitive Computing Platform for filing.
```
:param model_id: str, the ECCP model ID the scores are for
:param job_id: str, the autogenerated job ID for the evaluation on ECCP
:param output_type: str, the type of output for the predictive model
:param server_version: str, the server version of the predictive context
:param session_id: str, the session ID of the predictive context
:param entity_ids: list, a list of dictionaries with ID and Type for the entity
:param outputs: dict, the output values of the predictive model
:param raw: dict, optional, raw features used to calculate the scores
:param predictive_context: dict, optional, additional context information for the predictive model

:return: dict, the response from the Epic Cognitive Computing Platform
```
example outputs
```python
{
    "Output_Name": {
        "Scores": {
            "Score_Name_1" : { "Values": [val1, val2,.., valN] },
            "Score_Name_2" : { "Values": [val1, val2,.., valN] }
        },
        "Features": {
            "Feature1": { "Contributions":[contrib1, contrib2, ..., contribN]},
            "Feature2": { "Contributions":[contrib1, contrib2, ..., contribN]}
        }
    }
}
```
example raw
```python
{
    "Additional_Feature_1" : { "Values": [val1, val2,.., valN] },
    "Additional_Feature_2" : { "Values": [val1, val2,.., valN] }
}
```
