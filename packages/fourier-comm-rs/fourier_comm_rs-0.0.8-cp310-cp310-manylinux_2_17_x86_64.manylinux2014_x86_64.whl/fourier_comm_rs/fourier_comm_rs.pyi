class FourierMotorManager:
    '''
    Manager for Fourier motors.
    
    Args:
        ids: list of motor ids.
    '''
    def __init__(self, ids: list[int])->None:...
    
    def wait_for_first_messages(self, timeout_sec: float)->None:
        '''
        Wait for the first messages from the motors.
        
        Args:
            timeout_sec: timeout in seconds.
        '''
        ...
    
    def enable(self, id: int)->None:
        '''
        Enable the motor.
        
        Args:
            id: motor id.
        '''
        ...
    
    def disable(self, id: int)->None:
        '''
        Disable the motor.
        
        Args:
            id: motor id.
        '''
        ...
    
    def get_position(self, id: int)->float:...
    def get_velocity(self, id: int)->float:...
    def get_current(self, id: int)->float:...
    def get_effort(self, id: int)->float:...
   
    def set_position(self, id: int, position: float)->None:...
    def set_velocity(self, id: int, velocity: float)->None:...
    def set_current(self, id: int, current: float)->None:...
    def set_effort(self, id: int, effort: float)->None:...
    
    def set_control_mode(self, id: int, mode: str)->None:...
    def get_control_mode(self, id: int)->str:...
    
    def stop(self)->None:...
    
    def set_positions(self, ids: list[int], positions: list[float])->None:...
    def set_velocities(self, ids: list[int], velocities: list[float])->None:...
    def set_efforts(self, ids: list[int], efforts: list[float])->None:...
    def set_currents(self, ids: list[int], currents: list[float])->None:...
    
    def get_positions(self, ids: list[int])->list[float]:...
    def get_velocities(self, ids: list[int])->list[float]:...
    def get_efforts(self, ids: list[int])->list[float]:...
    def get_currents(self, ids: list[int])->list[float]:... 
    
    def set_motor_pid_gain(self, id: int, position_kp: float, velocity_kp: float, velocity_ki: float)->None:...
    
    def set_control_pd_gain(self, id: int, kp: float, kd: float)->None:...
    
    def set_motor_pid_gains(self, ids: list[int], position_kps: list[float], velocity_kps: list[float], velocity_kis: list[float])->None:...
    
    def set_control_pd_gains(self, ids: list[int], kps: list[float], kds: list[float])->None:...
    

def convert_gains(motor_type: str, kp: float, kd: float)->tuple[float, float]:...
    
    
    
    
    
    
    
    
    
    