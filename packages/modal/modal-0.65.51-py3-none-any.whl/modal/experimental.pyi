import modal.functions
import modal.object
import typing

def stop_fetching_inputs(): ...
def get_local_input_concurrency(): ...
def set_local_input_concurrency(concurrency: int): ...

class _GroupedFunctionCall(
    typing.Generic[modal.functions.P, modal.functions.ReturnType, modal.functions.OriginalReturnType],
    modal.object._Object,
):
    def __init__(self, handles: typing.List[modal.functions.FunctionCall]): ...
    def get(
        self, *args: modal.functions.P.args, **kwargs: modal.functions.P.kwargs
    ) -> typing.List[modal.functions.ReturnType]: ...
    def __getattr__(self, name): ...
    def cancel(self, terminate_containers: bool = False) -> None: ...

class _GroupedFunction(
    typing.Generic[modal.functions.P, modal.functions.ReturnType, modal.functions.OriginalReturnType],
    modal.object._Object,
):
    def __init__(self, f: modal.functions._Function, size: int): ...
    def remote(
        self, *args: modal.functions.P.args, **kwargs: modal.functions.P.kwargs
    ) -> typing.List[modal.functions.ReturnType]: ...
    def spawn(self, *args: modal.functions.P.args, **kwargs: modal.functions.P.kwargs) -> _GroupedFunctionCall: ...
    def get_underlying_function(self) -> modal.functions.Function: ...
    def __getattr__(self, name): ...
    @property
    def client(self): ...
    @client.setter
    def client(self, value): ...

class GroupedFunction(
    typing.Generic[modal.functions.P, modal.functions.ReturnType, modal.functions.OriginalReturnType],
    modal.object.Object,
):
    def __init__(self, f: modal.functions.Function, size: int): ...
    def remote(
        self, *args: modal.functions.P.args, **kwargs: modal.functions.P.kwargs
    ) -> typing.List[modal.functions.ReturnType]: ...
    def spawn(self, *args: modal.functions.P.args, **kwargs: modal.functions.P.kwargs) -> _GroupedFunctionCall: ...
    def get_underlying_function(self) -> modal.functions.Function: ...
    def __getattr__(self, name): ...
    @property
    def client(self): ...
    @client.setter
    def client(self, value): ...

def grouped(size: int): ...
def _networked(func): ...
