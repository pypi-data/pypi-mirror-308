"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from orq_poc_python_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


PostV2DeploymentsGetConfigInputsTypedDict = Union[str, float, bool]


PostV2DeploymentsGetConfigInputs = Union[str, float, bool]


class PostV2DeploymentsGetConfigDeploymentsRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class PostV2DeploymentsGetConfig2DeploymentsRequestRequestBodyType(str, Enum):
    IMAGE_URL = "image_url"


class PostV2DeploymentsGetConfig2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2DeploymentsGetConfig2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2DeploymentsGetConfig22InputTypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2DeploymentsGetConfig2DeploymentsRequestRequestBodyType
    image_url: PostV2DeploymentsGetConfig2ImageURLTypedDict


class PostV2DeploymentsGetConfig22Input(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2DeploymentsGetConfig2DeploymentsRequestRequestBodyType

    image_url: PostV2DeploymentsGetConfig2ImageURL


class PostV2DeploymentsGetConfig2DeploymentsRequestType(str, Enum):
    TEXT = "text"


class PostV2DeploymentsGetConfig21TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: PostV2DeploymentsGetConfig2DeploymentsRequestType
    text: str


class PostV2DeploymentsGetConfig21(BaseModel):
    r"""Text content part of a prompt message"""

    type: PostV2DeploymentsGetConfig2DeploymentsRequestType

    text: str


PostV2DeploymentsGetConfigContent2TypedDict = Union[
    PostV2DeploymentsGetConfig21TypedDict, PostV2DeploymentsGetConfig22InputTypedDict
]


PostV2DeploymentsGetConfigContent2 = Union[
    PostV2DeploymentsGetConfig21, PostV2DeploymentsGetConfig22Input
]


PostV2DeploymentsGetConfigContentInputTypedDict = Union[
    str, List[PostV2DeploymentsGetConfigContent2TypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


PostV2DeploymentsGetConfigContentInput = Union[
    str, List[PostV2DeploymentsGetConfigContent2]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class PostV2DeploymentsGetConfigType(str, Enum):
    FUNCTION = "function"


class PostV2DeploymentsGetConfigDeploymentsFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2DeploymentsGetConfigDeploymentsFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2DeploymentsGetConfigDeploymentsToolCallsTypedDict(TypedDict):
    type: PostV2DeploymentsGetConfigType
    function: PostV2DeploymentsGetConfigDeploymentsFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class PostV2DeploymentsGetConfigDeploymentsToolCalls(BaseModel):
    type: PostV2DeploymentsGetConfigType

    function: PostV2DeploymentsGetConfigDeploymentsFunction

    id: Optional[str] = None

    index: Optional[float] = None


class PostV2DeploymentsGetConfigPrefixMessagesTypedDict(TypedDict):
    role: PostV2DeploymentsGetConfigDeploymentsRole
    r"""The role of the prompt message"""
    content: PostV2DeploymentsGetConfigContentInputTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[
        List[PostV2DeploymentsGetConfigDeploymentsToolCallsTypedDict]
    ]


class PostV2DeploymentsGetConfigPrefixMessages(BaseModel):
    role: PostV2DeploymentsGetConfigDeploymentsRole
    r"""The role of the prompt message"""

    content: PostV2DeploymentsGetConfigContentInput
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[PostV2DeploymentsGetConfigDeploymentsToolCalls]] = None


class PostV2DeploymentsGetConfigRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class PostV2DeploymentsGetConfig2DeploymentsType(str, Enum):
    IMAGE_URL = "image_url"


class PostV2DeploymentsGetConfig2ImageURLInputTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2DeploymentsGetConfig2ImageURLInput(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2DeploymentsGetConfig22TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2DeploymentsGetConfig2DeploymentsType
    image_url: PostV2DeploymentsGetConfig2ImageURLInputTypedDict


class PostV2DeploymentsGetConfig22(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2DeploymentsGetConfig2DeploymentsType

    image_url: PostV2DeploymentsGetConfig2ImageURLInput


class PostV2DeploymentsGetConfig2Type(str, Enum):
    TEXT = "text"


class PostV2DeploymentsGetConfig2Deployments1TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: PostV2DeploymentsGetConfig2Type
    text: str


class PostV2DeploymentsGetConfig2Deployments1(BaseModel):
    r"""Text content part of a prompt message"""

    type: PostV2DeploymentsGetConfig2Type

    text: str


PostV2DeploymentsGetConfigContent2InputTypedDict = Union[
    PostV2DeploymentsGetConfig2Deployments1TypedDict,
    PostV2DeploymentsGetConfig22TypedDict,
]


PostV2DeploymentsGetConfigContent2Input = Union[
    PostV2DeploymentsGetConfig2Deployments1, PostV2DeploymentsGetConfig22
]


PostV2DeploymentsGetConfigContentTypedDict = Union[
    str, List[PostV2DeploymentsGetConfigContent2InputTypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


PostV2DeploymentsGetConfigContent = Union[
    str, List[PostV2DeploymentsGetConfigContent2Input]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class PostV2DeploymentsGetConfigDeploymentsType(str, Enum):
    FUNCTION = "function"


class PostV2DeploymentsGetConfigFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2DeploymentsGetConfigFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2DeploymentsGetConfigToolCallsTypedDict(TypedDict):
    type: PostV2DeploymentsGetConfigDeploymentsType
    function: PostV2DeploymentsGetConfigFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class PostV2DeploymentsGetConfigToolCalls(BaseModel):
    type: PostV2DeploymentsGetConfigDeploymentsType

    function: PostV2DeploymentsGetConfigFunction

    id: Optional[str] = None

    index: Optional[float] = None


class PostV2DeploymentsGetConfigMessagesTypedDict(TypedDict):
    role: PostV2DeploymentsGetConfigRole
    r"""The role of the prompt message"""
    content: PostV2DeploymentsGetConfigContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[List[PostV2DeploymentsGetConfigToolCallsTypedDict]]


class PostV2DeploymentsGetConfigMessages(BaseModel):
    role: PostV2DeploymentsGetConfigRole
    r"""The role of the prompt message"""

    content: PostV2DeploymentsGetConfigContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[PostV2DeploymentsGetConfigToolCalls]] = None


PostV2DeploymentsGetConfigUserIDTypedDict = Union[str, float]
r"""Unique ID that identifies a user. This is useful for tracking the same user across multiple requests"""


PostV2DeploymentsGetConfigUserID = Union[str, float]
r"""Unique ID that identifies a user. This is useful for tracking the same user across multiple requests"""


class PostV2DeploymentsGetConfigInvokeOptionsTypedDict(TypedDict):
    include_retrievals: NotRequired[bool]
    r"""Whether to include the retrieved knowledge chunks in the response."""


class PostV2DeploymentsGetConfigInvokeOptions(BaseModel):
    include_retrievals: Optional[bool] = False
    r"""Whether to include the retrieved knowledge chunks in the response."""


class PostV2DeploymentsGetConfigRequestBodyTypedDict(TypedDict):
    key: str
    r"""The deployment id to invoke"""
    inputs: NotRequired[Dict[str, PostV2DeploymentsGetConfigInputsTypedDict]]
    r"""Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used."""
    context: NotRequired[Dict[str, Any]]
    r"""Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key."""
    prefix_messages: NotRequired[
        List[PostV2DeploymentsGetConfigPrefixMessagesTypedDict]
    ]
    r"""A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment."""
    messages: NotRequired[List[PostV2DeploymentsGetConfigMessagesTypedDict]]
    r"""A list of messages to send to the deployment."""
    file_ids: NotRequired[List[str]]
    r"""A list of file IDs that are associated with the deployment request."""
    metadata: NotRequired[Dict[str, Any]]
    r"""Key-value pairs that you want to attach to the log generated by this request."""
    chain_id: NotRequired[str]
    r"""Unique ID that identifies a chaining operation. This is useful for tracking a chain of completions across multiple"""
    conversation_id: NotRequired[str]
    r"""Unique ID that identifies a chat conversation. This is useful for tracking the same conversation across multiple requests"""
    user_id: NotRequired[PostV2DeploymentsGetConfigUserIDTypedDict]
    r"""Unique ID that identifies a user. This is useful for tracking the same user across multiple requests"""
    deployment_id: NotRequired[str]
    r"""Unique ID that identifies a deployment entity."""
    deployment_variant_id: NotRequired[str]
    r"""Unique ID that identifies a specific variant of a deployment."""
    extra_params: NotRequired[Dict[str, Any]]
    r"""Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration."""
    invoke_options: NotRequired[PostV2DeploymentsGetConfigInvokeOptionsTypedDict]


class PostV2DeploymentsGetConfigRequestBody(BaseModel):
    key: str
    r"""The deployment id to invoke"""

    inputs: Optional[Dict[str, PostV2DeploymentsGetConfigInputs]] = None
    r"""Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used."""

    context: Optional[Dict[str, Any]] = None
    r"""Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key."""

    prefix_messages: Optional[List[PostV2DeploymentsGetConfigPrefixMessages]] = None
    r"""A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment."""

    messages: Optional[List[PostV2DeploymentsGetConfigMessages]] = None
    r"""A list of messages to send to the deployment."""

    file_ids: Optional[List[str]] = None
    r"""A list of file IDs that are associated with the deployment request."""

    metadata: Optional[Dict[str, Any]] = None
    r"""Key-value pairs that you want to attach to the log generated by this request."""

    chain_id: Optional[str] = None
    r"""Unique ID that identifies a chaining operation. This is useful for tracking a chain of completions across multiple"""

    conversation_id: Optional[str] = None
    r"""Unique ID that identifies a chat conversation. This is useful for tracking the same conversation across multiple requests"""

    user_id: Optional[PostV2DeploymentsGetConfigUserID] = None
    r"""Unique ID that identifies a user. This is useful for tracking the same user across multiple requests"""

    deployment_id: Optional[str] = None
    r"""Unique ID that identifies a deployment entity."""

    deployment_variant_id: Optional[str] = None
    r"""Unique ID that identifies a specific variant of a deployment."""

    extra_params: Optional[Dict[str, Any]] = None
    r"""Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration."""

    invoke_options: Optional[PostV2DeploymentsGetConfigInvokeOptions] = None


class PostV2DeploymentsGetConfigDeploymentsResponseType(str, Enum):
    r"""The type of the model. Current `chat`,`completion` and `image` are supported"""

    CHAT = "chat"
    COMPLETION = "completion"
    EMBEDDING = "embedding"
    VISION = "vision"
    IMAGE = "image"
    TTS = "tts"
    STT = "stt"
    RERANK = "rerank"


class PostV2DeploymentsGetConfigDeploymentsResponseRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class PostV2DeploymentsGetConfig2DeploymentsResponse200Type(str, Enum):
    IMAGE_URL = "image_url"


class PostV2DeploymentsGetConfig2DeploymentsImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    id: NotRequired[str]
    r"""The orq.ai id of the image"""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2DeploymentsGetConfig2DeploymentsImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    id: Optional[str] = None
    r"""The orq.ai id of the image"""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PostV2DeploymentsGetConfig2Deployments2TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2DeploymentsGetConfig2DeploymentsResponse200Type
    image_url: PostV2DeploymentsGetConfig2DeploymentsImageURLTypedDict


class PostV2DeploymentsGetConfig2Deployments2(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PostV2DeploymentsGetConfig2DeploymentsResponse200Type

    image_url: PostV2DeploymentsGetConfig2DeploymentsImageURL


class PostV2DeploymentsGetConfig2DeploymentsResponseType(str, Enum):
    TEXT = "text"


class PostV2DeploymentsGetConfig2DeploymentsResponse1TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: PostV2DeploymentsGetConfig2DeploymentsResponseType
    text: str


class PostV2DeploymentsGetConfig2DeploymentsResponse1(BaseModel):
    r"""Text content part of a prompt message"""

    type: PostV2DeploymentsGetConfig2DeploymentsResponseType

    text: str


PostV2DeploymentsGetConfigContentDeployments2TypedDict = Union[
    PostV2DeploymentsGetConfig2DeploymentsResponse1TypedDict,
    PostV2DeploymentsGetConfig2Deployments2TypedDict,
]


PostV2DeploymentsGetConfigContentDeployments2 = Union[
    PostV2DeploymentsGetConfig2DeploymentsResponse1,
    PostV2DeploymentsGetConfig2Deployments2,
]


PostV2DeploymentsGetConfigDeploymentsContentTypedDict = Union[
    str, List[PostV2DeploymentsGetConfigContentDeployments2TypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


PostV2DeploymentsGetConfigDeploymentsContent = Union[
    str, List[PostV2DeploymentsGetConfigContentDeployments2]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class PostV2DeploymentsGetConfigDeploymentsResponse200ApplicationJSONType(str, Enum):
    FUNCTION = "function"


class PostV2DeploymentsGetConfigDeploymentsResponse200FunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2DeploymentsGetConfigDeploymentsResponse200Function(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class PostV2DeploymentsGetConfigDeploymentsResponseToolCallsTypedDict(TypedDict):
    type: PostV2DeploymentsGetConfigDeploymentsResponse200ApplicationJSONType
    function: PostV2DeploymentsGetConfigDeploymentsResponse200FunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class PostV2DeploymentsGetConfigDeploymentsResponseToolCalls(BaseModel):
    type: PostV2DeploymentsGetConfigDeploymentsResponse200ApplicationJSONType

    function: PostV2DeploymentsGetConfigDeploymentsResponse200Function

    id: Optional[str] = None

    index: Optional[float] = None


class PostV2DeploymentsGetConfigDeploymentsMessagesTypedDict(TypedDict):
    role: PostV2DeploymentsGetConfigDeploymentsResponseRole
    r"""The role of the prompt message"""
    content: PostV2DeploymentsGetConfigDeploymentsContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[
        List[PostV2DeploymentsGetConfigDeploymentsResponseToolCallsTypedDict]
    ]


class PostV2DeploymentsGetConfigDeploymentsMessages(BaseModel):
    role: PostV2DeploymentsGetConfigDeploymentsResponseRole
    r"""The role of the prompt message"""

    content: PostV2DeploymentsGetConfigDeploymentsContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[
        List[PostV2DeploymentsGetConfigDeploymentsResponseToolCalls]
    ] = None


class Format(str, Enum):
    r"""Only supported on `image` models."""

    URL = "url"
    B64_JSON = "b64_json"
    TEXT = "text"
    JSON_OBJECT = "json_object"


class PostV2DeploymentsGetConfigQuality(str, Enum):
    r"""Only supported on `image` models."""

    STANDARD = "standard"
    HD = "hd"


class PostV2DeploymentsGetConfigResponseFormatType(str, Enum):
    JSON_OBJECT = "json_object"


class ResponseFormat2TypedDict(TypedDict):
    type: PostV2DeploymentsGetConfigResponseFormatType


class ResponseFormat2(BaseModel):
    type: PostV2DeploymentsGetConfigResponseFormatType


class ResponseFormatType(str, Enum):
    JSON_SCHEMA = "json_schema"


class JSONSchemaTypedDict(TypedDict):
    name: str
    strict: bool
    schema_: Dict[str, Any]


class JSONSchema(BaseModel):
    name: str

    strict: bool

    schema_: Annotated[Dict[str, Any], pydantic.Field(alias="schema")]


class ResponseFormat1TypedDict(TypedDict):
    type: ResponseFormatType
    json_schema: JSONSchemaTypedDict


class ResponseFormat1(BaseModel):
    type: ResponseFormatType

    json_schema: JSONSchema


PostV2DeploymentsGetConfigResponseFormatTypedDict = Union[
    ResponseFormat2TypedDict, ResponseFormat1TypedDict
]
r"""An object specifying the format that the model must output.

Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
"""


PostV2DeploymentsGetConfigResponseFormat = Union[ResponseFormat2, ResponseFormat1]
r"""An object specifying the format that the model must output.

Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
"""


class PhotoRealVersion(str, Enum):
    r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""

    V1 = "v1"
    V2 = "v2"


class PostV2DeploymentsGetConfigEncodingFormat(str, Enum):
    r"""The format to return the embeddings"""

    FLOAT = "float"
    BASE64 = "base64"


class PostV2DeploymentsGetConfigParametersTypedDict(TypedDict):
    r"""Model Parameters: Not all parameters apply to every model"""

    temperature: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    max_tokens: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    top_k: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    top_p: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    frequency_penalty: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    presence_penalty: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    num_images: NotRequired[float]
    r"""Only supported on `image` models."""
    seed: NotRequired[float]
    r"""Best effort deterministic seed for the model. Currently only OpenAI models support these"""
    format: NotRequired[Format]
    r"""Only supported on `image` models."""
    dimensions: NotRequired[str]
    r"""Only supported on `image` models."""
    quality: NotRequired[PostV2DeploymentsGetConfigQuality]
    r"""Only supported on `image` models."""
    style: NotRequired[str]
    r"""Only supported on `image` models."""
    response_format: NotRequired[
        Nullable[PostV2DeploymentsGetConfigResponseFormatTypedDict]
    ]
    r"""An object specifying the format that the model must output.

    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

    Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
    """
    photo_real_version: NotRequired[PhotoRealVersion]
    r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""
    encoding_format: NotRequired[PostV2DeploymentsGetConfigEncodingFormat]
    r"""The format to return the embeddings"""


class PostV2DeploymentsGetConfigParameters(BaseModel):
    r"""Model Parameters: Not all parameters apply to every model"""

    temperature: Optional[float] = None
    r"""Only supported on `chat` and `completion` models."""

    max_tokens: Annotated[Optional[float], pydantic.Field(alias="maxTokens")] = None
    r"""Only supported on `chat` and `completion` models."""

    top_k: Annotated[Optional[float], pydantic.Field(alias="topK")] = None
    r"""Only supported on `chat` and `completion` models."""

    top_p: Annotated[Optional[float], pydantic.Field(alias="topP")] = None
    r"""Only supported on `chat` and `completion` models."""

    frequency_penalty: Annotated[
        Optional[float], pydantic.Field(alias="frequencyPenalty")
    ] = None
    r"""Only supported on `chat` and `completion` models."""

    presence_penalty: Annotated[
        Optional[float], pydantic.Field(alias="presencePenalty")
    ] = None
    r"""Only supported on `chat` and `completion` models."""

    num_images: Annotated[Optional[float], pydantic.Field(alias="numImages")] = None
    r"""Only supported on `image` models."""

    seed: Optional[float] = None
    r"""Best effort deterministic seed for the model. Currently only OpenAI models support these"""

    format: Optional[Format] = None
    r"""Only supported on `image` models."""

    dimensions: Optional[str] = None
    r"""Only supported on `image` models."""

    quality: Optional[PostV2DeploymentsGetConfigQuality] = None
    r"""Only supported on `image` models."""

    style: Optional[str] = None
    r"""Only supported on `image` models."""

    response_format: Annotated[
        OptionalNullable[PostV2DeploymentsGetConfigResponseFormat],
        pydantic.Field(alias="responseFormat"),
    ] = UNSET
    r"""An object specifying the format that the model must output.

    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

    Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
    """

    photo_real_version: Annotated[
        Optional[PhotoRealVersion], pydantic.Field(alias="photoRealVersion")
    ] = None
    r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""

    encoding_format: Optional[PostV2DeploymentsGetConfigEncodingFormat] = None
    r"""The format to return the embeddings"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "temperature",
            "maxTokens",
            "topK",
            "topP",
            "frequencyPenalty",
            "presencePenalty",
            "numImages",
            "seed",
            "format",
            "dimensions",
            "quality",
            "style",
            "responseFormat",
            "photoRealVersion",
            "encoding_format",
        ]
        nullable_fields = ["responseFormat"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PostV2DeploymentsGetConfigDeploymentsResponse200Type(str, Enum):
    r"""The type of the tool. Currently, only `function` is supported."""

    FUNCTION = "function"


class PostV2DeploymentsGetConfigDeploymentsResponseFunctionTypedDict(TypedDict):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    description: NotRequired[str]
    r"""A description of what the function does, used by the model to choose when and how to call the function."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object.

    Omitting `parameters` defines a function with an empty parameter list.
    """


class PostV2DeploymentsGetConfigDeploymentsResponseFunction(BaseModel):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""

    description: Optional[str] = None
    r"""A description of what the function does, used by the model to choose when and how to call the function."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object.

    Omitting `parameters` defines a function with an empty parameter list.
    """


class PostV2DeploymentsGetConfigToolsTypedDict(TypedDict):
    type: PostV2DeploymentsGetConfigDeploymentsResponse200Type
    r"""The type of the tool. Currently, only `function` is supported."""
    function: PostV2DeploymentsGetConfigDeploymentsResponseFunctionTypedDict


class PostV2DeploymentsGetConfigTools(BaseModel):
    type: PostV2DeploymentsGetConfigDeploymentsResponse200Type
    r"""The type of the tool. Currently, only `function` is supported."""

    function: PostV2DeploymentsGetConfigDeploymentsResponseFunction


class PostV2DeploymentsGetConfigResponseBodyTypedDict(TypedDict):
    r"""The deployment configuration"""

    id: str
    r"""A unique identifier for the response. Can be used to add metrics to the transaction."""
    provider: str
    r"""The provider of the model"""
    model: str
    r"""The model of the configuration"""
    version: str
    r"""The current version of the deployment"""
    messages: List[PostV2DeploymentsGetConfigDeploymentsMessagesTypedDict]
    parameters: PostV2DeploymentsGetConfigParametersTypedDict
    r"""Model Parameters: Not all parameters apply to every model"""
    type: NotRequired[PostV2DeploymentsGetConfigDeploymentsResponseType]
    r"""The type of the model. Current `chat`,`completion` and `image` are supported"""
    tools: NotRequired[List[PostV2DeploymentsGetConfigToolsTypedDict]]
    r"""A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for."""


class PostV2DeploymentsGetConfigResponseBody(BaseModel):
    r"""The deployment configuration"""

    id: str
    r"""A unique identifier for the response. Can be used to add metrics to the transaction."""

    provider: str
    r"""The provider of the model"""

    model: str
    r"""The model of the configuration"""

    version: str
    r"""The current version of the deployment"""

    messages: List[PostV2DeploymentsGetConfigDeploymentsMessages]

    parameters: PostV2DeploymentsGetConfigParameters
    r"""Model Parameters: Not all parameters apply to every model"""

    type: Optional[PostV2DeploymentsGetConfigDeploymentsResponseType] = None
    r"""The type of the model. Current `chat`,`completion` and `image` are supported"""

    tools: Optional[List[PostV2DeploymentsGetConfigTools]] = None
    r"""A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for."""
