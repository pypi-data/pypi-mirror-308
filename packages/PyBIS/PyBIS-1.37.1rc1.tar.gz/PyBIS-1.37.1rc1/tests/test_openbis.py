#   Copyright ETH 2018 - 2023 ZÃ¼rich, Scientific IT Services
# 
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
#   
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
import re
import time

import pytest

from pybis import Openbis


def test_token(openbis_instance):
    assert openbis_instance.token is not None
    assert openbis_instance.is_token_valid(openbis_instance.token) is True
    assert openbis_instance.is_session_active() is True


def http_only():
    with pytest.raises(Exception):
        new_instance = Openbis("http://localhost")
        assert new_instance is None

    new_instance = Openbis(
        url="http://localhost",
        allow_http_but_do_not_use_this_in_production_and_only_within_safe_networks=True,
    )
    assert new_instance is not None


def test_cached_token(other_openbis_instance):
    assert other_openbis_instance.is_token_valid() is True

    other_openbis_instance.logout()
    assert other_openbis_instance.is_token_valid() is False


def test_create_perm_id(openbis_instance):
    permId = openbis_instance.create_permId()
    assert permId is not None
    m = re.search("([0-9]){17}-([0-9]*)", permId)
    ts = m.group(0)
    assert ts is not None
    count = m.group(1)
    assert count is not None


def test_get_samples_update_in_transaction(openbis_instance):
    """
        Update samples in transaction without overriding parents/children
    """
    name_suffix = str(time.time())

    st = openbis_instance.new_sample_type('TEST_YEAST',
                                          'YEAST-',
                                          autoGeneratedCode=True,
                                          description="some new yest type for test")
    st.save()
    st.assign_property('name')

    # Create new space
    space = openbis_instance.new_space(code='space_name' + name_suffix, description='')
    space.save()

    # Create new project
    project = space.new_project(code='project_code' + name_suffix)
    project.save()

    # Create new experiment
    experiment = openbis_instance.new_experiment(
        code='MY_NEW_EXPERIMENT',
        type='DEFAULT_EXPERIMENT',
        project=project.code
    )
    experiment.save()

    # Create parent sample
    sample1 = openbis_instance.new_sample(
        type='TEST_YEAST',
        space=space.code,
        experiment=experiment.identifier,
        parents=[],
        children=[],
        props={"name": "sample1"}
    )
    sample1.save()

    # Create child sample
    sample2 = openbis_instance.new_sample(
        type='TEST_YEAST',
        space=space.code,
        experiment=experiment.identifier,
        parents=[sample1],
        children=[],
        props={"name": "sample2"}
    )
    sample2.save()

    # Verify samples parent/child relationship
    sample1 = openbis_instance.get_sample(
        sample_ident=sample1.identifier,
        space=space.code,
        props="*"
    )
    sample2 = openbis_instance.get_sample(
        sample_ident=sample2.identifier,
        space=space.code,
        props="*"
    )
    assert sample1.children == [sample2.identifier]
    assert sample2.parents == [sample1.identifier]

    trans = openbis_instance.new_transaction()
    # get samples that have parents and update name
    samples = openbis_instance.get_samples(space=space.code, props="*", withParents="*")
    for sample in samples:
        sample.props["name"] = 'new name for sample2'
        trans.add(sample)
    # get samples that have children and update name
    samples = openbis_instance.get_samples(space=space.code, props="*", withChildren="*")
    for sample in samples:
        sample.props["name"] = 'new name for sample1'
        trans.add(sample)
    trans.commit()

    # Verify that name has been changed and parent/child relationship remains
    sample1 = openbis_instance.get_sample(
        sample_ident=sample1.identifier,
        space=space.code,
        props="*"
    )
    sample2 = openbis_instance.get_sample(
        sample_ident=sample2.identifier,
        space=space.code,
        props="*"
    )
    assert sample1.props["name"] == 'new name for sample1'
    assert sample1.children == [sample2.identifier]
    assert sample2.props["name"] == 'new name for sample2'
    assert sample2.parents == [sample1.identifier]

    trans = openbis_instance.new_transaction()
    # get samples with attributes and change name
    samples = openbis_instance.get_samples(space=space.code, attrs=["parents", "children"])
    for sample in samples:
        sample.props["name"] = "default name"
        trans.add(sample)
    trans.commit()

    # Verify that name has been changed and parent/child relationship remains
    sample1 = openbis_instance.get_sample(
        sample_ident=sample1.identifier,
        space=space.code,
        props="*"
    )
    sample2 = openbis_instance.get_sample(
        sample_ident=sample2.identifier,
        space=space.code,
        props="*"
    )
    assert sample1.props["name"] == 'default name'
    assert sample1.children == [sample2.identifier]
    assert sample2.props["name"] == 'default name'
    assert sample2.parents == [sample1.identifier]

    sample3 = openbis_instance.new_sample(
        type='TEST_YEAST',
        space=space.code,
        experiment=experiment.identifier,
        parents=[],
        children=[],
        props={"name": "sample3"}
    )
    sample3.save()

    trans = openbis_instance.new_transaction()
    # get sample1 without attributes and add sample3 as a parent
    samples = openbis_instance.get_samples(space=space.code, identifier=sample1.identifier)
    for sample in samples:
        sample.add_parents([sample3.identifier])
        trans.add(sample)
    # get sample2 without attributes and remove sample1 as a parent
    samples = openbis_instance.get_samples(space=space.code, identifier=sample2.identifier)
    for sample in samples:
        sample.del_parents([sample1.identifier])
        trans.add(sample)
    trans.commit()

    # Verify changes
    sample1 = openbis_instance.get_sample(
        sample_ident=sample1.identifier,
        space=space.code,
        props="*"
    )
    sample2 = openbis_instance.get_sample(
        sample_ident=sample2.identifier,
        space=space.code,
        props="*"
    )
    sample3 = openbis_instance.get_sample(
        sample_ident=sample3.identifier,
        space=space.code,
        props="*"
    )
    assert sample1.children == []
    assert sample1.parents == [sample3.identifier]
    assert sample2.parents == []
    assert sample3.children == [sample1.identifier]


def test_failed_second_login_raises_exception(openbis_instance):
    """
        Logins to openBIS using wrong username/password, PyBIS should raise exception
    """
    assert openbis_instance.is_session_active() is True

    try:
        openbis_instance.login('non_existing_username_for_test', 'abcdef')
        # Login should fail at this point
        assert False
    except ValueError as e:
        assert str(e) == "login to openBIS failed"


def test_set_token_accepts_personal_access_token_object(openbis_instance):
    """
        Verifies that set_token method accepts both permId and PersonalAccessToken object
    """
    assert openbis_instance.is_session_active() is True

    pat = openbis_instance.get_or_create_personal_access_token(sessionName="Project A")

    openbis_instance.set_token(pat, save_token=True)
    openbis_instance.set_token(pat.permId, save_token=True)


json_config = '''{
    "spaces": {
        "CARBON_NANOMATERIALS": {
            "description": "Carbon Nanomaterials"
        },
        "MATERIALS_TO_DEVICES": {
            "description": "Materials to Devices"
        },
        "2D_QUANTUM_MATERIALS":{
            "description": "2D Quantum Materials"
        },
        "QUANTUM_MAGNETISM": {
            "description": "Quantum Magnetism"
        },
        "CHIRAL_SURFACES": {
            "description": "Chiral Surfaces"
        },
        "ATOMISTIC_SIMULATIONS":{
            "description": "Atomistic Simulations"
        },
        "EQUIPMENT": {
            "description": "Equipment",
            "projects": {
                "INSTRUMENTS": {
                    "description": "Instruments",
                    "experiments": {
                        "INSTRUMENT_COLLECTION": {
                            "name": "Instruments"
                        },
                        "UHV_COMPONENT_COLLECTION": {
                            "name": "UHV Components"
                        }
                    }
                }
            }
        },
        "FUNDING": {
            "description": "Funding",
            "projects": {
                "GRANTS": {
                    "description": "Grants",
                    "experiments": {
                        "EMPA_GRANT_COLLECTION": {
                            "name": "Empa Grants"
                        },
                        "SNF_GRANT_COLLECTION": {
                            "name": "SNF Grants"
                        }
                    }
                }
            }
        },
        "INSTITUTIONS":{
            "description": "Institutions",
            "projects": {
                "INSTITUTIONS": {
                    "description": "Institutions",
                    "experiments": {
                        "RESEARCH_LAB_COLLECTION": {
                            "name": "Research Labs"
                        },
                        "UNIVERSITY_COLLECTION": {
                            "name": "Universities"
                        }
                    }
                },
                "MANUFACTURERS": {
                    "description": "Manufacturers",
                    "experiments": {
                        "MANUFACTURER_COLLECTION": {
                            "name": "Manufacturers"
                        }
                    }
                },
                "ROOMS": {
                    "description": "Rooms",
                    "experiments": {
                        "ROOM_COLLECTION": {
                            "name": "Rooms"
                        }
                    }
                },
                "SUPPLIERS": {
                    "description": "Suppliers",
                    "experiments": {
                        "SUPPLIER_COLLECTION": {
                            "name": "Suppliers"
                        }
                    }
                }
            }
        },
        "LOG_ENTRIES": {
            "description": "Log Entries",
            "projects": {
                "LOG_ENTRIES": {
                    "description": "Log Entries",
                    "experiments": {
                        "MAINTENANCE_COLLECTION": {
                            "name": "Maintenance"
                        }
                    }
                }
            }
        },
        "MATERIALS": {
            "description": "Materials",
            "projects": {
                "2D_MATERIALS": {
                    "description": "2D Materials",
                    "experiments": {
                        "2D_MATERIAL_COLLECTION": {
                            "name": "2D Materials"
                        }
                    }
                },
                "ATOMISTIC_MODELS": {
                    "description": "Atomistic Models",
                    "experiments": {
                        "ATOMISTIC_MODEL_COLLECTION": {
                            "name": "Atomistic Models"
                        }
                    }
                },
                "CRYSTALS": {
                    "description": "Crystals",
                    "experiments": {
                        "CRYSTAL_COLLECTION": {
                            "name": "Crystals"
                        }
                    }
                },
                "MOLECULES": {
                    "description": "Molecules",
                    "experiments": {
                        "MOLECULE_COLLECTION": {
                            "name": "Molecules"
                        }
                    }
                },
                "SAMPLES": {
                    "description": "Samples",
                    "experiments": {
                        "SAMPLE_COLLECTION": {
                            "name": "Samples"
                        }
                    }
                }
            }
        },
        "PERSONS":{
            "description": "Persons",
            "projects": {
                "PERSONS": {
                    "description": "Persons",
                    "experiments": {
                        "AUTHOR_COLLECTION": {
                            "name": "Authors"
                        },
                        "CHEMIST_COLLECTION": {
                            "name": "Chemists"
                        },
                        "RESEARCHER_COLLECTION": {
                            "name": "Researchers"
                        }
                    }
                }
            }
        }
    }
}'''



def test_openbis():
    def get_instance():
        # base_url = "http://localhost:8888/openbis"
        # base_url = "http://local.openbis.ch:8080/openbis"
        # base_url = "https://alaskowski:8443/openbis"
        # base_url = "https://openbis-sis-ci-sprint.ethz.ch/"
        openbis_instance = Openbis(
            url=base_url,
            verify_certificates=False,
            allow_http_but_do_not_use_this_in_production_and_only_within_safe_networks=True
        )
        token = openbis_instance.login('admin', 'changeit')
        print(token)
        return openbis_instance

    o = get_instance()

    # newplug = o.get_plugin('test_plugin2')
    # newplug = o.new_plugin('test_plugin', 'ENTITY_VALIDATION')
    # newplug.script = 'def foo():\n\tpass'
    # DYNAMIC_PROPERTY ENTITY_VALIDATION pluginType
    # newplug.description = 'tralala'
    # newplug.save()

    # coll = o.get_collection_type('test')
    # prop = o.new_property_type('my_prop', 'my', 'desc', 'VARCHAR')
    # prop.save()
    # coll.assign_property('my_prop', plugin='test_plugin2')

    # sample = o.get_sample('20240820130458427-43')
    #
    dataset = o.new_dataset(
        type="RAW_DATA",
        sample='/DEFAULT/DEFAULT/DEFAULT',
        files=['/home/alaskowski/Downloads/test'],
        props={"$name": "file comma test"},
    )
    dataset.save()

    # dataset = o.get_dataset('20241018081822706-77')
    #
    # ds_new = o.new_dataset(type="RAW_DATA",
    #                        sample='/DEFAULT/DEFAULT/DEFAULT',
    #                        files=['/home/alaskowski/Downloads/test'],
    #                        props={"$name": "some good name"},
    #                        parents=['20241009115146880-53', '20241009142520146-55'])
    # ds_new.save()

    # dataset = o.get_dataset('20241002153942561-55')
    # # print(dataset.file_list)
    dataset.download(destination='/home/alaskowski/Downloads/test/test2', create_default_folders = False, wait_until_finished = False)
    # vocab = o.get_vocabulary('MY_VOCAB')

    # def create_space_in_openbis(session, space_code: str, space_info: dict):
    #     try:
    #         session.new_space(code=space_code, description=space_info["description"]).save()
    #     except ValueError:
    #         print(f"Space {space_code} exists already.")
    #         session.get_space(code=space_code)


    # import json
    # collections_config = json.loads(json_config)
    #
    # for space_code, space_info in collections_config["spaces"].items():
    #     create_space_in_openbis(o, space_code, space_info)



    # import json
    # sample = o.get_sample('/ELN_SETTINGS/GENERAL_ELN_SETTINGS')
    # j = json.loads(sample.props['$eln_settings'])
    # j['instanceSettings']['minBarcodeLength'] = '13'
    # sample.props['$eln_settings'] = json.dumps(j)
    # sample.save()


    print("DONE")




