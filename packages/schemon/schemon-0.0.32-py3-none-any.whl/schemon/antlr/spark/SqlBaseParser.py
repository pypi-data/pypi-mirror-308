# Generated from SqlBaseParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,388,3888,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,1,0,1,0,5,0,395,
        8,0,10,0,12,0,398,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,
        3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,3,7,423,8,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,436,8,7,1,7,1,7,1,
        7,1,7,1,7,3,7,443,8,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,451,8,7,10,7,12,
        7,454,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,3,7,473,8,7,1,7,1,7,3,7,477,8,7,1,7,1,7,1,7,1,7,3,
        7,483,8,7,1,7,3,7,486,8,7,1,7,3,7,489,8,7,1,7,1,7,1,7,1,7,1,7,3,
        7,496,8,7,1,7,3,7,499,8,7,1,7,1,7,3,7,503,8,7,1,7,3,7,506,8,7,1,
        7,1,7,1,7,1,7,1,7,3,7,513,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,5,7,524,8,7,10,7,12,7,527,9,7,1,7,1,7,1,7,1,7,1,7,3,7,534,8,7,
        1,7,3,7,537,8,7,1,7,1,7,3,7,541,8,7,1,7,3,7,544,8,7,1,7,1,7,1,7,
        1,7,3,7,550,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,561,8,7,
        1,7,1,7,1,7,1,7,3,7,567,8,7,1,7,1,7,1,7,3,7,572,8,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,606,8,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,619,8,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,3,7,644,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
        653,8,7,1,7,1,7,3,7,657,8,7,1,7,1,7,1,7,1,7,3,7,663,8,7,1,7,1,7,
        3,7,667,8,7,1,7,1,7,1,7,3,7,672,8,7,1,7,1,7,1,7,1,7,3,7,678,8,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,690,8,7,1,7,1,7,1,7,
        1,7,1,7,1,7,3,7,698,8,7,1,7,1,7,1,7,1,7,3,7,704,8,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,717,8,7,1,7,4,7,720,8,7,11,7,
        12,7,721,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        3,7,738,8,7,1,7,1,7,1,7,5,7,743,8,7,10,7,12,7,746,9,7,1,7,3,7,749,
        8,7,1,7,1,7,1,7,1,7,3,7,755,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,3,7,770,8,7,1,7,1,7,3,7,774,8,7,1,7,1,7,1,7,
        1,7,3,7,780,8,7,1,7,1,7,1,7,1,7,3,7,786,8,7,1,7,3,7,789,8,7,1,7,
        3,7,792,8,7,1,7,1,7,1,7,1,7,3,7,798,8,7,1,7,1,7,3,7,802,8,7,1,7,
        1,7,1,7,1,7,1,7,1,7,5,7,810,8,7,10,7,12,7,813,9,7,1,7,1,7,1,7,1,
        7,1,7,1,7,3,7,821,8,7,1,7,3,7,824,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,3,7,833,8,7,1,7,1,7,1,7,3,7,838,8,7,1,7,1,7,1,7,1,7,3,7,844,8,
        7,1,7,1,7,1,7,1,7,1,7,3,7,851,8,7,1,7,3,7,854,8,7,1,7,1,7,1,7,1,
        7,3,7,860,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,869,8,7,10,7,12,7,
        872,9,7,3,7,874,8,7,1,7,1,7,3,7,878,8,7,1,7,1,7,1,7,3,7,883,8,7,
        1,7,1,7,1,7,1,7,3,7,889,8,7,1,7,3,7,892,8,7,1,7,1,7,3,7,896,8,7,
        1,7,3,7,899,8,7,1,7,1,7,1,7,1,7,1,7,3,7,906,8,7,1,7,1,7,1,7,3,7,
        911,8,7,1,7,1,7,1,7,1,7,1,7,3,7,918,8,7,1,7,3,7,921,8,7,1,7,3,7,
        924,8,7,1,7,1,7,1,7,1,7,1,7,3,7,931,8,7,1,7,1,7,1,7,3,7,936,8,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,945,8,7,1,7,1,7,1,7,1,7,1,7,1,7,
        3,7,953,8,7,1,7,1,7,1,7,1,7,3,7,959,8,7,1,7,3,7,962,8,7,1,7,3,7,
        965,8,7,1,7,1,7,1,7,1,7,3,7,971,8,7,1,7,1,7,3,7,975,8,7,1,7,1,7,
        1,7,3,7,980,8,7,1,7,3,7,983,8,7,1,7,1,7,3,7,987,8,7,3,7,989,8,7,
        1,7,1,7,1,7,1,7,1,7,1,7,3,7,997,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
        1005,8,7,1,7,3,7,1008,8,7,1,7,1,7,1,7,3,7,1013,8,7,1,7,1,7,1,7,1,
        7,3,7,1019,8,7,1,7,1,7,1,7,1,7,3,7,1025,8,7,1,7,3,7,1028,8,7,1,7,
        1,7,3,7,1032,8,7,1,7,3,7,1035,8,7,1,7,1,7,3,7,1039,8,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,5,7,1065,8,7,10,7,12,7,1068,9,7,3,7,1070,8,
        7,1,7,1,7,3,7,1074,8,7,1,7,1,7,1,7,1,7,3,7,1080,8,7,1,7,3,7,1083,
        8,7,1,7,3,7,1086,8,7,1,7,1,7,1,7,1,7,3,7,1092,8,7,1,7,1,7,1,7,1,
        7,1,7,1,7,3,7,1100,8,7,1,7,1,7,1,7,3,7,1105,8,7,1,7,1,7,1,7,1,7,
        3,7,1111,8,7,1,7,1,7,1,7,1,7,3,7,1117,8,7,1,7,3,7,1120,8,7,1,7,1,
        7,1,7,1,7,1,7,3,7,1127,8,7,1,7,1,7,1,7,5,7,1132,8,7,10,7,12,7,1135,
        9,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,1143,8,7,10,7,12,7,1146,9,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,1160,8,7,10,7,12,
        7,1163,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,1187,8,7,10,7,12,7,1190,9,
        7,3,7,1192,8,7,1,7,1,7,5,7,1196,8,7,10,7,12,7,1199,9,7,1,7,1,7,1,
        7,1,7,5,7,1205,8,7,10,7,12,7,1208,9,7,1,7,1,7,1,7,1,7,5,7,1214,8,
        7,10,7,12,7,1217,9,7,1,7,1,7,1,7,1,7,1,7,3,7,1224,8,7,1,7,1,7,1,
        7,3,7,1229,8,7,1,7,1,7,1,7,3,7,1234,8,7,1,7,1,7,1,7,1,7,1,7,3,7,
        1241,8,7,1,7,1,7,1,7,1,7,3,7,1247,8,7,1,7,1,7,1,7,3,7,1252,8,7,1,
        7,1,7,1,7,1,7,5,7,1258,8,7,10,7,12,7,1261,9,7,3,7,1263,8,7,1,8,1,
        8,1,8,1,8,1,8,3,8,1270,8,8,1,8,3,8,1273,8,8,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,3,9,1282,8,9,1,10,1,10,3,10,1286,8,10,1,11,1,11,3,11,1290,
        8,11,1,11,1,11,3,11,1294,8,11,1,12,1,12,1,12,5,12,1299,8,12,10,12,
        12,12,1302,9,12,1,13,1,13,3,13,1306,8,13,1,14,1,14,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,3,16,1318,8,16,1,16,1,16,3,16,1322,8,16,
        1,16,1,16,1,16,1,16,1,16,3,16,1329,8,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,3,16,1445,8,16,1,16,1,16,1,16,1,16,1,16,
        1,16,3,16,1453,8,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1461,8,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1470,8,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,3,16,1480,8,16,1,17,1,17,3,17,1484,8,17,
        1,17,3,17,1487,8,17,1,17,1,17,1,17,1,17,3,17,1493,8,17,1,17,1,17,
        1,18,1,18,3,18,1499,8,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1517,8,20,1,20,1,20,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1529,8,21,1,21,1,21,
        1,21,3,21,1534,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,3,24,1543,
        8,24,1,24,1,24,1,24,1,25,1,25,1,25,3,25,1551,8,25,1,25,1,25,1,25,
        1,25,1,25,3,25,1558,8,25,3,25,1560,8,25,1,25,1,25,1,25,3,25,1565,
        8,25,1,25,1,25,1,25,3,25,1570,8,25,1,25,1,25,3,25,1574,8,25,1,25,
        1,25,1,25,3,25,1579,8,25,1,25,1,25,1,25,3,25,1584,8,25,1,25,1,25,
        1,25,3,25,1589,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,1598,
        8,25,1,25,1,25,1,25,3,25,1603,8,25,1,25,3,25,1606,8,25,1,25,1,25,
        1,25,3,25,1611,8,25,1,25,1,25,3,25,1615,8,25,1,25,1,25,1,25,3,25,
        1620,8,25,3,25,1622,8,25,1,26,1,26,3,26,1626,8,26,1,27,1,27,1,27,
        1,27,1,27,5,27,1633,8,27,10,27,12,27,1636,9,27,1,27,1,27,1,28,1,
        28,1,28,3,28,1643,8,28,1,28,1,28,1,28,1,28,3,28,1649,8,28,1,29,1,
        29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,1661,8,31,1,32,1,
        32,1,32,5,32,1666,8,32,10,32,12,32,1669,9,32,1,33,1,33,1,33,1,33,
        5,33,1675,8,33,10,33,12,33,1678,9,33,1,34,1,34,3,34,1682,8,34,1,
        34,3,34,1685,8,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,1708,
        8,36,10,36,12,36,1711,9,36,1,37,1,37,1,37,1,37,5,37,1717,8,37,10,
        37,12,37,1720,9,37,1,37,1,37,1,38,1,38,3,38,1726,8,38,1,38,3,38,
        1729,8,38,1,39,1,39,1,39,5,39,1734,8,39,10,39,12,39,1737,9,39,1,
        39,3,39,1740,8,39,1,40,1,40,1,40,1,40,3,40,1746,8,40,1,41,1,41,1,
        41,1,41,5,41,1752,8,41,10,41,12,41,1755,9,41,1,41,1,41,1,42,1,42,
        3,42,1761,8,42,1,42,3,42,1764,8,42,1,43,1,43,1,43,1,43,5,43,1770,
        8,43,10,43,12,43,1773,9,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,1781,
        8,44,10,44,12,44,1784,9,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
        45,3,45,1794,8,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1802,8,46,1,
        47,1,47,1,47,1,47,3,47,1808,8,47,1,48,1,48,1,48,1,49,1,49,1,49,1,
        49,1,49,4,49,1818,8,49,11,49,12,49,1819,1,49,1,49,1,49,1,49,1,49,
        3,49,1827,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1834,8,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1846,8,49,1,49,1,49,
        1,49,1,49,5,49,1852,8,49,10,49,12,49,1855,9,49,1,49,5,49,1858,8,
        49,10,49,12,49,1861,9,49,1,49,5,49,1864,8,49,10,49,12,49,1867,9,
        49,3,49,1869,8,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1877,8,50,1,
        51,1,51,1,51,1,51,1,51,5,51,1884,8,51,10,51,12,51,1887,9,51,3,51,
        1889,8,51,1,51,1,51,1,51,1,51,1,51,5,51,1896,8,51,10,51,12,51,1899,
        9,51,3,51,1901,8,51,1,51,1,51,1,51,1,51,1,51,5,51,1908,8,51,10,51,
        12,51,1911,9,51,3,51,1913,8,51,1,51,1,51,1,51,1,51,1,51,5,51,1920,
        8,51,10,51,12,51,1923,9,51,3,51,1925,8,51,1,51,3,51,1928,8,51,1,
        51,1,51,1,51,3,51,1933,8,51,3,51,1935,8,51,1,51,1,51,3,51,1939,8,
        51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1951,8,
        53,1,53,1,53,1,53,1,53,1,53,3,53,1958,8,53,1,53,1,53,1,53,1,53,1,
        53,3,53,1965,8,53,1,53,5,53,1968,8,53,10,53,12,53,1971,9,53,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1982,8,54,1,55,1,55,
        3,55,1986,8,55,1,55,1,55,3,55,1990,8,55,1,56,1,56,4,56,1994,8,56,
        11,56,12,56,1995,1,57,1,57,3,57,2000,8,57,1,57,1,57,1,57,1,57,5,
        57,2006,8,57,10,57,12,57,2009,9,57,1,57,3,57,2012,8,57,1,57,3,57,
        2015,8,57,1,57,3,57,2018,8,57,1,57,3,57,2021,8,57,1,57,1,57,3,57,
        2025,8,57,1,58,1,58,3,58,2029,8,58,1,58,5,58,2032,8,58,10,58,12,
        58,2035,9,58,1,58,3,58,2038,8,58,1,58,3,58,2041,8,58,1,58,3,58,2044,
        8,58,1,58,3,58,2047,8,58,1,58,1,58,3,58,2051,8,58,1,58,5,58,2054,
        8,58,10,58,12,58,2057,9,58,1,58,3,58,2060,8,58,1,58,3,58,2063,8,
        58,1,58,3,58,2066,8,58,1,58,3,58,2069,8,58,3,58,2071,8,58,1,59,1,
        59,1,59,1,59,3,59,2077,8,59,1,59,1,59,1,59,1,59,1,59,3,59,2084,8,
        59,1,59,1,59,1,59,3,59,2089,8,59,1,59,3,59,2092,8,59,1,59,3,59,2095,
        8,59,1,59,1,59,3,59,2099,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,3,59,2109,8,59,1,59,1,59,3,59,2113,8,59,3,59,2115,8,59,1,59,
        3,59,2118,8,59,1,59,1,59,3,59,2122,8,59,1,60,1,60,5,60,2126,8,60,
        10,60,12,60,2129,9,60,1,60,3,60,2132,8,60,1,60,1,60,1,61,1,61,1,
        61,1,62,1,62,1,62,1,62,3,62,2143,8,62,1,62,1,62,1,62,1,63,1,63,1,
        63,1,63,1,63,3,63,2153,8,63,1,63,1,63,3,63,2157,8,63,1,63,1,63,1,
        63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2169,8,64,1,64,1,64,1,
        64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,2181,8,65,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,2194,8,66,10,66,
        12,66,2197,9,66,1,66,1,66,3,66,2201,8,66,1,67,1,67,1,67,1,67,3,67,
        2207,8,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,5,69,2217,8,69,
        10,69,12,69,2220,9,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,
        72,1,72,1,73,1,73,1,73,3,73,2235,8,73,1,73,5,73,2238,8,73,10,73,
        12,73,2241,9,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,5,74,2251,
        8,74,10,74,12,74,2254,9,74,1,74,1,74,3,74,2258,8,74,1,75,1,75,1,
        75,1,75,5,75,2264,8,75,10,75,12,75,2267,9,75,1,75,5,75,2270,8,75,
        10,75,12,75,2273,9,75,1,75,3,75,2276,8,75,1,75,3,75,2279,8,75,1,
        76,3,76,2282,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2289,8,76,1,76,1,
        76,1,76,1,76,3,76,2295,8,76,1,77,1,77,1,77,1,77,1,77,5,77,2302,8,
        77,10,77,12,77,2305,9,77,1,77,1,77,1,77,1,77,1,77,5,77,2312,8,77,
        10,77,12,77,2315,9,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
        77,1,77,5,77,2327,8,77,10,77,12,77,2330,9,77,1,77,1,77,3,77,2334,
        8,77,3,77,2336,8,77,1,78,1,78,3,78,2340,8,78,1,79,1,79,1,79,1,79,
        1,79,5,79,2347,8,79,10,79,12,79,2350,9,79,1,79,1,79,1,79,1,79,1,
        79,1,79,1,79,1,79,5,79,2360,8,79,10,79,12,79,2363,9,79,1,79,1,79,
        3,79,2367,8,79,1,80,1,80,3,80,2371,8,80,1,81,1,81,1,81,1,81,5,81,
        2377,8,81,10,81,12,81,2380,9,81,3,81,2382,8,81,1,81,1,81,3,81,2386,
        8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,2398,
        8,82,10,82,12,82,2401,9,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,
        83,5,83,2411,8,83,10,83,12,83,2414,9,83,1,83,1,83,3,83,2418,8,83,
        1,84,1,84,3,84,2422,8,84,1,84,3,84,2425,8,84,1,85,1,85,3,85,2429,
        8,85,1,85,1,85,1,85,1,85,3,85,2435,8,85,1,85,3,85,2438,8,85,1,86,
        1,86,1,86,1,87,1,87,3,87,2445,8,87,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,5,88,2455,8,88,10,88,12,88,2458,9,88,1,88,1,88,1,89,1,
        89,1,89,1,89,5,89,2466,8,89,10,89,12,89,2469,9,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,5,89,2479,8,89,10,89,12,89,2482,9,89,1,
        89,1,89,1,90,1,90,1,90,1,90,5,90,2490,8,90,10,90,12,90,2493,9,90,
        1,90,1,90,3,90,2497,8,90,1,91,1,91,1,92,1,92,1,93,1,93,3,93,2505,
        8,93,1,94,1,94,1,95,3,95,2510,8,95,1,95,1,95,1,96,1,96,1,96,3,96,
        2517,8,96,1,96,1,96,1,96,1,96,1,96,5,96,2524,8,96,10,96,12,96,2527,
        9,96,3,96,2529,8,96,1,96,1,96,1,96,3,96,2534,8,96,1,96,1,96,1,96,
        5,96,2539,8,96,10,96,12,96,2542,9,96,3,96,2544,8,96,1,97,1,97,1,
        98,3,98,2549,8,98,1,98,1,98,5,98,2553,8,98,10,98,12,98,2556,9,98,
        1,99,1,99,1,99,3,99,2561,8,99,1,100,1,100,1,100,3,100,2566,8,100,
        1,100,1,100,3,100,2570,8,100,1,100,1,100,1,100,1,100,3,100,2576,
        8,100,1,100,1,100,3,100,2580,8,100,1,101,3,101,2583,8,101,1,101,
        1,101,1,101,3,101,2588,8,101,1,101,3,101,2591,8,101,1,101,1,101,
        1,101,3,101,2596,8,101,1,101,1,101,3,101,2600,8,101,1,101,3,101,
        2603,8,101,1,101,3,101,2606,8,101,1,102,1,102,1,102,1,102,3,102,
        2612,8,102,1,103,1,103,1,103,3,103,2617,8,103,1,103,1,103,1,103,
        1,103,1,103,3,103,2624,8,103,1,104,3,104,2627,8,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,3,104,2645,8,104,3,104,2647,8,104,1,104,3,104,
        2650,8,104,1,105,1,105,1,105,1,105,1,106,1,106,1,106,5,106,2659,
        8,106,10,106,12,106,2662,9,106,1,107,1,107,1,107,1,107,5,107,2668,
        8,107,10,107,12,107,2671,9,107,1,107,1,107,1,108,1,108,3,108,2677,
        8,108,1,109,1,109,1,109,1,109,5,109,2683,8,109,10,109,12,109,2686,
        9,109,1,109,1,109,1,110,1,110,3,110,2692,8,110,1,111,1,111,3,111,
        2696,8,111,1,111,3,111,2699,8,111,1,111,1,111,1,111,1,111,1,111,
        1,111,3,111,2707,8,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,
        2715,8,111,1,111,1,111,1,111,1,111,3,111,2721,8,111,1,112,1,112,
        1,112,1,112,5,112,2727,8,112,10,112,12,112,2730,9,112,1,112,1,112,
        1,113,1,113,1,113,3,113,2737,8,113,1,113,1,113,1,113,1,113,1,113,
        3,113,2744,8,113,1,113,1,113,1,113,1,113,1,113,3,113,2751,8,113,
        3,113,2753,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,5,114,2764,8,114,10,114,12,114,2767,9,114,1,114,1,114,1,114,
        3,114,2772,8,114,3,114,2774,8,114,1,114,1,114,1,114,1,114,1,114,
        1,114,5,114,2782,8,114,10,114,12,114,2785,9,114,1,114,1,114,1,114,
        3,114,2790,8,114,3,114,2792,8,114,1,115,1,115,1,115,1,115,1,116,
        1,116,3,116,2800,8,116,1,117,1,117,3,117,2804,8,117,1,118,1,118,
        1,118,1,118,1,118,5,118,2811,8,118,10,118,12,118,2814,9,118,3,118,
        2816,8,118,1,118,1,118,1,118,1,119,3,119,2822,8,119,1,119,1,119,
        3,119,2826,8,119,3,119,2828,8,119,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,3,120,2837,8,120,1,120,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,1,120,3,120,2849,8,120,3,120,2851,8,120,1,120,
        1,120,1,120,1,120,1,120,3,120,2858,8,120,1,120,1,120,1,120,1,120,
        1,120,3,120,2865,8,120,1,120,1,120,1,120,1,120,3,120,2871,8,120,
        1,120,1,120,1,120,1,120,3,120,2877,8,120,3,120,2879,8,120,1,121,
        1,121,1,121,5,121,2884,8,121,10,121,12,121,2887,9,121,1,122,1,122,
        1,122,5,122,2892,8,122,10,122,12,122,2895,9,122,1,123,1,123,1,123,
        5,123,2900,8,123,10,123,12,123,2903,9,123,1,124,1,124,1,124,3,124,
        2908,8,124,1,125,1,125,1,125,3,125,2913,8,125,1,125,1,125,1,126,
        1,126,1,126,3,126,2920,8,126,1,126,1,126,1,127,1,127,3,127,2926,
        8,127,1,127,1,127,3,127,2930,8,127,3,127,2932,8,127,1,128,1,128,
        1,128,5,128,2937,8,128,10,128,12,128,2940,9,128,1,129,1,129,1,129,
        1,129,5,129,2946,8,129,10,129,12,129,2949,9,129,1,129,1,129,1,130,
        1,130,3,130,2955,8,130,1,131,1,131,1,131,1,131,1,131,1,131,5,131,
        2963,8,131,10,131,12,131,2966,9,131,1,131,1,131,3,131,2970,8,131,
        1,132,1,132,3,132,2974,8,132,1,133,1,133,1,134,1,134,1,134,1,134,
        1,135,1,135,3,135,2984,8,135,1,136,1,136,1,136,5,136,2989,8,136,
        10,136,12,136,2992,9,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,
        1,137,1,137,1,137,3,137,3004,8,137,3,137,3006,8,137,1,137,1,137,
        1,137,1,137,1,137,1,137,5,137,3014,8,137,10,137,12,137,3017,9,137,
        1,138,3,138,3020,8,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,
        3028,8,138,1,138,1,138,1,138,1,138,1,138,5,138,3035,8,138,10,138,
        12,138,3038,9,138,1,138,1,138,1,138,3,138,3043,8,138,1,138,1,138,
        1,138,1,138,1,138,1,138,3,138,3051,8,138,1,138,1,138,1,138,3,138,
        3056,8,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,5,138,
        3066,8,138,10,138,12,138,3069,9,138,1,138,1,138,3,138,3073,8,138,
        1,138,3,138,3076,8,138,1,138,1,138,1,138,1,138,3,138,3082,8,138,
        1,138,1,138,3,138,3086,8,138,1,138,1,138,1,138,3,138,3091,8,138,
        1,138,1,138,1,138,3,138,3096,8,138,1,138,1,138,1,138,3,138,3101,
        8,138,1,139,1,139,1,139,1,139,3,139,3107,8,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,5,139,3128,8,139,10,139,12,139,3131,
        9,139,1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,141,3,141,3141,
        8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        3,141,3153,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        4,141,3163,8,141,11,141,12,141,3164,1,141,1,141,3,141,3169,8,141,
        1,141,1,141,1,141,1,141,1,141,4,141,3176,8,141,11,141,12,141,3177,
        1,141,1,141,3,141,3182,8,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,5,141,3198,8,141,
        10,141,12,141,3201,9,141,3,141,3203,8,141,1,141,1,141,1,141,1,141,
        1,141,1,141,3,141,3211,8,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,3,141,3220,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        3,141,3229,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,3,141,3243,8,141,1,141,1,141,1,141,1,141,
        3,141,3249,8,141,1,141,1,141,1,141,1,141,4,141,3255,8,141,11,141,
        12,141,3256,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        3,141,3268,8,141,1,141,1,141,1,141,5,141,3273,8,141,10,141,12,141,
        3276,9,141,3,141,3278,8,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,5,141,3289,8,141,10,141,12,141,3292,9,141,1,141,
        1,141,3,141,3296,8,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,
        3304,8,141,1,141,1,141,3,141,3308,8,141,1,141,1,141,3,141,3312,8,
        141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,4,141,3322,8,
        141,11,141,12,141,3323,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,3,141,3349,8,141,1,141,1,141,1,141,
        1,141,1,141,3,141,3356,8,141,1,141,3,141,3359,8,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        3,141,3374,8,141,1,141,1,141,3,141,3378,8,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,5,141,
        3393,8,141,10,141,12,141,3396,9,141,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,3,142,3405,8,142,1,143,1,143,1,143,1,143,1,143,1,143,
        1,143,1,143,1,143,1,143,1,143,4,143,3418,8,143,11,143,12,143,3419,
        3,143,3422,8,143,1,144,1,144,1,145,1,145,1,146,1,146,1,147,1,147,
        1,148,1,148,1,148,3,148,3435,8,148,1,149,1,149,3,149,3439,8,149,
        1,150,1,150,1,150,4,150,3444,8,150,11,150,12,150,3445,1,151,1,151,
        1,151,3,151,3451,8,151,1,152,1,152,1,152,1,152,1,152,1,153,3,153,
        3459,8,153,1,153,1,153,1,153,3,153,3464,8,153,1,154,1,154,1,155,
        1,155,1,156,1,156,1,156,3,156,3473,8,156,1,157,1,157,1,157,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,3,158,3496,8,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,3,158,3512,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,3529,8,159,
        1,159,1,159,3,159,3533,8,159,1,159,1,159,1,159,1,159,3,159,3539,
        8,159,1,159,1,159,1,159,1,159,3,159,3545,8,159,1,159,1,159,1,159,
        1,159,1,159,5,159,3552,8,159,10,159,12,159,3555,9,159,1,159,3,159,
        3558,8,159,3,159,3560,8,159,1,160,1,160,1,160,5,160,3565,8,160,10,
        160,12,160,3568,9,160,1,161,1,161,1,161,5,161,3573,8,161,10,161,
        12,161,3576,9,161,1,162,1,162,1,162,1,162,1,162,3,162,3583,8,162,
        1,163,1,163,1,163,1,164,1,164,1,164,1,165,1,165,1,165,5,165,3594,
        8,165,10,165,12,165,3597,9,165,1,166,1,166,1,166,1,166,3,166,3603,
        8,166,1,166,3,166,3606,8,166,1,167,1,167,1,167,5,167,3611,8,167,
        10,167,12,167,3614,9,167,1,168,1,168,1,168,5,168,3619,8,168,10,168,
        12,168,3622,9,168,1,169,1,169,1,169,1,169,1,169,3,169,3629,8,169,
        1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,5,171,
        3641,8,171,10,171,12,171,3644,9,171,1,172,1,172,3,172,3648,8,172,
        1,172,1,172,1,172,3,172,3653,8,172,1,172,3,172,3656,8,172,1,173,
        1,173,1,173,1,173,1,173,1,174,1,174,1,174,1,174,5,174,3667,8,174,
        10,174,12,174,3670,9,174,1,175,1,175,1,175,1,175,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,5,176,3687,8,176,
        10,176,12,176,3690,9,176,1,176,1,176,1,176,1,176,1,176,5,176,3697,
        8,176,10,176,12,176,3700,9,176,3,176,3702,8,176,1,176,1,176,1,176,
        1,176,1,176,5,176,3709,8,176,10,176,12,176,3712,9,176,3,176,3714,
        8,176,3,176,3716,8,176,1,176,3,176,3719,8,176,1,176,3,176,3722,8,
        176,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
        1,177,1,177,1,177,1,177,1,177,1,177,3,177,3740,8,177,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,3,178,3749,8,178,1,179,1,179,1,179,
        5,179,3754,8,179,10,179,12,179,3757,9,179,1,180,1,180,1,180,1,180,
        1,180,1,180,1,180,1,180,1,180,1,180,3,180,3769,8,180,1,181,1,181,
        1,181,5,181,3774,8,181,10,181,12,181,3777,9,181,1,182,1,182,1,182,
        1,183,1,183,4,183,3784,8,183,11,183,12,183,3785,1,183,3,183,3789,
        8,183,1,184,1,184,1,184,3,184,3794,8,184,1,185,1,185,1,185,1,185,
        1,185,1,185,3,185,3802,8,185,1,186,1,186,1,186,3,186,3807,8,186,
        1,187,1,187,1,188,1,188,3,188,3813,8,188,1,188,1,188,1,188,3,188,
        3818,8,188,1,188,1,188,1,188,3,188,3823,8,188,1,188,1,188,3,188,
        3827,8,188,1,188,1,188,3,188,3831,8,188,1,188,1,188,3,188,3835,8,
        188,1,188,1,188,3,188,3839,8,188,1,188,1,188,3,188,3843,8,188,1,
        188,1,188,3,188,3847,8,188,1,188,1,188,3,188,3851,8,188,1,188,3,
        188,3854,8,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,
        189,1,189,1,189,3,189,3867,8,189,1,190,1,190,1,190,3,190,3872,8,
        190,1,191,1,191,3,191,3876,8,191,1,192,1,192,3,192,3880,8,192,1,
        193,1,193,1,194,1,194,1,195,1,195,1,195,9,1066,1133,1144,1161,1188,
        1197,1206,1215,1259,4,106,274,278,282,196,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
        264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
        296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
        328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,
        360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,
        0,60,2,0,80,80,226,226,2,0,35,35,244,244,2,0,123,123,141,141,1,0,
        51,52,2,0,287,287,334,334,2,0,12,12,40,40,5,0,47,47,60,60,108,108,
        122,122,173,173,1,0,88,89,2,0,108,108,122,122,3,0,9,9,97,97,284,
        284,2,0,9,9,167,167,1,0,330,331,3,0,74,74,189,189,256,256,3,0,75,
        75,190,190,257,257,4,0,102,102,149,149,265,265,318,318,3,0,102,102,
        265,265,318,318,2,0,22,22,88,88,2,0,116,116,158,158,2,0,286,286,
        333,333,2,0,285,285,297,297,2,0,63,63,251,251,2,0,104,104,142,142,
        2,0,11,11,93,93,2,0,377,377,379,379,2,0,94,94,214,214,2,0,206,206,
        273,273,2,0,8,8,195,195,1,0,163,164,3,0,11,11,17,17,272,272,3,0,
        111,111,311,311,320,320,2,0,355,356,360,360,2,0,95,95,357,359,2,
        0,355,356,363,363,11,0,69,69,71,71,134,134,179,179,181,181,183,183,
        185,185,228,228,254,254,337,337,344,344,4,0,65,65,67,68,263,263,
        326,326,2,0,76,77,300,300,3,0,78,79,296,296,301,301,2,0,37,37,313,
        313,2,0,138,138,243,243,1,0,282,283,2,0,4,4,123,123,2,0,4,4,119,
        119,3,0,29,29,161,161,306,306,1,0,347,354,2,0,95,95,355,364,4,0,
        15,15,141,141,195,195,205,205,2,0,111,111,311,311,1,0,355,356,7,
        0,69,70,134,135,179,186,191,192,254,255,337,338,344,345,6,0,69,69,
        134,134,183,183,185,185,254,254,344,344,2,0,185,185,344,344,4,0,
        69,69,134,134,183,183,254,254,3,0,134,134,183,183,254,254,2,0,84,
        84,347,347,2,0,118,118,223,223,1,0,378,379,2,0,97,97,264,264,51,
        0,9,10,12,14,16,16,18,20,22,23,25,28,30,35,38,42,44,47,50,50,52,
        58,60,60,63,64,69,92,94,97,101,101,103,110,113,113,115,118,121,122,
        125,128,131,131,133,140,142,144,146,148,150,152,155,155,157,158,
        160,160,163,192,194,194,197,199,203,204,207,207,209,210,212,216,
        219,223,225,235,237,245,247,257,259,262,264,271,273,286,288,293,
        296,302,305,305,307,317,321,325,328,338,341,341,344,346,16,0,16,
        16,62,62,102,102,124,124,145,145,149,149,156,156,159,159,162,162,
        193,193,201,201,246,246,259,259,265,265,318,318,327,327,17,0,9,15,
        17,61,63,101,103,123,125,144,146,148,150,155,157,158,160,161,163,
        192,194,200,202,245,247,258,260,264,266,317,319,326,328,346,4477,
        0,392,1,0,0,0,2,401,1,0,0,0,4,404,1,0,0,0,6,407,1,0,0,0,8,410,1,
        0,0,0,10,413,1,0,0,0,12,416,1,0,0,0,14,1262,1,0,0,0,16,1264,1,0,
        0,0,18,1281,1,0,0,0,20,1285,1,0,0,0,22,1289,1,0,0,0,24,1295,1,0,
        0,0,26,1305,1,0,0,0,28,1307,1,0,0,0,30,1309,1,0,0,0,32,1479,1,0,
        0,0,34,1481,1,0,0,0,36,1498,1,0,0,0,38,1504,1,0,0,0,40,1510,1,0,
        0,0,42,1522,1,0,0,0,44,1535,1,0,0,0,46,1538,1,0,0,0,48,1542,1,0,
        0,0,50,1621,1,0,0,0,52,1623,1,0,0,0,54,1627,1,0,0,0,56,1648,1,0,
        0,0,58,1650,1,0,0,0,60,1652,1,0,0,0,62,1660,1,0,0,0,64,1662,1,0,
        0,0,66,1670,1,0,0,0,68,1679,1,0,0,0,70,1690,1,0,0,0,72,1709,1,0,
        0,0,74,1712,1,0,0,0,76,1723,1,0,0,0,78,1739,1,0,0,0,80,1745,1,0,
        0,0,82,1747,1,0,0,0,84,1758,1,0,0,0,86,1765,1,0,0,0,88,1776,1,0,
        0,0,90,1793,1,0,0,0,92,1801,1,0,0,0,94,1803,1,0,0,0,96,1809,1,0,
        0,0,98,1868,1,0,0,0,100,1876,1,0,0,0,102,1888,1,0,0,0,104,1940,1,
        0,0,0,106,1943,1,0,0,0,108,1981,1,0,0,0,110,1983,1,0,0,0,112,1991,
        1,0,0,0,114,2024,1,0,0,0,116,2070,1,0,0,0,118,2091,1,0,0,0,120,2123,
        1,0,0,0,122,2135,1,0,0,0,124,2138,1,0,0,0,126,2147,1,0,0,0,128,2161,
        1,0,0,0,130,2180,1,0,0,0,132,2200,1,0,0,0,134,2206,1,0,0,0,136,2208,
        1,0,0,0,138,2213,1,0,0,0,140,2221,1,0,0,0,142,2225,1,0,0,0,144,2228,
        1,0,0,0,146,2231,1,0,0,0,148,2257,1,0,0,0,150,2259,1,0,0,0,152,2294,
        1,0,0,0,154,2335,1,0,0,0,156,2339,1,0,0,0,158,2366,1,0,0,0,160,2370,
        1,0,0,0,162,2385,1,0,0,0,164,2387,1,0,0,0,166,2417,1,0,0,0,168,2419,
        1,0,0,0,170,2426,1,0,0,0,172,2439,1,0,0,0,174,2444,1,0,0,0,176,2446,
        1,0,0,0,178,2461,1,0,0,0,180,2485,1,0,0,0,182,2498,1,0,0,0,184,2500,
        1,0,0,0,186,2502,1,0,0,0,188,2506,1,0,0,0,190,2509,1,0,0,0,192,2513,
        1,0,0,0,194,2545,1,0,0,0,196,2548,1,0,0,0,198,2560,1,0,0,0,200,2579,
        1,0,0,0,202,2605,1,0,0,0,204,2611,1,0,0,0,206,2613,1,0,0,0,208,2649,
        1,0,0,0,210,2651,1,0,0,0,212,2655,1,0,0,0,214,2663,1,0,0,0,216,2674,
        1,0,0,0,218,2678,1,0,0,0,220,2689,1,0,0,0,222,2720,1,0,0,0,224,2722,
        1,0,0,0,226,2752,1,0,0,0,228,2773,1,0,0,0,230,2793,1,0,0,0,232,2799,
        1,0,0,0,234,2803,1,0,0,0,236,2805,1,0,0,0,238,2827,1,0,0,0,240,2878,
        1,0,0,0,242,2880,1,0,0,0,244,2888,1,0,0,0,246,2896,1,0,0,0,248,2904,
        1,0,0,0,250,2912,1,0,0,0,252,2919,1,0,0,0,254,2923,1,0,0,0,256,2933,
        1,0,0,0,258,2941,1,0,0,0,260,2954,1,0,0,0,262,2969,1,0,0,0,264,2973,
        1,0,0,0,266,2975,1,0,0,0,268,2977,1,0,0,0,270,2983,1,0,0,0,272,2985,
        1,0,0,0,274,3005,1,0,0,0,276,3100,1,0,0,0,278,3106,1,0,0,0,280,3132,
        1,0,0,0,282,3377,1,0,0,0,284,3404,1,0,0,0,286,3421,1,0,0,0,288,3423,
        1,0,0,0,290,3425,1,0,0,0,292,3427,1,0,0,0,294,3429,1,0,0,0,296,3431,
        1,0,0,0,298,3436,1,0,0,0,300,3443,1,0,0,0,302,3447,1,0,0,0,304,3452,
        1,0,0,0,306,3458,1,0,0,0,308,3465,1,0,0,0,310,3467,1,0,0,0,312,3472,
        1,0,0,0,314,3474,1,0,0,0,316,3511,1,0,0,0,318,3559,1,0,0,0,320,3561,
        1,0,0,0,322,3569,1,0,0,0,324,3582,1,0,0,0,326,3584,1,0,0,0,328,3587,
        1,0,0,0,330,3590,1,0,0,0,332,3598,1,0,0,0,334,3607,1,0,0,0,336,3615,
        1,0,0,0,338,3628,1,0,0,0,340,3630,1,0,0,0,342,3637,1,0,0,0,344,3645,
        1,0,0,0,346,3657,1,0,0,0,348,3662,1,0,0,0,350,3671,1,0,0,0,352,3721,
        1,0,0,0,354,3739,1,0,0,0,356,3748,1,0,0,0,358,3750,1,0,0,0,360,3768,
        1,0,0,0,362,3770,1,0,0,0,364,3778,1,0,0,0,366,3788,1,0,0,0,368,3793,
        1,0,0,0,370,3801,1,0,0,0,372,3806,1,0,0,0,374,3808,1,0,0,0,376,3853,
        1,0,0,0,378,3866,1,0,0,0,380,3871,1,0,0,0,382,3875,1,0,0,0,384,3879,
        1,0,0,0,386,3881,1,0,0,0,388,3883,1,0,0,0,390,3885,1,0,0,0,392,396,
        3,14,7,0,393,395,5,1,0,0,394,393,1,0,0,0,395,398,1,0,0,0,396,394,
        1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,396,1,0,0,0,399,400,
        5,0,0,1,400,1,1,0,0,0,401,402,3,254,127,0,402,403,5,0,0,1,403,3,
        1,0,0,0,404,405,3,250,125,0,405,406,5,0,0,1,406,5,1,0,0,0,407,408,
        3,244,122,0,408,409,5,0,0,1,409,7,1,0,0,0,410,411,3,252,126,0,411,
        412,5,0,0,1,412,9,1,0,0,0,413,414,3,318,159,0,414,415,5,0,0,1,415,
        11,1,0,0,0,416,417,3,330,165,0,417,418,5,0,0,1,418,13,1,0,0,0,419,
        1263,3,48,24,0,420,1263,3,16,8,0,421,423,3,66,33,0,422,421,1,0,0,
        0,422,423,1,0,0,0,423,424,1,0,0,0,424,1263,3,98,49,0,425,426,5,325,
        0,0,426,1263,3,100,50,0,427,428,5,325,0,0,428,429,3,58,29,0,429,
        430,3,100,50,0,430,1263,1,0,0,0,431,432,5,264,0,0,432,435,5,38,0,
        0,433,436,3,364,182,0,434,436,3,380,190,0,435,433,1,0,0,0,435,434,
        1,0,0,0,436,1263,1,0,0,0,437,438,5,61,0,0,438,442,3,58,29,0,439,
        440,5,137,0,0,440,441,5,195,0,0,441,443,5,105,0,0,442,439,1,0,0,
        0,442,443,1,0,0,0,443,444,1,0,0,0,444,452,3,100,50,0,445,451,3,46,
        23,0,446,451,3,44,22,0,447,448,5,342,0,0,448,449,7,0,0,0,449,451,
        3,74,37,0,450,445,1,0,0,0,450,446,1,0,0,0,450,447,1,0,0,0,451,454,
        1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,1263,1,0,0,0,454,452,
        1,0,0,0,455,456,5,12,0,0,456,457,3,58,29,0,457,458,3,100,50,0,458,
        459,5,264,0,0,459,460,7,0,0,0,460,461,3,74,37,0,461,1263,1,0,0,0,
        462,463,5,12,0,0,463,464,3,58,29,0,464,465,3,100,50,0,465,466,5,
        264,0,0,466,467,3,44,22,0,467,1263,1,0,0,0,468,469,5,97,0,0,469,
        472,3,58,29,0,470,471,5,137,0,0,471,473,5,105,0,0,472,470,1,0,0,
        0,472,473,1,0,0,0,473,474,1,0,0,0,474,476,3,100,50,0,475,477,7,1,
        0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,1263,1,0,0,0,478,479,5,268,
        0,0,479,482,3,60,30,0,480,481,7,2,0,0,481,483,3,244,122,0,482,480,
        1,0,0,0,482,483,1,0,0,0,483,488,1,0,0,0,484,486,5,163,0,0,485,484,
        1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,489,3,380,190,0,488,
        485,1,0,0,0,488,489,1,0,0,0,489,1263,1,0,0,0,490,495,3,34,17,0,491,
        492,5,2,0,0,492,493,3,334,167,0,493,494,5,3,0,0,494,496,1,0,0,0,
        495,491,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,499,3,70,35,
        0,498,497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,505,3,72,36,
        0,501,503,5,21,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,
        0,504,506,3,48,24,0,505,502,1,0,0,0,505,506,1,0,0,0,506,1263,1,0,
        0,0,507,508,5,61,0,0,508,512,5,287,0,0,509,510,5,137,0,0,510,511,
        5,195,0,0,511,513,5,105,0,0,512,509,1,0,0,0,512,513,1,0,0,0,513,
        514,1,0,0,0,514,515,3,250,125,0,515,516,5,163,0,0,516,525,3,250,
        125,0,517,524,3,70,35,0,518,524,3,240,120,0,519,524,3,90,45,0,520,
        524,3,44,22,0,521,522,5,291,0,0,522,524,3,74,37,0,523,517,1,0,0,
        0,523,518,1,0,0,0,523,519,1,0,0,0,523,520,1,0,0,0,523,521,1,0,0,
        0,524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,1263,1,0,0,
        0,527,525,1,0,0,0,528,533,3,36,18,0,529,530,5,2,0,0,530,531,3,334,
        167,0,531,532,5,3,0,0,532,534,1,0,0,0,533,529,1,0,0,0,533,534,1,
        0,0,0,534,536,1,0,0,0,535,537,3,70,35,0,536,535,1,0,0,0,536,537,
        1,0,0,0,537,538,1,0,0,0,538,543,3,72,36,0,539,541,5,21,0,0,540,539,
        1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,544,3,48,24,0,543,540,
        1,0,0,0,543,544,1,0,0,0,544,1263,1,0,0,0,545,546,5,14,0,0,546,547,
        5,287,0,0,547,549,3,100,50,0,548,550,3,54,27,0,549,548,1,0,0,0,549,
        550,1,0,0,0,550,551,1,0,0,0,551,552,5,57,0,0,552,560,5,277,0,0,553,
        561,3,368,184,0,554,555,5,119,0,0,555,556,5,52,0,0,556,561,3,212,
        106,0,557,558,5,119,0,0,558,559,5,11,0,0,559,561,5,52,0,0,560,553,
        1,0,0,0,560,554,1,0,0,0,560,557,1,0,0,0,560,561,1,0,0,0,561,1263,
        1,0,0,0,562,563,5,14,0,0,563,566,5,288,0,0,564,565,7,2,0,0,565,567,
        3,100,50,0,566,564,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,
        5,57,0,0,569,571,5,277,0,0,570,572,3,368,184,0,571,570,1,0,0,0,571,
        572,1,0,0,0,572,1263,1,0,0,0,573,574,5,12,0,0,574,575,5,287,0,0,
        575,576,3,100,50,0,576,577,5,9,0,0,577,578,7,3,0,0,578,579,3,320,
        160,0,579,1263,1,0,0,0,580,581,5,12,0,0,581,582,5,287,0,0,582,583,
        3,100,50,0,583,584,5,9,0,0,584,585,7,3,0,0,585,586,5,2,0,0,586,587,
        3,320,160,0,587,588,5,3,0,0,588,1263,1,0,0,0,589,590,5,12,0,0,590,
        591,5,287,0,0,591,592,3,100,50,0,592,593,5,238,0,0,593,594,5,51,
        0,0,594,595,3,244,122,0,595,596,5,303,0,0,596,597,3,364,182,0,597,
        1263,1,0,0,0,598,599,5,12,0,0,599,600,5,287,0,0,600,601,3,100,50,
        0,601,602,5,97,0,0,602,605,7,3,0,0,603,604,5,137,0,0,604,606,5,105,
        0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,608,5,2,
        0,0,608,609,3,242,121,0,609,610,5,3,0,0,610,1263,1,0,0,0,611,612,
        5,12,0,0,612,613,5,287,0,0,613,614,3,100,50,0,614,615,5,97,0,0,615,
        618,7,3,0,0,616,617,5,137,0,0,617,619,5,105,0,0,618,616,1,0,0,0,
        618,619,1,0,0,0,619,620,1,0,0,0,620,621,3,242,121,0,621,1263,1,0,
        0,0,622,623,5,12,0,0,623,624,7,4,0,0,624,625,3,100,50,0,625,626,
        5,238,0,0,626,627,5,303,0,0,627,628,3,244,122,0,628,1263,1,0,0,0,
        629,630,5,12,0,0,630,631,7,4,0,0,631,632,3,100,50,0,632,633,5,264,
        0,0,633,634,5,291,0,0,634,635,3,74,37,0,635,1263,1,0,0,0,636,637,
        5,12,0,0,637,638,7,4,0,0,638,639,3,100,50,0,639,640,5,323,0,0,640,
        643,5,291,0,0,641,642,5,137,0,0,642,644,5,105,0,0,643,641,1,0,0,
        0,643,644,1,0,0,0,644,645,1,0,0,0,645,646,3,74,37,0,646,1263,1,0,
        0,0,647,648,5,12,0,0,648,649,5,287,0,0,649,650,3,100,50,0,650,652,
        7,5,0,0,651,653,5,51,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,
        1,0,0,0,654,656,3,244,122,0,655,657,3,378,189,0,656,655,1,0,0,0,
        656,657,1,0,0,0,657,1263,1,0,0,0,658,659,5,12,0,0,659,660,5,287,
        0,0,660,662,3,100,50,0,661,663,3,54,27,0,662,661,1,0,0,0,662,663,
        1,0,0,0,663,664,1,0,0,0,664,666,5,40,0,0,665,667,5,51,0,0,666,665,
        1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,669,3,244,122,0,669,
        671,3,332,166,0,670,672,3,312,156,0,671,670,1,0,0,0,671,672,1,0,
        0,0,672,1263,1,0,0,0,673,674,5,12,0,0,674,675,5,287,0,0,675,677,
        3,100,50,0,676,678,3,54,27,0,677,676,1,0,0,0,677,678,1,0,0,0,678,
        679,1,0,0,0,679,680,5,241,0,0,680,681,5,52,0,0,681,682,5,2,0,0,682,
        683,3,320,160,0,683,684,5,3,0,0,684,1263,1,0,0,0,685,686,5,12,0,
        0,686,687,5,287,0,0,687,689,3,100,50,0,688,690,3,54,27,0,689,688,
        1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,5,264,0,0,692,693,
        5,261,0,0,693,697,3,380,190,0,694,695,5,342,0,0,695,696,5,262,0,
        0,696,698,3,74,37,0,697,694,1,0,0,0,697,698,1,0,0,0,698,1263,1,0,
        0,0,699,700,5,12,0,0,700,701,5,287,0,0,701,703,3,100,50,0,702,704,
        3,54,27,0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,706,
        5,264,0,0,706,707,5,262,0,0,707,708,3,74,37,0,708,1263,1,0,0,0,709,
        710,5,12,0,0,710,711,7,4,0,0,711,712,3,100,50,0,712,716,5,9,0,0,
        713,714,5,137,0,0,714,715,5,195,0,0,715,717,5,105,0,0,716,713,1,
        0,0,0,716,717,1,0,0,0,717,719,1,0,0,0,718,720,3,52,26,0,719,718,
        1,0,0,0,720,721,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,1263,
        1,0,0,0,723,724,5,12,0,0,724,725,5,287,0,0,725,726,3,100,50,0,726,
        727,3,54,27,0,727,728,5,238,0,0,728,729,5,303,0,0,729,730,3,54,27,
        0,730,1263,1,0,0,0,731,732,5,12,0,0,732,733,7,4,0,0,733,734,3,100,
        50,0,734,737,5,97,0,0,735,736,5,137,0,0,736,738,5,105,0,0,737,735,
        1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,744,3,54,27,0,740,741,
        5,4,0,0,741,743,3,54,27,0,742,740,1,0,0,0,743,746,1,0,0,0,744,742,
        1,0,0,0,744,745,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,747,749,
        5,227,0,0,748,747,1,0,0,0,748,749,1,0,0,0,749,1263,1,0,0,0,750,751,
        5,12,0,0,751,752,5,287,0,0,752,754,3,100,50,0,753,755,3,54,27,0,
        754,753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,757,5,264,0,
        0,757,758,3,44,22,0,758,1263,1,0,0,0,759,760,5,12,0,0,760,761,5,
        287,0,0,761,762,3,100,50,0,762,763,5,234,0,0,763,764,5,216,0,0,764,
        1263,1,0,0,0,765,766,5,97,0,0,766,769,5,287,0,0,767,768,5,137,0,
        0,768,770,5,105,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,771,1,0,
        0,0,771,773,3,100,50,0,772,774,5,227,0,0,773,772,1,0,0,0,773,774,
        1,0,0,0,774,1263,1,0,0,0,775,776,5,97,0,0,776,779,5,334,0,0,777,
        778,5,137,0,0,778,780,5,105,0,0,779,777,1,0,0,0,779,780,1,0,0,0,
        780,781,1,0,0,0,781,1263,3,100,50,0,782,785,5,61,0,0,783,784,5,205,
        0,0,784,786,5,241,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,791,1,
        0,0,0,787,789,5,128,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,790,
        1,0,0,0,790,792,5,292,0,0,791,788,1,0,0,0,791,792,1,0,0,0,792,793,
        1,0,0,0,793,797,5,334,0,0,794,795,5,137,0,0,795,796,5,195,0,0,796,
        798,5,105,0,0,797,794,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,0,799,
        801,3,100,50,0,800,802,3,218,109,0,801,800,1,0,0,0,801,802,1,0,0,
        0,802,811,1,0,0,0,803,810,3,46,23,0,804,805,5,215,0,0,805,806,5,
        201,0,0,806,810,3,210,105,0,807,808,5,291,0,0,808,810,3,74,37,0,
        809,803,1,0,0,0,809,804,1,0,0,0,809,807,1,0,0,0,810,813,1,0,0,0,
        811,809,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,811,1,0,0,0,
        814,815,5,21,0,0,815,816,3,48,24,0,816,1263,1,0,0,0,817,820,5,61,
        0,0,818,819,5,205,0,0,819,821,5,241,0,0,820,818,1,0,0,0,820,821,
        1,0,0,0,821,823,1,0,0,0,822,824,5,128,0,0,823,822,1,0,0,0,823,824,
        1,0,0,0,824,825,1,0,0,0,825,826,5,292,0,0,826,827,5,334,0,0,827,
        832,3,250,125,0,828,829,5,2,0,0,829,830,3,330,165,0,830,831,5,3,
        0,0,831,833,1,0,0,0,832,828,1,0,0,0,832,833,1,0,0,0,833,834,1,0,
        0,0,834,837,3,70,35,0,835,836,5,204,0,0,836,838,3,74,37,0,837,835,
        1,0,0,0,837,838,1,0,0,0,838,1263,1,0,0,0,839,840,5,12,0,0,840,841,
        5,334,0,0,841,843,3,100,50,0,842,844,5,21,0,0,843,842,1,0,0,0,843,
        844,1,0,0,0,844,845,1,0,0,0,845,846,3,48,24,0,846,1263,1,0,0,0,847,
        850,5,61,0,0,848,849,5,205,0,0,849,851,5,241,0,0,850,848,1,0,0,0,
        850,851,1,0,0,0,851,853,1,0,0,0,852,854,5,292,0,0,853,852,1,0,0,
        0,853,854,1,0,0,0,854,855,1,0,0,0,855,859,5,125,0,0,856,857,5,137,
        0,0,857,858,5,195,0,0,858,860,5,105,0,0,859,856,1,0,0,0,859,860,
        1,0,0,0,860,861,1,0,0,0,861,862,3,100,50,0,862,863,5,21,0,0,863,
        873,3,380,190,0,864,865,5,327,0,0,865,870,3,96,48,0,866,867,5,4,
        0,0,867,869,3,96,48,0,868,866,1,0,0,0,869,872,1,0,0,0,870,868,1,
        0,0,0,870,871,1,0,0,0,871,874,1,0,0,0,872,870,1,0,0,0,873,864,1,
        0,0,0,873,874,1,0,0,0,874,1263,1,0,0,0,875,877,5,97,0,0,876,878,
        5,292,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,882,
        5,125,0,0,880,881,5,137,0,0,881,883,5,105,0,0,882,880,1,0,0,0,882,
        883,1,0,0,0,883,884,1,0,0,0,884,1263,3,100,50,0,885,888,5,83,0,0,
        886,887,5,205,0,0,887,889,5,241,0,0,888,886,1,0,0,0,888,889,1,0,
        0,0,889,891,1,0,0,0,890,892,5,331,0,0,891,890,1,0,0,0,891,892,1,
        0,0,0,892,893,1,0,0,0,893,895,3,100,50,0,894,896,3,318,159,0,895,
        894,1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,897,899,3,328,164,0,
        898,897,1,0,0,0,898,899,1,0,0,0,899,1263,1,0,0,0,900,901,5,97,0,
        0,901,902,5,292,0,0,902,905,5,331,0,0,903,904,5,137,0,0,904,906,
        5,105,0,0,905,903,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,1263,
        3,100,50,0,908,910,5,106,0,0,909,911,7,6,0,0,910,909,1,0,0,0,910,
        911,1,0,0,0,911,912,1,0,0,0,912,1263,3,14,7,0,913,914,5,268,0,0,
        914,917,5,288,0,0,915,916,7,2,0,0,916,918,3,100,50,0,917,915,1,0,
        0,0,917,918,1,0,0,0,918,923,1,0,0,0,919,921,5,163,0,0,920,919,1,
        0,0,0,920,921,1,0,0,0,921,922,1,0,0,0,922,924,3,380,190,0,923,920,
        1,0,0,0,923,924,1,0,0,0,924,1263,1,0,0,0,925,926,5,268,0,0,926,927,
        5,287,0,0,927,930,5,108,0,0,928,929,7,2,0,0,929,931,3,100,50,0,930,
        928,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,933,5,163,0,0,933,
        935,3,380,190,0,934,936,3,54,27,0,935,934,1,0,0,0,935,936,1,0,0,
        0,936,1263,1,0,0,0,937,938,5,268,0,0,938,939,5,291,0,0,939,944,3,
        100,50,0,940,941,5,2,0,0,941,942,3,78,39,0,942,943,5,3,0,0,943,945,
        1,0,0,0,944,940,1,0,0,0,944,945,1,0,0,0,945,1263,1,0,0,0,946,947,
        5,268,0,0,947,948,5,52,0,0,948,949,7,2,0,0,949,952,3,100,50,0,950,
        951,7,2,0,0,951,953,3,244,122,0,952,950,1,0,0,0,952,953,1,0,0,0,
        953,1263,1,0,0,0,954,955,5,268,0,0,955,958,5,335,0,0,956,957,7,2,
        0,0,957,959,3,100,50,0,958,956,1,0,0,0,958,959,1,0,0,0,959,964,1,
        0,0,0,960,962,5,163,0,0,961,960,1,0,0,0,961,962,1,0,0,0,962,963,
        1,0,0,0,963,965,3,380,190,0,964,961,1,0,0,0,964,965,1,0,0,0,965,
        1263,1,0,0,0,966,967,5,268,0,0,967,968,5,216,0,0,968,970,3,100,50,
        0,969,971,3,54,27,0,970,969,1,0,0,0,970,971,1,0,0,0,971,1263,1,0,
        0,0,972,974,5,268,0,0,973,975,3,368,184,0,974,973,1,0,0,0,974,975,
        1,0,0,0,975,976,1,0,0,0,976,979,5,126,0,0,977,978,7,2,0,0,978,980,
        3,100,50,0,979,977,1,0,0,0,979,980,1,0,0,0,980,988,1,0,0,0,981,983,
        5,163,0,0,982,981,1,0,0,0,982,983,1,0,0,0,983,986,1,0,0,0,984,987,
        3,244,122,0,985,987,3,380,190,0,986,984,1,0,0,0,986,985,1,0,0,0,
        987,989,1,0,0,0,988,982,1,0,0,0,988,989,1,0,0,0,989,1263,1,0,0,0,
        990,991,5,268,0,0,991,992,5,61,0,0,992,993,5,287,0,0,993,996,3,100,
        50,0,994,995,5,21,0,0,995,997,5,261,0,0,996,994,1,0,0,0,996,997,
        1,0,0,0,997,1263,1,0,0,0,998,999,5,268,0,0,999,1000,5,64,0,0,1000,
        1263,3,58,29,0,1001,1002,5,268,0,0,1002,1007,5,39,0,0,1003,1005,
        5,163,0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,
        1006,1008,3,380,190,0,1007,1004,1,0,0,0,1007,1008,1,0,0,0,1008,1263,
        1,0,0,0,1009,1010,7,7,0,0,1010,1012,5,125,0,0,1011,1013,5,108,0,
        0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,1014,1263,
        3,62,31,0,1015,1016,7,7,0,0,1016,1018,3,58,29,0,1017,1019,5,108,
        0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1021,
        3,100,50,0,1021,1263,1,0,0,0,1022,1024,7,7,0,0,1023,1025,5,287,0,
        0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1028,
        7,8,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,
        1031,3,100,50,0,1030,1032,3,54,27,0,1031,1030,1,0,0,0,1031,1032,
        1,0,0,0,1032,1034,1,0,0,0,1033,1035,3,64,32,0,1034,1033,1,0,0,0,
        1034,1035,1,0,0,0,1035,1263,1,0,0,0,1036,1038,7,7,0,0,1037,1039,
        5,229,0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,
        1040,1263,3,48,24,0,1041,1042,5,53,0,0,1042,1043,5,201,0,0,1043,
        1044,3,58,29,0,1044,1045,3,100,50,0,1045,1046,5,154,0,0,1046,1047,
        3,382,191,0,1047,1263,1,0,0,0,1048,1049,5,53,0,0,1049,1050,5,201,
        0,0,1050,1051,5,287,0,0,1051,1052,3,100,50,0,1052,1053,5,154,0,0,
        1053,1054,3,382,191,0,1054,1263,1,0,0,0,1055,1056,5,237,0,0,1056,
        1057,5,287,0,0,1057,1263,3,100,50,0,1058,1059,5,237,0,0,1059,1060,
        5,125,0,0,1060,1263,3,100,50,0,1061,1069,5,237,0,0,1062,1070,3,380,
        190,0,1063,1065,9,0,0,0,1064,1063,1,0,0,0,1065,1068,1,0,0,0,1066,
        1067,1,0,0,0,1066,1064,1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,0,
        0,1069,1062,1,0,0,0,1069,1066,1,0,0,0,1070,1263,1,0,0,0,1071,1073,
        5,34,0,0,1072,1074,5,160,0,0,1073,1072,1,0,0,0,1073,1074,1,0,0,0,
        1074,1075,1,0,0,0,1075,1076,5,287,0,0,1076,1079,3,100,50,0,1077,
        1078,5,204,0,0,1078,1080,3,74,37,0,1079,1077,1,0,0,0,1079,1080,1,
        0,0,0,1080,1085,1,0,0,0,1081,1083,5,21,0,0,1082,1081,1,0,0,0,1082,
        1083,1,0,0,0,1083,1084,1,0,0,0,1084,1086,3,48,24,0,1085,1082,1,0,
        0,0,1085,1086,1,0,0,0,1086,1263,1,0,0,0,1087,1088,5,317,0,0,1088,
        1091,5,287,0,0,1089,1090,5,137,0,0,1090,1092,5,105,0,0,1091,1089,
        1,0,0,0,1091,1092,1,0,0,0,1092,1093,1,0,0,0,1093,1263,3,100,50,0,
        1094,1095,5,44,0,0,1095,1263,5,34,0,0,1096,1097,5,168,0,0,1097,1099,
        5,72,0,0,1098,1100,5,169,0,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,
        1100,1101,1,0,0,0,1101,1102,5,146,0,0,1102,1104,3,380,190,0,1103,
        1105,5,213,0,0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,
        0,0,1106,1107,5,153,0,0,1107,1108,5,287,0,0,1108,1110,3,100,50,0,
        1109,1111,3,54,27,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,1263,
        1,0,0,0,1112,1113,5,312,0,0,1113,1114,5,287,0,0,1114,1116,3,100,
        50,0,1115,1117,3,54,27,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,
        1263,1,0,0,0,1118,1120,5,187,0,0,1119,1118,1,0,0,0,1119,1120,1,0,
        0,0,1120,1121,1,0,0,0,1121,1122,5,239,0,0,1122,1123,5,287,0,0,1123,
        1126,3,100,50,0,1124,1125,7,9,0,0,1125,1127,5,216,0,0,1126,1124,
        1,0,0,0,1126,1127,1,0,0,0,1127,1263,1,0,0,0,1128,1129,7,10,0,0,1129,
        1133,3,368,184,0,1130,1132,9,0,0,0,1131,1130,1,0,0,0,1132,1135,1,
        0,0,0,1133,1134,1,0,0,0,1133,1131,1,0,0,0,1134,1263,1,0,0,0,1135,
        1133,1,0,0,0,1136,1137,5,264,0,0,1137,1138,5,49,0,0,1138,1263,3,
        368,184,0,1139,1140,5,264,0,0,1140,1144,5,248,0,0,1141,1143,9,0,
        0,0,1142,1141,1,0,0,0,1143,1146,1,0,0,0,1144,1145,1,0,0,0,1144,1142,
        1,0,0,0,1145,1263,1,0,0,0,1146,1144,1,0,0,0,1147,1148,5,264,0,0,
        1148,1149,5,295,0,0,1149,1150,5,346,0,0,1150,1263,3,296,148,0,1151,
        1152,5,264,0,0,1152,1153,5,295,0,0,1153,1154,5,346,0,0,1154,1263,
        3,26,13,0,1155,1156,5,264,0,0,1156,1157,5,295,0,0,1157,1161,5,346,
        0,0,1158,1160,9,0,0,0,1159,1158,1,0,0,0,1160,1163,1,0,0,0,1161,1162,
        1,0,0,0,1161,1159,1,0,0,0,1162,1263,1,0,0,0,1163,1161,1,0,0,0,1164,
        1165,5,264,0,0,1165,1166,7,11,0,0,1166,1263,3,138,69,0,1167,1168,
        5,264,0,0,1168,1169,7,11,0,0,1169,1170,5,2,0,0,1170,1171,3,242,121,
        0,1171,1172,5,3,0,0,1172,1173,5,347,0,0,1173,1174,5,2,0,0,1174,1175,
        3,48,24,0,1175,1176,5,3,0,0,1176,1263,1,0,0,0,1177,1178,5,264,0,
        0,1178,1179,3,28,14,0,1179,1180,5,347,0,0,1180,1181,3,30,15,0,1181,
        1263,1,0,0,0,1182,1183,5,264,0,0,1183,1191,3,28,14,0,1184,1188,5,
        347,0,0,1185,1187,9,0,0,0,1186,1185,1,0,0,0,1187,1190,1,0,0,0,1188,
        1189,1,0,0,0,1188,1186,1,0,0,0,1189,1192,1,0,0,0,1190,1188,1,0,0,
        0,1191,1184,1,0,0,0,1191,1192,1,0,0,0,1192,1263,1,0,0,0,1193,1197,
        5,264,0,0,1194,1196,9,0,0,0,1195,1194,1,0,0,0,1196,1199,1,0,0,0,
        1197,1198,1,0,0,0,1197,1195,1,0,0,0,1198,1200,1,0,0,0,1199,1197,
        1,0,0,0,1200,1201,5,347,0,0,1201,1263,3,30,15,0,1202,1206,5,264,
        0,0,1203,1205,9,0,0,0,1204,1203,1,0,0,0,1205,1208,1,0,0,0,1206,1207,
        1,0,0,0,1206,1204,1,0,0,0,1207,1263,1,0,0,0,1208,1206,1,0,0,0,1209,
        1210,5,242,0,0,1210,1263,3,28,14,0,1211,1215,5,242,0,0,1212,1214,
        9,0,0,0,1213,1212,1,0,0,0,1214,1217,1,0,0,0,1215,1216,1,0,0,0,1215,
        1213,1,0,0,0,1216,1263,1,0,0,0,1217,1215,1,0,0,0,1218,1219,5,61,
        0,0,1219,1223,5,143,0,0,1220,1221,5,137,0,0,1221,1222,5,195,0,0,
        1222,1224,5,105,0,0,1223,1220,1,0,0,0,1223,1224,1,0,0,0,1224,1225,
        1,0,0,0,1225,1226,3,368,184,0,1226,1228,5,201,0,0,1227,1229,5,287,
        0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,1233,
        3,100,50,0,1231,1232,5,327,0,0,1232,1234,3,368,184,0,1233,1231,1,
        0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,0,0,1235,1236,5,2,0,0,1236,
        1237,3,246,123,0,1237,1240,5,3,0,0,1238,1239,5,204,0,0,1239,1241,
        3,74,37,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,1263,1,0,0,0,
        1242,1243,5,97,0,0,1243,1246,5,143,0,0,1244,1245,5,137,0,0,1245,
        1247,5,105,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1248,1,0,
        0,0,1248,1249,3,368,184,0,1249,1251,5,201,0,0,1250,1252,5,287,0,
        0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,1254,
        3,100,50,0,1254,1263,1,0,0,0,1255,1259,3,32,16,0,1256,1258,9,0,0,
        0,1257,1256,1,0,0,0,1258,1261,1,0,0,0,1259,1260,1,0,0,0,1259,1257,
        1,0,0,0,1260,1263,1,0,0,0,1261,1259,1,0,0,0,1262,419,1,0,0,0,1262,
        420,1,0,0,0,1262,422,1,0,0,0,1262,425,1,0,0,0,1262,427,1,0,0,0,1262,
        431,1,0,0,0,1262,437,1,0,0,0,1262,455,1,0,0,0,1262,462,1,0,0,0,1262,
        468,1,0,0,0,1262,478,1,0,0,0,1262,490,1,0,0,0,1262,507,1,0,0,0,1262,
        528,1,0,0,0,1262,545,1,0,0,0,1262,562,1,0,0,0,1262,573,1,0,0,0,1262,
        580,1,0,0,0,1262,589,1,0,0,0,1262,598,1,0,0,0,1262,611,1,0,0,0,1262,
        622,1,0,0,0,1262,629,1,0,0,0,1262,636,1,0,0,0,1262,647,1,0,0,0,1262,
        658,1,0,0,0,1262,673,1,0,0,0,1262,685,1,0,0,0,1262,699,1,0,0,0,1262,
        709,1,0,0,0,1262,723,1,0,0,0,1262,731,1,0,0,0,1262,750,1,0,0,0,1262,
        759,1,0,0,0,1262,765,1,0,0,0,1262,775,1,0,0,0,1262,782,1,0,0,0,1262,
        817,1,0,0,0,1262,839,1,0,0,0,1262,847,1,0,0,0,1262,875,1,0,0,0,1262,
        885,1,0,0,0,1262,900,1,0,0,0,1262,908,1,0,0,0,1262,913,1,0,0,0,1262,
        925,1,0,0,0,1262,937,1,0,0,0,1262,946,1,0,0,0,1262,954,1,0,0,0,1262,
        966,1,0,0,0,1262,972,1,0,0,0,1262,990,1,0,0,0,1262,998,1,0,0,0,1262,
        1001,1,0,0,0,1262,1009,1,0,0,0,1262,1015,1,0,0,0,1262,1022,1,0,0,
        0,1262,1036,1,0,0,0,1262,1041,1,0,0,0,1262,1048,1,0,0,0,1262,1055,
        1,0,0,0,1262,1058,1,0,0,0,1262,1061,1,0,0,0,1262,1071,1,0,0,0,1262,
        1087,1,0,0,0,1262,1094,1,0,0,0,1262,1096,1,0,0,0,1262,1112,1,0,0,
        0,1262,1119,1,0,0,0,1262,1128,1,0,0,0,1262,1136,1,0,0,0,1262,1139,
        1,0,0,0,1262,1147,1,0,0,0,1262,1151,1,0,0,0,1262,1155,1,0,0,0,1262,
        1164,1,0,0,0,1262,1167,1,0,0,0,1262,1177,1,0,0,0,1262,1182,1,0,0,
        0,1262,1193,1,0,0,0,1262,1202,1,0,0,0,1262,1209,1,0,0,0,1262,1211,
        1,0,0,0,1262,1218,1,0,0,0,1262,1242,1,0,0,0,1262,1255,1,0,0,0,1263,
        15,1,0,0,0,1264,1265,5,304,0,0,1265,1266,5,139,0,0,1266,1269,3,20,
        10,0,1267,1268,5,153,0,0,1268,1270,3,242,121,0,1269,1267,1,0,0,0,
        1269,1270,1,0,0,0,1270,1272,1,0,0,0,1271,1273,3,18,9,0,1272,1271,
        1,0,0,0,1272,1273,1,0,0,0,1273,17,1,0,0,0,1274,1275,5,327,0,0,1275,
        1276,5,2,0,0,1276,1277,3,256,128,0,1277,1278,5,3,0,0,1278,1282,1,
        0,0,0,1279,1280,5,327,0,0,1280,1282,3,256,128,0,1281,1274,1,0,0,
        0,1281,1279,1,0,0,0,1282,19,1,0,0,0,1283,1286,3,380,190,0,1284,1286,
        3,244,122,0,1285,1283,1,0,0,0,1285,1284,1,0,0,0,1286,21,1,0,0,0,
        1287,1290,3,286,143,0,1288,1290,3,244,122,0,1289,1287,1,0,0,0,1289,
        1288,1,0,0,0,1290,1293,1,0,0,0,1291,1292,5,21,0,0,1292,1294,3,364,
        182,0,1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,23,1,0,0,0,1295,1300,
        3,22,11,0,1296,1297,5,4,0,0,1297,1299,3,22,11,0,1298,1296,1,0,0,
        0,1299,1302,1,0,0,0,1300,1298,1,0,0,0,1300,1301,1,0,0,0,1301,25,
        1,0,0,0,1302,1300,1,0,0,0,1303,1306,3,380,190,0,1304,1306,5,169,
        0,0,1305,1303,1,0,0,0,1305,1304,1,0,0,0,1306,27,1,0,0,0,1307,1308,
        3,372,186,0,1308,29,1,0,0,0,1309,1310,3,374,187,0,1310,31,1,0,0,
        0,1311,1312,5,61,0,0,1312,1480,5,248,0,0,1313,1314,5,97,0,0,1314,
        1480,5,248,0,0,1315,1317,5,129,0,0,1316,1318,5,248,0,0,1317,1316,
        1,0,0,0,1317,1318,1,0,0,0,1318,1480,1,0,0,0,1319,1321,5,245,0,0,
        1320,1322,5,248,0,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,1480,
        1,0,0,0,1323,1324,5,268,0,0,1324,1480,5,129,0,0,1325,1326,5,268,
        0,0,1326,1328,5,248,0,0,1327,1329,5,129,0,0,1328,1327,1,0,0,0,1328,
        1329,1,0,0,0,1329,1480,1,0,0,0,1330,1331,5,268,0,0,1331,1480,5,225,
        0,0,1332,1333,5,268,0,0,1333,1480,5,249,0,0,1334,1335,5,268,0,0,
        1335,1336,5,64,0,0,1336,1480,5,249,0,0,1337,1338,5,107,0,0,1338,
        1480,5,287,0,0,1339,1340,5,140,0,0,1340,1480,5,287,0,0,1341,1342,
        5,268,0,0,1342,1480,5,56,0,0,1343,1344,5,268,0,0,1344,1345,5,61,
        0,0,1345,1480,5,287,0,0,1346,1347,5,268,0,0,1347,1480,5,308,0,0,
        1348,1349,5,268,0,0,1349,1480,5,144,0,0,1350,1351,5,268,0,0,1351,
        1480,5,172,0,0,1352,1353,5,61,0,0,1353,1480,5,143,0,0,1354,1355,
        5,97,0,0,1355,1480,5,143,0,0,1356,1357,5,12,0,0,1357,1480,5,143,
        0,0,1358,1359,5,171,0,0,1359,1480,5,287,0,0,1360,1361,5,171,0,0,
        1361,1480,5,74,0,0,1362,1363,5,321,0,0,1363,1480,5,287,0,0,1364,
        1365,5,321,0,0,1365,1480,5,74,0,0,1366,1367,5,61,0,0,1367,1368,5,
        292,0,0,1368,1480,5,175,0,0,1369,1370,5,97,0,0,1370,1371,5,292,0,
        0,1371,1480,5,175,0,0,1372,1373,5,12,0,0,1373,1374,5,287,0,0,1374,
        1375,3,250,125,0,1375,1376,5,195,0,0,1376,1377,5,46,0,0,1377,1480,
        1,0,0,0,1378,1379,5,12,0,0,1379,1380,5,287,0,0,1380,1381,3,250,125,
        0,1381,1382,5,46,0,0,1382,1383,5,32,0,0,1383,1480,1,0,0,0,1384,1385,
        5,12,0,0,1385,1386,5,287,0,0,1386,1387,3,250,125,0,1387,1388,5,195,
        0,0,1388,1389,5,274,0,0,1389,1480,1,0,0,0,1390,1391,5,12,0,0,1391,
        1392,5,287,0,0,1392,1393,3,250,125,0,1393,1394,5,270,0,0,1394,1395,
        5,32,0,0,1395,1480,1,0,0,0,1396,1397,5,12,0,0,1397,1398,5,287,0,
        0,1398,1399,3,250,125,0,1399,1400,5,195,0,0,1400,1401,5,270,0,0,
        1401,1480,1,0,0,0,1402,1403,5,12,0,0,1403,1404,5,287,0,0,1404,1405,
        3,250,125,0,1405,1406,5,195,0,0,1406,1407,5,278,0,0,1407,1408,5,
        21,0,0,1408,1409,5,91,0,0,1409,1480,1,0,0,0,1410,1411,5,12,0,0,1411,
        1412,5,287,0,0,1412,1413,3,250,125,0,1413,1414,5,264,0,0,1414,1415,
        5,270,0,0,1415,1416,5,170,0,0,1416,1480,1,0,0,0,1417,1418,5,12,0,
        0,1418,1419,5,287,0,0,1419,1420,3,250,125,0,1420,1421,5,103,0,0,
        1421,1422,5,214,0,0,1422,1480,1,0,0,0,1423,1424,5,12,0,0,1424,1425,
        5,287,0,0,1425,1426,3,250,125,0,1426,1427,5,19,0,0,1427,1428,5,214,
        0,0,1428,1480,1,0,0,0,1429,1430,5,12,0,0,1430,1431,5,287,0,0,1431,
        1432,3,250,125,0,1432,1433,5,315,0,0,1433,1434,5,214,0,0,1434,1480,
        1,0,0,0,1435,1436,5,12,0,0,1436,1437,5,287,0,0,1437,1438,3,250,125,
        0,1438,1439,5,305,0,0,1439,1480,1,0,0,0,1440,1441,5,12,0,0,1441,
        1442,5,287,0,0,1442,1444,3,250,125,0,1443,1445,3,54,27,0,1444,1443,
        1,0,0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,1446,1447,5,55,0,0,1447,
        1480,1,0,0,0,1448,1449,5,12,0,0,1449,1450,5,287,0,0,1450,1452,3,
        250,125,0,1451,1453,3,54,27,0,1452,1451,1,0,0,0,1452,1453,1,0,0,
        0,1453,1454,1,0,0,0,1454,1455,5,58,0,0,1455,1480,1,0,0,0,1456,1457,
        5,12,0,0,1457,1458,5,287,0,0,1458,1460,3,250,125,0,1459,1461,3,54,
        27,0,1460,1459,1,0,0,0,1460,1461,1,0,0,0,1461,1462,1,0,0,0,1462,
        1463,5,264,0,0,1463,1464,5,115,0,0,1464,1480,1,0,0,0,1465,1466,5,
        12,0,0,1466,1467,5,287,0,0,1467,1469,3,250,125,0,1468,1470,3,54,
        27,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1471,1,0,0,0,1471,
        1472,5,241,0,0,1472,1473,5,52,0,0,1473,1480,1,0,0,0,1474,1475,5,
        276,0,0,1475,1480,5,307,0,0,1476,1480,5,54,0,0,1477,1480,5,250,0,
        0,1478,1480,5,90,0,0,1479,1311,1,0,0,0,1479,1313,1,0,0,0,1479,1315,
        1,0,0,0,1479,1319,1,0,0,0,1479,1323,1,0,0,0,1479,1325,1,0,0,0,1479,
        1330,1,0,0,0,1479,1332,1,0,0,0,1479,1334,1,0,0,0,1479,1337,1,0,0,
        0,1479,1339,1,0,0,0,1479,1341,1,0,0,0,1479,1343,1,0,0,0,1479,1346,
        1,0,0,0,1479,1348,1,0,0,0,1479,1350,1,0,0,0,1479,1352,1,0,0,0,1479,
        1354,1,0,0,0,1479,1356,1,0,0,0,1479,1358,1,0,0,0,1479,1360,1,0,0,
        0,1479,1362,1,0,0,0,1479,1364,1,0,0,0,1479,1366,1,0,0,0,1479,1369,
        1,0,0,0,1479,1372,1,0,0,0,1479,1378,1,0,0,0,1479,1384,1,0,0,0,1479,
        1390,1,0,0,0,1479,1396,1,0,0,0,1479,1402,1,0,0,0,1479,1410,1,0,0,
        0,1479,1417,1,0,0,0,1479,1423,1,0,0,0,1479,1429,1,0,0,0,1479,1435,
        1,0,0,0,1479,1440,1,0,0,0,1479,1448,1,0,0,0,1479,1456,1,0,0,0,1479,
        1465,1,0,0,0,1479,1474,1,0,0,0,1479,1476,1,0,0,0,1479,1477,1,0,0,
        0,1479,1478,1,0,0,0,1480,33,1,0,0,0,1481,1483,5,61,0,0,1482,1484,
        5,292,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1486,1,0,0,0,
        1485,1487,5,109,0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,
        1,0,0,0,1488,1492,5,287,0,0,1489,1490,5,137,0,0,1490,1491,5,195,
        0,0,1491,1493,5,105,0,0,1492,1489,1,0,0,0,1492,1493,1,0,0,0,1493,
        1494,1,0,0,0,1494,1495,3,100,50,0,1495,35,1,0,0,0,1496,1497,5,61,
        0,0,1497,1499,5,205,0,0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,
        1500,1,0,0,0,1500,1501,5,241,0,0,1501,1502,5,287,0,0,1502,1503,3,
        100,50,0,1503,37,1,0,0,0,1504,1505,5,45,0,0,1505,1506,5,32,0,0,1506,
        1507,5,2,0,0,1507,1508,3,242,121,0,1508,1509,5,3,0,0,1509,39,1,0,
        0,0,1510,1511,5,46,0,0,1511,1512,5,32,0,0,1512,1516,3,210,105,0,
        1513,1514,5,274,0,0,1514,1515,5,32,0,0,1515,1517,3,214,107,0,1516,
        1513,1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,1519,5,153,
        0,0,1519,1520,5,377,0,0,1520,1521,5,31,0,0,1521,41,1,0,0,0,1522,
        1523,5,270,0,0,1523,1524,5,32,0,0,1524,1525,3,210,105,0,1525,1528,
        5,201,0,0,1526,1529,3,86,43,0,1527,1529,3,88,44,0,1528,1526,1,0,
        0,0,1528,1527,1,0,0,0,1529,1533,1,0,0,0,1530,1531,5,278,0,0,1531,
        1532,5,21,0,0,1532,1534,5,91,0,0,1533,1530,1,0,0,0,1533,1534,1,0,
        0,0,1534,43,1,0,0,0,1535,1536,5,170,0,0,1536,1537,3,380,190,0,1537,
        45,1,0,0,0,1538,1539,5,53,0,0,1539,1540,3,380,190,0,1540,47,1,0,
        0,0,1541,1543,3,66,33,0,1542,1541,1,0,0,0,1542,1543,1,0,0,0,1543,
        1544,1,0,0,0,1544,1545,3,106,53,0,1545,1546,3,102,51,0,1546,49,1,
        0,0,0,1547,1548,5,148,0,0,1548,1550,5,213,0,0,1549,1551,5,287,0,
        0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,1552,1,0,0,0,1552,1559,
        3,100,50,0,1553,1557,3,54,27,0,1554,1555,5,137,0,0,1555,1556,5,195,
        0,0,1556,1558,5,105,0,0,1557,1554,1,0,0,0,1557,1558,1,0,0,0,1558,
        1560,1,0,0,0,1559,1553,1,0,0,0,1559,1560,1,0,0,0,1560,1564,1,0,0,
        0,1561,1562,5,32,0,0,1562,1565,5,188,0,0,1563,1565,3,210,105,0,1564,
        1561,1,0,0,0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,1622,1,0,0,
        0,1566,1567,5,148,0,0,1567,1569,5,153,0,0,1568,1570,5,287,0,0,1569,
        1568,1,0,0,0,1569,1570,1,0,0,0,1570,1571,1,0,0,0,1571,1573,3,100,
        50,0,1572,1574,3,54,27,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,
        1578,1,0,0,0,1575,1576,5,137,0,0,1576,1577,5,195,0,0,1577,1579,5,
        105,0,0,1578,1575,1,0,0,0,1578,1579,1,0,0,0,1579,1583,1,0,0,0,1580,
        1581,5,32,0,0,1581,1584,5,188,0,0,1582,1584,3,210,105,0,1583,1580,
        1,0,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1622,1,0,0,0,1585,
        1586,5,148,0,0,1586,1588,5,153,0,0,1587,1589,5,287,0,0,1588,1587,
        1,0,0,0,1588,1589,1,0,0,0,1589,1590,1,0,0,0,1590,1591,3,100,50,0,
        1591,1592,5,241,0,0,1592,1593,3,142,71,0,1593,1622,1,0,0,0,1594,
        1595,5,148,0,0,1595,1597,5,213,0,0,1596,1598,5,169,0,0,1597,1596,
        1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1600,5,92,0,0,1600,
        1602,3,380,190,0,1601,1603,3,240,120,0,1602,1601,1,0,0,0,1602,1603,
        1,0,0,0,1603,1605,1,0,0,0,1604,1606,3,90,45,0,1605,1604,1,0,0,0,
        1605,1606,1,0,0,0,1606,1622,1,0,0,0,1607,1608,5,148,0,0,1608,1610,
        5,213,0,0,1609,1611,5,169,0,0,1610,1609,1,0,0,0,1610,1611,1,0,0,
        0,1611,1612,1,0,0,0,1612,1614,5,92,0,0,1613,1615,3,380,190,0,1614,
        1613,1,0,0,0,1614,1615,1,0,0,0,1615,1616,1,0,0,0,1616,1619,3,70,
        35,0,1617,1618,5,204,0,0,1618,1620,3,74,37,0,1619,1617,1,0,0,0,1619,
        1620,1,0,0,0,1620,1622,1,0,0,0,1621,1547,1,0,0,0,1621,1566,1,0,0,
        0,1621,1585,1,0,0,0,1621,1594,1,0,0,0,1621,1607,1,0,0,0,1622,51,
        1,0,0,0,1623,1625,3,54,27,0,1624,1626,3,44,22,0,1625,1624,1,0,0,
        0,1625,1626,1,0,0,0,1626,53,1,0,0,0,1627,1628,5,214,0,0,1628,1629,
        5,2,0,0,1629,1634,3,56,28,0,1630,1631,5,4,0,0,1631,1633,3,56,28,
        0,1632,1630,1,0,0,0,1633,1636,1,0,0,0,1634,1632,1,0,0,0,1634,1635,
        1,0,0,0,1635,1637,1,0,0,0,1636,1634,1,0,0,0,1637,1638,5,3,0,0,1638,
        55,1,0,0,0,1639,1642,3,368,184,0,1640,1641,5,347,0,0,1641,1643,3,
        286,143,0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,1649,1,0,0,0,
        1644,1645,3,368,184,0,1645,1646,5,347,0,0,1646,1647,5,84,0,0,1647,
        1649,1,0,0,0,1648,1639,1,0,0,0,1648,1644,1,0,0,0,1649,57,1,0,0,0,
        1650,1651,7,12,0,0,1651,59,1,0,0,0,1652,1653,7,13,0,0,1653,61,1,
        0,0,0,1654,1661,3,100,50,0,1655,1661,3,380,190,0,1656,1661,3,288,
        144,0,1657,1661,3,290,145,0,1658,1661,3,292,146,0,1659,1661,5,8,
        0,0,1660,1654,1,0,0,0,1660,1655,1,0,0,0,1660,1656,1,0,0,0,1660,1657,
        1,0,0,0,1660,1658,1,0,0,0,1660,1659,1,0,0,0,1661,63,1,0,0,0,1662,
        1667,3,364,182,0,1663,1664,5,5,0,0,1664,1666,3,364,182,0,1665,1663,
        1,0,0,0,1666,1669,1,0,0,0,1667,1665,1,0,0,0,1667,1668,1,0,0,0,1668,
        65,1,0,0,0,1669,1667,1,0,0,0,1670,1671,5,342,0,0,1671,1676,3,68,
        34,0,1672,1673,5,4,0,0,1673,1675,3,68,34,0,1674,1672,1,0,0,0,1675,
        1678,1,0,0,0,1676,1674,1,0,0,0,1676,1677,1,0,0,0,1677,67,1,0,0,0,
        1678,1676,1,0,0,0,1679,1681,3,364,182,0,1680,1682,3,210,105,0,1681,
        1680,1,0,0,0,1681,1682,1,0,0,0,1682,1684,1,0,0,0,1683,1685,5,21,
        0,0,1684,1683,1,0,0,0,1684,1685,1,0,0,0,1685,1686,1,0,0,0,1686,1687,
        5,2,0,0,1687,1688,3,48,24,0,1688,1689,5,3,0,0,1689,69,1,0,0,0,1690,
        1691,5,327,0,0,1691,1692,3,244,122,0,1692,71,1,0,0,0,1693,1694,5,
        204,0,0,1694,1708,3,82,41,0,1695,1696,5,215,0,0,1696,1697,5,32,0,
        0,1697,1708,3,258,129,0,1698,1708,3,42,21,0,1699,1708,3,38,19,0,
        1700,1708,3,40,20,0,1701,1708,3,240,120,0,1702,1708,3,90,45,0,1703,
        1708,3,44,22,0,1704,1708,3,46,23,0,1705,1706,5,291,0,0,1706,1708,
        3,74,37,0,1707,1693,1,0,0,0,1707,1695,1,0,0,0,1707,1698,1,0,0,0,
        1707,1699,1,0,0,0,1707,1700,1,0,0,0,1707,1701,1,0,0,0,1707,1702,
        1,0,0,0,1707,1703,1,0,0,0,1707,1704,1,0,0,0,1707,1705,1,0,0,0,1708,
        1711,1,0,0,0,1709,1707,1,0,0,0,1709,1710,1,0,0,0,1710,73,1,0,0,0,
        1711,1709,1,0,0,0,1712,1713,5,2,0,0,1713,1718,3,76,38,0,1714,1715,
        5,4,0,0,1715,1717,3,76,38,0,1716,1714,1,0,0,0,1717,1720,1,0,0,0,
        1718,1716,1,0,0,0,1718,1719,1,0,0,0,1719,1721,1,0,0,0,1720,1718,
        1,0,0,0,1721,1722,5,3,0,0,1722,75,1,0,0,0,1723,1728,3,78,39,0,1724,
        1726,5,347,0,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,
        0,0,1727,1729,3,80,40,0,1728,1725,1,0,0,0,1728,1729,1,0,0,0,1729,
        77,1,0,0,0,1730,1735,3,364,182,0,1731,1732,5,5,0,0,1732,1734,3,364,
        182,0,1733,1731,1,0,0,0,1734,1737,1,0,0,0,1735,1733,1,0,0,0,1735,
        1736,1,0,0,0,1736,1740,1,0,0,0,1737,1735,1,0,0,0,1738,1740,3,380,
        190,0,1739,1730,1,0,0,0,1739,1738,1,0,0,0,1740,79,1,0,0,0,1741,1746,
        5,377,0,0,1742,1746,5,379,0,0,1743,1746,3,294,147,0,1744,1746,3,
        380,190,0,1745,1741,1,0,0,0,1745,1742,1,0,0,0,1745,1743,1,0,0,0,
        1745,1744,1,0,0,0,1746,81,1,0,0,0,1747,1748,5,2,0,0,1748,1753,3,
        84,42,0,1749,1750,5,4,0,0,1750,1752,3,84,42,0,1751,1749,1,0,0,0,
        1752,1755,1,0,0,0,1753,1751,1,0,0,0,1753,1754,1,0,0,0,1754,1756,
        1,0,0,0,1755,1753,1,0,0,0,1756,1757,5,3,0,0,1757,83,1,0,0,0,1758,
        1763,3,78,39,0,1759,1761,5,347,0,0,1760,1759,1,0,0,0,1760,1761,1,
        0,0,0,1761,1762,1,0,0,0,1762,1764,3,266,133,0,1763,1760,1,0,0,0,
        1763,1764,1,0,0,0,1764,85,1,0,0,0,1765,1766,5,2,0,0,1766,1771,3,
        286,143,0,1767,1768,5,4,0,0,1768,1770,3,286,143,0,1769,1767,1,0,
        0,0,1770,1773,1,0,0,0,1771,1769,1,0,0,0,1771,1772,1,0,0,0,1772,1774,
        1,0,0,0,1773,1771,1,0,0,0,1774,1775,5,3,0,0,1775,87,1,0,0,0,1776,
        1777,5,2,0,0,1777,1782,3,86,43,0,1778,1779,5,4,0,0,1779,1781,3,86,
        43,0,1780,1778,1,0,0,0,1781,1784,1,0,0,0,1782,1780,1,0,0,0,1782,
        1783,1,0,0,0,1783,1785,1,0,0,0,1784,1782,1,0,0,0,1785,1786,5,3,0,
        0,1786,89,1,0,0,0,1787,1788,5,278,0,0,1788,1789,5,21,0,0,1789,1794,
        3,92,46,0,1790,1791,5,278,0,0,1791,1792,5,32,0,0,1792,1794,3,94,
        47,0,1793,1787,1,0,0,0,1793,1790,1,0,0,0,1794,91,1,0,0,0,1795,1796,
        5,147,0,0,1796,1797,3,380,190,0,1797,1798,5,209,0,0,1798,1799,3,
        380,190,0,1799,1802,1,0,0,0,1800,1802,3,368,184,0,1801,1795,1,0,
        0,0,1801,1800,1,0,0,0,1802,93,1,0,0,0,1803,1807,3,380,190,0,1804,
        1805,5,342,0,0,1805,1806,5,262,0,0,1806,1808,3,74,37,0,1807,1804,
        1,0,0,0,1807,1808,1,0,0,0,1808,95,1,0,0,0,1809,1810,3,368,184,0,
        1810,1811,3,380,190,0,1811,97,1,0,0,0,1812,1813,3,50,25,0,1813,1814,
        3,48,24,0,1814,1869,1,0,0,0,1815,1817,3,150,75,0,1816,1818,3,104,
        52,0,1817,1816,1,0,0,0,1818,1819,1,0,0,0,1819,1817,1,0,0,0,1819,
        1820,1,0,0,0,1820,1869,1,0,0,0,1821,1822,5,86,0,0,1822,1823,5,123,
        0,0,1823,1824,3,100,50,0,1824,1826,3,238,119,0,1825,1827,3,142,71,
        0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1869,1,0,0,0,1828,1829,
        5,324,0,0,1829,1830,3,100,50,0,1830,1831,3,238,119,0,1831,1833,3,
        122,61,0,1832,1834,3,142,71,0,1833,1832,1,0,0,0,1833,1834,1,0,0,
        0,1834,1869,1,0,0,0,1835,1836,5,178,0,0,1836,1837,5,153,0,0,1837,
        1838,3,100,50,0,1838,1839,3,238,119,0,1839,1845,5,327,0,0,1840,1846,
        3,100,50,0,1841,1842,5,2,0,0,1842,1843,3,48,24,0,1843,1844,5,3,0,
        0,1844,1846,1,0,0,0,1845,1840,1,0,0,0,1845,1841,1,0,0,0,1846,1847,
        1,0,0,0,1847,1848,3,238,119,0,1848,1849,5,201,0,0,1849,1853,3,274,
        137,0,1850,1852,3,124,62,0,1851,1850,1,0,0,0,1852,1855,1,0,0,0,1853,
        1851,1,0,0,0,1853,1854,1,0,0,0,1854,1859,1,0,0,0,1855,1853,1,0,0,
        0,1856,1858,3,126,63,0,1857,1856,1,0,0,0,1858,1861,1,0,0,0,1859,
        1857,1,0,0,0,1859,1860,1,0,0,0,1860,1865,1,0,0,0,1861,1859,1,0,0,
        0,1862,1864,3,128,64,0,1863,1862,1,0,0,0,1864,1867,1,0,0,0,1865,
        1863,1,0,0,0,1865,1866,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,
        0,1868,1812,1,0,0,0,1868,1815,1,0,0,0,1868,1821,1,0,0,0,1868,1828,
        1,0,0,0,1868,1835,1,0,0,0,1869,99,1,0,0,0,1870,1871,5,136,0,0,1871,
        1872,5,2,0,0,1872,1873,3,266,133,0,1873,1874,5,3,0,0,1874,1877,1,
        0,0,0,1875,1877,3,244,122,0,1876,1870,1,0,0,0,1876,1875,1,0,0,0,
        1877,101,1,0,0,0,1878,1879,5,206,0,0,1879,1880,5,32,0,0,1880,1885,
        3,110,55,0,1881,1882,5,4,0,0,1882,1884,3,110,55,0,1883,1881,1,0,
        0,0,1884,1887,1,0,0,0,1885,1883,1,0,0,0,1885,1886,1,0,0,0,1886,1889,
        1,0,0,0,1887,1885,1,0,0,0,1888,1878,1,0,0,0,1888,1889,1,0,0,0,1889,
        1900,1,0,0,0,1890,1891,5,45,0,0,1891,1892,5,32,0,0,1892,1897,3,266,
        133,0,1893,1894,5,4,0,0,1894,1896,3,266,133,0,1895,1893,1,0,0,0,
        1896,1899,1,0,0,0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1901,
        1,0,0,0,1899,1897,1,0,0,0,1900,1890,1,0,0,0,1900,1901,1,0,0,0,1901,
        1912,1,0,0,0,1902,1903,5,94,0,0,1903,1904,5,32,0,0,1904,1909,3,266,
        133,0,1905,1906,5,4,0,0,1906,1908,3,266,133,0,1907,1905,1,0,0,0,
        1908,1911,1,0,0,0,1909,1907,1,0,0,0,1909,1910,1,0,0,0,1910,1913,
        1,0,0,0,1911,1909,1,0,0,0,1912,1902,1,0,0,0,1912,1913,1,0,0,0,1913,
        1924,1,0,0,0,1914,1915,5,273,0,0,1915,1916,5,32,0,0,1916,1921,3,
        110,55,0,1917,1918,5,4,0,0,1918,1920,3,110,55,0,1919,1917,1,0,0,
        0,1920,1923,1,0,0,0,1921,1919,1,0,0,0,1921,1922,1,0,0,0,1922,1925,
        1,0,0,0,1923,1921,1,0,0,0,1924,1914,1,0,0,0,1924,1925,1,0,0,0,1925,
        1927,1,0,0,0,1926,1928,3,348,174,0,1927,1926,1,0,0,0,1927,1928,1,
        0,0,0,1928,1934,1,0,0,0,1929,1932,5,165,0,0,1930,1933,5,11,0,0,1931,
        1933,3,266,133,0,1932,1930,1,0,0,0,1932,1931,1,0,0,0,1933,1935,1,
        0,0,0,1934,1929,1,0,0,0,1934,1935,1,0,0,0,1935,1938,1,0,0,0,1936,
        1937,5,200,0,0,1937,1939,3,266,133,0,1938,1936,1,0,0,0,1938,1939,
        1,0,0,0,1939,103,1,0,0,0,1940,1941,3,50,25,0,1941,1942,3,114,57,
        0,1942,105,1,0,0,0,1943,1944,6,53,-1,0,1944,1945,3,108,54,0,1945,
        1969,1,0,0,0,1946,1947,10,3,0,0,1947,1948,4,53,1,0,1948,1950,7,14,
        0,0,1949,1951,3,194,97,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,
        1952,1,0,0,0,1952,1968,3,106,53,4,1953,1954,10,2,0,0,1954,1955,4,
        53,3,0,1955,1957,5,149,0,0,1956,1958,3,194,97,0,1957,1956,1,0,0,
        0,1957,1958,1,0,0,0,1958,1959,1,0,0,0,1959,1968,3,106,53,3,1960,
        1961,10,1,0,0,1961,1962,4,53,5,0,1962,1964,7,15,0,0,1963,1965,3,
        194,97,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1966,1,0,0,0,1966,
        1968,3,106,53,2,1967,1946,1,0,0,0,1967,1953,1,0,0,0,1967,1960,1,
        0,0,0,1968,1971,1,0,0,0,1969,1967,1,0,0,0,1969,1970,1,0,0,0,1970,
        107,1,0,0,0,1971,1969,1,0,0,0,1972,1982,3,116,58,0,1973,1982,3,112,
        56,0,1974,1975,5,287,0,0,1975,1982,3,100,50,0,1976,1982,3,224,112,
        0,1977,1978,5,2,0,0,1978,1979,3,48,24,0,1979,1980,5,3,0,0,1980,1982,
        1,0,0,0,1981,1972,1,0,0,0,1981,1973,1,0,0,0,1981,1974,1,0,0,0,1981,
        1976,1,0,0,0,1981,1977,1,0,0,0,1982,109,1,0,0,0,1983,1985,3,266,
        133,0,1984,1986,7,16,0,0,1985,1984,1,0,0,0,1985,1986,1,0,0,0,1986,
        1989,1,0,0,0,1987,1988,5,197,0,0,1988,1990,7,17,0,0,1989,1987,1,
        0,0,0,1989,1990,1,0,0,0,1990,111,1,0,0,0,1991,1993,3,150,75,0,1992,
        1994,3,114,57,0,1993,1992,1,0,0,0,1994,1995,1,0,0,0,1995,1993,1,
        0,0,0,1995,1996,1,0,0,0,1996,113,1,0,0,0,1997,1999,3,118,59,0,1998,
        2000,3,142,71,0,1999,1998,1,0,0,0,1999,2000,1,0,0,0,2000,2001,1,
        0,0,0,2001,2002,3,102,51,0,2002,2025,1,0,0,0,2003,2007,3,120,60,
        0,2004,2006,3,192,96,0,2005,2004,1,0,0,0,2006,2009,1,0,0,0,2007,
        2005,1,0,0,0,2007,2008,1,0,0,0,2008,2011,1,0,0,0,2009,2007,1,0,0,
        0,2010,2012,3,142,71,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,
        2014,1,0,0,0,2013,2015,3,154,77,0,2014,2013,1,0,0,0,2014,2015,1,
        0,0,0,2015,2017,1,0,0,0,2016,2018,3,144,72,0,2017,2016,1,0,0,0,2017,
        2018,1,0,0,0,2018,2020,1,0,0,0,2019,2021,3,348,174,0,2020,2019,1,
        0,0,0,2020,2021,1,0,0,0,2021,2022,1,0,0,0,2022,2023,3,102,51,0,2023,
        2025,1,0,0,0,2024,1997,1,0,0,0,2024,2003,1,0,0,0,2025,115,1,0,0,
        0,2026,2028,3,118,59,0,2027,2029,3,150,75,0,2028,2027,1,0,0,0,2028,
        2029,1,0,0,0,2029,2033,1,0,0,0,2030,2032,3,192,96,0,2031,2030,1,
        0,0,0,2032,2035,1,0,0,0,2033,2031,1,0,0,0,2033,2034,1,0,0,0,2034,
        2037,1,0,0,0,2035,2033,1,0,0,0,2036,2038,3,142,71,0,2037,2036,1,
        0,0,0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,2041,3,154,77,0,2040,
        2039,1,0,0,0,2040,2041,1,0,0,0,2041,2043,1,0,0,0,2042,2044,3,144,
        72,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2046,1,0,0,0,2045,
        2047,3,348,174,0,2046,2045,1,0,0,0,2046,2047,1,0,0,0,2047,2071,1,
        0,0,0,2048,2050,3,120,60,0,2049,2051,3,150,75,0,2050,2049,1,0,0,
        0,2050,2051,1,0,0,0,2051,2055,1,0,0,0,2052,2054,3,192,96,0,2053,
        2052,1,0,0,0,2054,2057,1,0,0,0,2055,2053,1,0,0,0,2055,2056,1,0,0,
        0,2056,2059,1,0,0,0,2057,2055,1,0,0,0,2058,2060,3,142,71,0,2059,
        2058,1,0,0,0,2059,2060,1,0,0,0,2060,2062,1,0,0,0,2061,2063,3,154,
        77,0,2062,2061,1,0,0,0,2062,2063,1,0,0,0,2063,2065,1,0,0,0,2064,
        2066,3,144,72,0,2065,2064,1,0,0,0,2065,2066,1,0,0,0,2066,2068,1,
        0,0,0,2067,2069,3,348,174,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,
        2069,2071,1,0,0,0,2070,2026,1,0,0,0,2070,2048,1,0,0,0,2071,117,1,
        0,0,0,2072,2073,5,258,0,0,2073,2074,5,309,0,0,2074,2076,5,2,0,0,
        2075,2077,3,194,97,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2078,
        1,0,0,0,2078,2079,3,272,136,0,2079,2080,5,3,0,0,2080,2092,1,0,0,
        0,2081,2083,5,176,0,0,2082,2084,3,194,97,0,2083,2082,1,0,0,0,2083,
        2084,1,0,0,0,2084,2085,1,0,0,0,2085,2092,3,272,136,0,2086,2088,5,
        235,0,0,2087,2089,3,194,97,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,
        2089,2090,1,0,0,0,2090,2092,3,272,136,0,2091,2072,1,0,0,0,2091,2081,
        1,0,0,0,2091,2086,1,0,0,0,2092,2094,1,0,0,0,2093,2095,3,240,120,
        0,2094,2093,1,0,0,0,2094,2095,1,0,0,0,2095,2098,1,0,0,0,2096,2097,
        5,233,0,0,2097,2099,3,380,190,0,2098,2096,1,0,0,0,2098,2099,1,0,
        0,0,2099,2100,1,0,0,0,2100,2101,5,327,0,0,2101,2114,3,380,190,0,
        2102,2112,5,21,0,0,2103,2113,3,212,106,0,2104,2113,3,330,165,0,2105,
        2108,5,2,0,0,2106,2109,3,212,106,0,2107,2109,3,330,165,0,2108,2106,
        1,0,0,0,2108,2107,1,0,0,0,2109,2110,1,0,0,0,2110,2111,5,3,0,0,2111,
        2113,1,0,0,0,2112,2103,1,0,0,0,2112,2104,1,0,0,0,2112,2105,1,0,0,
        0,2113,2115,1,0,0,0,2114,2102,1,0,0,0,2114,2115,1,0,0,0,2115,2117,
        1,0,0,0,2116,2118,3,240,120,0,2117,2116,1,0,0,0,2117,2118,1,0,0,
        0,2118,2121,1,0,0,0,2119,2120,5,232,0,0,2120,2122,3,380,190,0,2121,
        2119,1,0,0,0,2121,2122,1,0,0,0,2122,119,1,0,0,0,2123,2127,5,258,
        0,0,2124,2126,3,146,73,0,2125,2124,1,0,0,0,2126,2129,1,0,0,0,2127,
        2125,1,0,0,0,2127,2128,1,0,0,0,2128,2131,1,0,0,0,2129,2127,1,0,0,
        0,2130,2132,3,194,97,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,2132,
        2133,1,0,0,0,2133,2134,3,256,128,0,2134,121,1,0,0,0,2135,2136,5,
        264,0,0,2136,2137,3,138,69,0,2137,123,1,0,0,0,2138,2139,5,339,0,
        0,2139,2142,5,177,0,0,2140,2141,5,15,0,0,2141,2143,3,274,137,0,2142,
        2140,1,0,0,0,2142,2143,1,0,0,0,2143,2144,1,0,0,0,2144,2145,5,294,
        0,0,2145,2146,3,130,65,0,2146,125,1,0,0,0,2147,2148,5,339,0,0,2148,
        2149,5,195,0,0,2149,2152,5,177,0,0,2150,2151,5,32,0,0,2151,2153,
        5,290,0,0,2152,2150,1,0,0,0,2152,2153,1,0,0,0,2153,2156,1,0,0,0,
        2154,2155,5,15,0,0,2155,2157,3,274,137,0,2156,2154,1,0,0,0,2156,
        2157,1,0,0,0,2157,2158,1,0,0,0,2158,2159,5,294,0,0,2159,2160,3,132,
        66,0,2160,127,1,0,0,0,2161,2162,5,339,0,0,2162,2163,5,195,0,0,2163,
        2164,5,177,0,0,2164,2165,5,32,0,0,2165,2168,5,275,0,0,2166,2167,
        5,15,0,0,2167,2169,3,274,137,0,2168,2166,1,0,0,0,2168,2169,1,0,0,
        0,2169,2170,1,0,0,0,2170,2171,5,294,0,0,2171,2172,3,134,67,0,2172,
        129,1,0,0,0,2173,2181,5,86,0,0,2174,2175,5,324,0,0,2175,2176,5,264,
        0,0,2176,2181,5,357,0,0,2177,2178,5,324,0,0,2178,2179,5,264,0,0,
        2179,2181,3,138,69,0,2180,2173,1,0,0,0,2180,2174,1,0,0,0,2180,2177,
        1,0,0,0,2181,131,1,0,0,0,2182,2183,5,148,0,0,2183,2201,5,357,0,0,
        2184,2185,5,148,0,0,2185,2186,5,2,0,0,2186,2187,3,242,121,0,2187,
        2188,5,3,0,0,2188,2189,5,328,0,0,2189,2190,5,2,0,0,2190,2195,3,266,
        133,0,2191,2192,5,4,0,0,2192,2194,3,266,133,0,2193,2191,1,0,0,0,
        2194,2197,1,0,0,0,2195,2193,1,0,0,0,2195,2196,1,0,0,0,2196,2198,
        1,0,0,0,2197,2195,1,0,0,0,2198,2199,5,3,0,0,2199,2201,1,0,0,0,2200,
        2182,1,0,0,0,2200,2184,1,0,0,0,2201,133,1,0,0,0,2202,2207,5,86,0,
        0,2203,2204,5,324,0,0,2204,2205,5,264,0,0,2205,2207,3,138,69,0,2206,
        2202,1,0,0,0,2206,2203,1,0,0,0,2207,135,1,0,0,0,2208,2209,5,102,
        0,0,2209,2210,5,2,0,0,2210,2211,3,242,121,0,2211,2212,5,3,0,0,2212,
        137,1,0,0,0,2213,2218,3,140,70,0,2214,2215,5,4,0,0,2215,2217,3,140,
        70,0,2216,2214,1,0,0,0,2217,2220,1,0,0,0,2218,2216,1,0,0,0,2218,
        2219,1,0,0,0,2219,139,1,0,0,0,2220,2218,1,0,0,0,2221,2222,3,244,
        122,0,2222,2223,5,347,0,0,2223,2224,3,266,133,0,2224,141,1,0,0,0,
        2225,2226,5,340,0,0,2226,2227,3,274,137,0,2227,143,1,0,0,0,2228,
        2229,5,132,0,0,2229,2230,3,274,137,0,2230,145,1,0,0,0,2231,2232,
        5,369,0,0,2232,2239,3,148,74,0,2233,2235,5,4,0,0,2234,2233,1,0,0,
        0,2234,2235,1,0,0,0,2235,2236,1,0,0,0,2236,2238,3,148,74,0,2237,
        2234,1,0,0,0,2238,2241,1,0,0,0,2239,2237,1,0,0,0,2239,2240,1,0,0,
        0,2240,2242,1,0,0,0,2241,2239,1,0,0,0,2242,2243,5,370,0,0,2243,147,
        1,0,0,0,2244,2258,3,368,184,0,2245,2246,3,368,184,0,2246,2247,5,
        2,0,0,2247,2252,3,282,141,0,2248,2249,5,4,0,0,2249,2251,3,282,141,
        0,2250,2248,1,0,0,0,2251,2254,1,0,0,0,2252,2250,1,0,0,0,2252,2253,
        1,0,0,0,2253,2255,1,0,0,0,2254,2252,1,0,0,0,2255,2256,5,3,0,0,2256,
        2258,1,0,0,0,2257,2244,1,0,0,0,2257,2245,1,0,0,0,2258,149,1,0,0,
        0,2259,2260,5,123,0,0,2260,2265,3,196,98,0,2261,2262,5,4,0,0,2262,
        2264,3,196,98,0,2263,2261,1,0,0,0,2264,2267,1,0,0,0,2265,2263,1,
        0,0,0,2265,2266,1,0,0,0,2266,2271,1,0,0,0,2267,2265,1,0,0,0,2268,
        2270,3,192,96,0,2269,2268,1,0,0,0,2270,2273,1,0,0,0,2271,2269,1,
        0,0,0,2271,2272,1,0,0,0,2272,2275,1,0,0,0,2273,2271,1,0,0,0,2274,
        2276,3,164,82,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,2278,1,
        0,0,0,2277,2279,3,170,85,0,2278,2277,1,0,0,0,2278,2279,1,0,0,0,2279,
        151,1,0,0,0,2280,2282,5,119,0,0,2281,2280,1,0,0,0,2281,2282,1,0,
        0,0,2282,2283,1,0,0,0,2283,2284,7,18,0,0,2284,2285,5,21,0,0,2285,
        2286,5,199,0,0,2286,2295,3,384,192,0,2287,2289,5,119,0,0,2288,2287,
        1,0,0,0,2288,2289,1,0,0,0,2289,2290,1,0,0,0,2290,2291,7,19,0,0,2291,
        2292,5,21,0,0,2292,2293,5,199,0,0,2293,2295,3,278,139,0,2294,2281,
        1,0,0,0,2294,2288,1,0,0,0,2295,153,1,0,0,0,2296,2297,5,130,0,0,2297,
        2298,5,32,0,0,2298,2303,3,156,78,0,2299,2300,5,4,0,0,2300,2302,3,
        156,78,0,2301,2299,1,0,0,0,2302,2305,1,0,0,0,2303,2301,1,0,0,0,2303,
        2304,1,0,0,0,2304,2336,1,0,0,0,2305,2303,1,0,0,0,2306,2307,5,130,
        0,0,2307,2308,5,32,0,0,2308,2313,3,266,133,0,2309,2310,5,4,0,0,2310,
        2312,3,266,133,0,2311,2309,1,0,0,0,2312,2315,1,0,0,0,2313,2311,1,
        0,0,0,2313,2314,1,0,0,0,2314,2333,1,0,0,0,2315,2313,1,0,0,0,2316,
        2317,5,342,0,0,2317,2334,5,251,0,0,2318,2319,5,342,0,0,2319,2334,
        5,63,0,0,2320,2321,5,131,0,0,2321,2322,5,266,0,0,2322,2323,5,2,0,
        0,2323,2328,3,162,81,0,2324,2325,5,4,0,0,2325,2327,3,162,81,0,2326,
        2324,1,0,0,0,2327,2330,1,0,0,0,2328,2326,1,0,0,0,2328,2329,1,0,0,
        0,2329,2331,1,0,0,0,2330,2328,1,0,0,0,2331,2332,5,3,0,0,2332,2334,
        1,0,0,0,2333,2316,1,0,0,0,2333,2318,1,0,0,0,2333,2320,1,0,0,0,2333,
        2334,1,0,0,0,2334,2336,1,0,0,0,2335,2296,1,0,0,0,2335,2306,1,0,0,
        0,2336,155,1,0,0,0,2337,2340,3,158,79,0,2338,2340,3,266,133,0,2339,
        2337,1,0,0,0,2339,2338,1,0,0,0,2340,157,1,0,0,0,2341,2342,7,20,0,
        0,2342,2343,5,2,0,0,2343,2348,3,162,81,0,2344,2345,5,4,0,0,2345,
        2347,3,162,81,0,2346,2344,1,0,0,0,2347,2350,1,0,0,0,2348,2346,1,
        0,0,0,2348,2349,1,0,0,0,2349,2351,1,0,0,0,2350,2348,1,0,0,0,2351,
        2352,5,3,0,0,2352,2367,1,0,0,0,2353,2354,5,131,0,0,2354,2355,5,266,
        0,0,2355,2356,5,2,0,0,2356,2361,3,160,80,0,2357,2358,5,4,0,0,2358,
        2360,3,160,80,0,2359,2357,1,0,0,0,2360,2363,1,0,0,0,2361,2359,1,
        0,0,0,2361,2362,1,0,0,0,2362,2364,1,0,0,0,2363,2361,1,0,0,0,2364,
        2365,5,3,0,0,2365,2367,1,0,0,0,2366,2341,1,0,0,0,2366,2353,1,0,0,
        0,2367,159,1,0,0,0,2368,2371,3,158,79,0,2369,2371,3,162,81,0,2370,
        2368,1,0,0,0,2370,2369,1,0,0,0,2371,161,1,0,0,0,2372,2381,5,2,0,
        0,2373,2378,3,266,133,0,2374,2375,5,4,0,0,2375,2377,3,266,133,0,
        2376,2374,1,0,0,0,2377,2380,1,0,0,0,2378,2376,1,0,0,0,2378,2379,
        1,0,0,0,2379,2382,1,0,0,0,2380,2378,1,0,0,0,2381,2373,1,0,0,0,2381,
        2382,1,0,0,0,2382,2383,1,0,0,0,2383,2386,5,3,0,0,2384,2386,3,266,
        133,0,2385,2372,1,0,0,0,2385,2384,1,0,0,0,2386,163,1,0,0,0,2387,
        2388,5,220,0,0,2388,2389,5,2,0,0,2389,2390,3,256,128,0,2390,2391,
        5,119,0,0,2391,2392,3,166,83,0,2392,2393,5,141,0,0,2393,2394,5,2,
        0,0,2394,2399,3,168,84,0,2395,2396,5,4,0,0,2396,2398,3,168,84,0,
        2397,2395,1,0,0,0,2398,2401,1,0,0,0,2399,2397,1,0,0,0,2399,2400,
        1,0,0,0,2400,2402,1,0,0,0,2401,2399,1,0,0,0,2402,2403,5,3,0,0,2403,
        2404,5,3,0,0,2404,165,1,0,0,0,2405,2418,3,364,182,0,2406,2407,5,
        2,0,0,2407,2412,3,364,182,0,2408,2409,5,4,0,0,2409,2411,3,364,182,
        0,2410,2408,1,0,0,0,2411,2414,1,0,0,0,2412,2410,1,0,0,0,2412,2413,
        1,0,0,0,2413,2415,1,0,0,0,2414,2412,1,0,0,0,2415,2416,5,3,0,0,2416,
        2418,1,0,0,0,2417,2405,1,0,0,0,2417,2406,1,0,0,0,2418,167,1,0,0,
        0,2419,2424,3,266,133,0,2420,2422,5,21,0,0,2421,2420,1,0,0,0,2421,
        2422,1,0,0,0,2422,2423,1,0,0,0,2423,2425,3,364,182,0,2424,2421,1,
        0,0,0,2424,2425,1,0,0,0,2425,169,1,0,0,0,2426,2428,5,322,0,0,2427,
        2429,3,172,86,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2430,1,
        0,0,0,2430,2431,5,2,0,0,2431,2432,3,174,87,0,2432,2437,5,3,0,0,2433,
        2435,5,21,0,0,2434,2433,1,0,0,0,2434,2435,1,0,0,0,2435,2436,1,0,
        0,0,2436,2438,3,364,182,0,2437,2434,1,0,0,0,2437,2438,1,0,0,0,2438,
        171,1,0,0,0,2439,2440,7,21,0,0,2440,2441,5,197,0,0,2441,173,1,0,
        0,0,2442,2445,3,176,88,0,2443,2445,3,178,89,0,2444,2442,1,0,0,0,
        2444,2443,1,0,0,0,2445,175,1,0,0,0,2446,2447,3,182,91,0,2447,2448,
        5,119,0,0,2448,2449,3,184,92,0,2449,2450,5,141,0,0,2450,2451,5,2,
        0,0,2451,2456,3,186,93,0,2452,2453,5,4,0,0,2453,2455,3,186,93,0,
        2454,2452,1,0,0,0,2455,2458,1,0,0,0,2456,2454,1,0,0,0,2456,2457,
        1,0,0,0,2457,2459,1,0,0,0,2458,2456,1,0,0,0,2459,2460,5,3,0,0,2460,
        177,1,0,0,0,2461,2462,5,2,0,0,2462,2467,3,182,91,0,2463,2464,5,4,
        0,0,2464,2466,3,182,91,0,2465,2463,1,0,0,0,2466,2469,1,0,0,0,2467,
        2465,1,0,0,0,2467,2468,1,0,0,0,2468,2470,1,0,0,0,2469,2467,1,0,0,
        0,2470,2471,5,3,0,0,2471,2472,5,119,0,0,2472,2473,3,184,92,0,2473,
        2474,5,141,0,0,2474,2475,5,2,0,0,2475,2480,3,180,90,0,2476,2477,
        5,4,0,0,2477,2479,3,180,90,0,2478,2476,1,0,0,0,2479,2482,1,0,0,0,
        2480,2478,1,0,0,0,2480,2481,1,0,0,0,2481,2483,1,0,0,0,2482,2480,
        1,0,0,0,2483,2484,5,3,0,0,2484,179,1,0,0,0,2485,2486,5,2,0,0,2486,
        2491,3,188,94,0,2487,2488,5,4,0,0,2488,2490,3,188,94,0,2489,2487,
        1,0,0,0,2490,2493,1,0,0,0,2491,2489,1,0,0,0,2491,2492,1,0,0,0,2492,
        2494,1,0,0,0,2493,2491,1,0,0,0,2494,2496,5,3,0,0,2495,2497,3,190,
        95,0,2496,2495,1,0,0,0,2496,2497,1,0,0,0,2497,181,1,0,0,0,2498,2499,
        3,368,184,0,2499,183,1,0,0,0,2500,2501,3,368,184,0,2501,185,1,0,
        0,0,2502,2504,3,188,94,0,2503,2505,3,190,95,0,2504,2503,1,0,0,0,
        2504,2505,1,0,0,0,2505,187,1,0,0,0,2506,2507,3,244,122,0,2507,189,
        1,0,0,0,2508,2510,5,21,0,0,2509,2508,1,0,0,0,2509,2510,1,0,0,0,2510,
        2511,1,0,0,0,2511,2512,3,364,182,0,2512,191,1,0,0,0,2513,2514,5,
        159,0,0,2514,2516,5,334,0,0,2515,2517,5,208,0,0,2516,2515,1,0,0,
        0,2516,2517,1,0,0,0,2517,2518,1,0,0,0,2518,2519,3,362,181,0,2519,
        2528,5,2,0,0,2520,2525,3,266,133,0,2521,2522,5,4,0,0,2522,2524,3,
        266,133,0,2523,2521,1,0,0,0,2524,2527,1,0,0,0,2525,2523,1,0,0,0,
        2525,2526,1,0,0,0,2526,2529,1,0,0,0,2527,2525,1,0,0,0,2528,2520,
        1,0,0,0,2528,2529,1,0,0,0,2529,2530,1,0,0,0,2530,2531,5,3,0,0,2531,
        2543,3,368,184,0,2532,2534,5,21,0,0,2533,2532,1,0,0,0,2533,2534,
        1,0,0,0,2534,2535,1,0,0,0,2535,2540,3,368,184,0,2536,2537,5,4,0,
        0,2537,2539,3,368,184,0,2538,2536,1,0,0,0,2539,2542,1,0,0,0,2540,
        2538,1,0,0,0,2540,2541,1,0,0,0,2541,2544,1,0,0,0,2542,2540,1,0,0,
        0,2543,2533,1,0,0,0,2543,2544,1,0,0,0,2544,193,1,0,0,0,2545,2546,
        7,22,0,0,2546,195,1,0,0,0,2547,2549,5,159,0,0,2548,2547,1,0,0,0,
        2548,2549,1,0,0,0,2549,2550,1,0,0,0,2550,2554,3,222,111,0,2551,2553,
        3,198,99,0,2552,2551,1,0,0,0,2553,2556,1,0,0,0,2554,2552,1,0,0,0,
        2554,2555,1,0,0,0,2555,197,1,0,0,0,2556,2554,1,0,0,0,2557,2561,3,
        200,100,0,2558,2561,3,164,82,0,2559,2561,3,170,85,0,2560,2557,1,
        0,0,0,2560,2558,1,0,0,0,2560,2559,1,0,0,0,2561,199,1,0,0,0,2562,
        2563,3,202,101,0,2563,2565,5,156,0,0,2564,2566,5,159,0,0,2565,2564,
        1,0,0,0,2565,2566,1,0,0,0,2566,2567,1,0,0,0,2567,2569,3,222,111,
        0,2568,2570,3,204,102,0,2569,2568,1,0,0,0,2569,2570,1,0,0,0,2570,
        2580,1,0,0,0,2571,2572,5,193,0,0,2572,2573,3,202,101,0,2573,2575,
        5,156,0,0,2574,2576,5,159,0,0,2575,2574,1,0,0,0,2575,2576,1,0,0,
        0,2576,2577,1,0,0,0,2577,2578,3,222,111,0,2578,2580,1,0,0,0,2579,
        2562,1,0,0,0,2579,2571,1,0,0,0,2580,201,1,0,0,0,2581,2583,5,145,
        0,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,2606,1,0,0,0,2584,2606,
        5,62,0,0,2585,2587,5,162,0,0,2586,2588,5,208,0,0,2587,2586,1,0,0,
        0,2587,2588,1,0,0,0,2588,2606,1,0,0,0,2589,2591,5,162,0,0,2590,2589,
        1,0,0,0,2590,2591,1,0,0,0,2591,2592,1,0,0,0,2592,2606,5,259,0,0,
        2593,2595,5,246,0,0,2594,2596,5,208,0,0,2595,2594,1,0,0,0,2595,2596,
        1,0,0,0,2596,2606,1,0,0,0,2597,2599,5,124,0,0,2598,2600,5,208,0,
        0,2599,2598,1,0,0,0,2599,2600,1,0,0,0,2600,2606,1,0,0,0,2601,2603,
        5,162,0,0,2602,2601,1,0,0,0,2602,2603,1,0,0,0,2603,2604,1,0,0,0,
        2604,2606,5,16,0,0,2605,2582,1,0,0,0,2605,2584,1,0,0,0,2605,2585,
        1,0,0,0,2605,2590,1,0,0,0,2605,2593,1,0,0,0,2605,2597,1,0,0,0,2605,
        2602,1,0,0,0,2606,203,1,0,0,0,2607,2608,5,201,0,0,2608,2612,3,274,
        137,0,2609,2610,5,327,0,0,2610,2612,3,210,105,0,2611,2607,1,0,0,
        0,2611,2609,1,0,0,0,2612,205,1,0,0,0,2613,2614,5,289,0,0,2614,2616,
        5,2,0,0,2615,2617,3,208,104,0,2616,2615,1,0,0,0,2616,2617,1,0,0,
        0,2617,2618,1,0,0,0,2618,2623,5,3,0,0,2619,2620,5,240,0,0,2620,2621,
        5,2,0,0,2621,2622,5,377,0,0,2622,2624,5,3,0,0,2623,2619,1,0,0,0,
        2623,2624,1,0,0,0,2624,207,1,0,0,0,2625,2627,5,356,0,0,2626,2625,
        1,0,0,0,2626,2627,1,0,0,0,2627,2628,1,0,0,0,2628,2629,7,23,0,0,2629,
        2650,5,219,0,0,2630,2631,3,266,133,0,2631,2632,5,253,0,0,2632,2650,
        1,0,0,0,2633,2634,5,30,0,0,2634,2635,5,377,0,0,2635,2636,5,207,0,
        0,2636,2637,5,199,0,0,2637,2646,5,377,0,0,2638,2644,5,201,0,0,2639,
        2645,3,368,184,0,2640,2641,3,362,181,0,2641,2642,5,2,0,0,2642,2643,
        5,3,0,0,2643,2645,1,0,0,0,2644,2639,1,0,0,0,2644,2640,1,0,0,0,2645,
        2647,1,0,0,0,2646,2638,1,0,0,0,2646,2647,1,0,0,0,2647,2650,1,0,0,
        0,2648,2650,3,266,133,0,2649,2626,1,0,0,0,2649,2630,1,0,0,0,2649,
        2633,1,0,0,0,2649,2648,1,0,0,0,2650,209,1,0,0,0,2651,2652,5,2,0,
        0,2652,2653,3,212,106,0,2653,2654,5,3,0,0,2654,211,1,0,0,0,2655,
        2660,3,364,182,0,2656,2657,5,4,0,0,2657,2659,3,364,182,0,2658,2656,
        1,0,0,0,2659,2662,1,0,0,0,2660,2658,1,0,0,0,2660,2661,1,0,0,0,2661,
        213,1,0,0,0,2662,2660,1,0,0,0,2663,2664,5,2,0,0,2664,2669,3,216,
        108,0,2665,2666,5,4,0,0,2666,2668,3,216,108,0,2667,2665,1,0,0,0,
        2668,2671,1,0,0,0,2669,2667,1,0,0,0,2669,2670,1,0,0,0,2670,2672,
        1,0,0,0,2671,2669,1,0,0,0,2672,2673,5,3,0,0,2673,215,1,0,0,0,2674,
        2676,3,364,182,0,2675,2677,7,16,0,0,2676,2675,1,0,0,0,2676,2677,
        1,0,0,0,2677,217,1,0,0,0,2678,2679,5,2,0,0,2679,2684,3,220,110,0,
        2680,2681,5,4,0,0,2681,2683,3,220,110,0,2682,2680,1,0,0,0,2683,2686,
        1,0,0,0,2684,2682,1,0,0,0,2684,2685,1,0,0,0,2685,2687,1,0,0,0,2686,
        2684,1,0,0,0,2687,2688,5,3,0,0,2688,219,1,0,0,0,2689,2691,3,368,
        184,0,2690,2692,3,46,23,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,
        221,1,0,0,0,2693,2695,3,100,50,0,2694,2696,3,152,76,0,2695,2694,
        1,0,0,0,2695,2696,1,0,0,0,2696,2698,1,0,0,0,2697,2699,3,206,103,
        0,2698,2697,1,0,0,0,2698,2699,1,0,0,0,2699,2700,1,0,0,0,2700,2701,
        3,238,119,0,2701,2721,1,0,0,0,2702,2703,5,2,0,0,2703,2704,3,48,24,
        0,2704,2706,5,3,0,0,2705,2707,3,206,103,0,2706,2705,1,0,0,0,2706,
        2707,1,0,0,0,2707,2708,1,0,0,0,2708,2709,3,238,119,0,2709,2721,1,
        0,0,0,2710,2711,5,2,0,0,2711,2712,3,196,98,0,2712,2714,5,3,0,0,2713,
        2715,3,206,103,0,2714,2713,1,0,0,0,2714,2715,1,0,0,0,2715,2716,1,
        0,0,0,2716,2717,3,238,119,0,2717,2721,1,0,0,0,2718,2721,3,224,112,
        0,2719,2721,3,236,118,0,2720,2693,1,0,0,0,2720,2702,1,0,0,0,2720,
        2710,1,0,0,0,2720,2718,1,0,0,0,2720,2719,1,0,0,0,2721,223,1,0,0,
        0,2722,2723,5,328,0,0,2723,2728,3,266,133,0,2724,2725,5,4,0,0,2725,
        2727,3,266,133,0,2726,2724,1,0,0,0,2727,2730,1,0,0,0,2728,2726,1,
        0,0,0,2728,2729,1,0,0,0,2729,2731,1,0,0,0,2730,2728,1,0,0,0,2731,
        2732,3,238,119,0,2732,225,1,0,0,0,2733,2734,5,287,0,0,2734,2736,
        3,100,50,0,2735,2737,3,228,114,0,2736,2735,1,0,0,0,2736,2737,1,0,
        0,0,2737,2753,1,0,0,0,2738,2739,5,287,0,0,2739,2740,5,2,0,0,2740,
        2741,3,100,50,0,2741,2743,5,3,0,0,2742,2744,3,228,114,0,2743,2742,
        1,0,0,0,2743,2744,1,0,0,0,2744,2753,1,0,0,0,2745,2746,5,287,0,0,
        2746,2747,5,2,0,0,2747,2748,3,48,24,0,2748,2750,5,3,0,0,2749,2751,
        3,228,114,0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,2753,1,0,0,
        0,2752,2733,1,0,0,0,2752,2738,1,0,0,0,2752,2745,1,0,0,0,2753,227,
        1,0,0,0,2754,2755,5,342,0,0,2755,2756,5,269,0,0,2756,2774,5,214,
        0,0,2757,2758,7,24,0,0,2758,2771,5,32,0,0,2759,2760,5,2,0,0,2760,
        2765,3,266,133,0,2761,2762,5,4,0,0,2762,2764,3,266,133,0,2763,2761,
        1,0,0,0,2764,2767,1,0,0,0,2765,2763,1,0,0,0,2765,2766,1,0,0,0,2766,
        2768,1,0,0,0,2767,2765,1,0,0,0,2768,2769,5,3,0,0,2769,2772,1,0,0,
        0,2770,2772,3,266,133,0,2771,2759,1,0,0,0,2771,2770,1,0,0,0,2772,
        2774,1,0,0,0,2773,2754,1,0,0,0,2773,2757,1,0,0,0,2774,2791,1,0,0,
        0,2775,2776,7,25,0,0,2776,2789,5,32,0,0,2777,2778,5,2,0,0,2778,2783,
        3,110,55,0,2779,2780,5,4,0,0,2780,2782,3,110,55,0,2781,2779,1,0,
        0,0,2782,2785,1,0,0,0,2783,2781,1,0,0,0,2783,2784,1,0,0,0,2784,2786,
        1,0,0,0,2785,2783,1,0,0,0,2786,2787,5,3,0,0,2787,2790,1,0,0,0,2788,
        2790,3,110,55,0,2789,2777,1,0,0,0,2789,2788,1,0,0,0,2790,2792,1,
        0,0,0,2791,2775,1,0,0,0,2791,2792,1,0,0,0,2792,229,1,0,0,0,2793,
        2794,3,368,184,0,2794,2795,5,368,0,0,2795,2796,3,226,113,0,2796,
        231,1,0,0,0,2797,2800,3,226,113,0,2798,2800,3,230,115,0,2799,2797,
        1,0,0,0,2799,2798,1,0,0,0,2800,233,1,0,0,0,2801,2804,3,232,116,0,
        2802,2804,3,270,135,0,2803,2801,1,0,0,0,2803,2802,1,0,0,0,2804,235,
        1,0,0,0,2805,2806,3,360,180,0,2806,2815,5,2,0,0,2807,2812,3,234,
        117,0,2808,2809,5,4,0,0,2809,2811,3,234,117,0,2810,2808,1,0,0,0,
        2811,2814,1,0,0,0,2812,2810,1,0,0,0,2812,2813,1,0,0,0,2813,2816,
        1,0,0,0,2814,2812,1,0,0,0,2815,2807,1,0,0,0,2815,2816,1,0,0,0,2816,
        2817,1,0,0,0,2817,2818,5,3,0,0,2818,2819,3,238,119,0,2819,237,1,
        0,0,0,2820,2822,5,21,0,0,2821,2820,1,0,0,0,2821,2822,1,0,0,0,2822,
        2823,1,0,0,0,2823,2825,3,370,185,0,2824,2826,3,210,105,0,2825,2824,
        1,0,0,0,2825,2826,1,0,0,0,2826,2828,1,0,0,0,2827,2821,1,0,0,0,2827,
        2828,1,0,0,0,2828,239,1,0,0,0,2829,2830,5,252,0,0,2830,2831,5,121,
        0,0,2831,2832,5,261,0,0,2832,2836,3,380,190,0,2833,2834,5,342,0,
        0,2834,2835,5,262,0,0,2835,2837,3,74,37,0,2836,2833,1,0,0,0,2836,
        2837,1,0,0,0,2837,2879,1,0,0,0,2838,2839,5,252,0,0,2839,2840,5,121,
        0,0,2840,2850,5,87,0,0,2841,2842,5,113,0,0,2842,2843,5,293,0,0,2843,
        2844,5,32,0,0,2844,2848,3,380,190,0,2845,2846,5,101,0,0,2846,2847,
        5,32,0,0,2847,2849,3,380,190,0,2848,2845,1,0,0,0,2848,2849,1,0,0,
        0,2849,2851,1,0,0,0,2850,2841,1,0,0,0,2850,2851,1,0,0,0,2851,2857,
        1,0,0,0,2852,2853,5,50,0,0,2853,2854,5,155,0,0,2854,2855,5,293,0,
        0,2855,2856,5,32,0,0,2856,2858,3,380,190,0,2857,2852,1,0,0,0,2857,
        2858,1,0,0,0,2858,2864,1,0,0,0,2859,2860,5,176,0,0,2860,2861,5,157,
        0,0,2861,2862,5,293,0,0,2862,2863,5,32,0,0,2863,2865,3,380,190,0,
        2864,2859,1,0,0,0,2864,2865,1,0,0,0,2865,2870,1,0,0,0,2866,2867,
        5,166,0,0,2867,2868,5,293,0,0,2868,2869,5,32,0,0,2869,2871,3,380,
        190,0,2870,2866,1,0,0,0,2870,2871,1,0,0,0,2871,2876,1,0,0,0,2872,
        2873,5,196,0,0,2873,2874,5,85,0,0,2874,2875,5,21,0,0,2875,2877,3,
        380,190,0,2876,2872,1,0,0,0,2876,2877,1,0,0,0,2877,2879,1,0,0,0,
        2878,2829,1,0,0,0,2878,2838,1,0,0,0,2879,241,1,0,0,0,2880,2885,3,
        244,122,0,2881,2882,5,4,0,0,2882,2884,3,244,122,0,2883,2881,1,0,
        0,0,2884,2887,1,0,0,0,2885,2883,1,0,0,0,2885,2886,1,0,0,0,2886,243,
        1,0,0,0,2887,2885,1,0,0,0,2888,2893,3,364,182,0,2889,2890,5,5,0,
        0,2890,2892,3,364,182,0,2891,2889,1,0,0,0,2892,2895,1,0,0,0,2893,
        2891,1,0,0,0,2893,2894,1,0,0,0,2894,245,1,0,0,0,2895,2893,1,0,0,
        0,2896,2901,3,248,124,0,2897,2898,5,4,0,0,2898,2900,3,248,124,0,
        2899,2897,1,0,0,0,2900,2903,1,0,0,0,2901,2899,1,0,0,0,2901,2902,
        1,0,0,0,2902,247,1,0,0,0,2903,2901,1,0,0,0,2904,2907,3,244,122,0,
        2905,2906,5,204,0,0,2906,2908,3,74,37,0,2907,2905,1,0,0,0,2907,2908,
        1,0,0,0,2908,249,1,0,0,0,2909,2910,3,364,182,0,2910,2911,5,5,0,0,
        2911,2913,1,0,0,0,2912,2909,1,0,0,0,2912,2913,1,0,0,0,2913,2914,
        1,0,0,0,2914,2915,3,364,182,0,2915,251,1,0,0,0,2916,2917,3,364,182,
        0,2917,2918,5,5,0,0,2918,2920,1,0,0,0,2919,2916,1,0,0,0,2919,2920,
        1,0,0,0,2920,2921,1,0,0,0,2921,2922,3,364,182,0,2922,253,1,0,0,0,
        2923,2931,3,266,133,0,2924,2926,5,21,0,0,2925,2924,1,0,0,0,2925,
        2926,1,0,0,0,2926,2929,1,0,0,0,2927,2930,3,364,182,0,2928,2930,3,
        210,105,0,2929,2927,1,0,0,0,2929,2928,1,0,0,0,2930,2932,1,0,0,0,
        2931,2925,1,0,0,0,2931,2932,1,0,0,0,2932,255,1,0,0,0,2933,2938,3,
        254,127,0,2934,2935,5,4,0,0,2935,2937,3,254,127,0,2936,2934,1,0,
        0,0,2937,2940,1,0,0,0,2938,2936,1,0,0,0,2938,2939,1,0,0,0,2939,257,
        1,0,0,0,2940,2938,1,0,0,0,2941,2942,5,2,0,0,2942,2947,3,260,130,
        0,2943,2944,5,4,0,0,2944,2946,3,260,130,0,2945,2943,1,0,0,0,2946,
        2949,1,0,0,0,2947,2945,1,0,0,0,2947,2948,1,0,0,0,2948,2950,1,0,0,
        0,2949,2947,1,0,0,0,2950,2951,5,3,0,0,2951,259,1,0,0,0,2952,2955,
        3,262,131,0,2953,2955,3,332,166,0,2954,2952,1,0,0,0,2954,2953,1,
        0,0,0,2955,261,1,0,0,0,2956,2970,3,362,181,0,2957,2958,3,368,184,
        0,2958,2959,5,2,0,0,2959,2964,3,264,132,0,2960,2961,5,4,0,0,2961,
        2963,3,264,132,0,2962,2960,1,0,0,0,2963,2966,1,0,0,0,2964,2962,1,
        0,0,0,2964,2965,1,0,0,0,2965,2967,1,0,0,0,2966,2964,1,0,0,0,2967,
        2968,5,3,0,0,2968,2970,1,0,0,0,2969,2956,1,0,0,0,2969,2957,1,0,0,
        0,2970,263,1,0,0,0,2971,2974,3,362,181,0,2972,2974,3,286,143,0,2973,
        2971,1,0,0,0,2973,2972,1,0,0,0,2974,265,1,0,0,0,2975,2976,3,274,
        137,0,2976,267,1,0,0,0,2977,2978,3,368,184,0,2978,2979,5,368,0,0,
        2979,2980,3,266,133,0,2980,269,1,0,0,0,2981,2984,3,266,133,0,2982,
        2984,3,268,134,0,2983,2981,1,0,0,0,2983,2982,1,0,0,0,2984,271,1,
        0,0,0,2985,2990,3,266,133,0,2986,2987,5,4,0,0,2987,2989,3,266,133,
        0,2988,2986,1,0,0,0,2989,2992,1,0,0,0,2990,2988,1,0,0,0,2990,2991,
        1,0,0,0,2991,273,1,0,0,0,2992,2990,1,0,0,0,2993,2994,6,137,-1,0,
        2994,2995,7,26,0,0,2995,3006,3,274,137,5,2996,2997,5,105,0,0,2997,
        2998,5,2,0,0,2998,2999,3,48,24,0,2999,3000,5,3,0,0,3000,3006,1,0,
        0,0,3001,3003,3,278,139,0,3002,3004,3,276,138,0,3003,3002,1,0,0,
        0,3003,3004,1,0,0,0,3004,3006,1,0,0,0,3005,2993,1,0,0,0,3005,2996,
        1,0,0,0,3005,3001,1,0,0,0,3006,3015,1,0,0,0,3007,3008,10,2,0,0,3008,
        3009,5,15,0,0,3009,3014,3,274,137,3,3010,3011,10,1,0,0,3011,3012,
        5,205,0,0,3012,3014,3,274,137,2,3013,3007,1,0,0,0,3013,3010,1,0,
        0,0,3014,3017,1,0,0,0,3015,3013,1,0,0,0,3015,3016,1,0,0,0,3016,275,
        1,0,0,0,3017,3015,1,0,0,0,3018,3020,5,195,0,0,3019,3018,1,0,0,0,
        3019,3020,1,0,0,0,3020,3021,1,0,0,0,3021,3022,5,25,0,0,3022,3023,
        3,278,139,0,3023,3024,5,15,0,0,3024,3025,3,278,139,0,3025,3101,1,
        0,0,0,3026,3028,5,195,0,0,3027,3026,1,0,0,0,3027,3028,1,0,0,0,3028,
        3029,1,0,0,0,3029,3030,5,141,0,0,3030,3031,5,2,0,0,3031,3036,3,266,
        133,0,3032,3033,5,4,0,0,3033,3035,3,266,133,0,3034,3032,1,0,0,0,
        3035,3038,1,0,0,0,3036,3034,1,0,0,0,3036,3037,1,0,0,0,3037,3039,
        1,0,0,0,3038,3036,1,0,0,0,3039,3040,5,3,0,0,3040,3101,1,0,0,0,3041,
        3043,5,195,0,0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,3044,1,0,
        0,0,3044,3045,5,141,0,0,3045,3046,5,2,0,0,3046,3047,3,48,24,0,3047,
        3048,5,3,0,0,3048,3101,1,0,0,0,3049,3051,5,195,0,0,3050,3049,1,0,
        0,0,3050,3051,1,0,0,0,3051,3052,1,0,0,0,3052,3053,5,247,0,0,3053,
        3101,3,278,139,0,3054,3056,5,195,0,0,3055,3054,1,0,0,0,3055,3056,
        1,0,0,0,3056,3057,1,0,0,0,3057,3058,7,27,0,0,3058,3072,7,28,0,0,
        3059,3060,5,2,0,0,3060,3073,5,3,0,0,3061,3062,5,2,0,0,3062,3067,
        3,266,133,0,3063,3064,5,4,0,0,3064,3066,3,266,133,0,3065,3063,1,
        0,0,0,3066,3069,1,0,0,0,3067,3065,1,0,0,0,3067,3068,1,0,0,0,3068,
        3070,1,0,0,0,3069,3067,1,0,0,0,3070,3071,5,3,0,0,3071,3073,1,0,0,
        0,3072,3059,1,0,0,0,3072,3061,1,0,0,0,3073,3101,1,0,0,0,3074,3076,
        5,195,0,0,3075,3074,1,0,0,0,3075,3076,1,0,0,0,3076,3077,1,0,0,0,
        3077,3078,7,27,0,0,3078,3081,3,278,139,0,3079,3080,5,100,0,0,3080,
        3082,3,380,190,0,3081,3079,1,0,0,0,3081,3082,1,0,0,0,3082,3101,1,
        0,0,0,3083,3085,5,154,0,0,3084,3086,5,195,0,0,3085,3084,1,0,0,0,
        3085,3086,1,0,0,0,3086,3087,1,0,0,0,3087,3101,5,196,0,0,3088,3090,
        5,154,0,0,3089,3091,5,195,0,0,3090,3089,1,0,0,0,3090,3091,1,0,0,
        0,3091,3092,1,0,0,0,3092,3101,7,29,0,0,3093,3095,5,154,0,0,3094,
        3096,5,195,0,0,3095,3094,1,0,0,0,3095,3096,1,0,0,0,3096,3097,1,0,
        0,0,3097,3098,5,93,0,0,3098,3099,5,123,0,0,3099,3101,3,278,139,0,
        3100,3019,1,0,0,0,3100,3027,1,0,0,0,3100,3042,1,0,0,0,3100,3050,
        1,0,0,0,3100,3055,1,0,0,0,3100,3075,1,0,0,0,3100,3083,1,0,0,0,3100,
        3088,1,0,0,0,3100,3093,1,0,0,0,3101,277,1,0,0,0,3102,3103,6,139,
        -1,0,3103,3107,3,282,141,0,3104,3105,7,30,0,0,3105,3107,3,278,139,
        7,3106,3102,1,0,0,0,3106,3104,1,0,0,0,3107,3129,1,0,0,0,3108,3109,
        10,6,0,0,3109,3110,7,31,0,0,3110,3128,3,278,139,7,3111,3112,10,5,
        0,0,3112,3113,7,32,0,0,3113,3128,3,278,139,6,3114,3115,10,4,0,0,
        3115,3116,5,361,0,0,3116,3128,3,278,139,5,3117,3118,10,3,0,0,3118,
        3119,5,364,0,0,3119,3128,3,278,139,4,3120,3121,10,2,0,0,3121,3122,
        5,362,0,0,3122,3128,3,278,139,3,3123,3124,10,1,0,0,3124,3125,3,288,
        144,0,3125,3126,3,278,139,2,3126,3128,1,0,0,0,3127,3108,1,0,0,0,
        3127,3111,1,0,0,0,3127,3114,1,0,0,0,3127,3117,1,0,0,0,3127,3120,
        1,0,0,0,3127,3123,1,0,0,0,3128,3131,1,0,0,0,3129,3127,1,0,0,0,3129,
        3130,1,0,0,0,3130,279,1,0,0,0,3131,3129,1,0,0,0,3132,3133,7,33,0,
        0,3133,281,1,0,0,0,3134,3135,6,141,-1,0,3135,3378,7,34,0,0,3136,
        3137,7,35,0,0,3137,3140,5,2,0,0,3138,3141,3,280,140,0,3139,3141,
        3,380,190,0,3140,3138,1,0,0,0,3140,3139,1,0,0,0,3141,3142,1,0,0,
        0,3142,3143,5,4,0,0,3143,3144,3,278,139,0,3144,3145,5,4,0,0,3145,
        3146,3,278,139,0,3146,3147,5,3,0,0,3147,3378,1,0,0,0,3148,3149,7,
        36,0,0,3149,3152,5,2,0,0,3150,3153,3,280,140,0,3151,3153,3,380,190,
        0,3152,3150,1,0,0,0,3152,3151,1,0,0,0,3153,3154,1,0,0,0,3154,3155,
        5,4,0,0,3155,3156,3,278,139,0,3156,3157,5,4,0,0,3157,3158,3,278,
        139,0,3158,3159,5,3,0,0,3159,3378,1,0,0,0,3160,3162,5,36,0,0,3161,
        3163,3,346,173,0,3162,3161,1,0,0,0,3163,3164,1,0,0,0,3164,3162,1,
        0,0,0,3164,3165,1,0,0,0,3165,3168,1,0,0,0,3166,3167,5,98,0,0,3167,
        3169,3,266,133,0,3168,3166,1,0,0,0,3168,3169,1,0,0,0,3169,3170,1,
        0,0,0,3170,3171,5,99,0,0,3171,3378,1,0,0,0,3172,3173,5,36,0,0,3173,
        3175,3,266,133,0,3174,3176,3,346,173,0,3175,3174,1,0,0,0,3176,3177,
        1,0,0,0,3177,3175,1,0,0,0,3177,3178,1,0,0,0,3178,3181,1,0,0,0,3179,
        3180,5,98,0,0,3180,3182,3,266,133,0,3181,3179,1,0,0,0,3181,3182,
        1,0,0,0,3182,3183,1,0,0,0,3183,3184,5,99,0,0,3184,3378,1,0,0,0,3185,
        3186,7,37,0,0,3186,3187,5,2,0,0,3187,3188,3,266,133,0,3188,3189,
        5,21,0,0,3189,3190,3,318,159,0,3190,3191,5,3,0,0,3191,3378,1,0,0,
        0,3192,3193,5,281,0,0,3193,3202,5,2,0,0,3194,3199,3,254,127,0,3195,
        3196,5,4,0,0,3196,3198,3,254,127,0,3197,3195,1,0,0,0,3198,3201,1,
        0,0,0,3199,3197,1,0,0,0,3199,3200,1,0,0,0,3200,3203,1,0,0,0,3201,
        3199,1,0,0,0,3202,3194,1,0,0,0,3202,3203,1,0,0,0,3203,3204,1,0,0,
        0,3204,3378,5,3,0,0,3205,3206,5,116,0,0,3206,3207,5,2,0,0,3207,3210,
        3,266,133,0,3208,3209,5,138,0,0,3209,3211,5,197,0,0,3210,3208,1,
        0,0,0,3210,3211,1,0,0,0,3211,3212,1,0,0,0,3212,3213,5,3,0,0,3213,
        3378,1,0,0,0,3214,3215,5,18,0,0,3215,3216,5,2,0,0,3216,3219,3,266,
        133,0,3217,3218,5,138,0,0,3218,3220,5,197,0,0,3219,3217,1,0,0,0,
        3219,3220,1,0,0,0,3220,3221,1,0,0,0,3221,3222,5,3,0,0,3222,3378,
        1,0,0,0,3223,3224,5,158,0,0,3224,3225,5,2,0,0,3225,3228,3,266,133,
        0,3226,3227,5,138,0,0,3227,3229,5,197,0,0,3228,3226,1,0,0,0,3228,
        3229,1,0,0,0,3229,3230,1,0,0,0,3230,3231,5,3,0,0,3231,3378,1,0,0,
        0,3232,3233,5,222,0,0,3233,3234,5,2,0,0,3234,3235,3,278,139,0,3235,
        3236,5,141,0,0,3236,3237,3,278,139,0,3237,3238,5,3,0,0,3238,3378,
        1,0,0,0,3239,3378,3,286,143,0,3240,3242,5,357,0,0,3241,3243,3,136,
        68,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,3378,1,0,0,0,3244,
        3245,3,362,181,0,3245,3246,5,5,0,0,3246,3248,5,357,0,0,3247,3249,
        3,136,68,0,3248,3247,1,0,0,0,3248,3249,1,0,0,0,3249,3378,1,0,0,0,
        3250,3251,5,2,0,0,3251,3254,3,254,127,0,3252,3253,5,4,0,0,3253,3255,
        3,254,127,0,3254,3252,1,0,0,0,3255,3256,1,0,0,0,3256,3254,1,0,0,
        0,3256,3257,1,0,0,0,3257,3258,1,0,0,0,3258,3259,5,3,0,0,3259,3378,
        1,0,0,0,3260,3261,5,2,0,0,3261,3262,3,48,24,0,3262,3263,5,3,0,0,
        3263,3378,1,0,0,0,3264,3265,3,360,180,0,3265,3277,5,2,0,0,3266,3268,
        3,194,97,0,3267,3266,1,0,0,0,3267,3268,1,0,0,0,3268,3269,1,0,0,0,
        3269,3274,3,270,135,0,3270,3271,5,4,0,0,3271,3273,3,270,135,0,3272,
        3270,1,0,0,0,3273,3276,1,0,0,0,3274,3272,1,0,0,0,3274,3275,1,0,0,
        0,3275,3278,1,0,0,0,3276,3274,1,0,0,0,3277,3267,1,0,0,0,3277,3278,
        1,0,0,0,3278,3279,1,0,0,0,3279,3295,5,3,0,0,3280,3281,5,343,0,0,
        3281,3282,5,130,0,0,3282,3283,5,2,0,0,3283,3284,5,206,0,0,3284,3285,
        5,32,0,0,3285,3290,3,110,55,0,3286,3287,5,4,0,0,3287,3289,3,110,
        55,0,3288,3286,1,0,0,0,3289,3292,1,0,0,0,3290,3288,1,0,0,0,3290,
        3291,1,0,0,0,3291,3293,1,0,0,0,3292,3290,1,0,0,0,3293,3294,5,3,0,
        0,3294,3296,1,0,0,0,3295,3280,1,0,0,0,3295,3296,1,0,0,0,3296,3303,
        1,0,0,0,3297,3298,5,114,0,0,3298,3299,5,2,0,0,3299,3300,5,340,0,
        0,3300,3301,3,274,137,0,3301,3302,5,3,0,0,3302,3304,1,0,0,0,3303,
        3297,1,0,0,0,3303,3304,1,0,0,0,3304,3307,1,0,0,0,3305,3306,7,38,
        0,0,3306,3308,5,197,0,0,3307,3305,1,0,0,0,3307,3308,1,0,0,0,3308,
        3311,1,0,0,0,3309,3310,5,210,0,0,3310,3312,3,352,176,0,3311,3309,
        1,0,0,0,3311,3312,1,0,0,0,3312,3378,1,0,0,0,3313,3314,3,368,184,
        0,3314,3315,5,367,0,0,3315,3316,3,266,133,0,3316,3378,1,0,0,0,3317,
        3318,5,2,0,0,3318,3321,3,368,184,0,3319,3320,5,4,0,0,3320,3322,3,
        368,184,0,3321,3319,1,0,0,0,3322,3323,1,0,0,0,3323,3321,1,0,0,0,
        3323,3324,1,0,0,0,3324,3325,1,0,0,0,3325,3326,5,3,0,0,3326,3327,
        5,367,0,0,3327,3328,3,266,133,0,3328,3378,1,0,0,0,3329,3378,3,368,
        184,0,3330,3331,5,2,0,0,3331,3332,3,266,133,0,3332,3333,5,3,0,0,
        3333,3378,1,0,0,0,3334,3335,5,110,0,0,3335,3336,5,2,0,0,3336,3337,
        3,368,184,0,3337,3338,5,123,0,0,3338,3339,3,278,139,0,3339,3340,
        5,3,0,0,3340,3378,1,0,0,0,3341,3342,7,39,0,0,3342,3343,5,2,0,0,3343,
        3344,3,278,139,0,3344,3345,7,40,0,0,3345,3348,3,278,139,0,3346,3347,
        7,41,0,0,3347,3349,3,278,139,0,3348,3346,1,0,0,0,3348,3349,1,0,0,
        0,3349,3350,1,0,0,0,3350,3351,5,3,0,0,3351,3378,1,0,0,0,3352,3353,
        5,310,0,0,3353,3355,5,2,0,0,3354,3356,7,42,0,0,3355,3354,1,0,0,0,
        3355,3356,1,0,0,0,3356,3358,1,0,0,0,3357,3359,3,278,139,0,3358,3357,
        1,0,0,0,3358,3359,1,0,0,0,3359,3360,1,0,0,0,3360,3361,5,123,0,0,
        3361,3362,3,278,139,0,3362,3363,5,3,0,0,3363,3378,1,0,0,0,3364,3365,
        5,212,0,0,3365,3366,5,2,0,0,3366,3367,3,278,139,0,3367,3368,5,221,
        0,0,3368,3369,3,278,139,0,3369,3370,5,123,0,0,3370,3373,3,278,139,
        0,3371,3372,5,119,0,0,3372,3374,3,278,139,0,3373,3371,1,0,0,0,3373,
        3374,1,0,0,0,3374,3375,1,0,0,0,3375,3376,5,3,0,0,3376,3378,1,0,0,
        0,3377,3134,1,0,0,0,3377,3136,1,0,0,0,3377,3148,1,0,0,0,3377,3160,
        1,0,0,0,3377,3172,1,0,0,0,3377,3185,1,0,0,0,3377,3192,1,0,0,0,3377,
        3205,1,0,0,0,3377,3214,1,0,0,0,3377,3223,1,0,0,0,3377,3232,1,0,0,
        0,3377,3239,1,0,0,0,3377,3240,1,0,0,0,3377,3244,1,0,0,0,3377,3250,
        1,0,0,0,3377,3260,1,0,0,0,3377,3264,1,0,0,0,3377,3313,1,0,0,0,3377,
        3317,1,0,0,0,3377,3329,1,0,0,0,3377,3330,1,0,0,0,3377,3334,1,0,0,
        0,3377,3341,1,0,0,0,3377,3352,1,0,0,0,3377,3364,1,0,0,0,3378,3394,
        1,0,0,0,3379,3380,10,23,0,0,3380,3393,3,314,157,0,3381,3382,10,22,
        0,0,3382,3383,5,366,0,0,3383,3393,3,318,159,0,3384,3385,10,8,0,0,
        3385,3386,5,6,0,0,3386,3387,3,278,139,0,3387,3388,5,7,0,0,3388,3393,
        1,0,0,0,3389,3390,10,6,0,0,3390,3391,5,5,0,0,3391,3393,3,368,184,
        0,3392,3379,1,0,0,0,3392,3381,1,0,0,0,3392,3384,1,0,0,0,3392,3389,
        1,0,0,0,3393,3396,1,0,0,0,3394,3392,1,0,0,0,3394,3395,1,0,0,0,3395,
        283,1,0,0,0,3396,3394,1,0,0,0,3397,3405,5,73,0,0,3398,3405,5,297,
        0,0,3399,3405,5,298,0,0,3400,3405,5,299,0,0,3401,3405,5,150,0,0,
        3402,3405,5,133,0,0,3403,3405,3,368,184,0,3404,3397,1,0,0,0,3404,
        3398,1,0,0,0,3404,3399,1,0,0,0,3404,3400,1,0,0,0,3404,3401,1,0,0,
        0,3404,3402,1,0,0,0,3404,3403,1,0,0,0,3405,285,1,0,0,0,3406,3422,
        5,196,0,0,3407,3422,5,371,0,0,3408,3409,5,365,0,0,3409,3422,3,368,
        184,0,3410,3422,3,296,148,0,3411,3412,3,284,142,0,3412,3413,3,380,
        190,0,3413,3422,1,0,0,0,3414,3422,3,376,188,0,3415,3422,3,294,147,
        0,3416,3418,3,380,190,0,3417,3416,1,0,0,0,3418,3419,1,0,0,0,3419,
        3417,1,0,0,0,3419,3420,1,0,0,0,3420,3422,1,0,0,0,3421,3406,1,0,0,
        0,3421,3407,1,0,0,0,3421,3408,1,0,0,0,3421,3410,1,0,0,0,3421,3411,
        1,0,0,0,3421,3414,1,0,0,0,3421,3415,1,0,0,0,3421,3417,1,0,0,0,3422,
        287,1,0,0,0,3423,3424,7,43,0,0,3424,289,1,0,0,0,3425,3426,7,44,0,
        0,3426,291,1,0,0,0,3427,3428,7,45,0,0,3428,293,1,0,0,0,3429,3430,
        7,46,0,0,3430,295,1,0,0,0,3431,3434,5,150,0,0,3432,3435,3,298,149,
        0,3433,3435,3,302,151,0,3434,3432,1,0,0,0,3434,3433,1,0,0,0,3435,
        297,1,0,0,0,3436,3438,3,300,150,0,3437,3439,3,304,152,0,3438,3437,
        1,0,0,0,3438,3439,1,0,0,0,3439,299,1,0,0,0,3440,3441,3,306,153,0,
        3441,3442,3,308,154,0,3442,3444,1,0,0,0,3443,3440,1,0,0,0,3444,3445,
        1,0,0,0,3445,3443,1,0,0,0,3445,3446,1,0,0,0,3446,301,1,0,0,0,3447,
        3450,3,304,152,0,3448,3451,3,300,150,0,3449,3451,3,304,152,0,3450,
        3448,1,0,0,0,3450,3449,1,0,0,0,3450,3451,1,0,0,0,3451,303,1,0,0,
        0,3452,3453,3,306,153,0,3453,3454,3,310,155,0,3454,3455,5,303,0,
        0,3455,3456,3,310,155,0,3456,305,1,0,0,0,3457,3459,7,47,0,0,3458,
        3457,1,0,0,0,3458,3459,1,0,0,0,3459,3463,1,0,0,0,3460,3464,5,377,
        0,0,3461,3464,5,379,0,0,3462,3464,3,380,190,0,3463,3460,1,0,0,0,
        3463,3461,1,0,0,0,3463,3462,1,0,0,0,3464,307,1,0,0,0,3465,3466,7,
        48,0,0,3466,309,1,0,0,0,3467,3468,7,49,0,0,3468,311,1,0,0,0,3469,
        3473,5,116,0,0,3470,3471,5,10,0,0,3471,3473,3,364,182,0,3472,3469,
        1,0,0,0,3472,3470,1,0,0,0,3473,313,1,0,0,0,3474,3475,5,48,0,0,3475,
        3476,3,368,184,0,3476,315,1,0,0,0,3477,3512,5,28,0,0,3478,3512,5,
        302,0,0,3479,3512,5,33,0,0,3480,3512,5,271,0,0,3481,3512,5,267,0,
        0,3482,3512,5,151,0,0,3483,3512,5,152,0,0,3484,3512,5,26,0,0,3485,
        3512,5,174,0,0,3486,3512,5,117,0,0,3487,3512,5,231,0,0,3488,3512,
        5,96,0,0,3489,3512,5,73,0,0,3490,3512,5,297,0,0,3491,3512,5,299,
        0,0,3492,3512,5,298,0,0,3493,3495,5,280,0,0,3494,3496,3,314,157,
        0,3495,3494,1,0,0,0,3495,3496,1,0,0,0,3496,3512,1,0,0,0,3497,3512,
        5,42,0,0,3498,3512,5,41,0,0,3499,3512,5,329,0,0,3500,3512,5,27,0,
        0,3501,3512,5,82,0,0,3502,3512,5,81,0,0,3503,3512,5,198,0,0,3504,
        3512,5,336,0,0,3505,3512,5,150,0,0,3506,3512,5,332,0,0,3507,3512,
        5,20,0,0,3508,3512,5,281,0,0,3509,3512,5,176,0,0,3510,3512,3,368,
        184,0,3511,3477,1,0,0,0,3511,3478,1,0,0,0,3511,3479,1,0,0,0,3511,
        3480,1,0,0,0,3511,3481,1,0,0,0,3511,3482,1,0,0,0,3511,3483,1,0,0,
        0,3511,3484,1,0,0,0,3511,3485,1,0,0,0,3511,3486,1,0,0,0,3511,3487,
        1,0,0,0,3511,3488,1,0,0,0,3511,3489,1,0,0,0,3511,3490,1,0,0,0,3511,
        3491,1,0,0,0,3511,3492,1,0,0,0,3511,3493,1,0,0,0,3511,3497,1,0,0,
        0,3511,3498,1,0,0,0,3511,3499,1,0,0,0,3511,3500,1,0,0,0,3511,3501,
        1,0,0,0,3511,3502,1,0,0,0,3511,3503,1,0,0,0,3511,3504,1,0,0,0,3511,
        3505,1,0,0,0,3511,3506,1,0,0,0,3511,3507,1,0,0,0,3511,3508,1,0,0,
        0,3511,3509,1,0,0,0,3511,3510,1,0,0,0,3512,317,1,0,0,0,3513,3514,
        5,20,0,0,3514,3515,5,351,0,0,3515,3516,3,318,159,0,3516,3517,5,353,
        0,0,3517,3560,1,0,0,0,3518,3519,5,176,0,0,3519,3520,5,351,0,0,3520,
        3521,3,318,159,0,3521,3522,5,4,0,0,3522,3523,3,318,159,0,3523,3524,
        5,353,0,0,3524,3560,1,0,0,0,3525,3532,5,281,0,0,3526,3528,5,351,
        0,0,3527,3529,3,342,171,0,3528,3527,1,0,0,0,3528,3529,1,0,0,0,3529,
        3530,1,0,0,0,3530,3533,5,353,0,0,3531,3533,5,349,0,0,3532,3526,1,
        0,0,0,3532,3531,1,0,0,0,3533,3560,1,0,0,0,3534,3535,5,150,0,0,3535,
        3538,7,50,0,0,3536,3537,5,303,0,0,3537,3539,5,185,0,0,3538,3536,
        1,0,0,0,3538,3539,1,0,0,0,3539,3560,1,0,0,0,3540,3541,5,150,0,0,
        3541,3544,7,51,0,0,3542,3543,5,303,0,0,3543,3545,7,52,0,0,3544,3542,
        1,0,0,0,3544,3545,1,0,0,0,3545,3560,1,0,0,0,3546,3557,3,316,158,
        0,3547,3548,5,2,0,0,3548,3553,5,377,0,0,3549,3550,5,4,0,0,3550,3552,
        5,377,0,0,3551,3549,1,0,0,0,3552,3555,1,0,0,0,3553,3551,1,0,0,0,
        3553,3554,1,0,0,0,3554,3556,1,0,0,0,3555,3553,1,0,0,0,3556,3558,
        5,3,0,0,3557,3547,1,0,0,0,3557,3558,1,0,0,0,3558,3560,1,0,0,0,3559,
        3513,1,0,0,0,3559,3518,1,0,0,0,3559,3525,1,0,0,0,3559,3534,1,0,0,
        0,3559,3540,1,0,0,0,3559,3546,1,0,0,0,3560,319,1,0,0,0,3561,3566,
        3,322,161,0,3562,3563,5,4,0,0,3563,3565,3,322,161,0,3564,3562,1,
        0,0,0,3565,3568,1,0,0,0,3566,3564,1,0,0,0,3566,3567,1,0,0,0,3567,
        321,1,0,0,0,3568,3566,1,0,0,0,3569,3570,3,244,122,0,3570,3574,3,
        318,159,0,3571,3573,3,324,162,0,3572,3571,1,0,0,0,3573,3576,1,0,
        0,0,3574,3572,1,0,0,0,3574,3575,1,0,0,0,3575,323,1,0,0,0,3576,3574,
        1,0,0,0,3577,3578,5,195,0,0,3578,3583,5,196,0,0,3579,3583,3,326,
        163,0,3580,3583,3,46,23,0,3581,3583,3,312,156,0,3582,3577,1,0,0,
        0,3582,3579,1,0,0,0,3582,3580,1,0,0,0,3582,3581,1,0,0,0,3583,325,
        1,0,0,0,3584,3585,5,84,0,0,3585,3586,3,266,133,0,3586,327,1,0,0,
        0,3587,3588,7,53,0,0,3588,3589,3,266,133,0,3589,329,1,0,0,0,3590,
        3595,3,332,166,0,3591,3592,5,4,0,0,3592,3594,3,332,166,0,3593,3591,
        1,0,0,0,3594,3597,1,0,0,0,3595,3593,1,0,0,0,3595,3596,1,0,0,0,3596,
        331,1,0,0,0,3597,3595,1,0,0,0,3598,3599,3,364,182,0,3599,3602,3,
        318,159,0,3600,3601,5,195,0,0,3601,3603,5,196,0,0,3602,3600,1,0,
        0,0,3602,3603,1,0,0,0,3603,3605,1,0,0,0,3604,3606,3,46,23,0,3605,
        3604,1,0,0,0,3605,3606,1,0,0,0,3606,333,1,0,0,0,3607,3612,3,336,
        168,0,3608,3609,5,4,0,0,3609,3611,3,336,168,0,3610,3608,1,0,0,0,
        3611,3614,1,0,0,0,3612,3610,1,0,0,0,3612,3613,1,0,0,0,3613,335,1,
        0,0,0,3614,3612,1,0,0,0,3615,3616,3,364,182,0,3616,3620,3,318,159,
        0,3617,3619,3,338,169,0,3618,3617,1,0,0,0,3619,3622,1,0,0,0,3620,
        3618,1,0,0,0,3620,3621,1,0,0,0,3621,337,1,0,0,0,3622,3620,1,0,0,
        0,3623,3624,5,195,0,0,3624,3629,5,196,0,0,3625,3629,3,326,163,0,
        3626,3629,3,340,170,0,3627,3629,3,46,23,0,3628,3623,1,0,0,0,3628,
        3625,1,0,0,0,3628,3626,1,0,0,0,3628,3627,1,0,0,0,3629,339,1,0,0,
        0,3630,3631,5,127,0,0,3631,3632,5,13,0,0,3632,3633,5,21,0,0,3633,
        3634,5,2,0,0,3634,3635,3,266,133,0,3635,3636,5,3,0,0,3636,341,1,
        0,0,0,3637,3642,3,344,172,0,3638,3639,5,4,0,0,3639,3641,3,344,172,
        0,3640,3638,1,0,0,0,3641,3644,1,0,0,0,3642,3640,1,0,0,0,3642,3643,
        1,0,0,0,3643,343,1,0,0,0,3644,3642,1,0,0,0,3645,3647,3,364,182,0,
        3646,3648,5,365,0,0,3647,3646,1,0,0,0,3647,3648,1,0,0,0,3648,3649,
        1,0,0,0,3649,3652,3,318,159,0,3650,3651,5,195,0,0,3651,3653,5,196,
        0,0,3652,3650,1,0,0,0,3652,3653,1,0,0,0,3653,3655,1,0,0,0,3654,3656,
        3,46,23,0,3655,3654,1,0,0,0,3655,3656,1,0,0,0,3656,345,1,0,0,0,3657,
        3658,5,339,0,0,3658,3659,3,266,133,0,3659,3660,5,294,0,0,3660,3661,
        3,266,133,0,3661,347,1,0,0,0,3662,3663,5,341,0,0,3663,3668,3,350,
        175,0,3664,3665,5,4,0,0,3665,3667,3,350,175,0,3666,3664,1,0,0,0,
        3667,3670,1,0,0,0,3668,3666,1,0,0,0,3668,3669,1,0,0,0,3669,349,1,
        0,0,0,3670,3668,1,0,0,0,3671,3672,3,364,182,0,3672,3673,5,21,0,0,
        3673,3674,3,352,176,0,3674,351,1,0,0,0,3675,3722,3,364,182,0,3676,
        3677,5,2,0,0,3677,3678,3,364,182,0,3678,3679,5,3,0,0,3679,3722,1,
        0,0,0,3680,3715,5,2,0,0,3681,3682,5,45,0,0,3682,3683,5,32,0,0,3683,
        3688,3,266,133,0,3684,3685,5,4,0,0,3685,3687,3,266,133,0,3686,3684,
        1,0,0,0,3687,3690,1,0,0,0,3688,3686,1,0,0,0,3688,3689,1,0,0,0,3689,
        3716,1,0,0,0,3690,3688,1,0,0,0,3691,3692,7,24,0,0,3692,3693,5,32,
        0,0,3693,3698,3,266,133,0,3694,3695,5,4,0,0,3695,3697,3,266,133,
        0,3696,3694,1,0,0,0,3697,3700,1,0,0,0,3698,3696,1,0,0,0,3698,3699,
        1,0,0,0,3699,3702,1,0,0,0,3700,3698,1,0,0,0,3701,3691,1,0,0,0,3701,
        3702,1,0,0,0,3702,3713,1,0,0,0,3703,3704,7,25,0,0,3704,3705,5,32,
        0,0,3705,3710,3,110,55,0,3706,3707,5,4,0,0,3707,3709,3,110,55,0,
        3708,3706,1,0,0,0,3709,3712,1,0,0,0,3710,3708,1,0,0,0,3710,3711,
        1,0,0,0,3711,3714,1,0,0,0,3712,3710,1,0,0,0,3713,3703,1,0,0,0,3713,
        3714,1,0,0,0,3714,3716,1,0,0,0,3715,3681,1,0,0,0,3715,3701,1,0,0,
        0,3716,3718,1,0,0,0,3717,3719,3,354,177,0,3718,3717,1,0,0,0,3718,
        3719,1,0,0,0,3719,3720,1,0,0,0,3720,3722,5,3,0,0,3721,3675,1,0,0,
        0,3721,3676,1,0,0,0,3721,3680,1,0,0,0,3722,353,1,0,0,0,3723,3724,
        5,230,0,0,3724,3740,3,356,178,0,3725,3726,5,253,0,0,3726,3740,3,
        356,178,0,3727,3728,5,230,0,0,3728,3729,5,25,0,0,3729,3730,3,356,
        178,0,3730,3731,5,15,0,0,3731,3732,3,356,178,0,3732,3740,1,0,0,0,
        3733,3734,5,253,0,0,3734,3735,5,25,0,0,3735,3736,3,356,178,0,3736,
        3737,5,15,0,0,3737,3738,3,356,178,0,3738,3740,1,0,0,0,3739,3723,
        1,0,0,0,3739,3725,1,0,0,0,3739,3727,1,0,0,0,3739,3733,1,0,0,0,3740,
        355,1,0,0,0,3741,3742,5,316,0,0,3742,3749,7,54,0,0,3743,3744,5,64,
        0,0,3744,3749,5,252,0,0,3745,3746,3,266,133,0,3746,3747,7,54,0,0,
        3747,3749,1,0,0,0,3748,3741,1,0,0,0,3748,3743,1,0,0,0,3748,3745,
        1,0,0,0,3749,357,1,0,0,0,3750,3755,3,362,181,0,3751,3752,5,4,0,0,
        3752,3754,3,362,181,0,3753,3751,1,0,0,0,3754,3757,1,0,0,0,3755,3753,
        1,0,0,0,3755,3756,1,0,0,0,3756,359,1,0,0,0,3757,3755,1,0,0,0,3758,
        3759,5,136,0,0,3759,3760,5,2,0,0,3760,3761,3,266,133,0,3761,3762,
        5,3,0,0,3762,3769,1,0,0,0,3763,3769,5,136,0,0,3764,3769,3,362,181,
        0,3765,3769,5,114,0,0,3766,3769,5,162,0,0,3767,3769,5,246,0,0,3768,
        3758,1,0,0,0,3768,3763,1,0,0,0,3768,3764,1,0,0,0,3768,3765,1,0,0,
        0,3768,3766,1,0,0,0,3768,3767,1,0,0,0,3769,361,1,0,0,0,3770,3775,
        3,368,184,0,3771,3772,5,5,0,0,3772,3774,3,368,184,0,3773,3771,1,
        0,0,0,3774,3777,1,0,0,0,3775,3773,1,0,0,0,3775,3776,1,0,0,0,3776,
        363,1,0,0,0,3777,3775,1,0,0,0,3778,3779,3,368,184,0,3779,3780,3,
        366,183,0,3780,365,1,0,0,0,3781,3782,5,356,0,0,3782,3784,3,368,184,
        0,3783,3781,1,0,0,0,3784,3785,1,0,0,0,3785,3783,1,0,0,0,3785,3786,
        1,0,0,0,3786,3789,1,0,0,0,3787,3789,1,0,0,0,3788,3783,1,0,0,0,3788,
        3787,1,0,0,0,3789,367,1,0,0,0,3790,3794,3,370,185,0,3791,3792,4,
        184,18,0,3792,3794,3,388,194,0,3793,3790,1,0,0,0,3793,3791,1,0,0,
        0,3794,369,1,0,0,0,3795,3802,5,383,0,0,3796,3802,3,372,186,0,3797,
        3798,4,185,19,0,3798,3802,3,386,193,0,3799,3800,4,185,20,0,3800,
        3802,3,390,195,0,3801,3795,1,0,0,0,3801,3796,1,0,0,0,3801,3797,1,
        0,0,0,3801,3799,1,0,0,0,3802,371,1,0,0,0,3803,3807,5,384,0,0,3804,
        3805,4,186,21,0,3805,3807,5,373,0,0,3806,3803,1,0,0,0,3806,3804,
        1,0,0,0,3807,373,1,0,0,0,3808,3809,5,384,0,0,3809,375,1,0,0,0,3810,
        3812,4,188,22,0,3811,3813,5,356,0,0,3812,3811,1,0,0,0,3812,3813,
        1,0,0,0,3813,3814,1,0,0,0,3814,3854,5,378,0,0,3815,3817,4,188,23,
        0,3816,3818,5,356,0,0,3817,3816,1,0,0,0,3817,3818,1,0,0,0,3818,3819,
        1,0,0,0,3819,3854,5,379,0,0,3820,3822,4,188,24,0,3821,3823,5,356,
        0,0,3822,3821,1,0,0,0,3822,3823,1,0,0,0,3823,3824,1,0,0,0,3824,3854,
        7,55,0,0,3825,3827,5,356,0,0,3826,3825,1,0,0,0,3826,3827,1,0,0,0,
        3827,3828,1,0,0,0,3828,3854,5,377,0,0,3829,3831,5,356,0,0,3830,3829,
        1,0,0,0,3830,3831,1,0,0,0,3831,3832,1,0,0,0,3832,3854,5,374,0,0,
        3833,3835,5,356,0,0,3834,3833,1,0,0,0,3834,3835,1,0,0,0,3835,3836,
        1,0,0,0,3836,3854,5,375,0,0,3837,3839,5,356,0,0,3838,3837,1,0,0,
        0,3838,3839,1,0,0,0,3839,3840,1,0,0,0,3840,3854,5,376,0,0,3841,3843,
        5,356,0,0,3842,3841,1,0,0,0,3842,3843,1,0,0,0,3843,3844,1,0,0,0,
        3844,3854,5,381,0,0,3845,3847,5,356,0,0,3846,3845,1,0,0,0,3846,3847,
        1,0,0,0,3847,3848,1,0,0,0,3848,3854,5,380,0,0,3849,3851,5,356,0,
        0,3850,3849,1,0,0,0,3850,3851,1,0,0,0,3851,3852,1,0,0,0,3852,3854,
        5,382,0,0,3853,3810,1,0,0,0,3853,3815,1,0,0,0,3853,3820,1,0,0,0,
        3853,3826,1,0,0,0,3853,3830,1,0,0,0,3853,3834,1,0,0,0,3853,3838,
        1,0,0,0,3853,3842,1,0,0,0,3853,3846,1,0,0,0,3853,3850,1,0,0,0,3854,
        377,1,0,0,0,3855,3856,5,314,0,0,3856,3867,3,318,159,0,3857,3867,
        3,46,23,0,3858,3867,3,312,156,0,3859,3860,7,56,0,0,3860,3861,5,195,
        0,0,3861,3867,5,196,0,0,3862,3863,5,264,0,0,3863,3867,3,326,163,
        0,3864,3865,5,97,0,0,3865,3867,5,84,0,0,3866,3855,1,0,0,0,3866,3857,
        1,0,0,0,3866,3858,1,0,0,0,3866,3859,1,0,0,0,3866,3862,1,0,0,0,3866,
        3864,1,0,0,0,3867,379,1,0,0,0,3868,3872,5,372,0,0,3869,3870,4,190,
        25,0,3870,3872,5,373,0,0,3871,3868,1,0,0,0,3871,3869,1,0,0,0,3872,
        381,1,0,0,0,3873,3876,3,380,190,0,3874,3876,5,196,0,0,3875,3873,
        1,0,0,0,3875,3874,1,0,0,0,3876,383,1,0,0,0,3877,3880,5,377,0,0,3878,
        3880,3,380,190,0,3879,3877,1,0,0,0,3879,3878,1,0,0,0,3880,385,1,
        0,0,0,3881,3882,7,57,0,0,3882,387,1,0,0,0,3883,3884,7,58,0,0,3884,
        389,1,0,0,0,3885,3886,7,59,0,0,3886,391,1,0,0,0,501,396,422,435,
        442,450,452,472,476,482,485,488,495,498,502,505,512,523,525,533,
        536,540,543,549,560,566,571,605,618,643,652,656,662,666,671,677,
        689,697,703,716,721,737,744,748,754,769,773,779,785,788,791,797,
        801,809,811,820,823,832,837,843,850,853,859,870,873,877,882,888,
        891,895,898,905,910,917,920,923,930,935,944,952,958,961,964,970,
        974,979,982,986,988,996,1004,1007,1012,1018,1024,1027,1031,1034,
        1038,1066,1069,1073,1079,1082,1085,1091,1099,1104,1110,1116,1119,
        1126,1133,1144,1161,1188,1191,1197,1206,1215,1223,1228,1233,1240,
        1246,1251,1259,1262,1269,1272,1281,1285,1289,1293,1300,1305,1317,
        1321,1328,1444,1452,1460,1469,1479,1483,1486,1492,1498,1516,1528,
        1533,1542,1550,1557,1559,1564,1569,1573,1578,1583,1588,1597,1602,
        1605,1610,1614,1619,1621,1625,1634,1642,1648,1660,1667,1676,1681,
        1684,1707,1709,1718,1725,1728,1735,1739,1745,1753,1760,1763,1771,
        1782,1793,1801,1807,1819,1826,1833,1845,1853,1859,1865,1868,1876,
        1885,1888,1897,1900,1909,1912,1921,1924,1927,1932,1934,1938,1950,
        1957,1964,1967,1969,1981,1985,1989,1995,1999,2007,2011,2014,2017,
        2020,2024,2028,2033,2037,2040,2043,2046,2050,2055,2059,2062,2065,
        2068,2070,2076,2083,2088,2091,2094,2098,2108,2112,2114,2117,2121,
        2127,2131,2142,2152,2156,2168,2180,2195,2200,2206,2218,2234,2239,
        2252,2257,2265,2271,2275,2278,2281,2288,2294,2303,2313,2328,2333,
        2335,2339,2348,2361,2366,2370,2378,2381,2385,2399,2412,2417,2421,
        2424,2428,2434,2437,2444,2456,2467,2480,2491,2496,2504,2509,2516,
        2525,2528,2533,2540,2543,2548,2554,2560,2565,2569,2575,2579,2582,
        2587,2590,2595,2599,2602,2605,2611,2616,2623,2626,2644,2646,2649,
        2660,2669,2676,2684,2691,2695,2698,2706,2714,2720,2728,2736,2743,
        2750,2752,2765,2771,2773,2783,2789,2791,2799,2803,2812,2815,2821,
        2825,2827,2836,2848,2850,2857,2864,2870,2876,2878,2885,2893,2901,
        2907,2912,2919,2925,2929,2931,2938,2947,2954,2964,2969,2973,2983,
        2990,3003,3005,3013,3015,3019,3027,3036,3042,3050,3055,3067,3072,
        3075,3081,3085,3090,3095,3100,3106,3127,3129,3140,3152,3164,3168,
        3177,3181,3199,3202,3210,3219,3228,3242,3248,3256,3267,3274,3277,
        3290,3295,3303,3307,3311,3323,3348,3355,3358,3373,3377,3392,3394,
        3404,3419,3421,3434,3438,3445,3450,3458,3463,3472,3495,3511,3528,
        3532,3538,3544,3553,3557,3559,3566,3574,3582,3595,3602,3605,3612,
        3620,3628,3642,3647,3652,3655,3668,3688,3698,3701,3710,3713,3715,
        3718,3721,3739,3748,3755,3768,3775,3785,3788,3793,3801,3806,3812,
        3817,3822,3826,3830,3834,3838,3842,3846,3850,3853,3866,3871,3875,
        3879
    ]

class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBaseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "')'", "','", "'.'", "'['", 
                     "']'", "'!'", "'ADD'", "'AFTER'", "'ALL'", "'ALTER'", 
                     "'ALWAYS'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", 
                     "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", 
                     "'AT'", "'AUTHORIZATION'", "'BETWEEN'", "'BIGINT'", 
                     "'BINARY'", "'BOOLEAN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", 
                     "'BY'", "'BYTE'", "'CACHE'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CATALOG'", "'CATALOGS'", "'CHANGE'", "'CHAR'", 
                     "'CHARACTER'", "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", 
                     "'CODEGEN'", "'COLLATE'", "'COLLATION'", "'COLLECTION'", 
                     "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
                     "'COMPACTIONS'", "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", 
                     "'COST'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", 
                     "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DAY'", "'DAYS'", "'DAYOFYEAR'", 
                     "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'", "'DATEADD'", 
                     "'DATE_ADD'", "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", 
                     "'DEC'", "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFINED'", 
                     "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
                     "'DISTRIBUTE'", "'DIV'", "'DOUBLE'", "'DROP'", "'ELSE'", 
                     "'END'", "'ESCAPE'", "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", 
                     "'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", 
                     "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", "'FOLLOWING'", 
                     "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", 
                     "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", 
                     "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", 
                     "'X'", "'HOUR'", "'HOURS'", "'IDENTIFIER'", "'IF'", 
                     "'IGNORE'", "'IMMEDIATE'", "'IMPORT'", "'IN'", "'INCLUDE'", 
                     "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", "'INPUTFORMAT'", 
                     "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INT'", "'INTEGER'", 
                     "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", 
                     "'LATERAL'", "'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", 
                     "'ILIKE'", "'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", 
                     "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", 
                     "'LONG'", "'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", 
                     "'MICROSECOND'", "'MICROSECONDS'", "'MILLISECOND'", 
                     "'MILLISECONDS'", "'MINUTE'", "'MINUTES'", "'MONTH'", 
                     "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", "'NAMESPACES'", 
                     "'NANOSECOND'", "'NANOSECONDS'", "'NATURAL'", "'NO'", 
                     "'NOT'", "'NULL'", "'NULLS'", "'NUMERIC'", "'OF'", 
                     "'OFFSET'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", 
                     "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", 
                     "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
                     "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENTILE_CONT'", 
                     "'PERCENTILE_DISC'", "'PERCENT'", "'PIVOT'", "'PLACING'", 
                     "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", 
                     "'PROPERTIES'", "'PURGE'", "'QUARTER'", "'QUERY'", 
                     "'RANGE'", "'REAL'", "'RECORDREADER'", "'RECORDWRITER'", 
                     "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
                     "'RENAME'", "'REPAIR'", "'REPEATABLE'", "'REPLACE'", 
                     "'RESET'", "'RESPECT'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", 
                     "<INVALID>", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
                     "'ROW'", "'ROWS'", "'SECOND'", "'SECONDS'", "'SCHEMA'", 
                     "'SCHEMAS'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
                     "'SETS'", "'SHORT'", "'SHOW'", "'SINGLE'", "'SKEWED'", 
                     "'SMALLINT'", "'SOME'", "'SORT'", "'SORTED'", "'SOURCE'", 
                     "'START'", "'STATISTICS'", "'STORED'", "'STRATIFY'", 
                     "'STRING'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'SYNC'", "'SYSTEM_TIME'", "'SYSTEM_VERSION'", "'TABLE'", 
                     "'TABLES'", "'TABLESAMPLE'", "'TARGET'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TIME'", "'TIMEDIFF'", 
                     "'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", 
                     "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", 
                     "'EXECUTE'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", 
                     "'TRANSACTIONS'", "'TRANSFORM'", "'TRIM'", "'TRUE'", 
                     "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UPDATE'", 
                     "'USE'", "'USER'", "'USING'", "'VALUES'", "'VARCHAR'", 
                     "'VAR'", "'VARIABLE'", "'VARIANT'", "'VERSION'", "'VIEW'", 
                     "'VIEWS'", "'VOID'", "'WEEK'", "'WEEKS'", "'WHEN'", 
                     "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", 
                     "'YEARS'", "'ZONE'", "<INVALID>", "'<=>'", "'<>'", 
                     "'!='", "'<'", "<INVALID>", "'>'", "<INVALID>", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", 
                     "'^'", "':'", "'::'", "'->'", "'=>'", "'/*+'", "'*/'", 
                     "'?'" ]

    symbolicNames = [ "<INVALID>", "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", 
                      "COMMA", "DOT", "LEFT_BRACKET", "RIGHT_BRACKET", "BANG", 
                      "ADD", "AFTER", "ALL", "ALTER", "ALWAYS", "ANALYZE", 
                      "AND", "ANTI", "ANY", "ANY_VALUE", "ARCHIVE", "ARRAY", 
                      "AS", "ASC", "AT", "AUTHORIZATION", "BETWEEN", "BIGINT", 
                      "BINARY", "BOOLEAN", "BOTH", "BUCKET", "BUCKETS", 
                      "BY", "BYTE", "CACHE", "CASCADE", "CASE", "CAST", 
                      "CATALOG", "CATALOGS", "CHANGE", "CHAR", "CHARACTER", 
                      "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", "CODEGEN", 
                      "COLLATE", "COLLATION", "COLLECTION", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", 
                      "CONCATENATE", "CONSTRAINT", "COST", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DAY", "DAYS", 
                      "DAYOFYEAR", "DATA", "DATE", "DATABASE", "DATABASES", 
                      "DATEADD", "DATE_ADD", "DATEDIFF", "DATE_DIFF", "DBPROPERTIES", 
                      "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFINED", 
                      "DELETE", "DELIMITED", "DESC", "DESCRIBE", "DFS", 
                      "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE", 
                      "DIV", "DOUBLE", "DROP", "ELSE", "END", "ESCAPE", 
                      "ESCAPED", "EXCEPT", "EXCHANGE", "EXCLUDE", "EXISTS", 
                      "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL", "EXTRACT", 
                      "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT", 
                      "FIRST", "FLOAT", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", 
                      "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", 
                      "GENERATED", "GLOBAL", "GRANT", "GROUP", "GROUPING", 
                      "HAVING", "BINARY_HEX", "HOUR", "HOURS", "IDENTIFIER_KW", 
                      "IF", "IGNORE", "IMMEDIATE", "IMPORT", "IN", "INCLUDE", 
                      "INDEX", "INDEXES", "INNER", "INPATH", "INPUTFORMAT", 
                      "INSERT", "INTERSECT", "INTERVAL", "INT", "INTEGER", 
                      "INTO", "IS", "ITEMS", "JOIN", "KEYS", "LAST", "LATERAL", 
                      "LAZY", "LEADING", "LEFT", "LIKE", "ILIKE", "LIMIT", 
                      "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", "LOCK", 
                      "LOCKS", "LOGICAL", "LONG", "MACRO", "MAP", "MATCHED", 
                      "MERGE", "MICROSECOND", "MICROSECONDS", "MILLISECOND", 
                      "MILLISECONDS", "MINUTE", "MINUTES", "MONTH", "MONTHS", 
                      "MSCK", "NAME", "NAMESPACE", "NAMESPACES", "NANOSECOND", 
                      "NANOSECONDS", "NATURAL", "NO", "NOT", "NULL", "NULLS", 
                      "NUMERIC", "OF", "OFFSET", "ON", "ONLY", "OPTION", 
                      "OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", 
                      "OVER", "OVERLAPS", "OVERLAY", "OVERWRITE", "PARTITION", 
                      "PARTITIONED", "PARTITIONS", "PERCENTILE_CONT", "PERCENTILE_DISC", 
                      "PERCENTLIT", "PIVOT", "PLACING", "POSITION", "PRECEDING", 
                      "PRIMARY", "PRINCIPALS", "PROPERTIES", "PURGE", "QUARTER", 
                      "QUERY", "RANGE", "REAL", "RECORDREADER", "RECORDWRITER", 
                      "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME", 
                      "REPAIR", "REPEATABLE", "REPLACE", "RESET", "RESPECT", 
                      "RESTRICT", "REVOKE", "RIGHT", "RLIKE", "ROLE", "ROLES", 
                      "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SECOND", "SECONDS", 
                      "SCHEMA", "SCHEMAS", "SELECT", "SEMI", "SEPARATED", 
                      "SERDE", "SERDEPROPERTIES", "SESSION_USER", "SET", 
                      "SETMINUS", "SETS", "SHORT", "SHOW", "SINGLE", "SKEWED", 
                      "SMALLINT", "SOME", "SORT", "SORTED", "SOURCE", "START", 
                      "STATISTICS", "STORED", "STRATIFY", "STRING", "STRUCT", 
                      "SUBSTR", "SUBSTRING", "SYNC", "SYSTEM_TIME", "SYSTEM_VERSION", 
                      "TABLE", "TABLES", "TABLESAMPLE", "TARGET", "TBLPROPERTIES", 
                      "TEMPORARY", "TERMINATED", "THEN", "TIME", "TIMEDIFF", 
                      "TIMESTAMP", "TIMESTAMP_LTZ", "TIMESTAMP_NTZ", "TIMESTAMPADD", 
                      "TIMESTAMPDIFF", "TINYINT", "TO", "EXECUTE", "TOUCH", 
                      "TRAILING", "TRANSACTION", "TRANSACTIONS", "TRANSFORM", 
                      "TRIM", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UNARCHIVE", 
                      "UNBOUNDED", "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", 
                      "UNLOCK", "UNPIVOT", "UNSET", "UPDATE", "USE", "USER", 
                      "USING", "VALUES", "VARCHAR", "VAR", "VARIABLE", "VARIANT", 
                      "VERSION", "VIEW", "VIEWS", "VOID", "WEEK", "WEEKS", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "WITHIN", "YEAR", 
                      "YEARS", "ZONE", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", 
                      "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "COLON", "DOUBLE_COLON", "ARROW", "FAT_ARROW", 
                      "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", 
                      "DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "FLOAT_LITERAL", "DOUBLE_LITERAL", 
                      "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                      "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleMultipartIdentifier = 3
    RULE_singleFunctionIdentifier = 4
    RULE_singleDataType = 5
    RULE_singleTableSchema = 6
    RULE_statement = 7
    RULE_executeImmediate = 8
    RULE_executeImmediateUsing = 9
    RULE_executeImmediateQueryParam = 10
    RULE_executeImmediateArgument = 11
    RULE_executeImmediateArgumentSeq = 12
    RULE_timezone = 13
    RULE_configKey = 14
    RULE_configValue = 15
    RULE_unsupportedHiveNativeCommands = 16
    RULE_createTableHeader = 17
    RULE_replaceTableHeader = 18
    RULE_clusterBySpec = 19
    RULE_bucketSpec = 20
    RULE_skewSpec = 21
    RULE_locationSpec = 22
    RULE_commentSpec = 23
    RULE_query = 24
    RULE_insertInto = 25
    RULE_partitionSpecLocation = 26
    RULE_partitionSpec = 27
    RULE_partitionVal = 28
    RULE_namespace = 29
    RULE_namespaces = 30
    RULE_describeFuncName = 31
    RULE_describeColName = 32
    RULE_ctes = 33
    RULE_namedQuery = 34
    RULE_tableProvider = 35
    RULE_createTableClauses = 36
    RULE_propertyList = 37
    RULE_property = 38
    RULE_propertyKey = 39
    RULE_propertyValue = 40
    RULE_expressionPropertyList = 41
    RULE_expressionProperty = 42
    RULE_constantList = 43
    RULE_nestedConstantList = 44
    RULE_createFileFormat = 45
    RULE_fileFormat = 46
    RULE_storageHandler = 47
    RULE_resource = 48
    RULE_dmlStatementNoWith = 49
    RULE_identifierReference = 50
    RULE_queryOrganization = 51
    RULE_multiInsertQueryBody = 52
    RULE_queryTerm = 53
    RULE_queryPrimary = 54
    RULE_sortItem = 55
    RULE_fromStatement = 56
    RULE_fromStatementBody = 57
    RULE_querySpecification = 58
    RULE_transformClause = 59
    RULE_selectClause = 60
    RULE_setClause = 61
    RULE_matchedClause = 62
    RULE_notMatchedClause = 63
    RULE_notMatchedBySourceClause = 64
    RULE_matchedAction = 65
    RULE_notMatchedAction = 66
    RULE_notMatchedBySourceAction = 67
    RULE_exceptClause = 68
    RULE_assignmentList = 69
    RULE_assignment = 70
    RULE_whereClause = 71
    RULE_havingClause = 72
    RULE_hint = 73
    RULE_hintStatement = 74
    RULE_fromClause = 75
    RULE_temporalClause = 76
    RULE_aggregationClause = 77
    RULE_groupByClause = 78
    RULE_groupingAnalytics = 79
    RULE_groupingElement = 80
    RULE_groupingSet = 81
    RULE_pivotClause = 82
    RULE_pivotColumn = 83
    RULE_pivotValue = 84
    RULE_unpivotClause = 85
    RULE_unpivotNullClause = 86
    RULE_unpivotOperator = 87
    RULE_unpivotSingleValueColumnClause = 88
    RULE_unpivotMultiValueColumnClause = 89
    RULE_unpivotColumnSet = 90
    RULE_unpivotValueColumn = 91
    RULE_unpivotNameColumn = 92
    RULE_unpivotColumnAndAlias = 93
    RULE_unpivotColumn = 94
    RULE_unpivotAlias = 95
    RULE_lateralView = 96
    RULE_setQuantifier = 97
    RULE_relation = 98
    RULE_relationExtension = 99
    RULE_joinRelation = 100
    RULE_joinType = 101
    RULE_joinCriteria = 102
    RULE_sample = 103
    RULE_sampleMethod = 104
    RULE_identifierList = 105
    RULE_identifierSeq = 106
    RULE_orderedIdentifierList = 107
    RULE_orderedIdentifier = 108
    RULE_identifierCommentList = 109
    RULE_identifierComment = 110
    RULE_relationPrimary = 111
    RULE_inlineTable = 112
    RULE_functionTableSubqueryArgument = 113
    RULE_tableArgumentPartitioning = 114
    RULE_functionTableNamedArgumentExpression = 115
    RULE_functionTableReferenceArgument = 116
    RULE_functionTableArgument = 117
    RULE_functionTable = 118
    RULE_tableAlias = 119
    RULE_rowFormat = 120
    RULE_multipartIdentifierList = 121
    RULE_multipartIdentifier = 122
    RULE_multipartIdentifierPropertyList = 123
    RULE_multipartIdentifierProperty = 124
    RULE_tableIdentifier = 125
    RULE_functionIdentifier = 126
    RULE_namedExpression = 127
    RULE_namedExpressionSeq = 128
    RULE_partitionFieldList = 129
    RULE_partitionField = 130
    RULE_transform = 131
    RULE_transformArgument = 132
    RULE_expression = 133
    RULE_namedArgumentExpression = 134
    RULE_functionArgument = 135
    RULE_expressionSeq = 136
    RULE_booleanExpression = 137
    RULE_predicate = 138
    RULE_valueExpression = 139
    RULE_datetimeUnit = 140
    RULE_primaryExpression = 141
    RULE_literalType = 142
    RULE_constant = 143
    RULE_comparisonOperator = 144
    RULE_arithmeticOperator = 145
    RULE_predicateOperator = 146
    RULE_booleanValue = 147
    RULE_interval = 148
    RULE_errorCapturingMultiUnitsInterval = 149
    RULE_multiUnitsInterval = 150
    RULE_errorCapturingUnitToUnitInterval = 151
    RULE_unitToUnitInterval = 152
    RULE_intervalValue = 153
    RULE_unitInMultiUnits = 154
    RULE_unitInUnitToUnit = 155
    RULE_colPosition = 156
    RULE_collateClause = 157
    RULE_type = 158
    RULE_dataType = 159
    RULE_qualifiedColTypeWithPositionList = 160
    RULE_qualifiedColTypeWithPosition = 161
    RULE_colDefinitionDescriptorWithPosition = 162
    RULE_defaultExpression = 163
    RULE_variableDefaultExpression = 164
    RULE_colTypeList = 165
    RULE_colType = 166
    RULE_createOrReplaceTableColTypeList = 167
    RULE_createOrReplaceTableColType = 168
    RULE_colDefinitionOption = 169
    RULE_generationExpression = 170
    RULE_complexColTypeList = 171
    RULE_complexColType = 172
    RULE_whenClause = 173
    RULE_windowClause = 174
    RULE_namedWindow = 175
    RULE_windowSpec = 176
    RULE_windowFrame = 177
    RULE_frameBound = 178
    RULE_qualifiedNameList = 179
    RULE_functionName = 180
    RULE_qualifiedName = 181
    RULE_errorCapturingIdentifier = 182
    RULE_errorCapturingIdentifierExtra = 183
    RULE_identifier = 184
    RULE_strictIdentifier = 185
    RULE_quotedIdentifier = 186
    RULE_backQuotedIdentifier = 187
    RULE_number = 188
    RULE_alterColumnAction = 189
    RULE_stringLit = 190
    RULE_comment = 191
    RULE_version = 192
    RULE_ansiNonReserved = 193
    RULE_strictNonReserved = 194
    RULE_nonReserved = 195

    ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                   "singleMultipartIdentifier", "singleFunctionIdentifier", 
                   "singleDataType", "singleTableSchema", "statement", "executeImmediate", 
                   "executeImmediateUsing", "executeImmediateQueryParam", 
                   "executeImmediateArgument", "executeImmediateArgumentSeq", 
                   "timezone", "configKey", "configValue", "unsupportedHiveNativeCommands", 
                   "createTableHeader", "replaceTableHeader", "clusterBySpec", 
                   "bucketSpec", "skewSpec", "locationSpec", "commentSpec", 
                   "query", "insertInto", "partitionSpecLocation", "partitionSpec", 
                   "partitionVal", "namespace", "namespaces", "describeFuncName", 
                   "describeColName", "ctes", "namedQuery", "tableProvider", 
                   "createTableClauses", "propertyList", "property", "propertyKey", 
                   "propertyValue", "expressionPropertyList", "expressionProperty", 
                   "constantList", "nestedConstantList", "createFileFormat", 
                   "fileFormat", "storageHandler", "resource", "dmlStatementNoWith", 
                   "identifierReference", "queryOrganization", "multiInsertQueryBody", 
                   "queryTerm", "queryPrimary", "sortItem", "fromStatement", 
                   "fromStatementBody", "querySpecification", "transformClause", 
                   "selectClause", "setClause", "matchedClause", "notMatchedClause", 
                   "notMatchedBySourceClause", "matchedAction", "notMatchedAction", 
                   "notMatchedBySourceAction", "exceptClause", "assignmentList", 
                   "assignment", "whereClause", "havingClause", "hint", 
                   "hintStatement", "fromClause", "temporalClause", "aggregationClause", 
                   "groupByClause", "groupingAnalytics", "groupingElement", 
                   "groupingSet", "pivotClause", "pivotColumn", "pivotValue", 
                   "unpivotClause", "unpivotNullClause", "unpivotOperator", 
                   "unpivotSingleValueColumnClause", "unpivotMultiValueColumnClause", 
                   "unpivotColumnSet", "unpivotValueColumn", "unpivotNameColumn", 
                   "unpivotColumnAndAlias", "unpivotColumn", "unpivotAlias", 
                   "lateralView", "setQuantifier", "relation", "relationExtension", 
                   "joinRelation", "joinType", "joinCriteria", "sample", 
                   "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTableSubqueryArgument", 
                   "tableArgumentPartitioning", "functionTableNamedArgumentExpression", 
                   "functionTableReferenceArgument", "functionTableArgument", 
                   "functionTable", "tableAlias", "rowFormat", "multipartIdentifierList", 
                   "multipartIdentifier", "multipartIdentifierPropertyList", 
                   "multipartIdentifierProperty", "tableIdentifier", "functionIdentifier", 
                   "namedExpression", "namedExpressionSeq", "partitionFieldList", 
                   "partitionField", "transform", "transformArgument", "expression", 
                   "namedArgumentExpression", "functionArgument", "expressionSeq", 
                   "booleanExpression", "predicate", "valueExpression", 
                   "datetimeUnit", "primaryExpression", "literalType", "constant", 
                   "comparisonOperator", "arithmeticOperator", "predicateOperator", 
                   "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "unitInMultiUnits", 
                   "unitInUnitToUnit", "colPosition", "collateClause", "type", 
                   "dataType", "qualifiedColTypeWithPositionList", "qualifiedColTypeWithPosition", 
                   "colDefinitionDescriptorWithPosition", "defaultExpression", 
                   "variableDefaultExpression", "colTypeList", "colType", 
                   "createOrReplaceTableColTypeList", "createOrReplaceTableColType", 
                   "colDefinitionOption", "generationExpression", "complexColTypeList", 
                   "complexColType", "whenClause", "windowClause", "namedWindow", 
                   "windowSpec", "windowFrame", "frameBound", "qualifiedNameList", 
                   "functionName", "qualifiedName", "errorCapturingIdentifier", 
                   "errorCapturingIdentifierExtra", "identifier", "strictIdentifier", 
                   "quotedIdentifier", "backQuotedIdentifier", "number", 
                   "alterColumnAction", "stringLit", "comment", "version", 
                   "ansiNonReserved", "strictNonReserved", "nonReserved" ]

    EOF = Token.EOF
    SEMICOLON=1
    LEFT_PAREN=2
    RIGHT_PAREN=3
    COMMA=4
    DOT=5
    LEFT_BRACKET=6
    RIGHT_BRACKET=7
    BANG=8
    ADD=9
    AFTER=10
    ALL=11
    ALTER=12
    ALWAYS=13
    ANALYZE=14
    AND=15
    ANTI=16
    ANY=17
    ANY_VALUE=18
    ARCHIVE=19
    ARRAY=20
    AS=21
    ASC=22
    AT=23
    AUTHORIZATION=24
    BETWEEN=25
    BIGINT=26
    BINARY=27
    BOOLEAN=28
    BOTH=29
    BUCKET=30
    BUCKETS=31
    BY=32
    BYTE=33
    CACHE=34
    CASCADE=35
    CASE=36
    CAST=37
    CATALOG=38
    CATALOGS=39
    CHANGE=40
    CHAR=41
    CHARACTER=42
    CHECK=43
    CLEAR=44
    CLUSTER=45
    CLUSTERED=46
    CODEGEN=47
    COLLATE=48
    COLLATION=49
    COLLECTION=50
    COLUMN=51
    COLUMNS=52
    COMMENT=53
    COMMIT=54
    COMPACT=55
    COMPACTIONS=56
    COMPUTE=57
    CONCATENATE=58
    CONSTRAINT=59
    COST=60
    CREATE=61
    CROSS=62
    CUBE=63
    CURRENT=64
    CURRENT_DATE=65
    CURRENT_TIME=66
    CURRENT_TIMESTAMP=67
    CURRENT_USER=68
    DAY=69
    DAYS=70
    DAYOFYEAR=71
    DATA=72
    DATE=73
    DATABASE=74
    DATABASES=75
    DATEADD=76
    DATE_ADD=77
    DATEDIFF=78
    DATE_DIFF=79
    DBPROPERTIES=80
    DEC=81
    DECIMAL=82
    DECLARE=83
    DEFAULT=84
    DEFINED=85
    DELETE=86
    DELIMITED=87
    DESC=88
    DESCRIBE=89
    DFS=90
    DIRECTORIES=91
    DIRECTORY=92
    DISTINCT=93
    DISTRIBUTE=94
    DIV=95
    DOUBLE=96
    DROP=97
    ELSE=98
    END=99
    ESCAPE=100
    ESCAPED=101
    EXCEPT=102
    EXCHANGE=103
    EXCLUDE=104
    EXISTS=105
    EXPLAIN=106
    EXPORT=107
    EXTENDED=108
    EXTERNAL=109
    EXTRACT=110
    FALSE=111
    FETCH=112
    FIELDS=113
    FILTER=114
    FILEFORMAT=115
    FIRST=116
    FLOAT=117
    FOLLOWING=118
    FOR=119
    FOREIGN=120
    FORMAT=121
    FORMATTED=122
    FROM=123
    FULL=124
    FUNCTION=125
    FUNCTIONS=126
    GENERATED=127
    GLOBAL=128
    GRANT=129
    GROUP=130
    GROUPING=131
    HAVING=132
    BINARY_HEX=133
    HOUR=134
    HOURS=135
    IDENTIFIER_KW=136
    IF=137
    IGNORE=138
    IMMEDIATE=139
    IMPORT=140
    IN=141
    INCLUDE=142
    INDEX=143
    INDEXES=144
    INNER=145
    INPATH=146
    INPUTFORMAT=147
    INSERT=148
    INTERSECT=149
    INTERVAL=150
    INT=151
    INTEGER=152
    INTO=153
    IS=154
    ITEMS=155
    JOIN=156
    KEYS=157
    LAST=158
    LATERAL=159
    LAZY=160
    LEADING=161
    LEFT=162
    LIKE=163
    ILIKE=164
    LIMIT=165
    LINES=166
    LIST=167
    LOAD=168
    LOCAL=169
    LOCATION=170
    LOCK=171
    LOCKS=172
    LOGICAL=173
    LONG=174
    MACRO=175
    MAP=176
    MATCHED=177
    MERGE=178
    MICROSECOND=179
    MICROSECONDS=180
    MILLISECOND=181
    MILLISECONDS=182
    MINUTE=183
    MINUTES=184
    MONTH=185
    MONTHS=186
    MSCK=187
    NAME=188
    NAMESPACE=189
    NAMESPACES=190
    NANOSECOND=191
    NANOSECONDS=192
    NATURAL=193
    NO=194
    NOT=195
    NULL=196
    NULLS=197
    NUMERIC=198
    OF=199
    OFFSET=200
    ON=201
    ONLY=202
    OPTION=203
    OPTIONS=204
    OR=205
    ORDER=206
    OUT=207
    OUTER=208
    OUTPUTFORMAT=209
    OVER=210
    OVERLAPS=211
    OVERLAY=212
    OVERWRITE=213
    PARTITION=214
    PARTITIONED=215
    PARTITIONS=216
    PERCENTILE_CONT=217
    PERCENTILE_DISC=218
    PERCENTLIT=219
    PIVOT=220
    PLACING=221
    POSITION=222
    PRECEDING=223
    PRIMARY=224
    PRINCIPALS=225
    PROPERTIES=226
    PURGE=227
    QUARTER=228
    QUERY=229
    RANGE=230
    REAL=231
    RECORDREADER=232
    RECORDWRITER=233
    RECOVER=234
    REDUCE=235
    REFERENCES=236
    REFRESH=237
    RENAME=238
    REPAIR=239
    REPEATABLE=240
    REPLACE=241
    RESET=242
    RESPECT=243
    RESTRICT=244
    REVOKE=245
    RIGHT=246
    RLIKE=247
    ROLE=248
    ROLES=249
    ROLLBACK=250
    ROLLUP=251
    ROW=252
    ROWS=253
    SECOND=254
    SECONDS=255
    SCHEMA=256
    SCHEMAS=257
    SELECT=258
    SEMI=259
    SEPARATED=260
    SERDE=261
    SERDEPROPERTIES=262
    SESSION_USER=263
    SET=264
    SETMINUS=265
    SETS=266
    SHORT=267
    SHOW=268
    SINGLE=269
    SKEWED=270
    SMALLINT=271
    SOME=272
    SORT=273
    SORTED=274
    SOURCE=275
    START=276
    STATISTICS=277
    STORED=278
    STRATIFY=279
    STRING=280
    STRUCT=281
    SUBSTR=282
    SUBSTRING=283
    SYNC=284
    SYSTEM_TIME=285
    SYSTEM_VERSION=286
    TABLE=287
    TABLES=288
    TABLESAMPLE=289
    TARGET=290
    TBLPROPERTIES=291
    TEMPORARY=292
    TERMINATED=293
    THEN=294
    TIME=295
    TIMEDIFF=296
    TIMESTAMP=297
    TIMESTAMP_LTZ=298
    TIMESTAMP_NTZ=299
    TIMESTAMPADD=300
    TIMESTAMPDIFF=301
    TINYINT=302
    TO=303
    EXECUTE=304
    TOUCH=305
    TRAILING=306
    TRANSACTION=307
    TRANSACTIONS=308
    TRANSFORM=309
    TRIM=310
    TRUE=311
    TRUNCATE=312
    TRY_CAST=313
    TYPE=314
    UNARCHIVE=315
    UNBOUNDED=316
    UNCACHE=317
    UNION=318
    UNIQUE=319
    UNKNOWN=320
    UNLOCK=321
    UNPIVOT=322
    UNSET=323
    UPDATE=324
    USE=325
    USER=326
    USING=327
    VALUES=328
    VARCHAR=329
    VAR=330
    VARIABLE=331
    VARIANT=332
    VERSION=333
    VIEW=334
    VIEWS=335
    VOID=336
    WEEK=337
    WEEKS=338
    WHEN=339
    WHERE=340
    WINDOW=341
    WITH=342
    WITHIN=343
    YEAR=344
    YEARS=345
    ZONE=346
    EQ=347
    NSEQ=348
    NEQ=349
    NEQJ=350
    LT=351
    LTE=352
    GT=353
    GTE=354
    PLUS=355
    MINUS=356
    ASTERISK=357
    SLASH=358
    PERCENT=359
    TILDE=360
    AMPERSAND=361
    PIPE=362
    CONCAT_PIPE=363
    HAT=364
    COLON=365
    DOUBLE_COLON=366
    ARROW=367
    FAT_ARROW=368
    HENT_START=369
    HENT_END=370
    QUESTION=371
    STRING_LITERAL=372
    DOUBLEQUOTED_STRING=373
    BIGINT_LITERAL=374
    SMALLINT_LITERAL=375
    TINYINT_LITERAL=376
    INTEGER_VALUE=377
    EXPONENT_VALUE=378
    DECIMAL_VALUE=379
    FLOAT_LITERAL=380
    DOUBLE_LITERAL=381
    BIGDECIMAL_LITERAL=382
    IDENTIFIER=383
    BACKQUOTED_IDENTIFIER=384
    SIMPLE_COMMENT=385
    BRACKETED_COMMENT=386
    WS=387
    UNRECOGNIZED=388

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



      # /**
      #  * When false, INTERSECT is given the greater precedence over the other set
      #  * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
      #  */
      # public boolean legacy_setops_precedence_enabled = false;
        self.legacy_setops_precedence_enabled = False
      # /**
      #  * When false, a literal with an exponent would be converted into
      #  * double type rather than decimal type.
      #  */
      # public boolean legacy_exponent_literal_as_decimal_enabled = false;
        self.legacy_exponent_literal_as_decimal_enabled = False

        # /**
      #  * When true, the behavior of keywords follows ANSI SQL standard.
      #  */
      # public boolean SQL_standard_keyword_behavior = false;
        self.SQL_standard_keyword_behavior = False
      #
      # /**
      #  * When true, double quoted literals are identifiers rather than STRINGs.
      #  */
      # public boolean double_quoted_identifiers = false;
        self.double_quoted_identifiers = False



    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SEMICOLON)
            else:
                return self.getToken(SqlBaseParser.SEMICOLON, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.statement()
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 393
                self.match(SqlBaseParser.SEMICOLON)
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 399
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.namedExpression()
            self.state = 402
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)




    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.tableIdentifier()
            self.state = 405
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleMultipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleMultipartIdentifier" ):
                listener.enterSingleMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleMultipartIdentifier" ):
                listener.exitSingleMultipartIdentifier(self)




    def singleMultipartIdentifier(self):

        localctx = SqlBaseParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.multipartIdentifier()
            self.state = 408
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)




    def singleFunctionIdentifier(self):

        localctx = SqlBaseParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.functionIdentifier()
            self.state = 411
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)




    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.dataType()
            self.state = 414
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableSchema" ):
                listener.enterSingleTableSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableSchema" ):
                listener.exitSingleTableSchema(self)




    def singleTableSchema(self):

        localctx = SqlBaseParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.colTypeList()
            self.state = 417
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropNamespace" ):
                listener.enterDropNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropNamespace" ):
                listener.exitDropNamespace(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # IdentifierReferenceContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(SqlBaseParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)


    class SetCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)
        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCatalog" ):
                listener.enterSetCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCatalog" ):
                listener.exitSetCatalog(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)


    class DropIndexContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)


    class SetCollationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.collationName = None # IdentifierContext
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def COLLATION(self):
            return self.getToken(SqlBaseParser.COLLATION, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCollation" ):
                listener.enterSetCollation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCollation" ):
                listener.exitSetCollation(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentNamespace" ):
                listener.enterShowCurrentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentNamespace" ):
                listener.exitShowCurrentNamespace(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)


    class CreateVariableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def variableDefaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.VariableDefaultExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateVariable" ):
                listener.enterCreateVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateVariable" ):
                listener.exitCreateVariable(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def namespaces(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespacesContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowNamespaces" ):
                listener.enterShowNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowNamespaces" ):
                listener.exitShowNamespaces(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.ReplaceTableHeaderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableClausesContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def createOrReplaceTableColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTable" ):
                listener.enterReplaceTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTable" ):
                listener.exitReplaceTable(self)


    class AnalyzeTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTables" ):
                listener.enterAnalyzeTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTables" ):
                listener.exitAnalyzeTables(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecLocationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceLocation" ):
                listener.enterSetNamespaceLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceLocation" ):
                listener.exitSetNamespaceLocation(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceProperties" ):
                listener.enterSetNamespaceProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceProperties" ):
                listener.exitSetNamespaceProperties(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)


    class SetQuotedConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def configValue(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuotedConfiguration" ):
                listener.enterSetQuotedConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuotedConfiguration" ):
                listener.exitSetQuotedConfiguration(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None # StringLitContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveReplaceColumns" ):
                listener.enterHiveReplaceColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveReplaceColumns" ):
                listener.exitHiveReplaceColumns(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def comment(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentNamespace" ):
                listener.enterCommentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentNamespace" ):
                listener.exitCommentNamespace(self)


    class ResetQuotedConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetQuotedConfiguration" ):
                listener.enterResetQuotedConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetQuotedConfiguration" ):
                listener.exitResetQuotedConfiguration(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableClausesContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def createOrReplaceTableColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # PropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeRelation" ):
                listener.enterDescribeRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeRelation" ):
                listener.exitDescribeRelation(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.from_ = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableColumn" ):
                listener.enterRenameTableColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableColumn" ):
                listener.exitRenameTableColumn(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveChangeColumn" ):
                listener.enterHiveChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveChangeColumn" ):
                listener.exitHiveChangeColumn(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)

        def timezone(self):
            return self.getTypedRuleContext(SqlBaseParser.TimezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeQuery" ):
                listener.enterDescribeQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeQuery" ):
                listener.exitDescribeQuery(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)


    class ShowTableExtendedContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.ns = None # IdentifierReferenceContext
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTableExtended" ):
                listener.enterShowTableExtended(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTableExtended" ):
                listener.exitShowTableExtended(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeNamespace" ):
                listener.enterDescribeNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeNamespace" ):
                listener.exitDescribeNamespace(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ALTER)
            else:
                return self.getToken(SqlBaseParser.ALTER, i)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterColumnActionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableAlterColumn" ):
                listener.enterAlterTableAlterColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableAlterColumn" ):
                listener.exitAlterTableAlterColumn(self)


    class RefreshFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshFunction" ):
                listener.enterRefreshFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshFunction" ):
                listener.exitRefreshFunction(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def comment(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)


    class SetVariableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)

        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)
        def VAR(self):
            return self.getToken(SqlBaseParser.VAR, 0)
        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)
        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVariable" ):
                listener.enterSetVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVariable" ):
                listener.exitSetVariable(self)


    class CreateIndexContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.indexType = None # IdentifierContext
            self.columns = None # MultipartIdentifierPropertyListContext
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def multipartIdentifierPropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierPropertyListContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)


    class UseNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseNamespace" ):
                listener.enterUseNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseNamespace" ):
                listener.exitUseNamespace(self)


    class DropVariableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropVariable" ):
                listener.enterDropVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropVariable" ):
                listener.exitDropVariable(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DBPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PROPERTIES)
            else:
                return self.getToken(SqlBaseParser.PROPERTIES, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateNamespace" ):
                listener.enterCreateNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateNamespace" ):
                listener.exitCreateNamespace(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.key = None # PropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def propertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)


    class VisitExecuteImmediateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def executeImmediate(self):
            return self.getTypedRuleContext(SqlBaseParser.ExecuteImmediateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisitExecuteImmediate" ):
                listener.enterVisitExecuteImmediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisitExecuteImmediate" ):
                listener.exitVisitExecuteImmediate(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableColumns" ):
                listener.enterDropTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableColumns" ):
                listener.exitDropTableColumns(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowViews" ):
                listener.enterShowViews(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowViews" ):
                listener.exitShowViews(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.ns = None # IdentifierReferenceContext
            self.legacy = None # MultipartIdentifierContext
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionListContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.VisitExecuteImmediateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.executeImmediate()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==342:
                    self.state = 421
                    self.ctes()


                self.state = 424
                self.dmlStatementNoWith()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 425
                self.match(SqlBaseParser.USE)
                self.state = 426
                self.identifierReference()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.UseNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 427
                self.match(SqlBaseParser.USE)
                self.state = 428
                self.namespace()
                self.state = 429
                self.identifierReference()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SetCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 431
                self.match(SqlBaseParser.SET)
                self.state = 432
                self.match(SqlBaseParser.CATALOG)
                self.state = 435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 433
                    self.errorCapturingIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 434
                    self.stringLit()
                    pass


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 437
                self.match(SqlBaseParser.CREATE)
                self.state = 438
                self.namespace()
                self.state = 442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 439
                    self.match(SqlBaseParser.IF)
                    self.state = 440
                    self.match(SqlBaseParser.NOT)
                    self.state = 441
                    self.match(SqlBaseParser.EXISTS)


                self.state = 444
                self.identifierReference()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==53 or _la==170 or _la==342:
                    self.state = 450
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [53]:
                        self.state = 445
                        self.commentSpec()
                        pass
                    elif token in [170]:
                        self.state = 446
                        self.locationSpec()
                        pass
                    elif token in [342]:
                        self.state = 447
                        self.match(SqlBaseParser.WITH)
                        self.state = 448
                        _la = self._input.LA(1)
                        if not(_la==80 or _la==226):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 449
                        self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = SqlBaseParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 455
                self.match(SqlBaseParser.ALTER)
                self.state = 456
                self.namespace()
                self.state = 457
                self.identifierReference()
                self.state = 458
                self.match(SqlBaseParser.SET)
                self.state = 459
                _la = self._input.LA(1)
                if not(_la==80 or _la==226):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 460
                self.propertyList()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 462
                self.match(SqlBaseParser.ALTER)
                self.state = 463
                self.namespace()
                self.state = 464
                self.identifierReference()
                self.state = 465
                self.match(SqlBaseParser.SET)
                self.state = 466
                self.locationSpec()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 468
                self.match(SqlBaseParser.DROP)
                self.state = 469
                self.namespace()
                self.state = 472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 470
                    self.match(SqlBaseParser.IF)
                    self.state = 471
                    self.match(SqlBaseParser.EXISTS)


                self.state = 474
                self.identifierReference()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35 or _la==244:
                    self.state = 475
                    _la = self._input.LA(1)
                    if not(_la==35 or _la==244):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 11:
                localctx = SqlBaseParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 478
                self.match(SqlBaseParser.SHOW)
                self.state = 479
                self.namespaces()
                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 480
                    _la = self._input.LA(1)
                    if not(_la==123 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 481
                    self.multipartIdentifier()


                self.state = 488
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 485
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 484
                        self.match(SqlBaseParser.LIKE)


                    self.state = 487
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 490
                self.createTableHeader()
                self.state = 495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 491
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 492
                    self.createOrReplaceTableColTypeList()
                    self.state = 493
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 497
                    self.tableProvider()


                self.state = 500
                self.createTableClauses()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==21 or _la==123 or _la==176 or ((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & 4503599635759105) != 0) or _la==328 or _la==342:
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 501
                        self.match(SqlBaseParser.AS)


                    self.state = 504
                    self.query()


                pass

            elif la_ == 13:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 507
                self.match(SqlBaseParser.CREATE)
                self.state = 508
                self.match(SqlBaseParser.TABLE)
                self.state = 512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 509
                    self.match(SqlBaseParser.IF)
                    self.state = 510
                    self.match(SqlBaseParser.NOT)
                    self.state = 511
                    self.match(SqlBaseParser.EXISTS)


                self.state = 514
                localctx.target = self.tableIdentifier()
                self.state = 515
                self.match(SqlBaseParser.LIKE)
                self.state = 516
                localctx.source = self.tableIdentifier()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==170 or ((((_la - 252)) & ~0x3f) == 0 and ((1 << (_la - 252)) & 549822922753) != 0) or _la==327:
                    self.state = 523
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [327]:
                        self.state = 517
                        self.tableProvider()
                        pass
                    elif token in [252]:
                        self.state = 518
                        self.rowFormat()
                        pass
                    elif token in [278]:
                        self.state = 519
                        self.createFileFormat()
                        pass
                    elif token in [170]:
                        self.state = 520
                        self.locationSpec()
                        pass
                    elif token in [291]:
                        self.state = 521
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 522
                        localctx.tableProps = self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 528
                self.replaceTableHeader()
                self.state = 533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 529
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 530
                    self.createOrReplaceTableColTypeList()
                    self.state = 531
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 535
                    self.tableProvider()


                self.state = 538
                self.createTableClauses()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==21 or _la==123 or _la==176 or ((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & 4503599635759105) != 0) or _la==328 or _la==342:
                    self.state = 540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 539
                        self.match(SqlBaseParser.AS)


                    self.state = 542
                    self.query()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 545
                self.match(SqlBaseParser.ANALYZE)
                self.state = 546
                self.match(SqlBaseParser.TABLE)
                self.state = 547
                self.identifierReference()
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 548
                    self.partitionSpec()


                self.state = 551
                self.match(SqlBaseParser.COMPUTE)
                self.state = 552
                self.match(SqlBaseParser.STATISTICS)
                self.state = 560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 553
                    self.identifier()

                elif la_ == 2:
                    self.state = 554
                    self.match(SqlBaseParser.FOR)
                    self.state = 555
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 556
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 557
                    self.match(SqlBaseParser.FOR)
                    self.state = 558
                    self.match(SqlBaseParser.ALL)
                    self.state = 559
                    self.match(SqlBaseParser.COLUMNS)


                pass

            elif la_ == 16:
                localctx = SqlBaseParser.AnalyzeTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 562
                self.match(SqlBaseParser.ANALYZE)
                self.state = 563
                self.match(SqlBaseParser.TABLES)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123 or _la==141:
                    self.state = 564
                    _la = self._input.LA(1)
                    if not(_la==123 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 565
                    self.identifierReference()


                self.state = 568
                self.match(SqlBaseParser.COMPUTE)
                self.state = 569
                self.match(SqlBaseParser.STATISTICS)
                self.state = 571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 570
                    self.identifier()


                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 573
                self.match(SqlBaseParser.ALTER)
                self.state = 574
                self.match(SqlBaseParser.TABLE)
                self.state = 575
                self.identifierReference()
                self.state = 576
                self.match(SqlBaseParser.ADD)
                self.state = 577
                _la = self._input.LA(1)
                if not(_la==51 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 578
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 580
                self.match(SqlBaseParser.ALTER)
                self.state = 581
                self.match(SqlBaseParser.TABLE)
                self.state = 582
                self.identifierReference()
                self.state = 583
                self.match(SqlBaseParser.ADD)
                self.state = 584
                _la = self._input.LA(1)
                if not(_la==51 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 585
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 586
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 587
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 589
                self.match(SqlBaseParser.ALTER)
                self.state = 590
                self.match(SqlBaseParser.TABLE)
                self.state = 591
                localctx.table = self.identifierReference()
                self.state = 592
                self.match(SqlBaseParser.RENAME)
                self.state = 593
                self.match(SqlBaseParser.COLUMN)
                self.state = 594
                localctx.from_ = self.multipartIdentifier()
                self.state = 595
                self.match(SqlBaseParser.TO)
                self.state = 596
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 598
                self.match(SqlBaseParser.ALTER)
                self.state = 599
                self.match(SqlBaseParser.TABLE)
                self.state = 600
                self.identifierReference()
                self.state = 601
                self.match(SqlBaseParser.DROP)
                self.state = 602
                _la = self._input.LA(1)
                if not(_la==51 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 603
                    self.match(SqlBaseParser.IF)
                    self.state = 604
                    self.match(SqlBaseParser.EXISTS)


                self.state = 607
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 608
                localctx.columns = self.multipartIdentifierList()
                self.state = 609
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 611
                self.match(SqlBaseParser.ALTER)
                self.state = 612
                self.match(SqlBaseParser.TABLE)
                self.state = 613
                self.identifierReference()
                self.state = 614
                self.match(SqlBaseParser.DROP)
                self.state = 615
                _la = self._input.LA(1)
                if not(_la==51 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 616
                    self.match(SqlBaseParser.IF)
                    self.state = 617
                    self.match(SqlBaseParser.EXISTS)


                self.state = 620
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 622
                self.match(SqlBaseParser.ALTER)
                self.state = 623
                _la = self._input.LA(1)
                if not(_la==287 or _la==334):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 624
                localctx.from_ = self.identifierReference()
                self.state = 625
                self.match(SqlBaseParser.RENAME)
                self.state = 626
                self.match(SqlBaseParser.TO)
                self.state = 627
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 629
                self.match(SqlBaseParser.ALTER)
                self.state = 630
                _la = self._input.LA(1)
                if not(_la==287 or _la==334):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 631
                self.identifierReference()
                self.state = 632
                self.match(SqlBaseParser.SET)
                self.state = 633
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 634
                self.propertyList()
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 636
                self.match(SqlBaseParser.ALTER)
                self.state = 637
                _la = self._input.LA(1)
                if not(_la==287 or _la==334):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 638
                self.identifierReference()
                self.state = 639
                self.match(SqlBaseParser.UNSET)
                self.state = 640
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 641
                    self.match(SqlBaseParser.IF)
                    self.state = 642
                    self.match(SqlBaseParser.EXISTS)


                self.state = 645
                self.propertyList()
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 647
                self.match(SqlBaseParser.ALTER)
                self.state = 648
                self.match(SqlBaseParser.TABLE)
                self.state = 649
                localctx.table = self.identifierReference()
                self.state = 650
                _la = self._input.LA(1)
                if not(_la==12 or _la==40):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 651
                    self.match(SqlBaseParser.COLUMN)


                self.state = 654
                localctx.column = self.multipartIdentifier()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==53 or _la==97 or _la==116 or _la==264 or _la==314:
                    self.state = 655
                    self.alterColumnAction()


                pass

            elif la_ == 26:
                localctx = SqlBaseParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 658
                self.match(SqlBaseParser.ALTER)
                self.state = 659
                self.match(SqlBaseParser.TABLE)
                self.state = 660
                localctx.table = self.identifierReference()
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 661
                    self.partitionSpec()


                self.state = 664
                self.match(SqlBaseParser.CHANGE)
                self.state = 666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 665
                    self.match(SqlBaseParser.COLUMN)


                self.state = 668
                localctx.colName = self.multipartIdentifier()
                self.state = 669
                self.colType()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==116:
                    self.state = 670
                    self.colPosition()


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 673
                self.match(SqlBaseParser.ALTER)
                self.state = 674
                self.match(SqlBaseParser.TABLE)
                self.state = 675
                localctx.table = self.identifierReference()
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 676
                    self.partitionSpec()


                self.state = 679
                self.match(SqlBaseParser.REPLACE)
                self.state = 680
                self.match(SqlBaseParser.COLUMNS)
                self.state = 681
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 682
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 683
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 28:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 685
                self.match(SqlBaseParser.ALTER)
                self.state = 686
                self.match(SqlBaseParser.TABLE)
                self.state = 687
                self.identifierReference()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 688
                    self.partitionSpec()


                self.state = 691
                self.match(SqlBaseParser.SET)
                self.state = 692
                self.match(SqlBaseParser.SERDE)
                self.state = 693
                self.stringLit()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==342:
                    self.state = 694
                    self.match(SqlBaseParser.WITH)
                    self.state = 695
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 696
                    self.propertyList()


                pass

            elif la_ == 29:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 699
                self.match(SqlBaseParser.ALTER)
                self.state = 700
                self.match(SqlBaseParser.TABLE)
                self.state = 701
                self.identifierReference()
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 702
                    self.partitionSpec()


                self.state = 705
                self.match(SqlBaseParser.SET)
                self.state = 706
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 707
                self.propertyList()
                pass

            elif la_ == 30:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 709
                self.match(SqlBaseParser.ALTER)
                self.state = 710
                _la = self._input.LA(1)
                if not(_la==287 or _la==334):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 711
                self.identifierReference()
                self.state = 712
                self.match(SqlBaseParser.ADD)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 713
                    self.match(SqlBaseParser.IF)
                    self.state = 714
                    self.match(SqlBaseParser.NOT)
                    self.state = 715
                    self.match(SqlBaseParser.EXISTS)


                self.state = 719 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 718
                    self.partitionSpecLocation()
                    self.state = 721 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==214):
                        break

                pass

            elif la_ == 31:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 723
                self.match(SqlBaseParser.ALTER)
                self.state = 724
                self.match(SqlBaseParser.TABLE)
                self.state = 725
                self.identifierReference()
                self.state = 726
                localctx.from_ = self.partitionSpec()
                self.state = 727
                self.match(SqlBaseParser.RENAME)
                self.state = 728
                self.match(SqlBaseParser.TO)
                self.state = 729
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 731
                self.match(SqlBaseParser.ALTER)
                self.state = 732
                _la = self._input.LA(1)
                if not(_la==287 or _la==334):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 733
                self.identifierReference()
                self.state = 734
                self.match(SqlBaseParser.DROP)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 735
                    self.match(SqlBaseParser.IF)
                    self.state = 736
                    self.match(SqlBaseParser.EXISTS)


                self.state = 739
                self.partitionSpec()
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 740
                    self.match(SqlBaseParser.COMMA)
                    self.state = 741
                    self.partitionSpec()
                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227:
                    self.state = 747
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 33:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 750
                self.match(SqlBaseParser.ALTER)
                self.state = 751
                self.match(SqlBaseParser.TABLE)
                self.state = 752
                self.identifierReference()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 753
                    self.partitionSpec()


                self.state = 756
                self.match(SqlBaseParser.SET)
                self.state = 757
                self.locationSpec()
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 759
                self.match(SqlBaseParser.ALTER)
                self.state = 760
                self.match(SqlBaseParser.TABLE)
                self.state = 761
                self.identifierReference()
                self.state = 762
                self.match(SqlBaseParser.RECOVER)
                self.state = 763
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 765
                self.match(SqlBaseParser.DROP)
                self.state = 766
                self.match(SqlBaseParser.TABLE)
                self.state = 769
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 767
                    self.match(SqlBaseParser.IF)
                    self.state = 768
                    self.match(SqlBaseParser.EXISTS)


                self.state = 771
                self.identifierReference()
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227:
                    self.state = 772
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 36:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 775
                self.match(SqlBaseParser.DROP)
                self.state = 776
                self.match(SqlBaseParser.VIEW)
                self.state = 779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 777
                    self.match(SqlBaseParser.IF)
                    self.state = 778
                    self.match(SqlBaseParser.EXISTS)


                self.state = 781
                self.identifierReference()
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 782
                self.match(SqlBaseParser.CREATE)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 783
                    self.match(SqlBaseParser.OR)
                    self.state = 784
                    self.match(SqlBaseParser.REPLACE)


                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128 or _la==292:
                    self.state = 788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==128:
                        self.state = 787
                        self.match(SqlBaseParser.GLOBAL)


                    self.state = 790
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 793
                self.match(SqlBaseParser.VIEW)
                self.state = 797
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 794
                    self.match(SqlBaseParser.IF)
                    self.state = 795
                    self.match(SqlBaseParser.NOT)
                    self.state = 796
                    self.match(SqlBaseParser.EXISTS)


                self.state = 799
                self.identifierReference()
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 800
                    self.identifierCommentList()


                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==53 or _la==215 or _la==291:
                    self.state = 809
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [53]:
                        self.state = 803
                        self.commentSpec()
                        pass
                    elif token in [215]:
                        self.state = 804
                        self.match(SqlBaseParser.PARTITIONED)
                        self.state = 805
                        self.match(SqlBaseParser.ON)
                        self.state = 806
                        self.identifierList()
                        pass
                    elif token in [291]:
                        self.state = 807
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 808
                        self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 814
                self.match(SqlBaseParser.AS)
                self.state = 815
                self.query()
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 817
                self.match(SqlBaseParser.CREATE)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 818
                    self.match(SqlBaseParser.OR)
                    self.state = 819
                    self.match(SqlBaseParser.REPLACE)


                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 822
                    self.match(SqlBaseParser.GLOBAL)


                self.state = 825
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 826
                self.match(SqlBaseParser.VIEW)
                self.state = 827
                self.tableIdentifier()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 828
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 829
                    self.colTypeList()
                    self.state = 830
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 834
                self.tableProvider()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204:
                    self.state = 835
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 836
                    self.propertyList()


                pass

            elif la_ == 39:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 839
                self.match(SqlBaseParser.ALTER)
                self.state = 840
                self.match(SqlBaseParser.VIEW)
                self.state = 841
                self.identifierReference()
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 842
                    self.match(SqlBaseParser.AS)


                self.state = 845
                self.query()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 847
                self.match(SqlBaseParser.CREATE)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 848
                    self.match(SqlBaseParser.OR)
                    self.state = 849
                    self.match(SqlBaseParser.REPLACE)


                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==292:
                    self.state = 852
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 855
                self.match(SqlBaseParser.FUNCTION)
                self.state = 859
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.match(SqlBaseParser.IF)
                    self.state = 857
                    self.match(SqlBaseParser.NOT)
                    self.state = 858
                    self.match(SqlBaseParser.EXISTS)


                self.state = 861
                self.identifierReference()
                self.state = 862
                self.match(SqlBaseParser.AS)
                self.state = 863
                localctx.className = self.stringLit()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 864
                    self.match(SqlBaseParser.USING)
                    self.state = 865
                    self.resource()
                    self.state = 870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 866
                        self.match(SqlBaseParser.COMMA)
                        self.state = 867
                        self.resource()
                        self.state = 872
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 41:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 875
                self.match(SqlBaseParser.DROP)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==292:
                    self.state = 876
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 879
                self.match(SqlBaseParser.FUNCTION)
                self.state = 882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 880
                    self.match(SqlBaseParser.IF)
                    self.state = 881
                    self.match(SqlBaseParser.EXISTS)


                self.state = 884
                self.identifierReference()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.CreateVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 885
                self.match(SqlBaseParser.DECLARE)
                self.state = 888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 886
                    self.match(SqlBaseParser.OR)
                    self.state = 887
                    self.match(SqlBaseParser.REPLACE)


                self.state = 891
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.match(SqlBaseParser.VARIABLE)


                self.state = 893
                self.identifierReference()
                self.state = 895
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 894
                    self.dataType()


                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84 or _la==347:
                    self.state = 897
                    self.variableDefaultExpression()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.DropVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 900
                self.match(SqlBaseParser.DROP)
                self.state = 901
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 902
                self.match(SqlBaseParser.VARIABLE)
                self.state = 905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 903
                    self.match(SqlBaseParser.IF)
                    self.state = 904
                    self.match(SqlBaseParser.EXISTS)


                self.state = 907
                self.identifierReference()
                pass

            elif la_ == 44:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 908
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & 2305843009213702145) != 0) or _la==122 or _la==173:
                    self.state = 909
                    _la = self._input.LA(1)
                    if not(((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & 2305843009213702145) != 0) or _la==122 or _la==173):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 912
                self.statement()
                pass

            elif la_ == 45:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 913
                self.match(SqlBaseParser.SHOW)
                self.state = 914
                self.match(SqlBaseParser.TABLES)
                self.state = 917
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 915
                    _la = self._input.LA(1)
                    if not(_la==123 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 916
                    self.identifierReference()


                self.state = 923
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 920
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                    if la_ == 1:
                        self.state = 919
                        self.match(SqlBaseParser.LIKE)


                    self.state = 922
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 46:
                localctx = SqlBaseParser.ShowTableExtendedContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 925
                self.match(SqlBaseParser.SHOW)
                self.state = 926
                self.match(SqlBaseParser.TABLE)
                self.state = 927
                self.match(SqlBaseParser.EXTENDED)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123 or _la==141:
                    self.state = 928
                    _la = self._input.LA(1)
                    if not(_la==123 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 929
                    localctx.ns = self.identifierReference()


                self.state = 932
                self.match(SqlBaseParser.LIKE)
                self.state = 933
                localctx.pattern = self.stringLit()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 934
                    self.partitionSpec()


                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 937
                self.match(SqlBaseParser.SHOW)
                self.state = 938
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 939
                localctx.table = self.identifierReference()
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 940
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 941
                    localctx.key = self.propertyKey()
                    self.state = 942
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass

            elif la_ == 48:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 946
                self.match(SqlBaseParser.SHOW)
                self.state = 947
                self.match(SqlBaseParser.COLUMNS)
                self.state = 948
                _la = self._input.LA(1)
                if not(_la==123 or _la==141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 949
                localctx.table = self.identifierReference()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123 or _la==141:
                    self.state = 950
                    _la = self._input.LA(1)
                    if not(_la==123 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 951
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 49:
                localctx = SqlBaseParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 954
                self.match(SqlBaseParser.SHOW)
                self.state = 955
                self.match(SqlBaseParser.VIEWS)
                self.state = 958
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 956
                    _la = self._input.LA(1)
                    if not(_la==123 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 957
                    self.identifierReference()


                self.state = 964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 961
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 960
                        self.match(SqlBaseParser.LIKE)


                    self.state = 963
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 50:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 966
                self.match(SqlBaseParser.SHOW)
                self.state = 967
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 968
                self.identifierReference()
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 969
                    self.partitionSpec()


                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 972
                self.match(SqlBaseParser.SHOW)
                self.state = 974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 973
                    self.identifier()


                self.state = 976
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 977
                    _la = self._input.LA(1)
                    if not(_la==123 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 978
                    localctx.ns = self.identifierReference()


                self.state = 988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 982
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        self.state = 981
                        self.match(SqlBaseParser.LIKE)


                    self.state = 986
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 984
                        localctx.legacy = self.multipartIdentifier()
                        pass

                    elif la_ == 2:
                        self.state = 985
                        localctx.pattern = self.stringLit()
                        pass




                pass

            elif la_ == 52:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 990
                self.match(SqlBaseParser.SHOW)
                self.state = 991
                self.match(SqlBaseParser.CREATE)
                self.state = 992
                self.match(SqlBaseParser.TABLE)
                self.state = 993
                self.identifierReference()
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 994
                    self.match(SqlBaseParser.AS)
                    self.state = 995
                    self.match(SqlBaseParser.SERDE)


                pass

            elif la_ == 53:
                localctx = SqlBaseParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 998
                self.match(SqlBaseParser.SHOW)
                self.state = 999
                self.match(SqlBaseParser.CURRENT)
                self.state = 1000
                self.namespace()
                pass

            elif la_ == 54:
                localctx = SqlBaseParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1001
                self.match(SqlBaseParser.SHOW)
                self.state = 1002
                self.match(SqlBaseParser.CATALOGS)
                self.state = 1007
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 1004
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        self.state = 1003
                        self.match(SqlBaseParser.LIKE)


                    self.state = 1006
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 55:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1009
                _la = self._input.LA(1)
                if not(_la==88 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1010
                self.match(SqlBaseParser.FUNCTION)
                self.state = 1012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 1011
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 1014
                self.describeFuncName()
                pass

            elif la_ == 56:
                localctx = SqlBaseParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1015
                _la = self._input.LA(1)
                if not(_la==88 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1016
                self.namespace()
                self.state = 1018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 1017
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 1020
                self.identifierReference()
                pass

            elif la_ == 57:
                localctx = SqlBaseParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1022
                _la = self._input.LA(1)
                if not(_la==88 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 1023
                    self.match(SqlBaseParser.TABLE)


                self.state = 1027
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 1026
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==108 or _la==122):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1029
                self.identifierReference()
                self.state = 1031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1030
                    self.partitionSpec()


                self.state = 1034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1033
                    self.describeColName()


                pass

            elif la_ == 58:
                localctx = SqlBaseParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1036
                _la = self._input.LA(1)
                if not(_la==88 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==229:
                    self.state = 1037
                    self.match(SqlBaseParser.QUERY)


                self.state = 1040
                self.query()
                pass

            elif la_ == 59:
                localctx = SqlBaseParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1041
                self.match(SqlBaseParser.COMMENT)
                self.state = 1042
                self.match(SqlBaseParser.ON)
                self.state = 1043
                self.namespace()
                self.state = 1044
                self.identifierReference()
                self.state = 1045
                self.match(SqlBaseParser.IS)
                self.state = 1046
                self.comment()
                pass

            elif la_ == 60:
                localctx = SqlBaseParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1048
                self.match(SqlBaseParser.COMMENT)
                self.state = 1049
                self.match(SqlBaseParser.ON)
                self.state = 1050
                self.match(SqlBaseParser.TABLE)
                self.state = 1051
                self.identifierReference()
                self.state = 1052
                self.match(SqlBaseParser.IS)
                self.state = 1053
                self.comment()
                pass

            elif la_ == 61:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1055
                self.match(SqlBaseParser.REFRESH)
                self.state = 1056
                self.match(SqlBaseParser.TABLE)
                self.state = 1057
                self.identifierReference()
                pass

            elif la_ == 62:
                localctx = SqlBaseParser.RefreshFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1058
                self.match(SqlBaseParser.REFRESH)
                self.state = 1059
                self.match(SqlBaseParser.FUNCTION)
                self.state = 1060
                self.identifierReference()
                pass

            elif la_ == 63:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1061
                self.match(SqlBaseParser.REFRESH)
                self.state = 1069
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1062
                    self.stringLit()
                    pass

                elif la_ == 2:
                    self.state = 1066
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1063
                            self.matchWildcard() 
                        self.state = 1068
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                    pass


                pass

            elif la_ == 64:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1071
                self.match(SqlBaseParser.CACHE)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==160:
                    self.state = 1072
                    self.match(SqlBaseParser.LAZY)


                self.state = 1075
                self.match(SqlBaseParser.TABLE)
                self.state = 1076
                self.identifierReference()
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204:
                    self.state = 1077
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1078
                    localctx.options = self.propertyList()


                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==21 or _la==123 or _la==176 or ((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & 4503599635759105) != 0) or _la==328 or _la==342:
                    self.state = 1082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 1081
                        self.match(SqlBaseParser.AS)


                    self.state = 1084
                    self.query()


                pass

            elif la_ == 65:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1087
                self.match(SqlBaseParser.UNCACHE)
                self.state = 1088
                self.match(SqlBaseParser.TABLE)
                self.state = 1091
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1089
                    self.match(SqlBaseParser.IF)
                    self.state = 1090
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1093
                self.identifierReference()
                pass

            elif la_ == 66:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1094
                self.match(SqlBaseParser.CLEAR)
                self.state = 1095
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 67:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1096
                self.match(SqlBaseParser.LOAD)
                self.state = 1097
                self.match(SqlBaseParser.DATA)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==169:
                    self.state = 1098
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1101
                self.match(SqlBaseParser.INPATH)
                self.state = 1102
                localctx.path = self.stringLit()
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==213:
                    self.state = 1103
                    self.match(SqlBaseParser.OVERWRITE)


                self.state = 1106
                self.match(SqlBaseParser.INTO)
                self.state = 1107
                self.match(SqlBaseParser.TABLE)
                self.state = 1108
                self.identifierReference()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 1109
                    self.partitionSpec()


                pass

            elif la_ == 68:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 1112
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 1113
                self.match(SqlBaseParser.TABLE)
                self.state = 1114
                self.identifierReference()
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 1115
                    self.partitionSpec()


                pass

            elif la_ == 69:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==187:
                    self.state = 1118
                    self.match(SqlBaseParser.MSCK)


                self.state = 1121
                self.match(SqlBaseParser.REPAIR)
                self.state = 1122
                self.match(SqlBaseParser.TABLE)
                self.state = 1123
                self.identifierReference()
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==97 or _la==284:
                    self.state = 1124
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==9 or _la==97 or _la==284):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1125
                    self.match(SqlBaseParser.PARTITIONS)


                pass

            elif la_ == 70:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 1128
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==9 or _la==167):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1129
                self.identifier()
                self.state = 1133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1130
                        self.matchWildcard() 
                    self.state = 1135
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                pass

            elif la_ == 71:
                localctx = SqlBaseParser.SetCollationContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 1136
                self.match(SqlBaseParser.SET)
                self.state = 1137
                self.match(SqlBaseParser.COLLATION)
                self.state = 1138
                localctx.collationName = self.identifier()
                pass

            elif la_ == 72:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 1139
                self.match(SqlBaseParser.SET)
                self.state = 1140
                self.match(SqlBaseParser.ROLE)
                self.state = 1144
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1141
                        self.matchWildcard() 
                    self.state = 1146
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                pass

            elif la_ == 73:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1147
                self.match(SqlBaseParser.SET)
                self.state = 1148
                self.match(SqlBaseParser.TIME)
                self.state = 1149
                self.match(SqlBaseParser.ZONE)
                self.state = 1150
                self.interval()
                pass

            elif la_ == 74:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1151
                self.match(SqlBaseParser.SET)
                self.state = 1152
                self.match(SqlBaseParser.TIME)
                self.state = 1153
                self.match(SqlBaseParser.ZONE)
                self.state = 1154
                self.timezone()
                pass

            elif la_ == 75:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 1155
                self.match(SqlBaseParser.SET)
                self.state = 1156
                self.match(SqlBaseParser.TIME)
                self.state = 1157
                self.match(SqlBaseParser.ZONE)
                self.state = 1161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1158
                        self.matchWildcard() 
                    self.state = 1163
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                pass

            elif la_ == 76:
                localctx = SqlBaseParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 1164
                self.match(SqlBaseParser.SET)
                self.state = 1165
                _la = self._input.LA(1)
                if not(_la==330 or _la==331):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1166
                self.assignmentList()
                pass

            elif la_ == 77:
                localctx = SqlBaseParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 1167
                self.match(SqlBaseParser.SET)
                self.state = 1168
                _la = self._input.LA(1)
                if not(_la==330 or _la==331):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1169
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1170
                self.multipartIdentifierList()
                self.state = 1171
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 1172
                self.match(SqlBaseParser.EQ)
                self.state = 1173
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1174
                self.query()
                self.state = 1175
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 78:
                localctx = SqlBaseParser.SetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 78)
                self.state = 1177
                self.match(SqlBaseParser.SET)
                self.state = 1178
                self.configKey()
                self.state = 1179
                self.match(SqlBaseParser.EQ)
                self.state = 1180
                self.configValue()
                pass

            elif la_ == 79:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 79)
                self.state = 1182
                self.match(SqlBaseParser.SET)
                self.state = 1183
                self.configKey()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==347:
                    self.state = 1184
                    self.match(SqlBaseParser.EQ)
                    self.state = 1188
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1185
                            self.matchWildcard() 
                        self.state = 1190
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,114,self._ctx)



                pass

            elif la_ == 80:
                localctx = SqlBaseParser.SetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 80)
                self.state = 1193
                self.match(SqlBaseParser.SET)
                self.state = 1197
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1194
                        self.matchWildcard() 
                    self.state = 1199
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                self.state = 1200
                self.match(SqlBaseParser.EQ)
                self.state = 1201
                self.configValue()
                pass

            elif la_ == 81:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 81)
                self.state = 1202
                self.match(SqlBaseParser.SET)
                self.state = 1206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1203
                        self.matchWildcard() 
                    self.state = 1208
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                pass

            elif la_ == 82:
                localctx = SqlBaseParser.ResetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 82)
                self.state = 1209
                self.match(SqlBaseParser.RESET)
                self.state = 1210
                self.configKey()
                pass

            elif la_ == 83:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 83)
                self.state = 1211
                self.match(SqlBaseParser.RESET)
                self.state = 1215
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1212
                        self.matchWildcard() 
                    self.state = 1217
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                pass

            elif la_ == 84:
                localctx = SqlBaseParser.CreateIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 84)
                self.state = 1218
                self.match(SqlBaseParser.CREATE)
                self.state = 1219
                self.match(SqlBaseParser.INDEX)
                self.state = 1223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1220
                    self.match(SqlBaseParser.IF)
                    self.state = 1221
                    self.match(SqlBaseParser.NOT)
                    self.state = 1222
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1225
                self.identifier()
                self.state = 1226
                self.match(SqlBaseParser.ON)
                self.state = 1228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1227
                    self.match(SqlBaseParser.TABLE)


                self.state = 1230
                self.identifierReference()
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 1231
                    self.match(SqlBaseParser.USING)
                    self.state = 1232
                    localctx.indexType = self.identifier()


                self.state = 1235
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1236
                localctx.columns = self.multipartIdentifierPropertyList()
                self.state = 1237
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204:
                    self.state = 1238
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1239
                    localctx.options = self.propertyList()


                pass

            elif la_ == 85:
                localctx = SqlBaseParser.DropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 85)
                self.state = 1242
                self.match(SqlBaseParser.DROP)
                self.state = 1243
                self.match(SqlBaseParser.INDEX)
                self.state = 1246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1244
                    self.match(SqlBaseParser.IF)
                    self.state = 1245
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1248
                self.identifier()
                self.state = 1249
                self.match(SqlBaseParser.ON)
                self.state = 1251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1250
                    self.match(SqlBaseParser.TABLE)


                self.state = 1253
                self.identifierReference()
                pass

            elif la_ == 86:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 86)
                self.state = 1255
                self.unsupportedHiveNativeCommands()
                self.state = 1259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1256
                        self.matchWildcard() 
                    self.state = 1261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.queryParam = None # ExecuteImmediateQueryParamContext
            self.targetVariable = None # MultipartIdentifierListContext

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlBaseParser.IMMEDIATE, 0)

        def executeImmediateQueryParam(self):
            return self.getTypedRuleContext(SqlBaseParser.ExecuteImmediateQueryParamContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def executeImmediateUsing(self):
            return self.getTypedRuleContext(SqlBaseParser.ExecuteImmediateUsingContext,0)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediate" ):
                listener.enterExecuteImmediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediate" ):
                listener.exitExecuteImmediate(self)




    def executeImmediate(self):

        localctx = SqlBaseParser.ExecuteImmediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_executeImmediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(SqlBaseParser.EXECUTE)
            self.state = 1265
            self.match(SqlBaseParser.IMMEDIATE)
            self.state = 1266
            localctx.queryParam = self.executeImmediateQueryParam()
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1267
                self.match(SqlBaseParser.INTO)
                self.state = 1268
                localctx.targetVariable = self.multipartIdentifierList()


            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==327:
                self.state = 1271
                self.executeImmediateUsing()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateUsingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # NamedExpressionSeqContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediateUsing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediateUsing" ):
                listener.enterExecuteImmediateUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediateUsing" ):
                listener.exitExecuteImmediateUsing(self)




    def executeImmediateUsing(self):

        localctx = SqlBaseParser.ExecuteImmediateUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_executeImmediateUsing)
        try:
            self.state = 1281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1274
                self.match(SqlBaseParser.USING)
                self.state = 1275
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1276
                localctx.params = self.namedExpressionSeq()
                self.state = 1277
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1279
                self.match(SqlBaseParser.USING)
                self.state = 1280
                localctx.params = self.namedExpressionSeq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateQueryParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediateQueryParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediateQueryParam" ):
                listener.enterExecuteImmediateQueryParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediateQueryParam" ):
                listener.exitExecuteImmediateQueryParam(self)




    def executeImmediateQueryParam(self):

        localctx = SqlBaseParser.ExecuteImmediateQueryParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_executeImmediateQueryParam)
        try:
            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1283
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self.multipartIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediateArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediateArgument" ):
                listener.enterExecuteImmediateArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediateArgument" ):
                listener.exitExecuteImmediateArgument(self)




    def executeImmediateArgument(self):

        localctx = SqlBaseParser.ExecuteImmediateArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_executeImmediateArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1287
                self.constant()
                pass

            elif la_ == 2:
                self.state = 1288
                self.multipartIdentifier()
                pass


            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 1291
                self.match(SqlBaseParser.AS)
                self.state = 1292
                localctx.name = self.errorCapturingIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateArgumentSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def executeImmediateArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExecuteImmediateArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExecuteImmediateArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediateArgumentSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediateArgumentSeq" ):
                listener.enterExecuteImmediateArgumentSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediateArgumentSeq" ):
                listener.exitExecuteImmediateArgumentSeq(self)




    def executeImmediateArgumentSeq(self):

        localctx = SqlBaseParser.ExecuteImmediateArgumentSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_executeImmediateArgumentSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.executeImmediateArgument()
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1296
                self.match(SqlBaseParser.COMMA)
                self.state = 1297
                self.executeImmediateArgument()
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimezone" ):
                listener.enterTimezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimezone" ):
                listener.exitTimezone(self)




    def timezone(self):

        localctx = SqlBaseParser.TimezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_timezone)
        try:
            self.state = 1305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1303
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1304
                self.match(SqlBaseParser.LOCAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_configKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigKey" ):
                listener.enterConfigKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigKey" ):
                listener.exitConfigKey(self)




    def configKey(self):

        localctx = SqlBaseParser.ConfigKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_configKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.quotedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def backQuotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.BackQuotedIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_configValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigValue" ):
                listener.enterConfigValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigValue" ):
                listener.exitConfigValue(self)




    def configValue(self):

        localctx = SqlBaseParser.ConfigValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_configValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.backQuotedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)




    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 1479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1312
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1314
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1315
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 1317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1316
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1319
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 1321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1320
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1323
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1324
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1325
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1326
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 1328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1327
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1330
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1331
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1332
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1333
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1334
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1335
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 1336
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1337
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 1338
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1339
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 1340
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1341
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1342
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1343
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1344
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 1345
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1346
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1347
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1348
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1349
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1350
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1351
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1352
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1353
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1354
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1355
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1356
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1357
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1358
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 1359
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1360
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 1361
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1362
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 1363
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1364
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 1365
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1366
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1367
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 1368
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1369
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1370
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 1371
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1372
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1373
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1374
                self.tableIdentifier()
                self.state = 1375
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1376
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1378
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1379
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1380
                self.tableIdentifier()
                self.state = 1381
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 1382
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1384
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1385
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1386
                self.tableIdentifier()
                self.state = 1387
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1388
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1390
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1391
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1392
                self.tableIdentifier()
                self.state = 1393
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 1394
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1396
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1397
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1398
                self.tableIdentifier()
                self.state = 1399
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1400
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1402
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1403
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1404
                self.tableIdentifier()
                self.state = 1405
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1406
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 1407
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 1408
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1410
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1411
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1412
                self.tableIdentifier()
                self.state = 1413
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 1414
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 1415
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1417
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1418
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1419
                self.tableIdentifier()
                self.state = 1420
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 1421
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1423
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1424
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1425
                self.tableIdentifier()
                self.state = 1426
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 1427
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1429
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1430
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1431
                self.tableIdentifier()
                self.state = 1432
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 1433
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1435
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1436
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1437
                self.tableIdentifier()
                self.state = 1438
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1440
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1441
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1442
                self.tableIdentifier()
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 1443
                    self.partitionSpec()


                self.state = 1446
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1448
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1449
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1450
                self.tableIdentifier()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 1451
                    self.partitionSpec()


                self.state = 1454
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1456
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1457
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1458
                self.tableIdentifier()
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 1459
                    self.partitionSpec()


                self.state = 1462
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 1463
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1465
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1466
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1467
                self.tableIdentifier()
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 1468
                    self.partitionSpec()


                self.state = 1471
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 1472
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1474
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 1475
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1476
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1477
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1478
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)




    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(SqlBaseParser.CREATE)
            self.state = 1483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==292:
                self.state = 1482
                self.match(SqlBaseParser.TEMPORARY)


            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1485
                self.match(SqlBaseParser.EXTERNAL)


            self.state = 1488
            self.match(SqlBaseParser.TABLE)
            self.state = 1492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1489
                self.match(SqlBaseParser.IF)
                self.state = 1490
                self.match(SqlBaseParser.NOT)
                self.state = 1491
                self.match(SqlBaseParser.EXISTS)


            self.state = 1494
            self.identifierReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_replaceTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTableHeader" ):
                listener.enterReplaceTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTableHeader" ):
                listener.exitReplaceTableHeader(self)




    def replaceTableHeader(self):

        localctx = SqlBaseParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 1496
                self.match(SqlBaseParser.CREATE)
                self.state = 1497
                self.match(SqlBaseParser.OR)


            self.state = 1500
            self.match(SqlBaseParser.REPLACE)
            self.state = 1501
            self.match(SqlBaseParser.TABLE)
            self.state = 1502
            self.identifierReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterBySpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_clusterBySpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusterBySpec" ):
                listener.enterClusterBySpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusterBySpec" ):
                listener.exitClusterBySpec(self)




    def clusterBySpec(self):

        localctx = SqlBaseParser.ClusterBySpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_clusterBySpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.match(SqlBaseParser.CLUSTER)
            self.state = 1505
            self.match(SqlBaseParser.BY)
            self.state = 1506
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1507
            self.multipartIdentifierList()
            self.state = 1508
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)




    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 1511
            self.match(SqlBaseParser.BY)
            self.state = 1512
            self.identifierList()
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 1513
                self.match(SqlBaseParser.SORTED)
                self.state = 1514
                self.match(SqlBaseParser.BY)
                self.state = 1515
                self.orderedIdentifierList()


            self.state = 1518
            self.match(SqlBaseParser.INTO)
            self.state = 1519
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 1520
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)




    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(SqlBaseParser.SKEWED)
            self.state = 1523
            self.match(SqlBaseParser.BY)
            self.state = 1524
            self.identifierList()
            self.state = 1525
            self.match(SqlBaseParser.ON)
            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1526
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1527
                self.nestedConstantList()
                pass


            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1530
                self.match(SqlBaseParser.STORED)
                self.state = 1531
                self.match(SqlBaseParser.AS)
                self.state = 1532
                self.match(SqlBaseParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)




    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(SqlBaseParser.LOCATION)
            self.state = 1536
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_commentSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentSpec" ):
                listener.enterCommentSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentSpec" ):
                listener.exitCommentSpec(self)




    def commentSpec(self):

        localctx = SqlBaseParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self.match(SqlBaseParser.COMMENT)
            self.state = 1539
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==342:
                self.state = 1541
                self.ctes()


            self.state = 1544
            self.queryTerm(0)
            self.state = 1545
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertIntoReplaceWhereContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoReplaceWhere" ):
                listener.enterInsertIntoReplaceWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoReplaceWhere" ):
                listener.exitInsertIntoReplaceWhere(self)


    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteHiveDir" ):
                listener.enterInsertOverwriteHiveDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteHiveDir" ):
                listener.exitInsertOverwriteHiveDir(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteDir" ):
                listener.enterInsertOverwriteDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteDir" ):
                listener.exitInsertOverwriteDir(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def NAME(self):
            return self.getToken(SqlBaseParser.NAME, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteTable" ):
                listener.enterInsertOverwriteTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteTable" ):
                listener.exitInsertOverwriteTable(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def NAME(self):
            return self.getToken(SqlBaseParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoTable" ):
                listener.enterInsertIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoTable" ):
                listener.exitInsertIntoTable(self)



    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1547
                self.match(SqlBaseParser.INSERT)
                self.state = 1548
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1549
                    self.match(SqlBaseParser.TABLE)


                self.state = 1552
                self.identifierReference()
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 1553
                    self.partitionSpec()
                    self.state = 1557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 1554
                        self.match(SqlBaseParser.IF)
                        self.state = 1555
                        self.match(SqlBaseParser.NOT)
                        self.state = 1556
                        self.match(SqlBaseParser.EXISTS)




                self.state = 1564
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1561
                    self.match(SqlBaseParser.BY)
                    self.state = 1562
                    self.match(SqlBaseParser.NAME)

                elif la_ == 2:
                    self.state = 1563
                    self.identifierList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1566
                self.match(SqlBaseParser.INSERT)
                self.state = 1567
                self.match(SqlBaseParser.INTO)
                self.state = 1569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1568
                    self.match(SqlBaseParser.TABLE)


                self.state = 1571
                self.identifierReference()
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 1572
                    self.partitionSpec()


                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1575
                    self.match(SqlBaseParser.IF)
                    self.state = 1576
                    self.match(SqlBaseParser.NOT)
                    self.state = 1577
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1580
                    self.match(SqlBaseParser.BY)
                    self.state = 1581
                    self.match(SqlBaseParser.NAME)

                elif la_ == 2:
                    self.state = 1582
                    self.identifierList()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.InsertIntoReplaceWhereContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1585
                self.match(SqlBaseParser.INSERT)
                self.state = 1586
                self.match(SqlBaseParser.INTO)
                self.state = 1588
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1587
                    self.match(SqlBaseParser.TABLE)


                self.state = 1590
                self.identifierReference()
                self.state = 1591
                self.match(SqlBaseParser.REPLACE)
                self.state = 1592
                self.whereClause()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1594
                self.match(SqlBaseParser.INSERT)
                self.state = 1595
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==169:
                    self.state = 1596
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1599
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1600
                localctx.path = self.stringLit()
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==252:
                    self.state = 1601
                    self.rowFormat()


                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 1604
                    self.createFileFormat()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1607
                self.match(SqlBaseParser.INSERT)
                self.state = 1608
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==169:
                    self.state = 1609
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1612
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1613
                    localctx.path = self.stringLit()


                self.state = 1616
                self.tableProvider()
                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204:
                    self.state = 1617
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1618
                    localctx.options = self.propertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)




    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.partitionSpec()
            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==170:
                self.state = 1624
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)




    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.match(SqlBaseParser.PARTITION)
            self.state = 1628
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1629
            self.partitionVal()
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1630
                self.match(SqlBaseParser.COMMA)
                self.state = 1631
                self.partitionVal()
                self.state = 1636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1637
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)




    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.state = 1648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.identifier()
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==347:
                    self.state = 1640
                    self.match(SqlBaseParser.EQ)
                    self.state = 1641
                    self.constant()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1644
                self.identifier()
                self.state = 1645
                self.match(SqlBaseParser.EQ)
                self.state = 1646
                self.match(SqlBaseParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)




    def namespace(self):

        localctx = SqlBaseParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            _la = self._input.LA(1)
            if not(_la==74 or _la==189 or _la==256):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namespaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaces" ):
                listener.enterNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaces" ):
                listener.exitNamespaces(self)




    def namespaces(self):

        localctx = SqlBaseParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_namespaces)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            _la = self._input.LA(1)
            if not(_la==75 or _la==190 or _la==257):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext,0)


        def BANG(self):
            return self.getToken(SqlBaseParser.BANG, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)




    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_describeFuncName)
        try:
            self.state = 1660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.identifierReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.stringLit()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1656
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1657
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1658
                self.predicateOperator()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1659
                self.match(SqlBaseParser.BANG)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.nameParts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)




    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.nameParts.append(localctx._errorCapturingIdentifier)
            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1663
                self.match(SqlBaseParser.DOT)
                self.state = 1664
                localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                localctx.nameParts.append(localctx._errorCapturingIdentifier)
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)




    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(SqlBaseParser.WITH)
            self.state = 1671
            self.namedQuery()
            self.state = 1676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1672
                self.match(SqlBaseParser.COMMA)
                self.state = 1673
                self.namedQuery()
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            localctx.name = self.errorCapturingIdentifier()
            self.state = 1681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1680
                localctx.columnAliases = self.identifierList()


            self.state = 1684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 1683
                self.match(SqlBaseParser.AS)


            self.state = 1686
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1687
            self.query()
            self.state = 1688
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)




    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(SqlBaseParser.USING)
            self.state = 1691
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # ExpressionPropertyListContext
            self.partitioning = None # PartitionFieldListContext
            self.tableProps = None # PropertyListContext

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext,i)


        def clusterBySpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ClusterBySpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ClusterBySpecContext,i)


        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,i)


        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.OPTIONS)
            else:
                return self.getToken(SqlBaseParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)

        def expressionPropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionPropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionPropertyListContext,i)


        def partitionFieldList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionFieldListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionFieldListContext,i)


        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableClauses" ):
                listener.enterCreateTableClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableClauses" ):
                listener.exitCreateTableClauses(self)




    def createTableClauses(self):

        localctx = SqlBaseParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9112752371007488) != 0) or ((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & 35201551958017) != 0) or ((((_la - 252)) & ~0x3f) == 0 and ((1 << (_la - 252)) & 549823184897) != 0):
                self.state = 1707
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [204]:
                    self.state = 1693
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1694
                    localctx.options = self.expressionPropertyList()
                    pass
                elif token in [215]:
                    self.state = 1695
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 1696
                    self.match(SqlBaseParser.BY)
                    self.state = 1697
                    localctx.partitioning = self.partitionFieldList()
                    pass
                elif token in [270]:
                    self.state = 1698
                    self.skewSpec()
                    pass
                elif token in [45]:
                    self.state = 1699
                    self.clusterBySpec()
                    pass
                elif token in [46]:
                    self.state = 1700
                    self.bucketSpec()
                    pass
                elif token in [252]:
                    self.state = 1701
                    self.rowFormat()
                    pass
                elif token in [278]:
                    self.state = 1702
                    self.createFileFormat()
                    pass
                elif token in [170]:
                    self.state = 1703
                    self.locationSpec()
                    pass
                elif token in [53]:
                    self.state = 1704
                    self.commentSpec()
                    pass
                elif token in [291]:
                    self.state = 1705
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 1706
                    localctx.tableProps = self.propertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyList" ):
                listener.enterPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyList" ):
                listener.exitPropertyList(self)




    def propertyList(self):

        localctx = SqlBaseParser.PropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_propertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1713
            self.property_()
            self.state = 1718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1714
                self.match(SqlBaseParser.COMMA)
                self.state = 1715
                self.property_()
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1721
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # PropertyKeyContext
            self.value = None # PropertyValueContext

        def propertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyKeyContext,0)


        def propertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyValueContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)




    def property_(self):

        localctx = SqlBaseParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            localctx.key = self.propertyKey()
            self.state = 1728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1724
                    self.match(SqlBaseParser.EQ)


                self.state = 1727
                localctx.value = self.propertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyKey" ):
                listener.enterPropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyKey" ):
                listener.exitPropertyKey(self)




    def propertyKey(self):

        localctx = SqlBaseParser.PropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_propertyKey)
        try:
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1730
                self.errorCapturingIdentifier()
                self.state = 1735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1731
                        self.match(SqlBaseParser.DOT)
                        self.state = 1732
                        self.errorCapturingIdentifier() 
                    self.state = 1737
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1738
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyValue" ):
                listener.enterPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyValue" ):
                listener.exitPropertyValue(self)




    def propertyValue(self):

        localctx = SqlBaseParser.PropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_propertyValue)
        try:
            self.state = 1745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1741
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1742
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1743
                self.booleanValue()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1744
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expressionProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionPropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionPropertyContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expressionPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionPropertyList" ):
                listener.enterExpressionPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionPropertyList" ):
                listener.exitExpressionPropertyList(self)




    def expressionPropertyList(self):

        localctx = SqlBaseParser.ExpressionPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_expressionPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1748
            self.expressionProperty()
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1749
                self.match(SqlBaseParser.COMMA)
                self.state = 1750
                self.expressionProperty()
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1756
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # PropertyKeyContext
            self.value = None # ExpressionContext

        def propertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyKeyContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expressionProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionProperty" ):
                listener.enterExpressionProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionProperty" ):
                listener.exitExpressionProperty(self)




    def expressionProperty(self):

        localctx = SqlBaseParser.ExpressionPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expressionProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            localctx.key = self.propertyKey()
            self.state = 1763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1760
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1759
                    self.match(SqlBaseParser.EQ)


                self.state = 1762
                localctx.value = self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)




    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1766
            self.constant()
            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1767
                self.match(SqlBaseParser.COMMA)
                self.state = 1768
                self.constant()
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1774
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)




    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1777
            self.constantList()
            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1778
                self.match(SqlBaseParser.COMMA)
                self.state = 1779
                self.constantList()
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1785
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)




    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_createFileFormat)
        try:
            self.state = 1793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1787
                self.match(SqlBaseParser.STORED)
                self.state = 1788
                self.match(SqlBaseParser.AS)
                self.state = 1789
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1790
                self.match(SqlBaseParser.STORED)
                self.state = 1791
                self.match(SqlBaseParser.BY)
                self.state = 1792
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # StringLitContext
            self.outFmt = None # StringLitContext
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)
        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)



    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_fileFormat)
        try:
            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1795
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1796
                localctx.inFmt = self.stringLit()
                self.state = 1797
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1798
                localctx.outFmt = self.stringLit()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1800
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)




    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.stringLit()
            self.state = 1807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1804
                self.match(SqlBaseParser.WITH)
                self.state = 1805
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1806
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.identifier()
            self.state = 1810
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteFromTable" ):
                listener.enterDeleteFromTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteFromTable" ):
                listener.exitDeleteFromTable(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateTable" ):
                listener.enterUpdateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateTable" ):
                listener.exitUpdateTable(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # IdentifierReferenceContext
            self.targetAlias = None # TableAliasContext
            self.source = None # IdentifierReferenceContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierReferenceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NotMatchedClauseContext,i)

        def notMatchedBySourceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NotMatchedBySourceClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NotMatchedBySourceClauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeIntoTable" ):
                listener.enterMergeIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeIntoTable" ):
                listener.exitMergeIntoTable(self)



    def dmlStatementNoWith(self):

        localctx = SqlBaseParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 1868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148]:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1812
                self.insertInto()
                self.state = 1813
                self.query()
                pass
            elif token in [123]:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1815
                self.fromClause()
                self.state = 1817 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1816
                    self.multiInsertQueryBody()
                    self.state = 1819 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==148):
                        break

                pass
            elif token in [86]:
                localctx = SqlBaseParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1821
                self.match(SqlBaseParser.DELETE)
                self.state = 1822
                self.match(SqlBaseParser.FROM)
                self.state = 1823
                self.identifierReference()
                self.state = 1824
                self.tableAlias()
                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==340:
                    self.state = 1825
                    self.whereClause()


                pass
            elif token in [324]:
                localctx = SqlBaseParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1828
                self.match(SqlBaseParser.UPDATE)
                self.state = 1829
                self.identifierReference()
                self.state = 1830
                self.tableAlias()
                self.state = 1831
                self.setClause()
                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==340:
                    self.state = 1832
                    self.whereClause()


                pass
            elif token in [178]:
                localctx = SqlBaseParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1835
                self.match(SqlBaseParser.MERGE)
                self.state = 1836
                self.match(SqlBaseParser.INTO)
                self.state = 1837
                localctx.target = self.identifierReference()
                self.state = 1838
                localctx.targetAlias = self.tableAlias()
                self.state = 1839
                self.match(SqlBaseParser.USING)
                self.state = 1845
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1840
                    localctx.source = self.identifierReference()
                    pass

                elif la_ == 2:
                    self.state = 1841
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 1842
                    localctx.sourceQuery = self.query()
                    self.state = 1843
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass


                self.state = 1847
                localctx.sourceAlias = self.tableAlias()
                self.state = 1848
                self.match(SqlBaseParser.ON)
                self.state = 1849
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 1853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1850
                        self.matchedClause() 
                    self.state = 1855
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                self.state = 1859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1856
                        self.notMatchedClause() 
                    self.state = 1861
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                self.state = 1865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==339:
                    self.state = 1862
                    self.notMatchedBySourceClause()
                    self.state = 1867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER_KW(self):
            return self.getToken(SqlBaseParser.IDENTIFIER_KW, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierReference" ):
                listener.enterIdentifierReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierReference" ):
                listener.exitIdentifierReference(self)




    def identifierReference(self):

        localctx = SqlBaseParser.IdentifierReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_identifierReference)
        try:
            self.state = 1876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1870
                self.match(SqlBaseParser.IDENTIFIER_KW)
                self.state = 1871
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1872
                self.expression()
                self.state = 1873
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1875
                self.multipartIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext
            self.offset = None # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)




    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1878
                self.match(SqlBaseParser.ORDER)
                self.state = 1879
                self.match(SqlBaseParser.BY)
                self.state = 1880
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1881
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1882
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 1887
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,201,self._ctx)



            self.state = 1900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1890
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1891
                self.match(SqlBaseParser.BY)
                self.state = 1892
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1893
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1894
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 1899
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)



            self.state = 1912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1902
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1903
                self.match(SqlBaseParser.BY)
                self.state = 1904
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1905
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1906
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 1911
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)



            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1914
                self.match(SqlBaseParser.SORT)
                self.state = 1915
                self.match(SqlBaseParser.BY)
                self.state = 1916
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1917
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1918
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 1923
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)



            self.state = 1927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1926
                self.windowClause()


            self.state = 1934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1929
                self.match(SqlBaseParser.LIMIT)
                self.state = 1932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1930
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1931
                    localctx.limit = self.expression()
                    pass




            self.state = 1938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1936
                self.match(SqlBaseParser.OFFSET)
                self.state = 1937
                localctx.offset = self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(SqlBaseParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)




    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            self.insertInto()
            self.state = 1941
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1944
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1967
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1946
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1947
                        if not self.legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "legacy_setops_precedence_enabled")
                        self.state = 1948
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==102 or _la==149 or _la==265 or _la==318):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1950
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==11 or _la==93:
                            self.state = 1949
                            self.setQuantifier()


                        self.state = 1952
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1953
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1954
                        if self.legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!legacy_setops_precedence_enabled")
                        self.state = 1955
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 1957
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==11 or _la==93:
                            self.state = 1956
                            self.setQuantifier()


                        self.state = 1959
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1960
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1961
                        if self.legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!legacy_setops_precedence_enabled")
                        self.state = 1962
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==102 or _la==265 or _la==318):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1964
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==11 or _la==93:
                            self.state = 1963
                            self.setQuantifier()


                        self.state = 1966
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(SqlBaseParser.FromStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_queryPrimary)
        try:
            self.state = 1981
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [176, 235, 258]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.querySpecification()
                pass
            elif token in [123]:
                localctx = SqlBaseParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1973
                self.fromStatement()
                pass
            elif token in [287]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1974
                self.match(SqlBaseParser.TABLE)
                self.state = 1975
                self.identifierReference()
                pass
            elif token in [328]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1976
                self.inlineTable()
                pass
            elif token in [2]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1977
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1978
                self.query()
                self.state = 1979
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self.expression()
            self.state = 1985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1984
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==22 or _la==88):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1987
                self.match(SqlBaseParser.NULLS)
                self.state = 1988
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==116 or _la==158):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatement" ):
                listener.enterFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatement" ):
                listener.exitFromStatement(self)




    def fromStatement(self):

        localctx = SqlBaseParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.fromClause()
            self.state = 1993 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1992
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 1995 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatementBody" ):
                listener.enterFromStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatementBody" ):
                listener.exitFromStatementBody(self)




    def fromStatementBody(self):

        localctx = SqlBaseParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fromStatementBody)
        try:
            self.state = 2024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1997
                self.transformClause()
                self.state = 1999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1998
                    self.whereClause()


                self.state = 2001
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2003
                self.selectClause()
                self.state = 2007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2004
                        self.lateralView() 
                    self.state = 2009
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

                self.state = 2011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 2010
                    self.whereClause()


                self.state = 2014
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 2013
                    self.aggregationClause()


                self.state = 2017
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 2016
                    self.havingClause()


                self.state = 2020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 2019
                    self.windowClause()


                self.state = 2022
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SelectClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularQuerySpecification" ):
                listener.enterRegularQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularQuerySpecification" ):
                listener.exitRegularQuerySpecification(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformQuerySpecification" ):
                listener.enterTransformQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformQuerySpecification" ):
                listener.exitTransformQuerySpecification(self)



    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_querySpecification)
        try:
            self.state = 2070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2026
                self.transformClause()
                self.state = 2028
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 2027
                    self.fromClause()


                self.state = 2033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2030
                        self.lateralView() 
                    self.state = 2035
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

                self.state = 2037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 2036
                    self.whereClause()


                self.state = 2040
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2039
                    self.aggregationClause()


                self.state = 2043
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 2042
                    self.havingClause()


                self.state = 2046
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 2045
                    self.windowClause()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2048
                self.selectClause()
                self.state = 2050
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 2049
                    self.fromClause()


                self.state = 2055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2052
                        self.lateralView() 
                    self.state = 2057
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                self.state = 2059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 2058
                    self.whereClause()


                self.state = 2062
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 2061
                    self.aggregationClause()


                self.state = 2065
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 2064
                    self.havingClause()


                self.state = 2068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 2067
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # StringLitContext
            self.script = None # StringLitContext
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # StringLitContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def expressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionSeqContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformClause" ):
                listener.enterTransformClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformClause" ):
                listener.exitTransformClause(self)




    def transformClause(self):

        localctx = SqlBaseParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [258]:
                self.state = 2072
                self.match(SqlBaseParser.SELECT)
                self.state = 2073
                localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                self.state = 2074
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 2075
                    self.setQuantifier()


                self.state = 2078
                self.expressionSeq()
                self.state = 2079
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            elif token in [176]:
                self.state = 2081
                localctx.kind = self.match(SqlBaseParser.MAP)
                self.state = 2083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 2082
                    self.setQuantifier()


                self.state = 2085
                self.expressionSeq()
                pass
            elif token in [235]:
                self.state = 2086
                localctx.kind = self.match(SqlBaseParser.REDUCE)
                self.state = 2088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 2087
                    self.setQuantifier()


                self.state = 2090
                self.expressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 2093
                localctx.inRowFormat = self.rowFormat()


            self.state = 2098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==233:
                self.state = 2096
                self.match(SqlBaseParser.RECORDWRITER)
                self.state = 2097
                localctx.recordWriter = self.stringLit()


            self.state = 2100
            self.match(SqlBaseParser.USING)
            self.state = 2101
            localctx.script = self.stringLit()
            self.state = 2114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 2102
                self.match(SqlBaseParser.AS)
                self.state = 2112
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2103
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 2104
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 2105
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2108
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                    if la_ == 1:
                        self.state = 2106
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 2107
                        self.colTypeList()
                        pass


                    self.state = 2110
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass




            self.state = 2117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 2116
                localctx.outRowFormat = self.rowFormat()


            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 2119
                self.match(SqlBaseParser.RECORDREADER)
                self.state = 2120
                localctx.recordReader = self.stringLit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)




    def selectClause(self):

        localctx = SqlBaseParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.match(SqlBaseParser.SELECT)
            self.state = 2127
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2124
                    localctx._hint = self.hint()
                    localctx.hints.append(localctx._hint) 
                self.state = 2129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

            self.state = 2131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 2130
                self.setQuantifier()


            self.state = 2133
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_setClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetClause" ):
                listener.enterSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetClause" ):
                listener.exitSetClause(self)




    def setClause(self):

        localctx = SqlBaseParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.match(SqlBaseParser.SET)
            self.state = 2136
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(SqlBaseParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedClause" ):
                listener.enterMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedClause" ):
                listener.exitMatchedClause(self)




    def matchedClause(self):

        localctx = SqlBaseParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            self.match(SqlBaseParser.WHEN)
            self.state = 2139
            self.match(SqlBaseParser.MATCHED)
            self.state = 2142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 2140
                self.match(SqlBaseParser.AND)
                self.state = 2141
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 2144
            self.match(SqlBaseParser.THEN)
            self.state = 2145
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(SqlBaseParser.NotMatchedActionContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedClause" ):
                listener.enterNotMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedClause" ):
                listener.exitNotMatchedClause(self)




    def notMatchedClause(self):

        localctx = SqlBaseParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2147
            self.match(SqlBaseParser.WHEN)
            self.state = 2148
            self.match(SqlBaseParser.NOT)
            self.state = 2149
            self.match(SqlBaseParser.MATCHED)
            self.state = 2152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 2150
                self.match(SqlBaseParser.BY)
                self.state = 2151
                self.match(SqlBaseParser.TARGET)


            self.state = 2156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 2154
                self.match(SqlBaseParser.AND)
                self.state = 2155
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 2158
            self.match(SqlBaseParser.THEN)
            self.state = 2159
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedBySourceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedBySourceCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def notMatchedBySourceAction(self):
            return self.getTypedRuleContext(SqlBaseParser.NotMatchedBySourceActionContext,0)


        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedBySourceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedBySourceClause" ):
                listener.enterNotMatchedBySourceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedBySourceClause" ):
                listener.exitNotMatchedBySourceClause(self)




    def notMatchedBySourceClause(self):

        localctx = SqlBaseParser.NotMatchedBySourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_notMatchedBySourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            self.match(SqlBaseParser.WHEN)
            self.state = 2162
            self.match(SqlBaseParser.NOT)
            self.state = 2163
            self.match(SqlBaseParser.MATCHED)
            self.state = 2164
            self.match(SqlBaseParser.BY)
            self.state = 2165
            self.match(SqlBaseParser.SOURCE)
            self.state = 2168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 2166
                self.match(SqlBaseParser.AND)
                self.state = 2167
                localctx.notMatchedBySourceCond = self.booleanExpression(0)


            self.state = 2170
            self.match(SqlBaseParser.THEN)
            self.state = 2171
            self.notMatchedBySourceAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedAction" ):
                listener.enterMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedAction" ):
                listener.exitMatchedAction(self)




    def matchedAction(self):

        localctx = SqlBaseParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_matchedAction)
        try:
            self.state = 2180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2173
                self.match(SqlBaseParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2174
                self.match(SqlBaseParser.UPDATE)
                self.state = 2175
                self.match(SqlBaseParser.SET)
                self.state = 2176
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2177
                self.match(SqlBaseParser.UPDATE)
                self.state = 2178
                self.match(SqlBaseParser.SET)
                self.state = 2179
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedAction" ):
                listener.enterNotMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedAction" ):
                listener.exitNotMatchedAction(self)




    def notMatchedAction(self):

        localctx = SqlBaseParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2182
                self.match(SqlBaseParser.INSERT)
                self.state = 2183
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2184
                self.match(SqlBaseParser.INSERT)
                self.state = 2185
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2186
                localctx.columns = self.multipartIdentifierList()
                self.state = 2187
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2188
                self.match(SqlBaseParser.VALUES)
                self.state = 2189
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2190
                self.expression()
                self.state = 2195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2191
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2192
                    self.expression()
                    self.state = 2197
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2198
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedBySourceActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedBySourceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedBySourceAction" ):
                listener.enterNotMatchedBySourceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedBySourceAction" ):
                listener.exitNotMatchedBySourceAction(self)




    def notMatchedBySourceAction(self):

        localctx = SqlBaseParser.NotMatchedBySourceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_notMatchedBySourceAction)
        try:
            self.state = 2206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2202
                self.match(SqlBaseParser.DELETE)
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2203
                self.match(SqlBaseParser.UPDATE)
                self.state = 2204
                self.match(SqlBaseParser.SET)
                self.state = 2205
                self.assignmentList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exceptCols = None # MultipartIdentifierListContext

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_exceptClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptClause" ):
                listener.enterExceptClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptClause" ):
                listener.exitExceptClause(self)




    def exceptClause(self):

        localctx = SqlBaseParser.ExceptClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_exceptClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2208
            self.match(SqlBaseParser.EXCEPT)
            self.state = 2209
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2210
            localctx.exceptCols = self.multipartIdentifierList()
            self.state = 2211
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = SqlBaseParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self.assignment()
            self.state = 2218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2214
                self.match(SqlBaseParser.COMMA)
                self.state = 2215
                self.assignment()
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = SqlBaseParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            localctx.key = self.multipartIdentifier()
            self.state = 2222
            self.match(SqlBaseParser.EQ)
            self.state = 2223
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = SqlBaseParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2225
            self.match(SqlBaseParser.WHERE)
            self.state = 2226
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = SqlBaseParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(SqlBaseParser.HAVING)
            self.state = 2229
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def HENT_START(self):
            return self.getToken(SqlBaseParser.HENT_START, 0)

        def HENT_END(self):
            return self.getToken(SqlBaseParser.HENT_END, 0)

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintStatementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)




    def hint(self):

        localctx = SqlBaseParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.match(SqlBaseParser.HENT_START)
            self.state = 2232
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2239
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2234
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        self.state = 2233
                        self.match(SqlBaseParser.COMMA)


                    self.state = 2236
                    localctx._hintStatement = self.hintStatement()
                    localctx.hintStatements.append(localctx._hintStatement) 
                self.state = 2241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

            self.state = 2242
            self.match(SqlBaseParser.HENT_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)




    def hintStatement(self):

        localctx = SqlBaseParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2244
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2245
                localctx.hintName = self.identifier()
                self.state = 2246
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2247
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2248
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2249
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2255
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotClauseContext,0)


        def unpivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self.match(SqlBaseParser.FROM)
            self.state = 2260
            self.relation()
            self.state = 2265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2261
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2262
                    self.relation() 
                self.state = 2267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

            self.state = 2271
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2268
                    self.lateralView() 
                self.state = 2273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

            self.state = 2275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2274
                self.pivotClause()


            self.state = 2278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2277
                self.unpivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timestamp = None # ValueExpressionContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def version(self):
            return self.getTypedRuleContext(SqlBaseParser.VersionContext,0)


        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_temporalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalClause" ):
                listener.enterTemporalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalClause" ):
                listener.exitTemporalClause(self)




    def temporalClause(self):

        localctx = SqlBaseParser.TemporalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_temporalClause)
        self._la = 0 # Token type
        try:
            self.state = 2294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 2280
                    self.match(SqlBaseParser.FOR)


                self.state = 2283
                _la = self._input.LA(1)
                if not(_la==286 or _la==333):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2284
                self.match(SqlBaseParser.AS)
                self.state = 2285
                self.match(SqlBaseParser.OF)
                self.state = 2286
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 2287
                    self.match(SqlBaseParser.FOR)


                self.state = 2290
                _la = self._input.LA(1)
                if not(_la==285 or _la==297):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2291
                self.match(SqlBaseParser.AS)
                self.state = 2292
                self.match(SqlBaseParser.OF)
                self.state = 2293
                localctx.timestamp = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._groupByClause = None # GroupByClauseContext
            self.groupingExpressionsWithGroupingAnalytics = list() # of GroupByClauseContexts
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def groupByClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupByClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupByClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregationClause" ):
                listener.enterAggregationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregationClause" ):
                listener.exitAggregationClause(self)




    def aggregationClause(self):

        localctx = SqlBaseParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2296
                self.match(SqlBaseParser.GROUP)
                self.state = 2297
                self.match(SqlBaseParser.BY)
                self.state = 2298
                localctx._groupByClause = self.groupByClause()
                localctx.groupingExpressionsWithGroupingAnalytics.append(localctx._groupByClause)
                self.state = 2303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2299
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2300
                        localctx._groupByClause = self.groupByClause()
                        localctx.groupingExpressionsWithGroupingAnalytics.append(localctx._groupByClause) 
                    self.state = 2305
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2306
                self.match(SqlBaseParser.GROUP)
                self.state = 2307
                self.match(SqlBaseParser.BY)
                self.state = 2308
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,276,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2309
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2310
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2315
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

                self.state = 2333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                if la_ == 1:
                    self.state = 2316
                    self.match(SqlBaseParser.WITH)
                    self.state = 2317
                    localctx.kind = self.match(SqlBaseParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2318
                    self.match(SqlBaseParser.WITH)
                    self.state = 2319
                    localctx.kind = self.match(SqlBaseParser.CUBE)

                elif la_ == 3:
                    self.state = 2320
                    localctx.kind = self.match(SqlBaseParser.GROUPING)
                    self.state = 2321
                    self.match(SqlBaseParser.SETS)
                    self.state = 2322
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2323
                    self.groupingSet()
                    self.state = 2328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2324
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2325
                        self.groupingSet()
                        self.state = 2330
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2331
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingAnalytics(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingAnalyticsContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = SqlBaseParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_groupByClause)
        try:
            self.state = 2339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2337
                self.groupingAnalytics()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2338
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingAnalyticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingElementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingAnalytics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingAnalytics" ):
                listener.enterGroupingAnalytics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingAnalytics" ):
                listener.exitGroupingAnalytics(self)




    def groupingAnalytics(self):

        localctx = SqlBaseParser.GroupingAnalyticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_groupingAnalytics)
        self._la = 0 # Token type
        try:
            self.state = 2366
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 251]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                _la = self._input.LA(1)
                if not(_la==63 or _la==251):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2342
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2343
                self.groupingSet()
                self.state = 2348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2344
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2345
                    self.groupingSet()
                    self.state = 2350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2351
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2353
                self.match(SqlBaseParser.GROUPING)
                self.state = 2354
                self.match(SqlBaseParser.SETS)
                self.state = 2355
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2356
                self.groupingElement()
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2357
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2358
                    self.groupingElement()
                    self.state = 2363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2364
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingAnalytics(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingAnalyticsContext,0)


        def groupingSet(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingElement" ):
                listener.enterGroupingElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingElement" ):
                listener.exitGroupingElement(self)




    def groupingElement(self):

        localctx = SqlBaseParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_groupingElement)
        try:
            self.state = 2370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2368
                self.groupingAnalytics()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2369
                self.groupingSet()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2372
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2373
                    self.expression()
                    self.state = 2378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2374
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2375
                        self.expression()
                        self.state = 2380
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2383
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2384
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PivotValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotClause" ):
                listener.enterPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotClause" ):
                listener.exitPivotClause(self)




    def pivotClause(self):

        localctx = SqlBaseParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            self.match(SqlBaseParser.PIVOT)
            self.state = 2388
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2389
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2390
            self.match(SqlBaseParser.FOR)
            self.state = 2391
            self.pivotColumn()
            self.state = 2392
            self.match(SqlBaseParser.IN)
            self.state = 2393
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2394
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2395
                self.match(SqlBaseParser.COMMA)
                self.state = 2396
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2402
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2403
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.identifiers = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotColumn" ):
                listener.enterPivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotColumn" ):
                listener.exitPivotColumn(self)




    def pivotColumn(self):

        localctx = SqlBaseParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2405
                localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                localctx.identifiers.append(localctx._errorCapturingIdentifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2406
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2407
                localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                localctx.identifiers.append(localctx._errorCapturingIdentifier)
                self.state = 2412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2408
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2409
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.identifiers.append(localctx._errorCapturingIdentifier)
                    self.state = 2414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2415
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotValue" ):
                listener.enterPivotValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotValue" ):
                listener.exitPivotValue(self)




    def pivotValue(self):

        localctx = SqlBaseParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_pivotValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.expression()
            self.state = 2424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2420
                    self.match(SqlBaseParser.AS)


                self.state = 2423
                self.errorCapturingIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullOperator = None # UnpivotNullClauseContext
            self.operator = None # UnpivotOperatorContext

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotOperatorContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def unpivotNullClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNullClauseContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotClause" ):
                listener.enterUnpivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotClause" ):
                listener.exitUnpivotClause(self)




    def unpivotClause(self):

        localctx = SqlBaseParser.UnpivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_unpivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2426
            self.match(SqlBaseParser.UNPIVOT)
            self.state = 2428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==142:
                self.state = 2427
                localctx.nullOperator = self.unpivotNullClause()


            self.state = 2430
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2431
            localctx.operator = self.unpivotOperator()
            self.state = 2432
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2433
                    self.match(SqlBaseParser.AS)


                self.state = 2436
                self.errorCapturingIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotNullClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotNullClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotNullClause" ):
                listener.enterUnpivotNullClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotNullClause" ):
                listener.exitUnpivotNullClause(self)




    def unpivotNullClause(self):

        localctx = SqlBaseParser.UnpivotNullClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_unpivotNullClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            _la = self._input.LA(1)
            if not(_la==104 or _la==142):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2440
            self.match(SqlBaseParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivotSingleValueColumnClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotSingleValueColumnClauseContext,0)


        def unpivotMultiValueColumnClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotMultiValueColumnClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotOperator" ):
                listener.enterUnpivotOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotOperator" ):
                listener.exitUnpivotOperator(self)




    def unpivotOperator(self):

        localctx = SqlBaseParser.UnpivotOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_unpivotOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2442
                self.unpivotSingleValueColumnClause()
                pass

            elif la_ == 2:
                self.state = 2443
                self.unpivotMultiValueColumnClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotSingleValueColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotColumnAndAlias = None # UnpivotColumnAndAliasContext
            self.unpivotColumns = list() # of UnpivotColumnAndAliasContexts

        def unpivotValueColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotValueColumnContext,0)


        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def unpivotNameColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNameColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotColumnAndAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnAndAliasContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnAndAliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotSingleValueColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotSingleValueColumnClause" ):
                listener.enterUnpivotSingleValueColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotSingleValueColumnClause" ):
                listener.exitUnpivotSingleValueColumnClause(self)




    def unpivotSingleValueColumnClause(self):

        localctx = SqlBaseParser.UnpivotSingleValueColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_unpivotSingleValueColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2446
            self.unpivotValueColumn()
            self.state = 2447
            self.match(SqlBaseParser.FOR)
            self.state = 2448
            self.unpivotNameColumn()
            self.state = 2449
            self.match(SqlBaseParser.IN)
            self.state = 2450
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2451
            localctx._unpivotColumnAndAlias = self.unpivotColumnAndAlias()
            localctx.unpivotColumns.append(localctx._unpivotColumnAndAlias)
            self.state = 2456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2452
                self.match(SqlBaseParser.COMMA)
                self.state = 2453
                localctx._unpivotColumnAndAlias = self.unpivotColumnAndAlias()
                localctx.unpivotColumns.append(localctx._unpivotColumnAndAlias)
                self.state = 2458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2459
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotMultiValueColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotValueColumn = None # UnpivotValueColumnContext
            self.unpivotValueColumns = list() # of UnpivotValueColumnContexts
            self._unpivotColumnSet = None # UnpivotColumnSetContext
            self.unpivotColumnSets = list() # of UnpivotColumnSetContexts

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def unpivotNameColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNameColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def unpivotValueColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotValueColumnContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotValueColumnContext,i)


        def unpivotColumnSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnSetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotMultiValueColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotMultiValueColumnClause" ):
                listener.enterUnpivotMultiValueColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotMultiValueColumnClause" ):
                listener.exitUnpivotMultiValueColumnClause(self)




    def unpivotMultiValueColumnClause(self):

        localctx = SqlBaseParser.UnpivotMultiValueColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_unpivotMultiValueColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2462
            localctx._unpivotValueColumn = self.unpivotValueColumn()
            localctx.unpivotValueColumns.append(localctx._unpivotValueColumn)
            self.state = 2467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2463
                self.match(SqlBaseParser.COMMA)
                self.state = 2464
                localctx._unpivotValueColumn = self.unpivotValueColumn()
                localctx.unpivotValueColumns.append(localctx._unpivotValueColumn)
                self.state = 2469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2470
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2471
            self.match(SqlBaseParser.FOR)
            self.state = 2472
            self.unpivotNameColumn()
            self.state = 2473
            self.match(SqlBaseParser.IN)
            self.state = 2474
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2475
            localctx._unpivotColumnSet = self.unpivotColumnSet()
            localctx.unpivotColumnSets.append(localctx._unpivotColumnSet)
            self.state = 2480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2476
                self.match(SqlBaseParser.COMMA)
                self.state = 2477
                localctx._unpivotColumnSet = self.unpivotColumnSet()
                localctx.unpivotColumnSets.append(localctx._unpivotColumnSet)
                self.state = 2482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2483
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotColumn = None # UnpivotColumnContext
            self.unpivotColumns = list() # of UnpivotColumnContexts

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def unpivotAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotAliasContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumnSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumnSet" ):
                listener.enterUnpivotColumnSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumnSet" ):
                listener.exitUnpivotColumnSet(self)




    def unpivotColumnSet(self):

        localctx = SqlBaseParser.UnpivotColumnSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_unpivotColumnSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2486
            localctx._unpivotColumn = self.unpivotColumn()
            localctx.unpivotColumns.append(localctx._unpivotColumn)
            self.state = 2491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2487
                self.match(SqlBaseParser.COMMA)
                self.state = 2488
                localctx._unpivotColumn = self.unpivotColumn()
                localctx.unpivotColumns.append(localctx._unpivotColumn)
                self.state = 2493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2494
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2495
                self.unpivotAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotValueColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotValueColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotValueColumn" ):
                listener.enterUnpivotValueColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotValueColumn" ):
                listener.exitUnpivotValueColumn(self)




    def unpivotValueColumn(self):

        localctx = SqlBaseParser.UnpivotValueColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_unpivotValueColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2498
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotNameColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotNameColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotNameColumn" ):
                listener.enterUnpivotNameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotNameColumn" ):
                listener.exitUnpivotNameColumn(self)




    def unpivotNameColumn(self):

        localctx = SqlBaseParser.UnpivotNameColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_unpivotNameColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2500
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnAndAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivotColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnContext,0)


        def unpivotAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotAliasContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumnAndAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumnAndAlias" ):
                listener.enterUnpivotColumnAndAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumnAndAlias" ):
                listener.exitUnpivotColumnAndAlias(self)




    def unpivotColumnAndAlias(self):

        localctx = SqlBaseParser.UnpivotColumnAndAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_unpivotColumnAndAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2502
            self.unpivotColumn()
            self.state = 2504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2503
                self.unpivotAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumn" ):
                listener.enterUnpivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumn" ):
                listener.exitUnpivotColumn(self)




    def unpivotColumn(self):

        localctx = SqlBaseParser.UnpivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_unpivotColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotAlias" ):
                listener.enterUnpivotAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotAlias" ):
                listener.exitUnpivotAlias(self)




    def unpivotAlias(self):

        localctx = SqlBaseParser.UnpivotAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_unpivotAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 2508
                self.match(SqlBaseParser.AS)


            self.state = 2511
            self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)




    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2513
            self.match(SqlBaseParser.LATERAL)
            self.state = 2514
            self.match(SqlBaseParser.VIEW)
            self.state = 2516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 2515
                self.match(SqlBaseParser.OUTER)


            self.state = 2518
            self.qualifiedName()
            self.state = 2519
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2520
                self.expression()
                self.state = 2525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2521
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2522
                    self.expression()
                    self.state = 2527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2530
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2531
            localctx.tblName = self.identifier()
            self.state = 2543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 2532
                    self.match(SqlBaseParser.AS)


                self.state = 2535
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2540
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2536
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2537
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2542
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,308,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2545
            _la = self._input.LA(1)
            if not(_la==11 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def relationExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationExtensionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationExtensionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2547
                self.match(SqlBaseParser.LATERAL)


            self.state = 2550
            self.relationPrimary()
            self.state = 2554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2551
                    self.relationExtension() 
                self.state = 2556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joinRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext,0)


        def pivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotClauseContext,0)


        def unpivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationExtension" ):
                listener.enterRelationExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationExtension" ):
                listener.exitRelationExtension(self)




    def relationExtension(self):

        localctx = SqlBaseParser.RelationExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_relationExtension)
        try:
            self.state = 2560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 62, 124, 145, 156, 162, 193, 246, 259]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2557
                self.joinRelation()
                pass
            elif token in [220]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2558
                self.pivotClause()
                pass
            elif token in [322]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2559
                self.unpivotClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)


        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)




    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_joinRelation)
        try:
            self.state = 2579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 62, 124, 145, 156, 162, 246, 259]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2562
                self.joinType()
                self.state = 2563
                self.match(SqlBaseParser.JOIN)
                self.state = 2565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 2564
                    self.match(SqlBaseParser.LATERAL)


                self.state = 2567
                localctx.right = self.relationPrimary()
                self.state = 2569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2568
                    self.joinCriteria()


                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2571
                self.match(SqlBaseParser.NATURAL)
                self.state = 2572
                self.joinType()
                self.state = 2573
                self.match(SqlBaseParser.JOIN)
                self.state = 2575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 2574
                    self.match(SqlBaseParser.LATERAL)


                self.state = 2577
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 2581
                    self.match(SqlBaseParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2584
                self.match(SqlBaseParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2585
                self.match(SqlBaseParser.LEFT)
                self.state = 2587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 2586
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162:
                    self.state = 2589
                    self.match(SqlBaseParser.LEFT)


                self.state = 2592
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2593
                self.match(SqlBaseParser.RIGHT)
                self.state = 2595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 2594
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2597
                self.match(SqlBaseParser.FULL)
                self.state = 2599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 2598
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162:
                    self.state = 2601
                    self.match(SqlBaseParser.LEFT)


                self.state = 2604
                self.match(SqlBaseParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_joinCriteria)
        try:
            self.state = 2611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [201]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2607
                self.match(SqlBaseParser.ON)
                self.state = 2608
                self.booleanExpression(0)
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2609
                self.match(SqlBaseParser.USING)
                self.state = 2610
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seed = None # Token

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def sampleMethod(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleMethodContext,0)


        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)




    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_sample)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 2614
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 2615
                self.sampleMethod()


            self.state = 2618
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2619
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 2620
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2621
                localctx.seed = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2622
                self.match(SqlBaseParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByRows" ):
                listener.enterSampleByRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByRows" ):
                listener.exitSampleByRows(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByPercentile" ):
                listener.enterSampleByPercentile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByPercentile" ):
                listener.exitSampleByPercentile(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)
        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)
        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBucket" ):
                listener.enterSampleByBucket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBucket" ):
                listener.exitSampleByBucket(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBytes" ):
                listener.enterSampleByBytes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBytes" ):
                listener.exitSampleByBytes(self)



    def sampleMethod(self):

        localctx = SqlBaseParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 2625
                    localctx.negativeSign = self.match(SqlBaseParser.MINUS)


                self.state = 2628
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==377 or _la==379):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2629
                self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2630
                self.expression()
                self.state = 2631
                self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2633
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 2634
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2635
                self.match(SqlBaseParser.OUT)
                self.state = 2636
                self.match(SqlBaseParser.OF)
                self.state = 2637
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2638
                    self.match(SqlBaseParser.ON)
                    self.state = 2644
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                    if la_ == 1:
                        self.state = 2639
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2640
                        self.qualifiedName()
                        self.state = 2641
                        self.match(SqlBaseParser.LEFT_PAREN)
                        self.state = 2642
                        self.match(SqlBaseParser.RIGHT_PAREN)
                        pass




                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2648
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2651
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2652
            self.identifierSeq()
            self.state = 2653
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)




    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2655
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2660
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2656
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2657
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2662
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)




    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2663
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2664
            self.orderedIdentifier()
            self.state = 2669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2665
                self.match(SqlBaseParser.COMMA)
                self.state = 2666
                self.orderedIdentifier()
                self.state = 2671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2672
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)




    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2674
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==88:
                self.state = 2675
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==22 or _la==88):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)




    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2678
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2679
            self.identifierComment()
            self.state = 2684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2680
                self.match(SqlBaseParser.COMMA)
                self.state = 2681
                self.identifierComment()
                self.state = 2686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2687
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)




    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self.identifier()
            self.state = 2691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 2690
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def temporalClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TemporalClauseContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_relationPrimary)
        try:
            self.state = 2720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2693
                self.identifierReference()
                self.state = 2695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                if la_ == 1:
                    self.state = 2694
                    self.temporalClause()


                self.state = 2698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                if la_ == 1:
                    self.state = 2697
                    self.sample()


                self.state = 2700
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2702
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2703
                self.query()
                self.state = 2704
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 2705
                    self.sample()


                self.state = 2708
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2710
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2711
                self.relation()
                self.state = 2712
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 2713
                    self.sample()


                self.state = 2716
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2718
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2719
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)




    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            self.match(SqlBaseParser.VALUES)
            self.state = 2723
            self.expression()
            self.state = 2728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,341,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2724
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2725
                    self.expression() 
                self.state = 2730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,341,self._ctx)

            self.state = 2731
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableSubqueryArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def tableArgumentPartitioning(self):
            return self.getTypedRuleContext(SqlBaseParser.TableArgumentPartitioningContext,0)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTableSubqueryArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTableSubqueryArgument" ):
                listener.enterFunctionTableSubqueryArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTableSubqueryArgument" ):
                listener.exitFunctionTableSubqueryArgument(self)




    def functionTableSubqueryArgument(self):

        localctx = SqlBaseParser.FunctionTableSubqueryArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_functionTableSubqueryArgument)
        self._la = 0 # Token type
        try:
            self.state = 2752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2733
                self.match(SqlBaseParser.TABLE)
                self.state = 2734
                self.identifierReference()
                self.state = 2736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94 or _la==214 or _la==342:
                    self.state = 2735
                    self.tableArgumentPartitioning()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2738
                self.match(SqlBaseParser.TABLE)
                self.state = 2739
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2740
                self.identifierReference()
                self.state = 2741
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94 or _la==214 or _la==342:
                    self.state = 2742
                    self.tableArgumentPartitioning()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2745
                self.match(SqlBaseParser.TABLE)
                self.state = 2746
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2747
                self.query()
                self.state = 2748
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94 or _la==214 or _la==342:
                    self.state = 2749
                    self.tableArgumentPartitioning()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgumentPartitioningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SINGLE(self):
            return self.getToken(SqlBaseParser.SINGLE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableArgumentPartitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgumentPartitioning" ):
                listener.enterTableArgumentPartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgumentPartitioning" ):
                listener.exitTableArgumentPartitioning(self)




    def tableArgumentPartitioning(self):

        localctx = SqlBaseParser.TableArgumentPartitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_tableArgumentPartitioning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [342]:
                self.state = 2754
                self.match(SqlBaseParser.WITH)
                self.state = 2755
                self.match(SqlBaseParser.SINGLE)
                self.state = 2756
                self.match(SqlBaseParser.PARTITION)
                pass
            elif token in [94, 214]:
                self.state = 2757
                _la = self._input.LA(1)
                if not(_la==94 or _la==214):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2758
                self.match(SqlBaseParser.BY)
                self.state = 2771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
                if la_ == 1:
                    self.state = 2759
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2760
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 2765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2761
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2762
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2767
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2768
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 2770
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    pass


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206 or _la==273:
                self.state = 2775
                _la = self._input.LA(1)
                if not(_la==206 or _la==273):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2776
                self.match(SqlBaseParser.BY)

                self.state = 2789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                if la_ == 1:
                    self.state = 2777
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2778
                    self.sortItem()
                    self.state = 2783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2779
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2780
                        self.sortItem()
                        self.state = 2785
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2786
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 2788
                    self.sortItem()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableNamedArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # IdentifierContext
            self.table = None # FunctionTableSubqueryArgumentContext

        def FAT_ARROW(self):
            return self.getToken(SqlBaseParser.FAT_ARROW, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def functionTableSubqueryArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableSubqueryArgumentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTableNamedArgumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTableNamedArgumentExpression" ):
                listener.enterFunctionTableNamedArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTableNamedArgumentExpression" ):
                listener.exitFunctionTableNamedArgumentExpression(self)




    def functionTableNamedArgumentExpression(self):

        localctx = SqlBaseParser.FunctionTableNamedArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_functionTableNamedArgumentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2793
            localctx.key = self.identifier()
            self.state = 2794
            self.match(SqlBaseParser.FAT_ARROW)
            self.state = 2795
            localctx.table = self.functionTableSubqueryArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableReferenceArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTableSubqueryArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableSubqueryArgumentContext,0)


        def functionTableNamedArgumentExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableNamedArgumentExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTableReferenceArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTableReferenceArgument" ):
                listener.enterFunctionTableReferenceArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTableReferenceArgument" ):
                listener.exitFunctionTableReferenceArgument(self)




    def functionTableReferenceArgument(self):

        localctx = SqlBaseParser.FunctionTableReferenceArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_functionTableReferenceArgument)
        try:
            self.state = 2799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2797
                self.functionTableSubqueryArgument()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2798
                self.functionTableNamedArgumentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTableReferenceArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableReferenceArgumentContext,0)


        def functionArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionArgumentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTableArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTableArgument" ):
                listener.enterFunctionTableArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTableArgument" ):
                listener.exitFunctionTableArgument(self)




    def functionTableArgument(self):

        localctx = SqlBaseParser.FunctionTableArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_functionTableArgument)
        try:
            self.state = 2803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2801
                self.functionTableReferenceArgument()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2802
                self.functionArgument()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # FunctionNameContext

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def functionName(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionNameContext,0)


        def functionTableArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FunctionTableArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FunctionTableArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTable" ):
                listener.enterFunctionTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTable" ):
                listener.exitFunctionTable(self)




    def functionTable(self):

        localctx = SqlBaseParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2805
            localctx.funcName = self.functionName()
            self.state = 2806
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2807
                self.functionTableArgument()
                self.state = 2812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2808
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2809
                    self.functionTableArgument()
                    self.state = 2814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2817
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2818
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)




    def tableAlias(self):

        localctx = SqlBaseParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 2821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 2820
                    self.match(SqlBaseParser.AS)


                self.state = 2823
                self.strictIdentifier()
                self.state = 2825
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                if la_ == 1:
                    self.state = 2824
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None # StringLitContext
            self.props = None # PropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # StringLitContext
            self.escapedBy = None # StringLitContext
            self.collectionItemsTerminatedBy = None # StringLitContext
            self.keysTerminatedBy = None # StringLitContext
            self.linesSeparatedBy = None # StringLitContext
            self.nullDefinedAs = None # StringLitContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)
        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)



    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_rowFormat)
        try:
            self.state = 2878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2829
                self.match(SqlBaseParser.ROW)
                self.state = 2830
                self.match(SqlBaseParser.FORMAT)
                self.state = 2831
                self.match(SqlBaseParser.SERDE)
                self.state = 2832
                localctx.name = self.stringLit()
                self.state = 2836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 2833
                    self.match(SqlBaseParser.WITH)
                    self.state = 2834
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 2835
                    localctx.props = self.propertyList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2838
                self.match(SqlBaseParser.ROW)
                self.state = 2839
                self.match(SqlBaseParser.FORMAT)
                self.state = 2840
                self.match(SqlBaseParser.DELIMITED)
                self.state = 2850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 2841
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 2842
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2843
                    self.match(SqlBaseParser.BY)
                    self.state = 2844
                    localctx.fieldsTerminatedBy = self.stringLit()
                    self.state = 2848
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                    if la_ == 1:
                        self.state = 2845
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 2846
                        self.match(SqlBaseParser.BY)
                        self.state = 2847
                        localctx.escapedBy = self.stringLit()




                self.state = 2857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 2852
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 2853
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 2854
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2855
                    self.match(SqlBaseParser.BY)
                    self.state = 2856
                    localctx.collectionItemsTerminatedBy = self.stringLit()


                self.state = 2864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 2859
                    self.match(SqlBaseParser.MAP)
                    self.state = 2860
                    self.match(SqlBaseParser.KEYS)
                    self.state = 2861
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2862
                    self.match(SqlBaseParser.BY)
                    self.state = 2863
                    localctx.keysTerminatedBy = self.stringLit()


                self.state = 2870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 2866
                    self.match(SqlBaseParser.LINES)
                    self.state = 2867
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2868
                    self.match(SqlBaseParser.BY)
                    self.state = 2869
                    localctx.linesSeparatedBy = self.stringLit()


                self.state = 2876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 2872
                    self.match(SqlBaseParser.NULL)
                    self.state = 2873
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 2874
                    self.match(SqlBaseParser.AS)
                    self.state = 2875
                    localctx.nullDefinedAs = self.stringLit()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierList" ):
                listener.enterMultipartIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierList" ):
                listener.exitMultipartIdentifierList(self)




    def multipartIdentifierList(self):

        localctx = SqlBaseParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2880
            self.multipartIdentifier()
            self.state = 2885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2881
                self.match(SqlBaseParser.COMMA)
                self.state = 2882
                self.multipartIdentifier()
                self.state = 2887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifier" ):
                listener.enterMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifier" ):
                listener.exitMultipartIdentifier(self)




    def multipartIdentifier(self):

        localctx = SqlBaseParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2888
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 2893
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,368,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2889
                    self.match(SqlBaseParser.DOT)
                    self.state = 2890
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 2895
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifierProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierPropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierPropertyList" ):
                listener.enterMultipartIdentifierPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierPropertyList" ):
                listener.exitMultipartIdentifierPropertyList(self)




    def multipartIdentifierPropertyList(self):

        localctx = SqlBaseParser.MultipartIdentifierPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_multipartIdentifierPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2896
            self.multipartIdentifierProperty()
            self.state = 2901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2897
                self.match(SqlBaseParser.COMMA)
                self.state = 2898
                self.multipartIdentifierProperty()
                self.state = 2903
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # PropertyListContext

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierProperty" ):
                listener.enterMultipartIdentifierProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierProperty" ):
                listener.exitMultipartIdentifierProperty(self)




    def multipartIdentifierProperty(self):

        localctx = SqlBaseParser.MultipartIdentifierPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_multipartIdentifierProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2904
            self.multipartIdentifier()
            self.state = 2907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204:
                self.state = 2905
                self.match(SqlBaseParser.OPTIONS)
                self.state = 2906
                localctx.options = self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)




    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 2909
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2910
                self.match(SqlBaseParser.DOT)


            self.state = 2914
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)




    def functionIdentifier(self):

        localctx = SqlBaseParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 2916
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2917
                self.match(SqlBaseParser.DOT)


            self.state = 2921
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)




    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            self.expression()
            self.state = 2931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.state = 2925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                if la_ == 1:
                    self.state = 2924
                    self.match(SqlBaseParser.AS)


                self.state = 2929
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2927
                    localctx.name = self.errorCapturingIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2928
                    self.identifierList()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)




    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.namedExpression()
            self.state = 2938
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2934
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2935
                    self.namedExpression() 
                self.state = 2940
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._partitionField = None # PartitionFieldContext
            self.fields = list() # of PartitionFieldContexts

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def partitionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFieldList" ):
                listener.enterPartitionFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFieldList" ):
                listener.exitPartitionFieldList(self)




    def partitionFieldList(self):

        localctx = SqlBaseParser.PartitionFieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_partitionFieldList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2941
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2942
            localctx._partitionField = self.partitionField()
            localctx.fields.append(localctx._partitionField)
            self.state = 2947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2943
                self.match(SqlBaseParser.COMMA)
                self.state = 2944
                localctx._partitionField = self.partitionField()
                localctx.fields.append(localctx._partitionField)
                self.state = 2949
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2950
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionField

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionColumnContext(PartitionFieldContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PartitionFieldContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionColumn" ):
                listener.enterPartitionColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionColumn" ):
                listener.exitPartitionColumn(self)


    class PartitionTransformContext(PartitionFieldContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PartitionFieldContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transform(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionTransform" ):
                listener.enterPartitionTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionTransform" ):
                listener.exitPartitionTransform(self)



    def partitionField(self):

        localctx = SqlBaseParser.PartitionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_partitionField)
        try:
            self.state = 2954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PartitionTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2952
                self.transform()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.PartitionColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2953
                self.colType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentityTransform" ):
                listener.enterIdentityTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentityTransform" ):
                listener.exitIdentityTransform(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransformArgumentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApplyTransform" ):
                listener.enterApplyTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApplyTransform" ):
                listener.exitApplyTransform(self)



    def transform(self):

        localctx = SqlBaseParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 2969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2956
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2957
                localctx.transformName = self.identifier()
                self.state = 2958
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2959
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 2964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2960
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2961
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 2966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2967
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformArgument" ):
                listener.enterTransformArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformArgument" ):
                listener.exitTransformArgument(self)




    def transformArgument(self):

        localctx = SqlBaseParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_transformArgument)
        try:
            self.state = 2973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2971
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2972
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2975
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # IdentifierContext
            self.value = None # ExpressionContext

        def FAT_ARROW(self):
            return self.getToken(SqlBaseParser.FAT_ARROW, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedArgumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgumentExpression" ):
                listener.enterNamedArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgumentExpression" ):
                listener.exitNamedArgumentExpression(self)




    def namedArgumentExpression(self):

        localctx = SqlBaseParser.NamedArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_namedArgumentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2977
            localctx.key = self.identifier()
            self.state = 2978
            self.match(SqlBaseParser.FAT_ARROW)
            self.state = 2979
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def namedArgumentExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedArgumentExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgument" ):
                listener.enterFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgument" ):
                listener.exitFunctionArgument(self)




    def functionArgument(self):

        localctx = SqlBaseParser.FunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_functionArgument)
        try:
            self.state = 2983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2981
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2982
                self.namedArgumentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSeq" ):
                listener.enterExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSeq" ):
                listener.exitExpressionSeq(self)




    def expressionSeq(self):

        localctx = SqlBaseParser.ExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_expressionSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2985
            self.expression()
            self.state = 2990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2986
                self.match(SqlBaseParser.COMMA)
                self.state = 2987
                self.expression()
                self.state = 2992
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def BANG(self):
            return self.getToken(SqlBaseParser.BANG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 274
        self.enterRecursionRule(localctx, 274, self.RULE_booleanExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2994
                _la = self._input.LA(1)
                if not(_la==8 or _la==195):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2995
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2996
                self.match(SqlBaseParser.EXISTS)
                self.state = 2997
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2998
                self.query()
                self.state = 2999
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3001
                self.valueExpression(0)
                self.state = 3003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
                if la_ == 1:
                    self.state = 3002
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3015
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,387,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3013
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3007
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3008
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 3009
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3010
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3011
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 3012
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 3017
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,387,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # StringLitContext
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 3100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3018
                    self.match(SqlBaseParser.NOT)


                self.state = 3021
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 3022
                localctx.lower = self.valueExpression(0)
                self.state = 3023
                self.match(SqlBaseParser.AND)
                self.state = 3024
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3026
                    self.match(SqlBaseParser.NOT)


                self.state = 3029
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 3030
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3031
                self.expression()
                self.state = 3036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 3032
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3033
                    self.expression()
                    self.state = 3038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3039
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3041
                    self.match(SqlBaseParser.NOT)


                self.state = 3044
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 3045
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3046
                self.query()
                self.state = 3047
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3049
                    self.match(SqlBaseParser.NOT)


                self.state = 3052
                localctx.kind = self.match(SqlBaseParser.RLIKE)
                self.state = 3053
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3054
                    self.match(SqlBaseParser.NOT)


                self.state = 3057
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==163 or _la==164):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3058
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==11 or _la==17 or _la==272):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
                if la_ == 1:
                    self.state = 3059
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3060
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 3061
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3062
                    self.expression()
                    self.state = 3067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3063
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3064
                        self.expression()
                        self.state = 3069
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3070
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3074
                    self.match(SqlBaseParser.NOT)


                self.state = 3077
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==163 or _la==164):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3078
                localctx.pattern = self.valueExpression(0)
                self.state = 3081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
                if la_ == 1:
                    self.state = 3079
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 3080
                    localctx.escapeChar = self.stringLit()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3083
                self.match(SqlBaseParser.IS)
                self.state = 3085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3084
                    self.match(SqlBaseParser.NOT)


                self.state = 3087
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3088
                self.match(SqlBaseParser.IS)
                self.state = 3090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3089
                    self.match(SqlBaseParser.NOT)


                self.state = 3092
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==111 or _la==311 or _la==320):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3093
                self.match(SqlBaseParser.IS)
                self.state = 3095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3094
                    self.match(SqlBaseParser.NOT)


                self.state = 3097
                localctx.kind = self.match(SqlBaseParser.DISTINCT)
                self.state = 3098
                self.match(SqlBaseParser.FROM)
                self.state = 3099
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)
        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 278
        self.enterRecursionRule(localctx, 278, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3103
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3104
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 35) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3105
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3129
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,404,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3127
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3108
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3109
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==95 or ((((_la - 357)) & ~0x3f) == 0 and ((1 << (_la - 357)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3110
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3111
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3112
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 259) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3113
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3114
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3115
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 3116
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3117
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3118
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 3119
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3120
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3121
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 3122
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3123
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3124
                        self.comparisonOperator()
                        self.state = 3125
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 3131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DatetimeUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_datetimeUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeUnit" ):
                listener.enterDatetimeUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeUnit" ):
                listener.exitDatetimeUnit(self)




    def datetimeUnit(self):

        localctx = SqlBaseParser.DatetimeUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_datetimeUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3132
            _la = self._input.LA(1)
            if not(_la==69 or _la==71 or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 2990671627550721) != 0) or _la==228 or _la==254 or _la==337 or _la==344):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class CastByColonContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def DOUBLE_COLON(self):
            return self.getToken(SqlBaseParser.DOUBLE_COLON, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastByColon" ):
                listener.enterCastByColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastByColon" ):
                listener.exitCastByColon(self)


    class TimestampaddContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.unit = None # DatetimeUnitContext
            self.invalidUnit = None # StringLitContext
            self.unitsAmount = None # ValueExpressionContext
            self.timestamp = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)
        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)
        def DATE_ADD(self):
            return self.getToken(SqlBaseParser.DATE_ADD, 0)
        def datetimeUnit(self):
            return self.getTypedRuleContext(SqlBaseParser.DatetimeUnitContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampadd" ):
                listener.enterTimestampadd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampadd" ):
                listener.exitTimestampadd(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.str_ = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.len_ = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def ARROW(self):
            return self.getToken(SqlBaseParser.ARROW, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class Any_valueContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_value" ):
                listener.enterAny_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_value" ):
                listener.exitAny_value(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class CurrentLikeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def SESSION_USER(self):
            return self.getToken(SqlBaseParser.SESSION_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentLike" ):
                listener.enterCurrentLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentLike" ):
                listener.exitCurrentLike(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def exceptClause(self):
            return self.getTypedRuleContext(SqlBaseParser.ExceptClauseContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.input_ = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlay" ):
                listener.enterOverlay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlay" ):
                listener.exitOverlay(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_BRACKET(self):
            return self.getToken(SqlBaseParser.LEFT_BRACKET, 0)
        def RIGHT_BRACKET(self):
            return self.getToken(SqlBaseParser.RIGHT_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class TimestampdiffContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.unit = None # DatetimeUnitContext
            self.invalidUnit = None # StringLitContext
            self.startTimestamp = None # ValueExpressionContext
            self.endTimestamp = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)
        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)
        def DATE_DIFF(self):
            return self.getToken(SqlBaseParser.DATE_DIFF, 0)
        def TIMEDIFF(self):
            return self.getToken(SqlBaseParser.TIMEDIFF, 0)
        def datetimeUnit(self):
            return self.getTypedRuleContext(SqlBaseParser.DatetimeUnitContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampdiff" ):
                listener.enterTimestampdiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampdiff" ):
                listener.exitTimestampdiff(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class CollateContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def collateClause(self):
            return self.getTypedRuleContext(SqlBaseParser.CollateClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate" ):
                listener.enterCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate" ):
                listener.exitCollate(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._functionArgument = None # FunctionArgumentContext
            self.argument = list() # of FunctionArgumentContexts
            self.where = None # BooleanExpressionContext
            self.nullsOption = None # Token
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionNameContext,0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)
        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)
        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)
        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)
        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)

        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FunctionArgumentContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.str_ = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 282
        self.enterRecursionRule(localctx, 282, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.CurrentLikeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3135
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 13) != 0) or _la==263 or _la==326):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TimestampaddContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3136
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==76 or _la==77 or _la==300):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3137
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 3138
                    localctx.unit = self.datetimeUnit()
                    pass

                elif la_ == 2:
                    self.state = 3139
                    localctx.invalidUnit = self.stringLit()
                    pass


                self.state = 3142
                self.match(SqlBaseParser.COMMA)
                self.state = 3143
                localctx.unitsAmount = self.valueExpression(0)
                self.state = 3144
                self.match(SqlBaseParser.COMMA)
                self.state = 3145
                localctx.timestamp = self.valueExpression(0)
                self.state = 3146
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TimestampdiffContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3148
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==78 or _la==79 or _la==296 or _la==301):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3149
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3152
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3150
                    localctx.unit = self.datetimeUnit()
                    pass

                elif la_ == 2:
                    self.state = 3151
                    localctx.invalidUnit = self.stringLit()
                    pass


                self.state = 3154
                self.match(SqlBaseParser.COMMA)
                self.state = 3155
                localctx.startTimestamp = self.valueExpression(0)
                self.state = 3156
                self.match(SqlBaseParser.COMMA)
                self.state = 3157
                localctx.endTimestamp = self.valueExpression(0)
                self.state = 3158
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3160
                self.match(SqlBaseParser.CASE)
                self.state = 3162 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3161
                    self.whenClause()
                    self.state = 3164 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==339):
                        break

                self.state = 3168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3166
                    self.match(SqlBaseParser.ELSE)
                    self.state = 3167
                    localctx.elseExpression = self.expression()


                self.state = 3170
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3172
                self.match(SqlBaseParser.CASE)
                self.state = 3173
                localctx.value = self.expression()
                self.state = 3175 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3174
                    self.whenClause()
                    self.state = 3177 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==339):
                        break

                self.state = 3181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3179
                    self.match(SqlBaseParser.ELSE)
                    self.state = 3180
                    localctx.elseExpression = self.expression()


                self.state = 3183
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3185
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==37 or _la==313):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3186
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3187
                self.expression()
                self.state = 3188
                self.match(SqlBaseParser.AS)
                self.state = 3189
                self.dataType()
                self.state = 3190
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3192
                self.match(SqlBaseParser.STRUCT)
                self.state = 3193
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
                if la_ == 1:
                    self.state = 3194
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 3199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3195
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3196
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 3201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3204
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3205
                self.match(SqlBaseParser.FIRST)
                self.state = 3206
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3207
                self.expression()
                self.state = 3210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3208
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 3209
                    self.match(SqlBaseParser.NULLS)


                self.state = 3212
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.Any_valueContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3214
                self.match(SqlBaseParser.ANY_VALUE)
                self.state = 3215
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3216
                self.expression()
                self.state = 3219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3217
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 3218
                    self.match(SqlBaseParser.NULLS)


                self.state = 3221
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3223
                self.match(SqlBaseParser.LAST)
                self.state = 3224
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3225
                self.expression()
                self.state = 3228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3226
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 3227
                    self.match(SqlBaseParser.NULLS)


                self.state = 3230
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3232
                self.match(SqlBaseParser.POSITION)
                self.state = 3233
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3234
                localctx.substr = self.valueExpression(0)
                self.state = 3235
                self.match(SqlBaseParser.IN)
                self.state = 3236
                localctx.str_ = self.valueExpression(0)
                self.state = 3237
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3239
                self.constant()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3240
                self.match(SqlBaseParser.ASTERISK)
                self.state = 3242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
                if la_ == 1:
                    self.state = 3241
                    self.exceptClause()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3244
                self.qualifiedName()
                self.state = 3245
                self.match(SqlBaseParser.DOT)
                self.state = 3246
                self.match(SqlBaseParser.ASTERISK)
                self.state = 3248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
                if la_ == 1:
                    self.state = 3247
                    self.exceptClause()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3250
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3251
                self.namedExpression()
                self.state = 3254 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3252
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3253
                    self.namedExpression()
                    self.state = 3256 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break

                self.state = 3258
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3260
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3261
                self.query()
                self.state = 3262
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3264
                self.functionName()
                self.state = 3265
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 3267
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
                    if la_ == 1:
                        self.state = 3266
                        self.setQuantifier()


                    self.state = 3269
                    localctx._functionArgument = self.functionArgument()
                    localctx.argument.append(localctx._functionArgument)
                    self.state = 3274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3270
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3271
                        localctx._functionArgument = self.functionArgument()
                        localctx.argument.append(localctx._functionArgument)
                        self.state = 3276
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3279
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 3295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                if la_ == 1:
                    self.state = 3280
                    self.match(SqlBaseParser.WITHIN)
                    self.state = 3281
                    self.match(SqlBaseParser.GROUP)
                    self.state = 3282
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3283
                    self.match(SqlBaseParser.ORDER)
                    self.state = 3284
                    self.match(SqlBaseParser.BY)
                    self.state = 3285
                    self.sortItem()
                    self.state = 3290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3286
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3287
                        self.sortItem()
                        self.state = 3292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3293
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 3303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 3297
                    self.match(SqlBaseParser.FILTER)
                    self.state = 3298
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3299
                    self.match(SqlBaseParser.WHERE)
                    self.state = 3300
                    localctx.where = self.booleanExpression(0)
                    self.state = 3301
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 3307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
                if la_ == 1:
                    self.state = 3305
                    localctx.nullsOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==138 or _la==243):
                        localctx.nullsOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3306
                    self.match(SqlBaseParser.NULLS)


                self.state = 3311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                if la_ == 1:
                    self.state = 3309
                    self.match(SqlBaseParser.OVER)
                    self.state = 3310
                    self.windowSpec()


                pass

            elif la_ == 18:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3313
                self.identifier()
                self.state = 3314
                self.match(SqlBaseParser.ARROW)
                self.state = 3315
                self.expression()
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3317
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3318
                self.identifier()
                self.state = 3321 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3319
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3320
                    self.identifier()
                    self.state = 3323 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break

                self.state = 3325
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 3326
                self.match(SqlBaseParser.ARROW)
                self.state = 3327
                self.expression()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3329
                self.identifier()
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3330
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3331
                self.expression()
                self.state = 3332
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3334
                self.match(SqlBaseParser.EXTRACT)
                self.state = 3335
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3336
                localctx.field = self.identifier()
                self.state = 3337
                self.match(SqlBaseParser.FROM)
                self.state = 3338
                localctx.source = self.valueExpression(0)
                self.state = 3339
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3341
                _la = self._input.LA(1)
                if not(_la==282 or _la==283):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3342
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3343
                localctx.str_ = self.valueExpression(0)
                self.state = 3344
                _la = self._input.LA(1)
                if not(_la==4 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3345
                localctx.pos = self.valueExpression(0)
                self.state = 3348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==119:
                    self.state = 3346
                    _la = self._input.LA(1)
                    if not(_la==4 or _la==119):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3347
                    localctx.len_ = self.valueExpression(0)


                self.state = 3350
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3352
                self.match(SqlBaseParser.TRIM)
                self.state = 3353
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                if la_ == 1:
                    self.state = 3354
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==29 or _la==161 or _la==306):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
                if la_ == 1:
                    self.state = 3357
                    localctx.trimStr = self.valueExpression(0)


                self.state = 3360
                self.match(SqlBaseParser.FROM)
                self.state = 3361
                localctx.srcStr = self.valueExpression(0)
                self.state = 3362
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3364
                self.match(SqlBaseParser.OVERLAY)
                self.state = 3365
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3366
                localctx.input_ = self.valueExpression(0)
                self.state = 3367
                self.match(SqlBaseParser.PLACING)
                self.state = 3368
                localctx.replace = self.valueExpression(0)
                self.state = 3369
                self.match(SqlBaseParser.FROM)
                self.state = 3370
                localctx.position = self.valueExpression(0)
                self.state = 3373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 3371
                    self.match(SqlBaseParser.FOR)
                    self.state = 3372
                    localctx.length = self.valueExpression(0)


                self.state = 3375
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3394
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3392
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.CollateContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3379
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 3380
                        self.collateClause()
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.CastByColonContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3381
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 3382
                        self.match(SqlBaseParser.DOUBLE_COLON)
                        self.state = 3383
                        self.dataType()
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3384
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3385
                        self.match(SqlBaseParser.LEFT_BRACKET)
                        self.state = 3386
                        localctx.index = self.valueExpression(0)
                        self.state = 3387
                        self.match(SqlBaseParser.RIGHT_BRACKET)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3389
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3390
                        self.match(SqlBaseParser.DOT)
                        self.state = 3391
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 3396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,434,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LiteralTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unsupportedType = None # IdentifierContext

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_LTZ, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_NTZ, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def BINARY_HEX(self):
            return self.getToken(SqlBaseParser.BINARY_HEX, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_literalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralType" ):
                listener.enterLiteralType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralType" ):
                listener.exitLiteralType(self)




    def literalType(self):

        localctx = SqlBaseParser.LiteralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_literalType)
        try:
            self.state = 3404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3397
                self.match(SqlBaseParser.DATE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3398
                self.match(SqlBaseParser.TIMESTAMP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3399
                self.match(SqlBaseParser.TIMESTAMP_LTZ)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3400
                self.match(SqlBaseParser.TIMESTAMP_NTZ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3401
                self.match(SqlBaseParser.INTERVAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3402
                self.match(SqlBaseParser.BINARY_HEX)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3403
                localctx.unsupportedType = self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literalType(self):
            return self.getTypedRuleContext(SqlBaseParser.LiteralTypeContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)


    class PosParameterLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION(self):
            return self.getToken(SqlBaseParser.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosParameterLiteral" ):
                listener.enterPosParameterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosParameterLiteral" ):
                listener.exitPosParameterLiteral(self)


    class NamedParameterLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(SqlBaseParser.COLON, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedParameterLiteral" ):
                listener.enterNamedParameterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedParameterLiteral" ):
                listener.exitNamedParameterLiteral(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)



    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_constant)
        try:
            self.state = 3421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3406
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.PosParameterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3407
                self.match(SqlBaseParser.QUESTION)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.NamedParameterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3408
                self.match(SqlBaseParser.COLON)
                self.state = 3409
                self.identifier()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3410
                self.interval()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3411
                self.literalType()
                self.state = 3412
                self.stringLit()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3414
                self.number()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3415
                self.booleanValue()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3417 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3416
                        self.stringLit()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3419 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,436,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3423
            _la = self._input.LA(1)
            if not(((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)




    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3425
            _la = self._input.LA(1)
            if not(_la==95 or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)




    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3427
            _la = self._input.LA(1)
            if not(_la==15 or _la==141 or _la==195 or _la==205):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3429
            _la = self._input.LA(1)
            if not(_la==111 or _la==311):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3431
            self.match(SqlBaseParser.INTERVAL)
            self.state = 3434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.state = 3432
                self.errorCapturingMultiUnitsInterval()
                pass

            elif la_ == 2:
                self.state = 3433
                self.errorCapturingUnitToUnitInterval()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # MultiUnitsIntervalContext

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingMultiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingMultiUnitsInterval" ):
                listener.enterErrorCapturingMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingMultiUnitsInterval" ):
                listener.exitErrorCapturingMultiUnitsInterval(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3436
            localctx.body = self.multiUnitsInterval()
            self.state = 3438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.state = 3437
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unitInMultiUnits = None # UnitInMultiUnitsContext
            self.unit = list() # of UnitInMultiUnitsContexts

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,i)


        def unitInMultiUnits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitInMultiUnitsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitInMultiUnitsContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiUnitsInterval" ):
                listener.enterMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiUnitsInterval" ):
                listener.exitMultiUnitsInterval(self)




    def multiUnitsInterval(self):

        localctx = SqlBaseParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3443 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3440
                    self.intervalValue()
                    self.state = 3441
                    localctx._unitInMultiUnits = self.unitInMultiUnits()
                    localctx.unit.append(localctx._unitInMultiUnits)

                else:
                    raise NoViableAltException(self)
                self.state = 3445 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,440,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingUnitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingUnitToUnitInterval" ):
                listener.enterErrorCapturingUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingUnitToUnitInterval" ):
                listener.exitErrorCapturingUnitToUnitInterval(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3447
            localctx.body = self.unitToUnitInterval()
            self.state = 3450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3448
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3449
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.from_ = None # UnitInUnitToUnitContext
            self.to = None # UnitInUnitToUnitContext

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,0)


        def unitInUnitToUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitInUnitToUnitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitInUnitToUnitContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitToUnitInterval" ):
                listener.enterUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitToUnitInterval" ):
                listener.exitUnitToUnitInterval(self)




    def unitToUnitInterval(self):

        localctx = SqlBaseParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3452
            localctx.value = self.intervalValue()
            self.state = 3453
            localctx.from_ = self.unitInUnitToUnit()
            self.state = 3454
            self.match(SqlBaseParser.TO)
            self.state = 3455
            localctx.to = self.unitInUnitToUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)




    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 3457
                _la = self._input.LA(1)
                if not(_la==355 or _la==356):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3460
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.state = 3461
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                self.state = 3462
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitInMultiUnitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitInMultiUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitInMultiUnits" ):
                listener.enterUnitInMultiUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitInMultiUnits" ):
                listener.exitUnitInMultiUnits(self)




    def unitInMultiUnits(self):

        localctx = SqlBaseParser.UnitInMultiUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_unitInMultiUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3465
            _la = self._input.LA(1)
            if not(_la==69 or _la==70 or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 441317579110219779) != 0) or _la==254 or _la==255 or ((((_la - 337)) & ~0x3f) == 0 and ((1 << (_la - 337)) & 387) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitInUnitToUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitInUnitToUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitInUnitToUnit" ):
                listener.enterUnitInUnitToUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitInUnitToUnit" ):
                listener.exitUnitInUnitToUnit(self)




    def unitInUnitToUnit(self):

        localctx = SqlBaseParser.UnitInUnitToUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_unitInUnitToUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3467
            _la = self._input.LA(1)
            if not(_la==69 or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 2814749767106561) != 0) or _la==254 or _la==344):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)




    def colPosition(self):

        localctx = SqlBaseParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_colPosition)
        try:
            self.state = 3472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3469
                localctx.position = self.match(SqlBaseParser.FIRST)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3470
                localctx.position = self.match(SqlBaseParser.AFTER)
                self.state = 3471
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollateClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.collationName = None # IdentifierContext

        def COLLATE(self):
            return self.getToken(SqlBaseParser.COLLATE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_collateClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateClause" ):
                listener.enterCollateClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateClause" ):
                listener.exitCollateClause(self)




    def collateClause(self):

        localctx = SqlBaseParser.CollateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_collateClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3474
            self.match(SqlBaseParser.COLLATE)
            self.state = 3475
            localctx.collationName = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unsupportedType = None # IdentifierContext

        def BOOLEAN(self):
            return self.getToken(SqlBaseParser.BOOLEAN, 0)

        def TINYINT(self):
            return self.getToken(SqlBaseParser.TINYINT, 0)

        def BYTE(self):
            return self.getToken(SqlBaseParser.BYTE, 0)

        def SMALLINT(self):
            return self.getToken(SqlBaseParser.SMALLINT, 0)

        def SHORT(self):
            return self.getToken(SqlBaseParser.SHORT, 0)

        def INT(self):
            return self.getToken(SqlBaseParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def BIGINT(self):
            return self.getToken(SqlBaseParser.BIGINT, 0)

        def LONG(self):
            return self.getToken(SqlBaseParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(SqlBaseParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(SqlBaseParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_NTZ, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_LTZ, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def collateClause(self):
            return self.getTypedRuleContext(SqlBaseParser.CollateClauseContext,0)


        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(SqlBaseParser.CHAR, 0)

        def VARCHAR(self):
            return self.getToken(SqlBaseParser.VARCHAR, 0)

        def BINARY(self):
            return self.getToken(SqlBaseParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(SqlBaseParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(SqlBaseParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(SqlBaseParser.NUMERIC, 0)

        def VOID(self):
            return self.getToken(SqlBaseParser.VOID, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def VARIANT(self):
            return self.getToken(SqlBaseParser.VARIANT, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = SqlBaseParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_type)
        try:
            self.state = 3511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3477
                self.match(SqlBaseParser.BOOLEAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3478
                self.match(SqlBaseParser.TINYINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3479
                self.match(SqlBaseParser.BYTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3480
                self.match(SqlBaseParser.SMALLINT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3481
                self.match(SqlBaseParser.SHORT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3482
                self.match(SqlBaseParser.INT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3483
                self.match(SqlBaseParser.INTEGER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3484
                self.match(SqlBaseParser.BIGINT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3485
                self.match(SqlBaseParser.LONG)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3486
                self.match(SqlBaseParser.FLOAT)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3487
                self.match(SqlBaseParser.REAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3488
                self.match(SqlBaseParser.DOUBLE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3489
                self.match(SqlBaseParser.DATE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3490
                self.match(SqlBaseParser.TIMESTAMP)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3491
                self.match(SqlBaseParser.TIMESTAMP_NTZ)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3492
                self.match(SqlBaseParser.TIMESTAMP_LTZ)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3493
                self.match(SqlBaseParser.STRING)
                self.state = 3495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
                if la_ == 1:
                    self.state = 3494
                    self.collateClause()


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3497
                self.match(SqlBaseParser.CHARACTER)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3498
                self.match(SqlBaseParser.CHAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3499
                self.match(SqlBaseParser.VARCHAR)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3500
                self.match(SqlBaseParser.BINARY)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 3501
                self.match(SqlBaseParser.DECIMAL)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 3502
                self.match(SqlBaseParser.DEC)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 3503
                self.match(SqlBaseParser.NUMERIC)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 3504
                self.match(SqlBaseParser.VOID)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 3505
                self.match(SqlBaseParser.INTERVAL)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 3506
                self.match(SqlBaseParser.VARIANT)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 3507
                self.match(SqlBaseParser.ARRAY)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 3508
                self.match(SqlBaseParser.STRUCT)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 3509
                self.match(SqlBaseParser.MAP)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 3510
                localctx.unsupportedType = self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complex_ = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)


    class YearMonthIntervalDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.from_ = None # Token
            self.to = None # Token
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)
        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MONTH)
            else:
                return self.getToken(SqlBaseParser.MONTH, i)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYearMonthIntervalDataType" ):
                listener.enterYearMonthIntervalDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYearMonthIntervalDataType" ):
                listener.exitYearMonthIntervalDataType(self)


    class DayTimeIntervalDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.from_ = None # Token
            self.to = None # Token
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)
        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.HOUR)
            else:
                return self.getToken(SqlBaseParser.HOUR, i)
        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MINUTE)
            else:
                return self.getToken(SqlBaseParser.MINUTE, i)
        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SECOND)
            else:
                return self.getToken(SqlBaseParser.SECOND, i)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayTimeIntervalDataType" ):
                listener.enterDayTimeIntervalDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayTimeIntervalDataType" ):
                listener.exitDayTimeIntervalDataType(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)



    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3513
                localctx.complex_ = self.match(SqlBaseParser.ARRAY)
                self.state = 3514
                self.match(SqlBaseParser.LT)
                self.state = 3515
                self.dataType()
                self.state = 3516
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3518
                localctx.complex_ = self.match(SqlBaseParser.MAP)
                self.state = 3519
                self.match(SqlBaseParser.LT)
                self.state = 3520
                self.dataType()
                self.state = 3521
                self.match(SqlBaseParser.COMMA)
                self.state = 3522
                self.dataType()
                self.state = 3523
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3525
                localctx.complex_ = self.match(SqlBaseParser.STRUCT)
                self.state = 3532
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [351]:
                    self.state = 3526
                    self.match(SqlBaseParser.LT)
                    self.state = 3528
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
                    if la_ == 1:
                        self.state = 3527
                        self.complexColTypeList()


                    self.state = 3530
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [349]:
                    self.state = 3531
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.YearMonthIntervalDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3534
                self.match(SqlBaseParser.INTERVAL)
                self.state = 3535
                localctx.from_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==185 or _la==344):
                    localctx.from_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                if la_ == 1:
                    self.state = 3536
                    self.match(SqlBaseParser.TO)
                    self.state = 3537
                    localctx.to = self.match(SqlBaseParser.MONTH)


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DayTimeIntervalDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3540
                self.match(SqlBaseParser.INTERVAL)
                self.state = 3541
                localctx.from_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==69 or _la==134 or _la==183 or _la==254):
                    localctx.from_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
                if la_ == 1:
                    self.state = 3542
                    self.match(SqlBaseParser.TO)
                    self.state = 3543
                    localctx.to = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==134 or _la==183 or _la==254):
                        localctx.to = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3546
                self.type_()
                self.state = 3557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                if la_ == 1:
                    self.state = 3547
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3548
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 3553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3549
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3550
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 3555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3556
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedColTypeWithPositionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPositionList" ):
                listener.enterQualifiedColTypeWithPositionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPositionList" ):
                listener.exitQualifiedColTypeWithPositionList(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = SqlBaseParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self.qualifiedColTypeWithPosition()
            self.state = 3566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3562
                self.match(SqlBaseParser.COMMA)
                self.state = 3563
                self.qualifiedColTypeWithPosition()
                self.state = 3568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def colDefinitionDescriptorWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColDefinitionDescriptorWithPositionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColDefinitionDescriptorWithPositionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedColTypeWithPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPosition" ):
                listener.enterQualifiedColTypeWithPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPosition" ):
                listener.exitQualifiedColTypeWithPosition(self)




    def qualifiedColTypeWithPosition(self):

        localctx = SqlBaseParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            localctx.name = self.multipartIdentifier()
            self.state = 3570
            self.dataType()
            self.state = 3574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10 or _la==53 or _la==84 or _la==116 or _la==195:
                self.state = 3571
                self.colDefinitionDescriptorWithPosition()
                self.state = 3576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColDefinitionDescriptorWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colDefinitionDescriptorWithPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColDefinitionDescriptorWithPosition" ):
                listener.enterColDefinitionDescriptorWithPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColDefinitionDescriptorWithPosition" ):
                listener.exitColDefinitionDescriptorWithPosition(self)




    def colDefinitionDescriptorWithPosition(self):

        localctx = SqlBaseParser.ColDefinitionDescriptorWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_colDefinitionDescriptorWithPosition)
        try:
            self.state = 3582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3577
                self.match(SqlBaseParser.NOT)
                self.state = 3578
                self.match(SqlBaseParser.NULL)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3579
                self.defaultExpression()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3580
                self.commentSpec()
                pass
            elif token in [10, 116]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3581
                self.colPosition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_defaultExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultExpression" ):
                listener.enterDefaultExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultExpression" ):
                listener.exitDefaultExpression(self)




    def defaultExpression(self):

        localctx = SqlBaseParser.DefaultExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_defaultExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3584
            self.match(SqlBaseParser.DEFAULT)
            self.state = 3585
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefaultExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_variableDefaultExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefaultExpression" ):
                listener.enterVariableDefaultExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefaultExpression" ):
                listener.exitVariableDefaultExpression(self)




    def variableDefaultExpression(self):

        localctx = SqlBaseParser.VariableDefaultExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_variableDefaultExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3587
            _la = self._input.LA(1)
            if not(_la==84 or _la==347):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3588
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)




    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3590
            self.colType()
            self.state = 3595
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,457,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3591
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3592
                    self.colType() 
                self.state = 3597
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,457,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)




    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3598
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3599
            self.dataType()
            self.state = 3602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
            if la_ == 1:
                self.state = 3600
                self.match(SqlBaseParser.NOT)
                self.state = 3601
                self.match(SqlBaseParser.NULL)


            self.state = 3605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3604
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateOrReplaceTableColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createOrReplaceTableColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateOrReplaceTableColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createOrReplaceTableColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateOrReplaceTableColTypeList" ):
                listener.enterCreateOrReplaceTableColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateOrReplaceTableColTypeList" ):
                listener.exitCreateOrReplaceTableColTypeList(self)




    def createOrReplaceTableColTypeList(self):

        localctx = SqlBaseParser.CreateOrReplaceTableColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_createOrReplaceTableColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3607
            self.createOrReplaceTableColType()
            self.state = 3612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3608
                self.match(SqlBaseParser.COMMA)
                self.state = 3609
                self.createOrReplaceTableColType()
                self.state = 3614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateOrReplaceTableColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def colDefinitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColDefinitionOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColDefinitionOptionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createOrReplaceTableColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateOrReplaceTableColType" ):
                listener.enterCreateOrReplaceTableColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateOrReplaceTableColType" ):
                listener.exitCreateOrReplaceTableColType(self)




    def createOrReplaceTableColType(self):

        localctx = SqlBaseParser.CreateOrReplaceTableColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_createOrReplaceTableColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3615
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3616
            self.dataType()
            self.state = 3620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53 or _la==84 or _la==127 or _la==195:
                self.state = 3617
                self.colDefinitionOption()
                self.state = 3622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColDefinitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def generationExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.GenerationExpressionContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colDefinitionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColDefinitionOption" ):
                listener.enterColDefinitionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColDefinitionOption" ):
                listener.exitColDefinitionOption(self)




    def colDefinitionOption(self):

        localctx = SqlBaseParser.ColDefinitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_colDefinitionOption)
        try:
            self.state = 3628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3623
                self.match(SqlBaseParser.NOT)
                self.state = 3624
                self.match(SqlBaseParser.NULL)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3625
                self.defaultExpression()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3626
                self.generationExpression()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3627
                self.commentSpec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenerationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_generationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerationExpression" ):
                listener.enterGenerationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerationExpression" ):
                listener.exitGenerationExpression(self)




    def generationExpression(self):

        localctx = SqlBaseParser.GenerationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_generationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3630
            self.match(SqlBaseParser.GENERATED)
            self.state = 3631
            self.match(SqlBaseParser.ALWAYS)
            self.state = 3632
            self.match(SqlBaseParser.AS)
            self.state = 3633
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 3634
            self.expression()
            self.state = 3635
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)




    def complexColTypeList(self):

        localctx = SqlBaseParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3637
            self.complexColType()
            self.state = 3642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3638
                self.match(SqlBaseParser.COMMA)
                self.state = 3639
                self.complexColType()
                self.state = 3644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COLON(self):
            return self.getToken(SqlBaseParser.COLON, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)




    def complexColType(self):

        localctx = SqlBaseParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3645
            self.errorCapturingIdentifier()
            self.state = 3647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.state = 3646
                self.match(SqlBaseParser.COLON)


            self.state = 3649
            self.dataType()
            self.state = 3652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 3650
                self.match(SqlBaseParser.NOT)
                self.state = 3651
                self.match(SqlBaseParser.NULL)


            self.state = 3655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 3654
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3657
            self.match(SqlBaseParser.WHEN)
            self.state = 3658
            localctx.condition = self.expression()
            self.state = 3659
            self.match(SqlBaseParser.THEN)
            self.state = 3660
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = SqlBaseParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3662
            self.match(SqlBaseParser.WINDOW)
            self.state = 3663
            self.namedWindow()
            self.state = 3668
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,467,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3664
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3665
                    self.namedWindow() 
                self.state = 3670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,467,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3671
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3672
            self.match(SqlBaseParser.AS)
            self.state = 3673
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)



    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3675
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3676
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3677
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3678
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3680
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3715
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 3681
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 3682
                    self.match(SqlBaseParser.BY)
                    self.state = 3683
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3684
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3685
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3690
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [3, 94, 206, 214, 230, 253, 273]:
                    self.state = 3701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==94 or _la==214:
                        self.state = 3691
                        _la = self._input.LA(1)
                        if not(_la==94 or _la==214):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3692
                        self.match(SqlBaseParser.BY)
                        self.state = 3693
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3698
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 3694
                            self.match(SqlBaseParser.COMMA)
                            self.state = 3695
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3700
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==206 or _la==273:
                        self.state = 3703
                        _la = self._input.LA(1)
                        if not(_la==206 or _la==273):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3704
                        self.match(SqlBaseParser.BY)
                        self.state = 3705
                        self.sortItem()
                        self.state = 3710
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 3706
                            self.match(SqlBaseParser.COMMA)
                            self.state = 3707
                            self.sortItem()
                            self.state = 3712
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==230 or _la==253:
                    self.state = 3717
                    self.windowFrame()


                self.state = 3720
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_windowFrame)
        try:
            self.state = 3739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3723
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 3724
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3725
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 3726
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3727
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 3728
                self.match(SqlBaseParser.BETWEEN)
                self.state = 3729
                localctx.start = self.frameBound()
                self.state = 3730
                self.match(SqlBaseParser.AND)
                self.state = 3731
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3733
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 3734
                self.match(SqlBaseParser.BETWEEN)
                self.state = 3735
                localctx.start = self.frameBound()
                self.state = 3736
                self.match(SqlBaseParser.AND)
                self.state = 3737
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)




    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3741
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 3742
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==118 or _la==223):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3743
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 3744
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3745
                self.expression()
                self.state = 3746
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==118 or _la==223):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = SqlBaseParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3750
            self.qualifiedName()
            self.state = 3755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3751
                self.match(SqlBaseParser.COMMA)
                self.state = 3752
                self.qualifiedName()
                self.state = 3757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.identFunc = None # Token

        def IDENTIFIER_KW(self):
            return self.getToken(SqlBaseParser.IDENTIFIER_KW, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = SqlBaseParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_functionName)
        try:
            self.state = 3768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3758
                self.match(SqlBaseParser.IDENTIFIER_KW)
                self.state = 3759
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3760
                self.expression()
                self.state = 3761
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3763
                localctx.identFunc = self.match(SqlBaseParser.IDENTIFIER_KW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3764
                self.qualifiedName()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3765
                self.match(SqlBaseParser.FILTER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3766
                self.match(SqlBaseParser.LEFT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3767
                self.match(SqlBaseParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3770
            self.identifier()
            self.state = 3775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,480,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3771
                    self.match(SqlBaseParser.DOT)
                    self.state = 3772
                    self.identifier() 
                self.state = 3777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,480,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def errorCapturingIdentifierExtra(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierExtraContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingIdentifier" ):
                listener.enterErrorCapturingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingIdentifier" ):
                listener.exitErrorCapturingIdentifier(self)




    def errorCapturingIdentifier(self):

        localctx = SqlBaseParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3778
            self.identifier()
            self.state = 3779
            self.errorCapturingIdentifierExtra()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MINUS)
            else:
                return self.getToken(SqlBaseParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorIdent" ):
                listener.enterErrorIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorIdent" ):
                listener.exitErrorIdent(self)


    class RealIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealIdent" ):
                listener.enterRealIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealIdent" ):
                listener.exitRealIdent(self)



    def errorCapturingIdentifierExtra(self):

        localctx = SqlBaseParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_errorCapturingIdentifierExtra)
        try:
            self.state = 3788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ErrorIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3783 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3781
                        self.match(SqlBaseParser.MINUS)
                        self.state = 3782
                        self.identifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3785 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,481,self._ctx)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RealIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_identifier)
        try:
            self.state = 3793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3790
                self.strictIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3791
                if self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!SQL_standard_keyword_behavior")
                self.state = 3792
                self.strictNonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def ansiNonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.AnsiNonReservedContext,0)

        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_strictIdentifier)
        try:
            self.state = 3801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3795
                self.match(SqlBaseParser.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3796
                self.quotedIdentifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3797
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "SQL_standard_keyword_behavior")
                self.state = 3798
                self.ansiNonReserved()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3799
                if self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!SQL_standard_keyword_behavior")
                self.state = 3800
                self.nonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def DOUBLEQUOTED_STRING(self):
            return self.getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)




    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_quotedIdentifier)
        try:
            self.state = 3806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3803
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3804
                if not self.double_quoted_identifiers:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "double_quoted_identifiers")
                self.state = 3805
                self.match(SqlBaseParser.DOUBLEQUOTED_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BackQuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_backQuotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)




    def backQuotedIdentifier(self):

        localctx = SqlBaseParser.BackQuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_backQuotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3808
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(SqlBaseParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyDecimalLiteral" ):
                listener.enterLegacyDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyDecimalLiteral" ):
                listener.exitLegacyDecimalLiteral(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(SqlBaseParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentLiteral" ):
                listener.enterExponentLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentLiteral" ):
                listener.exitExponentLiteral(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class FloatLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLOAT_LITERAL(self):
            return self.getToken(SqlBaseParser.FLOAT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3810
                if self.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!legacy_exponent_literal_as_decimal_enabled")
                self.state = 3812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3811
                    self.match(SqlBaseParser.MINUS)


                self.state = 3814
                self.match(SqlBaseParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3815
                if self.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!legacy_exponent_literal_as_decimal_enabled")
                self.state = 3817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3816
                    self.match(SqlBaseParser.MINUS)


                self.state = 3819
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3820
                if not self.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "legacy_exponent_literal_as_decimal_enabled")
                self.state = 3822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3821
                    self.match(SqlBaseParser.MINUS)


                self.state = 3824
                _la = self._input.LA(1)
                if not(_la==378 or _la==379):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3825
                    self.match(SqlBaseParser.MINUS)


                self.state = 3828
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3829
                    self.match(SqlBaseParser.MINUS)


                self.state = 3832
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3833
                    self.match(SqlBaseParser.MINUS)


                self.state = 3836
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3837
                    self.match(SqlBaseParser.MINUS)


                self.state = 3840
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3841
                    self.match(SqlBaseParser.MINUS)


                self.state = 3844
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.FloatLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3845
                    self.match(SqlBaseParser.MINUS)


                self.state = 3848
                self.match(SqlBaseParser.FLOAT_LITERAL)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 3850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==356:
                    self.state = 3849
                    self.match(SqlBaseParser.MINUS)


                self.state = 3852
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token
            self.dropDefault = None # Token

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterColumnAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColumnAction" ):
                listener.enterAlterColumnAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColumnAction" ):
                listener.exitAlterColumnAction(self)




    def alterColumnAction(self):

        localctx = SqlBaseParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3855
                self.match(SqlBaseParser.TYPE)
                self.state = 3856
                self.dataType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3857
                self.commentSpec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3858
                self.colPosition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3859
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==97 or _la==264):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3860
                self.match(SqlBaseParser.NOT)
                self.state = 3861
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3862
                self.match(SqlBaseParser.SET)
                self.state = 3863
                self.defaultExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3864
                localctx.dropDefault = self.match(SqlBaseParser.DROP)
                self.state = 3865
                self.match(SqlBaseParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SqlBaseParser.STRING_LITERAL, 0)

        def DOUBLEQUOTED_STRING(self):
            return self.getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLit" ):
                listener.enterStringLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLit" ):
                listener.exitStringLit(self)




    def stringLit(self):

        localctx = SqlBaseParser.StringLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_stringLit)
        try:
            self.state = 3871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3868
                self.match(SqlBaseParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3869
                if self.double_quoted_identifiers:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!double_quoted_identifiers")
                self.state = 3870
                self.match(SqlBaseParser.DOUBLEQUOTED_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = SqlBaseParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_comment)
        try:
            self.state = 3875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3873
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3874
                self.match(SqlBaseParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = SqlBaseParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_version)
        try:
            self.state = 3879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3877
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3878
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(SqlBaseParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(SqlBaseParser.BINARY, 0)

        def BINARY_HEX(self):
            return self.getToken(SqlBaseParser.BINARY_HEX, 0)

        def BOOLEAN(self):
            return self.getToken(SqlBaseParser.BOOLEAN, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def BYTE(self):
            return self.getToken(SqlBaseParser.BYTE, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CHAR(self):
            return self.getToken(SqlBaseParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)

        def DATE_ADD(self):
            return self.getToken(SqlBaseParser.DATE_ADD, 0)

        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)

        def DATE_DIFF(self):
            return self.getToken(SqlBaseParser.DATE_DIFF, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DEC(self):
            return self.getToken(SqlBaseParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(SqlBaseParser.DECIMAL, 0)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FLOAT(self):
            return self.getToken(SqlBaseParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def IDENTIFIER_KW(self):
            return self.getToken(SqlBaseParser.IDENTIFIER_KW, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlBaseParser.IMMEDIATE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INT(self):
            return self.getToken(SqlBaseParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def LONG(self):
            return self.getToken(SqlBaseParser.LONG, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def NAME(self):
            return self.getToken(SqlBaseParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def NUMERIC(self):
            return self.getToken(SqlBaseParser.NUMERIC, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def REAL(self):
            return self.getToken(SqlBaseParser.REAL, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHORT(self):
            return self.getToken(SqlBaseParser.SHORT, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SINGLE(self):
            return self.getToken(SqlBaseParser.SINGLE, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def SMALLINT(self):
            return self.getToken(SqlBaseParser.SMALLINT, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def TIMEDIFF(self):
            return self.getToken(SqlBaseParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_LTZ, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_NTZ, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)

        def TINYINT(self):
            return self.getToken(SqlBaseParser.TINYINT, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VARCHAR(self):
            return self.getToken(SqlBaseParser.VARCHAR, 0)

        def VAR(self):
            return self.getToken(SqlBaseParser.VAR, 0)

        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)

        def VARIANT(self):
            return self.getToken(SqlBaseParser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)

        def VOID(self):
            return self.getToken(SqlBaseParser.VOID, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ansiNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnsiNonReserved" ):
                listener.enterAnsiNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnsiNonReserved" ):
                listener.exitAnsiNonReserved(self)




    def ansiNonReserved(self):

        localctx = SqlBaseParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3881
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -7497095007495686656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1839017156012933151) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -28288622615) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -18031995091773211) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 4610137079274209147) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 60030879) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictNonReserved" ):
                listener.enterStrictNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictNonReserved" ):
                listener.exitStrictNonReserved(self)




    def strictNonReserved(self):

        localctx = SqlBaseParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3883
            _la = self._input.LA(1)
            if not(_la==16 or _la==62 or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 1315200624777756673) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007199254741249) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 576460752303423553) != 0) or _la==327):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(SqlBaseParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(SqlBaseParser.BINARY, 0)

        def BINARY_HEX(self):
            return self.getToken(SqlBaseParser.BINARY_HEX, 0)

        def BOOLEAN(self):
            return self.getToken(SqlBaseParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def BYTE(self):
            return self.getToken(SqlBaseParser.BYTE, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CHAR(self):
            return self.getToken(SqlBaseParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def CHECK(self):
            return self.getToken(SqlBaseParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(SqlBaseParser.COLLATE, 0)

        def COLLATION(self):
            return self.getToken(SqlBaseParser.COLLATION, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)

        def DATE_ADD(self):
            return self.getToken(SqlBaseParser.DATE_ADD, 0)

        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)

        def DATE_DIFF(self):
            return self.getToken(SqlBaseParser.DATE_DIFF, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DEC(self):
            return self.getToken(SqlBaseParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(SqlBaseParser.DECIMAL, 0)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FLOAT(self):
            return self.getToken(SqlBaseParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(SqlBaseParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def IDENTIFIER_KW(self):
            return self.getToken(SqlBaseParser.IDENTIFIER_KW, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlBaseParser.IMMEDIATE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INT(self):
            return self.getToken(SqlBaseParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def LONG(self):
            return self.getToken(SqlBaseParser.LONG, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def NAME(self):
            return self.getToken(SqlBaseParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def NUMERIC(self):
            return self.getToken(SqlBaseParser.NUMERIC, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(SqlBaseParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(SqlBaseParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(SqlBaseParser.PERCENTILE_DISC, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(SqlBaseParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def REAL(self):
            return self.getToken(SqlBaseParser.REAL, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(SqlBaseParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(SqlBaseParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHORT(self):
            return self.getToken(SqlBaseParser.SHORT, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SINGLE(self):
            return self.getToken(SqlBaseParser.SINGLE, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def SMALLINT(self):
            return self.getToken(SqlBaseParser.SMALLINT, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(SqlBaseParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_LTZ, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_NTZ, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)

        def TINYINT(self):
            return self.getToken(SqlBaseParser.TINYINT, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(SqlBaseParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VARCHAR(self):
            return self.getToken(SqlBaseParser.VARCHAR, 0)

        def VAR(self):
            return self.getToken(SqlBaseParser.VAR, 0)

        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)

        def VARIANT(self):
            return self.getToken(SqlBaseParser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)

        def VOID(self):
            return self.getToken(SqlBaseParser.VOID, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3885
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018427453952) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921779484753921) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -19598016513) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -18014398509482499) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4611686018427388425) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 134217599) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[53] = self.queryTerm_sempred
        self._predicates[137] = self.booleanExpression_sempred
        self._predicates[139] = self.valueExpression_sempred
        self._predicates[141] = self.primaryExpression_sempred
        self._predicates[184] = self.identifier_sempred
        self._predicates[185] = self.strictIdentifier_sempred
        self._predicates[186] = self.quotedIdentifier_sempred
        self._predicates[188] = self.number_sempred
        self._predicates[190] = self.stringLit_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.legacy_setops_precedence_enabled
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return not self.legacy_setops_precedence_enabled
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 5:
                return not self.legacy_setops_precedence_enabled
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 6)
         

    def identifier_sempred(self, localctx:IdentifierContext, predIndex:int):
            if predIndex == 18:
                return not self.SQL_standard_keyword_behavior
         

    def strictIdentifier_sempred(self, localctx:StrictIdentifierContext, predIndex:int):
            if predIndex == 19:
                return self.SQL_standard_keyword_behavior
         

            if predIndex == 20:
                return not self.SQL_standard_keyword_behavior
         

    def quotedIdentifier_sempred(self, localctx:QuotedIdentifierContext, predIndex:int):
            if predIndex == 21:
                return self.double_quoted_identifiers
         

    def number_sempred(self, localctx:NumberContext, predIndex:int):
            if predIndex == 22:
                return not self.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 23:
                return not self.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 24:
                return self.legacy_exponent_literal_as_decimal_enabled
         

    def stringLit_sempred(self, localctx:StringLitContext, predIndex:int):
            if predIndex == 25:
                return not self.double_quoted_identifiers
         




