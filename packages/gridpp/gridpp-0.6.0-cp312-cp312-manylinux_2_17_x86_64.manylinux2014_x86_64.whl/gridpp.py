# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gridpp
else:
    import _gridpp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gridpp.delete_SwigPyIterator

    def value(self):
        return _gridpp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gridpp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gridpp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gridpp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gridpp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gridpp.SwigPyIterator_copy(self)

    def next(self):
        return _gridpp.SwigPyIterator_next(self)

    def __next__(self):
        return _gridpp.SwigPyIterator___next__(self)

    def previous(self):
        return _gridpp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gridpp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gridpp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gridpp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gridpp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gridpp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gridpp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gridpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gridpp:
_gridpp.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.IntVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.IntVector___bool__(self)

    def __len__(self):
        return _gridpp.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.IntVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.IntVector_pop(self)

    def append(self, x):
        return _gridpp.IntVector_append(self, x)

    def empty(self):
        return _gridpp.IntVector_empty(self)

    def size(self):
        return _gridpp.IntVector_size(self)

    def swap(self, v):
        return _gridpp.IntVector_swap(self, v)

    def begin(self):
        return _gridpp.IntVector_begin(self)

    def end(self):
        return _gridpp.IntVector_end(self)

    def rbegin(self):
        return _gridpp.IntVector_rbegin(self)

    def rend(self):
        return _gridpp.IntVector_rend(self)

    def clear(self):
        return _gridpp.IntVector_clear(self)

    def get_allocator(self):
        return _gridpp.IntVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.IntVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.IntVector_erase(self, *args)

    def __init__(self, *args):
        _gridpp.IntVector_swiginit(self, _gridpp.new_IntVector(*args))

    def push_back(self, x):
        return _gridpp.IntVector_push_back(self, x)

    def front(self):
        return _gridpp.IntVector_front(self)

    def back(self):
        return _gridpp.IntVector_back(self)

    def assign(self, n, x):
        return _gridpp.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.IntVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.IntVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.IntVector_reserve(self, n)

    def capacity(self):
        return _gridpp.IntVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_IntVector

# Register IntVector in _gridpp:
_gridpp.IntVector_swigregister(IntVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector_pop(self)

    def append(self, x):
        return _gridpp.FloatVector_append(self, x)

    def empty(self):
        return _gridpp.FloatVector_empty(self)

    def size(self):
        return _gridpp.FloatVector_size(self)

    def swap(self, v):
        return _gridpp.FloatVector_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector_begin(self)

    def end(self):
        return _gridpp.FloatVector_end(self)

    def rbegin(self):
        return _gridpp.FloatVector_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector_rend(self)

    def clear(self):
        return _gridpp.FloatVector_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _gridpp.FloatVector_swiginit(self, _gridpp.new_FloatVector(*args))

    def push_back(self, x):
        return _gridpp.FloatVector_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector_front(self)

    def back(self):
        return _gridpp.FloatVector_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector

# Register FloatVector in _gridpp:
_gridpp.FloatVector_swigregister(FloatVector)

class FloatVector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector3___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector3___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector3___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector3___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector3_pop(self)

    def append(self, x):
        return _gridpp.FloatVector3_append(self, x)

    def empty(self):
        return _gridpp.FloatVector3_empty(self)

    def size(self):
        return _gridpp.FloatVector3_size(self)

    def swap(self, v):
        return _gridpp.FloatVector3_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector3_begin(self)

    def end(self):
        return _gridpp.FloatVector3_end(self)

    def rbegin(self):
        return _gridpp.FloatVector3_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector3_rend(self)

    def clear(self):
        return _gridpp.FloatVector3_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector3_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector3_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector3_erase(self, *args)

    def __init__(self, *args):
        _gridpp.FloatVector3_swiginit(self, _gridpp.new_FloatVector3(*args))

    def push_back(self, x):
        return _gridpp.FloatVector3_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector3_front(self)

    def back(self):
        return _gridpp.FloatVector3_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector3_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector3_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector3_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector3_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector3_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector3

# Register FloatVector3 in _gridpp:
_gridpp.FloatVector3_swigregister(FloatVector3)

class IntVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.IntVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.IntVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.IntVector2___bool__(self)

    def __len__(self):
        return _gridpp.IntVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.IntVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.IntVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.IntVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.IntVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.IntVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.IntVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.IntVector2_pop(self)

    def append(self, x):
        return _gridpp.IntVector2_append(self, x)

    def empty(self):
        return _gridpp.IntVector2_empty(self)

    def size(self):
        return _gridpp.IntVector2_size(self)

    def swap(self, v):
        return _gridpp.IntVector2_swap(self, v)

    def begin(self):
        return _gridpp.IntVector2_begin(self)

    def end(self):
        return _gridpp.IntVector2_end(self)

    def rbegin(self):
        return _gridpp.IntVector2_rbegin(self)

    def rend(self):
        return _gridpp.IntVector2_rend(self)

    def clear(self):
        return _gridpp.IntVector2_clear(self)

    def get_allocator(self):
        return _gridpp.IntVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.IntVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.IntVector2_erase(self, *args)

    def __init__(self, *args):
        _gridpp.IntVector2_swiginit(self, _gridpp.new_IntVector2(*args))

    def push_back(self, x):
        return _gridpp.IntVector2_push_back(self, x)

    def front(self):
        return _gridpp.IntVector2_front(self)

    def back(self):
        return _gridpp.IntVector2_back(self)

    def assign(self, n, x):
        return _gridpp.IntVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.IntVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.IntVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.IntVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.IntVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_IntVector2

# Register IntVector2 in _gridpp:
_gridpp.IntVector2_swigregister(IntVector2)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.DoubleVector___bool__(self)

    def __len__(self):
        return _gridpp.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.DoubleVector_pop(self)

    def append(self, x):
        return _gridpp.DoubleVector_append(self, x)

    def empty(self):
        return _gridpp.DoubleVector_empty(self)

    def size(self):
        return _gridpp.DoubleVector_size(self)

    def swap(self, v):
        return _gridpp.DoubleVector_swap(self, v)

    def begin(self):
        return _gridpp.DoubleVector_begin(self)

    def end(self):
        return _gridpp.DoubleVector_end(self)

    def rbegin(self):
        return _gridpp.DoubleVector_rbegin(self)

    def rend(self):
        return _gridpp.DoubleVector_rend(self)

    def clear(self):
        return _gridpp.DoubleVector_clear(self)

    def get_allocator(self):
        return _gridpp.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _gridpp.DoubleVector_swiginit(self, _gridpp.new_DoubleVector(*args))

    def push_back(self, x):
        return _gridpp.DoubleVector_push_back(self, x)

    def front(self):
        return _gridpp.DoubleVector_front(self)

    def back(self):
        return _gridpp.DoubleVector_back(self)

    def assign(self, n, x):
        return _gridpp.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.DoubleVector_reserve(self, n)

    def capacity(self):
        return _gridpp.DoubleVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_DoubleVector

# Register DoubleVector in _gridpp:
_gridpp.DoubleVector_swigregister(DoubleVector)

class FloatVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector2___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector2_pop(self)

    def append(self, x):
        return _gridpp.FloatVector2_append(self, x)

    def empty(self):
        return _gridpp.FloatVector2_empty(self)

    def size(self):
        return _gridpp.FloatVector2_size(self)

    def swap(self, v):
        return _gridpp.FloatVector2_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector2_begin(self)

    def end(self):
        return _gridpp.FloatVector2_end(self)

    def rbegin(self):
        return _gridpp.FloatVector2_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector2_rend(self)

    def clear(self):
        return _gridpp.FloatVector2_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector2_erase(self, *args)

    def __init__(self, *args):
        _gridpp.FloatVector2_swiginit(self, _gridpp.new_FloatVector2(*args))

    def push_back(self, x):
        return _gridpp.FloatVector2_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector2_front(self)

    def back(self):
        return _gridpp.FloatVector2_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector2

# Register FloatVector2 in _gridpp:
_gridpp.FloatVector2_swigregister(FloatVector2)

class DoubleVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.DoubleVector2___bool__(self)

    def __len__(self):
        return _gridpp.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.DoubleVector2_pop(self)

    def append(self, x):
        return _gridpp.DoubleVector2_append(self, x)

    def empty(self):
        return _gridpp.DoubleVector2_empty(self)

    def size(self):
        return _gridpp.DoubleVector2_size(self)

    def swap(self, v):
        return _gridpp.DoubleVector2_swap(self, v)

    def begin(self):
        return _gridpp.DoubleVector2_begin(self)

    def end(self):
        return _gridpp.DoubleVector2_end(self)

    def rbegin(self):
        return _gridpp.DoubleVector2_rbegin(self)

    def rend(self):
        return _gridpp.DoubleVector2_rend(self)

    def clear(self):
        return _gridpp.DoubleVector2_clear(self)

    def get_allocator(self):
        return _gridpp.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        _gridpp.DoubleVector2_swiginit(self, _gridpp.new_DoubleVector2(*args))

    def push_back(self, x):
        return _gridpp.DoubleVector2_push_back(self, x)

    def front(self):
        return _gridpp.DoubleVector2_front(self)

    def back(self):
        return _gridpp.DoubleVector2_back(self)

    def assign(self, n, x):
        return _gridpp.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.DoubleVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_DoubleVector2

# Register DoubleVector2 in _gridpp:
_gridpp.DoubleVector2_swigregister(DoubleVector2)

GRIDPP_VERSION = _gridpp.GRIDPP_VERSION
__version__ = _gridpp.__version__
OneToOne = _gridpp.OneToOne
MeanSlope = _gridpp.MeanSlope
NearestSlope = _gridpp.NearestSlope
Zero = _gridpp.Zero
Unchanged = _gridpp.Unchanged
Mean = _gridpp.Mean
Min = _gridpp.Min
Median = _gridpp.Median
Max = _gridpp.Max
Quantile = _gridpp.Quantile
Std = _gridpp.Std
Variance = _gridpp.Variance
Sum = _gridpp.Sum
Count = _gridpp.Count
Unknown = _gridpp.Unknown
Ets = _gridpp.Ets
Ts = _gridpp.Ts
Kss = _gridpp.Kss
Pc = _gridpp.Pc
Bias = _gridpp.Bias
Hss = _gridpp.Hss
Qq = _gridpp.Qq
Multiplicative = _gridpp.Multiplicative
Additive = _gridpp.Additive
Geodetic = _gridpp.Geodetic
Cartesian = _gridpp.Cartesian
MinMax = _gridpp.MinMax
LinearRegression = _gridpp.LinearRegression
Nearest = _gridpp.Nearest
Bilinear = _gridpp.Bilinear
Lt = _gridpp.Lt
Leq = _gridpp.Leq
Gt = _gridpp.Gt
Geq = _gridpp.Geq

def optimal_interpolation(*args):
    return _gridpp.optimal_interpolation(*args)

def optimal_interpolation_full(*args):
    return _gridpp.optimal_interpolation_full(*args)

def optimal_interpolation_ensi(*args):
    return _gridpp.optimal_interpolation_ensi(*args)

def local_distribution_correction(*args):
    return _gridpp.local_distribution_correction(*args)

def fill(igrid, input, points, radii, value, outside):
    return _gridpp.fill(igrid, input, points, radii, value, outside)

def doping_square(*args):
    return _gridpp.doping_square(*args)

def doping_circle(*args):
    return _gridpp.doping_circle(*args)

def gamma_inv(levels, shape, scale):
    return _gridpp.gamma_inv(levels, shape, scale)

def neighbourhood(*args):
    return _gridpp.neighbourhood(*args)

def neighbourhood_quantile(*args):
    return _gridpp.neighbourhood_quantile(*args)

def neighbourhood_quantile_fast(*args):
    return _gridpp.neighbourhood_quantile_fast(*args)

def neighbourhood_brute_force(*args):
    return _gridpp.neighbourhood_brute_force(*args)

def get_neighbourhood_thresholds(*args):
    return _gridpp.get_neighbourhood_thresholds(*args)

def neighbourhood_ens(input, halfwidth, statistic):
    return _gridpp.neighbourhood_ens(input, halfwidth, statistic)

def neighbourhood_quantile_ens(input, quantile, halfwidth):
    return _gridpp.neighbourhood_quantile_ens(input, quantile, halfwidth)

def neighbourhood_quantile_ens_fast(input, quantile, radius, thresholds):
    return _gridpp.neighbourhood_quantile_ens_fast(input, quantile, radius, thresholds)

def quantile_mapping_curve(*args):
    return _gridpp.quantile_mapping_curve(*args)

def metric_optimizer_curve(ref, fcst, thresholds, metric):
    return _gridpp.metric_optimizer_curve(ref, fcst, thresholds, metric)

def apply_curve(*args):
    return _gridpp.apply_curve(*args)

def monotonize_curve(curve_ref, curve_fcst):
    return _gridpp.monotonize_curve(curve_ref, curve_fcst)

def get_optimal_threshold(ref, fcst, threshold, metric):
    return _gridpp.get_optimal_threshold(ref, fcst, threshold, metric)

def calc_score(*args):
    return _gridpp.calc_score(*args)

def downscaling(*args):
    return _gridpp.downscaling(*args)

def nearest(*args):
    return _gridpp.nearest(*args)

def downscale_probability(igrid, ogrid, ivalues, threshold, comparison_operator):
    return _gridpp.downscale_probability(igrid, ogrid, ivalues, threshold, comparison_operator)

def mask_threshold_downscale_consensus(igrid, ogrid, ivalues_true, ivalues_false, theshold_values, threshold, comparison_operator, statistic):
    return _gridpp.mask_threshold_downscale_consensus(igrid, ogrid, ivalues_true, ivalues_false, theshold_values, threshold, comparison_operator, statistic)

def bilinear(*args):
    return _gridpp.bilinear(*args)

def simple_gradient(*args):
    return _gridpp.simple_gradient(*args)

def full_gradient(*args):
    return _gridpp.full_gradient(*args)

def full_gradient_debug(*args):
    return _gridpp.full_gradient_debug(*args)

def smart(igrid, ogrid, ivalues, num, structure):
    return _gridpp.smart(igrid, ogrid, ivalues, num, structure)

def count(*args):
    return _gridpp.count(*args)

def distance(*args):
    return _gridpp.distance(*args)

def fill_missing(values):
    return _gridpp.fill_missing(values)

def gridding(grid, points, values, radius, min_num, statistic):
    return _gridpp.gridding(grid, points, values, radius, min_num, statistic)

def gridding_nearest(grid, points, values, min_num, statistic):
    return _gridpp.gridding_nearest(grid, points, values, min_num, statistic)

def dewpoint(*args):
    return _gridpp.dewpoint(*args)

def pressure(*args):
    return _gridpp.pressure(*args)

def sea_level_pressure(*args):
    return _gridpp.sea_level_pressure(*args)

def qnh(*args):
    return _gridpp.qnh(*args)

def relative_humidity(*args):
    return _gridpp.relative_humidity(*args)

def wetbulb(*args):
    return _gridpp.wetbulb(*args)

def wind_speed(*args):
    return _gridpp.wind_speed(*args)

def wind_direction(*args):
    return _gridpp.wind_direction(*args)

def set_omp_threads(num):
    return _gridpp.set_omp_threads(num)

def get_omp_threads():
    return _gridpp.get_omp_threads()

def initialize_omp():
    return _gridpp.initialize_omp()

def set_debug_level(level):
    return _gridpp.set_debug_level(level)

def get_debug_level():
    return _gridpp.get_debug_level()

def get_statistic(name):
    return _gridpp.get_statistic(name)

def version():
    return _gridpp.version()

def clock():
    return _gridpp.clock()

def debug(string):
    return _gridpp.debug(string)

def warning(string):
    return _gridpp.warning(string)

def error(string):
    return _gridpp.error(string)

def future_deprecation_warning(*args):
    return _gridpp.future_deprecation_warning(*args)

def is_valid(value):
    return _gridpp.is_valid(value)

def calc_statistic(*args):
    return _gridpp.calc_statistic(*args)

def calc_quantile(*args):
    return _gridpp.calc_quantile(*args)

def num_missing_values(iArray):
    return _gridpp.num_missing_values(iArray)

def get_lower_index(iX, iValues):
    return _gridpp.get_lower_index(iX, iValues)

def get_upper_index(iX, iValues):
    return _gridpp.get_upper_index(iX, iValues)

def interpolate(x, iX, iY):
    return _gridpp.interpolate(x, iX, iY)

def init_ivec2(Y, X, value):
    return _gridpp.init_ivec2(Y, X, value)

def init_vec2(*args):
    return _gridpp.init_vec2(*args)

def init_ivec3(Y, X, E, value):
    return _gridpp.init_ivec3(Y, X, E, value)

def init_vec3(*args):
    return _gridpp.init_vec3(*args)

def calc_even_quantiles(values, num):
    return _gridpp.calc_even_quantiles(values, num)

def calc_gradient(*args):
    return _gridpp.calc_gradient(*args)

def neighbourhood_search(*args):
    return _gridpp.neighbourhood_search(*args)

def window(array, length, statistic, before=False, keep_missing=False, missing_edges=True):
    return _gridpp.window(array, length, statistic, before, keep_missing, missing_edges)

def compatible_size(*args):
    return _gridpp.compatible_size(*args)

def point_in_rectangle(A, B, C, D, m):
    return _gridpp.point_in_rectangle(A, B, C, D, m)

def test_array(v):
    return _gridpp.test_array(v)

def test_vec_input(input):
    return _gridpp.test_vec_input(input)

def test_ivec_input(input):
    return _gridpp.test_ivec_input(input)

def test_vec2_input(input):
    return _gridpp.test_vec2_input(input)

def test_vec3_input(input):
    return _gridpp.test_vec3_input(input)

def test_vec_output():
    return _gridpp.test_vec_output()

def test_ivec_output():
    return _gridpp.test_ivec_output()

def test_vec2_output():
    return _gridpp.test_vec2_output()

def test_ivec2_output():
    return _gridpp.test_ivec2_output()

def test_vec3_output():
    return _gridpp.test_vec3_output()

def test_ivec3_output():
    return _gridpp.test_ivec3_output()

def test_vec_argout():
    return _gridpp.test_vec_argout()

def test_vec2_argout():
    return _gridpp.test_vec2_argout()

def test_not_implemented_exception():
    return _gridpp.test_not_implemented_exception()
class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gridpp.Point_swiginit(self, _gridpp.new_Point(*args))
    lat = property(_gridpp.Point_lat_get, _gridpp.Point_lat_set)
    lon = property(_gridpp.Point_lon_get, _gridpp.Point_lon_set)
    elev = property(_gridpp.Point_elev_get, _gridpp.Point_elev_set)
    laf = property(_gridpp.Point_laf_get, _gridpp.Point_laf_set)
    type = property(_gridpp.Point_type_get, _gridpp.Point_type_set)
    __swig_destroy__ = _gridpp.delete_Point

# Register Point in _gridpp:
_gridpp.Point_swigregister(Point)
cvar = _gridpp.cvar
MV = cvar.MV
MV_CML = cvar.MV_CML
pi = cvar.pi
radius_earth = cvar.radius_earth
lapse_rate = cvar.lapse_rate
standard_surface_temperature = cvar.standard_surface_temperature
gravit = cvar.gravit
molar_mass = cvar.molar_mass
gas_constant_mol = cvar.gas_constant_mol
gas_constant_si = cvar.gas_constant_si
swig_default_value = cvar.swig_default_value

class KDTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gridpp.KDTree_swiginit(self, _gridpp.new_KDTree(*args))

    def get_nearest_neighbour(self, lat, lon, include_match=True):
        return _gridpp.KDTree_get_nearest_neighbour(self, lat, lon, include_match)

    def get_neighbours(self, lat, lon, radius, include_match=True):
        return _gridpp.KDTree_get_neighbours(self, lat, lon, radius, include_match)

    def get_neighbours_with_distance(self, lat, lon, radius, include_match=True):
        return _gridpp.KDTree_get_neighbours_with_distance(self, lat, lon, radius, include_match)

    def get_num_neighbours(self, lat, lon, radius, include_match=True):
        return _gridpp.KDTree_get_num_neighbours(self, lat, lon, radius, include_match)

    def get_closest_neighbours(self, lat, lon, num, include_match=True):
        return _gridpp.KDTree_get_closest_neighbours(self, lat, lon, num, include_match)

    def convert_coordinates(self, *args):
        return _gridpp.KDTree_convert_coordinates(self, *args)

    @staticmethod
    def deg2rad(deg):
        return _gridpp.KDTree_deg2rad(deg)

    @staticmethod
    def rad2deg(deg):
        return _gridpp.KDTree_rad2deg(deg)

    @staticmethod
    def calc_distance(*args):
        return _gridpp.KDTree_calc_distance(*args)

    @staticmethod
    def calc_distance_fast(*args):
        return _gridpp.KDTree_calc_distance_fast(*args)

    def get_lats(self):
        return _gridpp.KDTree_get_lats(self)

    def get_lons(self):
        return _gridpp.KDTree_get_lons(self)

    def size(self):
        return _gridpp.KDTree_size(self)

    def get_coordinate_type(self):
        return _gridpp.KDTree_get_coordinate_type(self)
    __swig_destroy__ = _gridpp.delete_KDTree

# Register KDTree in _gridpp:
_gridpp.KDTree_swigregister(KDTree)

def KDTree_deg2rad(deg):
    return _gridpp.KDTree_deg2rad(deg)

def KDTree_rad2deg(deg):
    return _gridpp.KDTree_rad2deg(deg)

def KDTree_calc_distance(*args):
    return _gridpp.KDTree_calc_distance(*args)

def KDTree_calc_distance_fast(*args):
    return _gridpp.KDTree_calc_distance_fast(*args)

class Points(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gridpp.Points_swiginit(self, _gridpp.new_Points(*args))

    def get_nearest_neighbour(self, lat, lon, include_match=True):
        return _gridpp.Points_get_nearest_neighbour(self, lat, lon, include_match)

    def get_neighbours(self, lat, lon, radius, include_match=True):
        return _gridpp.Points_get_neighbours(self, lat, lon, radius, include_match)

    def get_neighbours_with_distance(self, lat, lon, radius, include_match=True):
        return _gridpp.Points_get_neighbours_with_distance(self, lat, lon, radius, include_match)

    def get_num_neighbours(self, lat, lon, radius, include_match=True):
        return _gridpp.Points_get_num_neighbours(self, lat, lon, radius, include_match)

    def get_closest_neighbours(self, lat, lon, num, include_match=True):
        return _gridpp.Points_get_closest_neighbours(self, lat, lon, num, include_match)

    def get_lats(self):
        return _gridpp.Points_get_lats(self)

    def get_lons(self):
        return _gridpp.Points_get_lons(self)

    def get_elevs(self):
        return _gridpp.Points_get_elevs(self)

    def get_lafs(self):
        return _gridpp.Points_get_lafs(self)

    def size(self):
        return _gridpp.Points_size(self)

    def get_in_domain_indices(self, grid):
        return _gridpp.Points_get_in_domain_indices(self, grid)

    def get_in_domain(self, grid):
        return _gridpp.Points_get_in_domain(self, grid)

    def get_coordinate_type(self):
        return _gridpp.Points_get_coordinate_type(self)

    def get_point(self, index):
        return _gridpp.Points_get_point(self, index)

    def subset(self, indices):
        return _gridpp.Points_subset(self, indices)
    __swig_destroy__ = _gridpp.delete_Points

# Register Points in _gridpp:
_gridpp.Points_swigregister(Points)

class Grid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gridpp.Grid_swiginit(self, _gridpp.new_Grid(*args))

    def get_nearest_neighbour(self, lat, lon, include_match=True):
        return _gridpp.Grid_get_nearest_neighbour(self, lat, lon, include_match)

    def get_neighbours(self, lat, lon, radius, include_match=True):
        return _gridpp.Grid_get_neighbours(self, lat, lon, radius, include_match)

    def get_neighbours_with_distance(self, lat, lon, radius, include_match=True):
        return _gridpp.Grid_get_neighbours_with_distance(self, lat, lon, radius, include_match)

    def get_num_neighbours(self, lat, lon, radius, include_match=True):
        return _gridpp.Grid_get_num_neighbours(self, lat, lon, radius, include_match)

    def get_closest_neighbours(self, lat, lon, num, include_match=True):
        return _gridpp.Grid_get_closest_neighbours(self, lat, lon, num, include_match)

    def get_box(self, lat, lon):
        return _gridpp.Grid_get_box(self, lat, lon)

    def to_points(self):
        return _gridpp.Grid_to_points(self)

    def get_lats(self):
        return _gridpp.Grid_get_lats(self)

    def get_lons(self):
        return _gridpp.Grid_get_lons(self)

    def get_elevs(self):
        return _gridpp.Grid_get_elevs(self)

    def get_lafs(self):
        return _gridpp.Grid_get_lafs(self)

    def size(self):
        return _gridpp.Grid_size(self)

    def get_coordinate_type(self):
        return _gridpp.Grid_get_coordinate_type(self)

    def get_point(self, y_index, x_index):
        return _gridpp.Grid_get_point(self, y_index, x_index)
    __swig_destroy__ = _gridpp.delete_Grid

# Register Grid in _gridpp:
_gridpp.Grid_swigregister(Grid)

class not_implemented_exception(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gridpp.not_implemented_exception_swiginit(self, _gridpp.new_not_implemented_exception())
    __swig_destroy__ = _gridpp.delete_not_implemented_exception

# Register not_implemented_exception in _gridpp:
_gridpp.not_implemented_exception_swigregister(not_implemented_exception)

class StructureFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def corr(self, p1, p2):
        return _gridpp.StructureFunction_corr(self, p1, p2)

    def corr_background(self, p1, p2):
        return _gridpp.StructureFunction_corr_background(self, p1, p2)

    def localization_distance(self, p):
        return _gridpp.StructureFunction_localization_distance(self, p)

    def clone(self):
        return _gridpp.StructureFunction_clone(self)
    __swig_destroy__ = _gridpp.delete_StructureFunction

# Register StructureFunction in _gridpp:
_gridpp.StructureFunction_swigregister(StructureFunction)
StructureFunction.default_min_rho = _gridpp.cvar.StructureFunction_default_min_rho

class MultipleStructure(StructureFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, structure_h, structure_v, structure_w):
        _gridpp.MultipleStructure_swiginit(self, _gridpp.new_MultipleStructure(structure_h, structure_v, structure_w))

    def corr(self, p1, p2):
        return _gridpp.MultipleStructure_corr(self, p1, p2)

    def clone(self):
        return _gridpp.MultipleStructure_clone(self)

    def localization_distance(self, p):
        return _gridpp.MultipleStructure_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_MultipleStructure

# Register MultipleStructure in _gridpp:
_gridpp.MultipleStructure_swigregister(MultipleStructure)

class BarnesStructure(StructureFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gridpp.BarnesStructure_swiginit(self, _gridpp.new_BarnesStructure(*args))

    def corr(self, p1, p2):
        return _gridpp.BarnesStructure_corr(self, p1, p2)

    def clone(self):
        return _gridpp.BarnesStructure_clone(self)

    def localization_distance(self, p):
        return _gridpp.BarnesStructure_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_BarnesStructure

# Register BarnesStructure in _gridpp:
_gridpp.BarnesStructure_swigregister(BarnesStructure)

class CressmanStructure(StructureFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h, v=0, w=0):
        _gridpp.CressmanStructure_swiginit(self, _gridpp.new_CressmanStructure(h, v, w))

    def corr(self, p1, p2):
        return _gridpp.CressmanStructure_corr(self, p1, p2)

    def clone(self):
        return _gridpp.CressmanStructure_clone(self)
    __swig_destroy__ = _gridpp.delete_CressmanStructure

# Register CressmanStructure in _gridpp:
_gridpp.CressmanStructure_swigregister(CressmanStructure)

class CrossValidation(StructureFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gridpp.CrossValidation_swiginit(self, _gridpp.new_CrossValidation(*args))

    def corr(self, p1, p2):
        return _gridpp.CrossValidation_corr(self, p1, p2)

    def corr_background(self, p1, p2):
        return _gridpp.CrossValidation_corr_background(self, p1, p2)

    def clone(self):
        return _gridpp.CrossValidation_clone(self)

    def localization_distance(self, p):
        return _gridpp.CrossValidation_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_CrossValidation

# Register CrossValidation in _gridpp:
_gridpp.CrossValidation_swigregister(CrossValidation)

class Transform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def forward(self, *args):
        return _gridpp.Transform_forward(self, *args)

    def backward(self, *args):
        return _gridpp.Transform_backward(self, *args)

    def __init__(self):
        _gridpp.Transform_swiginit(self, _gridpp.new_Transform())
    __swig_destroy__ = _gridpp.delete_Transform

# Register Transform in _gridpp:
_gridpp.Transform_swigregister(Transform)

class Identity(Transform):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def forward(self, *args):
        return _gridpp.Identity_forward(self, *args)

    def backward(self, *args):
        return _gridpp.Identity_backward(self, *args)

    def __init__(self):
        _gridpp.Identity_swiginit(self, _gridpp.new_Identity())
    __swig_destroy__ = _gridpp.delete_Identity

# Register Identity in _gridpp:
_gridpp.Identity_swigregister(Identity)

class Log(Transform):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def forward(self, *args):
        return _gridpp.Log_forward(self, *args)

    def backward(self, *args):
        return _gridpp.Log_backward(self, *args)

    def __init__(self):
        _gridpp.Log_swiginit(self, _gridpp.new_Log())
    __swig_destroy__ = _gridpp.delete_Log

# Register Log in _gridpp:
_gridpp.Log_swigregister(Log)

class BoxCox(Transform):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, threshold):
        _gridpp.BoxCox_swiginit(self, _gridpp.new_BoxCox(threshold))

    def forward(self, *args):
        return _gridpp.BoxCox_forward(self, *args)

    def backward(self, *args):
        return _gridpp.BoxCox_backward(self, *args)
    __swig_destroy__ = _gridpp.delete_BoxCox

# Register BoxCox in _gridpp:
_gridpp.BoxCox_swigregister(BoxCox)

class Gamma(Transform):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape, scale, tolerance=0.01):
        _gridpp.Gamma_swiginit(self, _gridpp.new_Gamma(shape, scale, tolerance))

    def forward(self, *args):
        return _gridpp.Gamma_forward(self, *args)

    def backward(self, *args):
        return _gridpp.Gamma_backward(self, *args)
    __swig_destroy__ = _gridpp.delete_Gamma

# Register Gamma in _gridpp:
_gridpp.Gamma_swigregister(Gamma)



