from decimal import Decimal
from enum import Enum
from typing import Dict, ForwardRef, List, Optional, Union

from pydantic import BaseModel, ConfigDict
from xsdata_pydantic.fields import field


class ArrayOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class ArticleId(BaseModel):
    """
    <div> <h3>Article Identifier</h3> </div>
    """

    class Meta:
        name = "article-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    custom_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "custom-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pub_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "pub-id-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class ArticleDtdVersion(Enum):
    VALUE_0_4 = "0.4"
    VALUE_1_0 = "1.0"
    VALUE_1_1 = "1.1"
    VALUE_1_1D1 = "1.1d1"
    VALUE_1_1D2 = "1.1d2"
    VALUE_1_1D3 = "1.1d3"
    VALUE_1_2 = "1.2"
    VALUE_1_2D1 = "1.2d1"
    VALUE_1_2D2 = "1.2d2"
    VALUE_1_3 = "1.3"
    VALUE_1_3D1 = "1.3d1"
    VALUE_1_3D2 = "1.3d2"
    VALUE_3_0 = "3.0"


class BoldToggle(Enum):
    NO = "no"
    YES = "yes"


class BoxedTextOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class BoxedTextPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class Break(BaseModel):
    """
    <div> <h3>Line Break</h3> </div>
    """

    class Meta:
        name = "break"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ChemStructWrapOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class ChemStructWrapPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class CodeExecutable(Enum):
    NO = "no"
    YES = "yes"


class CodeOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class CodePosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class ColAlign(Enum):
    CENTER = "center"
    CHAR = "char"
    JUSTIFY = "justify"
    LEFT = "left"
    RIGHT = "right"


class ColValign(Enum):
    BASELINE = "baseline"
    BOTTOM = "bottom"
    MIDDLE = "middle"
    TOP = "top"


class ColgroupAlign(Enum):
    CENTER = "center"
    CHAR = "char"
    JUSTIFY = "justify"
    LEFT = "left"
    RIGHT = "right"


class ColgroupValign(Enum):
    BASELINE = "baseline"
    BOTTOM = "bottom"
    MIDDLE = "middle"
    TOP = "top"


class CompoundKwd(BaseModel):
    """
    <div> <h3>Compound Keyword</h3> </div>
    """

    class Meta:
        name = "compound-kwd"

    model_config = ConfigDict(defer_build=True)
    compound_kwd_part: List["CompoundKwdPart"] = field(
        default_factory=list,
        metadata={
            "name": "compound-kwd-part",
            "type": "Element",
            "min_occurs": 1,
        },
    )
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class CompoundSubject(BaseModel):
    """
    <div> <h3>Compound Subject Name</h3> </div>
    """

    class Meta:
        name = "compound-subject"

    model_config = ConfigDict(defer_build=True)
    compound_subject_part: List["CompoundSubjectPart"] = field(
        default_factory=list,
        metadata={
            "name": "compound-subject-part",
            "type": "Element",
            "min_occurs": 1,
        },
    )
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ContribIdAuthenticated(Enum):
    FALSE = "false"
    TRUE = "true"


class ContribCorresp(Enum):
    NO = "no"
    YES = "yes"


class ContribDeceased(Enum):
    NO = "no"
    YES = "yes"


class ContribEqualContrib(Enum):
    NO = "no"
    YES = "yes"


class CopyrightYear(BaseModel):
    """
    <div> <h3>Copyright Year</h3> </div>
    """

    class Meta:
        name = "copyright-year"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Count(BaseModel):
    """
    <div> <h3>Count</h3> </div>
    """

    class Meta:
        name = "count"

    model_config = ConfigDict(defer_build=True)
    count: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    count_type: str = field(
        metadata={
            "name": "count-type",
            "type": "Attribute",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ElocationId(BaseModel):
    """
    <div> <h3>Electronic Location Identifier</h3> </div>
    """

    class Meta:
        name = "elocation-id"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    seq: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class EquationCount(BaseModel):
    """
    <div> <h3>Equation Count</h3> </div>
    """

    class Meta:
        name = "equation-count"

    model_config = ConfigDict(defer_build=True)
    count: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class FigCount(BaseModel):
    """
    <div> <h3>Figure Count</h3> </div>
    """

    class Meta:
        name = "fig-count"

    model_config = ConfigDict(defer_build=True)
    count: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class FigGroupOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class FigGroupPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class FigOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class FigPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class GlyphRef(BaseModel):
    """
    <div> <h3>Glyph Reference For a Private Character</h3> </div>
    """

    class Meta:
        name = "glyph-ref"

    model_config = ConfigDict(defer_build=True)
    glyph_data: Optional[str] = field(
        default=None,
        metadata={
            "name": "glyph-data",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class GraphicOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class GraphicPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class Hr(BaseModel):
    """
    <div> <h3>Horizontal Rule</h3> </div>
    """

    class Meta:
        name = "hr"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class IndexTermRangeEnd(BaseModel):
    """
    <div> <h3>Index Term Range End</h3> </div>
    """

    class Meta:
        name = "index-term-range-end"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Isbn(BaseModel):
    """
    <div> <h3>Isbn</h3> </div>
    """

    class Meta:
        name = "isbn"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    publication_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-format",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Issn(BaseModel):
    """
    <div> <h3>Issn</h3> </div>
    """

    class Meta:
        name = "issn"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pub_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "pub-type",
            "type": "Attribute",
        },
    )
    publication_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-format",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class IssnL(BaseModel):
    """
    <div> <h3>Issn Linking</h3> </div>
    """

    class Meta:
        name = "issn-l"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class ItalicToggle(Enum):
    NO = "no"
    YES = "yes"


class MediaOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class MediaPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class MonospaceToggle(Enum):
    NO = "no"
    YES = "yes"


class NameNameStyle(Enum):
    EASTERN = "eastern"
    GIVEN_ONLY = "given-only"
    ISLENSK = "islensk"
    WESTERN = "western"


class ObjectId(BaseModel):
    """
    <div> <h3>Object Identifier</h3> </div>
    """

    class Meta:
        name = "object-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pub_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "pub-id-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class OptionCorrect(Enum):
    NO = "no"
    YES = "yes"


class OverlineEnd(BaseModel):
    """
    <div> <h3>Overline End</h3> </div>
    """

    class Meta:
        name = "overline-end"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class OverlineStart(BaseModel):
    """
    <div> <h3>Overline Start</h3> </div>
    """

    class Meta:
        name = "overline-start"

    model_config = ConfigDict(defer_build=True)
    id: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class OverlineToggle(Enum):
    NO = "no"
    YES = "yes"


class PageCount(BaseModel):
    """
    <div> <h3>Page Count</h3> </div>
    """

    class Meta:
        name = "page-count"

    model_config = ConfigDict(defer_build=True)
    count: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class PreformatOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class PreformatPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class ProcessingMetaBaseTagset(Enum):
    ARCHIVING = "archiving"
    AUTHORING = "authoring"
    PUBLISHING = "publishing"


class ProcessingMetaMathmlVersion(Enum):
    VALUE_2_0 = "2.0"
    VALUE_3_0 = "3.0"


class ProcessingMetaTableModel(Enum):
    BOTH = "both"
    NONE = "none"
    OASIS = "oasis"
    XHTML = "xhtml"


class ProcessingMetaTagsetFamily(Enum):
    BITS = "bits"
    JATS = "jats"
    STS = "sts"


class PubDateNotAvailable(BaseModel):
    """
    <div> <h3>Date Not Available Flag</h3> </div>
    """

    class Meta:
        name = "pub-date-not-available"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class QuestionQuestionResponseType(Enum):
    ESSAY = "essay"
    FILL_IN_THE_BLANK = "fill-in-the-blank"
    MULTI_SELECT = "multi-select"
    MULTIPLE_CHOICE = "multiple-choice"
    SHORT_ANSWER = "short-answer"
    TRUE_FALSE = "true-false"


class RefCount(BaseModel):
    """
    <div> <h3>Reference Count</h3> </div>
    """

    class Meta:
        name = "ref-count"

    model_config = ConfigDict(defer_build=True)
    count: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class RomanToggle(Enum):
    NO = "no"
    YES = "yes"


class Rp(BaseModel):
    """
    <div> <h3>Ruby Parenthesis</h3> </div>
    """

    class Meta:
        name = "rp"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class SansSerifToggle(Enum):
    NO = "no"
    YES = "yes"


class ScToggle(Enum):
    NO = "no"
    YES = "yes"


class StrikeToggle(Enum):
    NO = "no"
    YES = "yes"


class StringNameNameStyle(Enum):
    EASTERN = "eastern"
    GIVEN_ONLY = "given-only"
    ISLENSK = "islensk"
    WESTERN = "western"


class StyledContentToggle(Enum):
    NO = "no"
    YES = "yes"


class SubArrange(Enum):
    STACK = "stack"
    STAGGER = "stagger"


class SupArrange(Enum):
    STACK = "stack"
    STAGGER = "stagger"


class SupplementaryMaterialOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class SupplementaryMaterialPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class TableCount(BaseModel):
    """
    <div> <h3>Table Count</h3> </div>
    """

    class Meta:
        name = "table-count"

    model_config = ConfigDict(defer_build=True)
    count: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class TableWrapGroupOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class TableWrapGroupPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class TableWrapOrientation(Enum):
    LANDSCAPE = "landscape"
    PORTRAIT = "portrait"


class TableWrapPosition(Enum):
    ANCHOR = "anchor"
    BACKGROUND = "background"
    FLOAT = "float"
    MARGIN = "margin"


class TableFrame(Enum):
    ABOVE = "above"
    BELOW = "below"
    BORDER = "border"
    BOX = "box"
    HSIDES = "hsides"
    LHS = "lhs"
    RHS = "rhs"
    VOID = "void"
    VSIDES = "vsides"


class TableRules(Enum):
    ALL = "all"
    COLS = "cols"
    GROUPS = "groups"
    NONE = "none"
    ROWS = "rows"


class TbodyAlign(Enum):
    CENTER = "center"
    CHAR = "char"
    JUSTIFY = "justify"
    LEFT = "left"
    RIGHT = "right"


class TbodyValign(Enum):
    BASELINE = "baseline"
    BOTTOM = "bottom"
    MIDDLE = "middle"
    TOP = "top"


class TdAlign(Enum):
    CENTER = "center"
    CHAR = "char"
    JUSTIFY = "justify"
    LEFT = "left"
    RIGHT = "right"


class TdScope(Enum):
    COL = "col"
    COLGROUP = "colgroup"
    ROW = "row"
    ROWGROUP = "rowgroup"


class TdValign(Enum):
    BASELINE = "baseline"
    BOTTOM = "bottom"
    MIDDLE = "middle"
    TOP = "top"


class TexMathNotation(Enum):
    LA_TE_X = "LaTeX"
    TEX = "TEX"
    TE_X_1 = "TeX"
    TEX_2 = "tex"


class TfootAlign(Enum):
    CENTER = "center"
    CHAR = "char"
    JUSTIFY = "justify"
    LEFT = "left"
    RIGHT = "right"


class TfootValign(Enum):
    BASELINE = "baseline"
    BOTTOM = "bottom"
    MIDDLE = "middle"
    TOP = "top"


class ThAlign(Enum):
    CENTER = "center"
    CHAR = "char"
    JUSTIFY = "justify"
    LEFT = "left"
    RIGHT = "right"


class ThScope(Enum):
    COL = "col"
    COLGROUP = "colgroup"
    ROW = "row"
    ROWGROUP = "rowgroup"


class ThValign(Enum):
    BASELINE = "baseline"
    BOTTOM = "bottom"
    MIDDLE = "middle"
    TOP = "top"


class TheadAlign(Enum):
    CENTER = "center"
    CHAR = "char"
    JUSTIFY = "justify"
    LEFT = "left"
    RIGHT = "right"


class TheadValign(Enum):
    BASELINE = "baseline"
    BOTTOM = "bottom"
    MIDDLE = "middle"
    TOP = "top"


class TrAlign(Enum):
    CENTER = "center"
    CHAR = "char"
    JUSTIFY = "justify"
    LEFT = "left"
    RIGHT = "right"


class TrValign(Enum):
    BASELINE = "baseline"
    BOTTOM = "bottom"
    MIDDLE = "middle"
    TOP = "top"


class UnderlineEnd(BaseModel):
    """
    <div> <h3>Underline End</h3> </div>
    """

    class Meta:
        name = "underline-end"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class UnderlineStart(BaseModel):
    """
    <div> <h3>Underline Start</h3> </div>
    """

    class Meta:
        name = "underline-start"

    model_config = ConfigDict(defer_build=True)
    id: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class UnderlineToggle(Enum):
    NO = "no"
    YES = "yes"


class WordCount(BaseModel):
    """
    <div> <h3>Word Count</h3> </div>
    """

    class Meta:
        name = "word-count"

    model_config = ConfigDict(defer_build=True)
    count: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class DeprecatedContExp(BaseModel):
    class Meta:
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class DifferentialOperatorClass(BaseModel):
    class Meta:
        name = "Differential-Operator.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class MalignExpression(BaseModel):
    class Meta:
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class PresentationExpression(BaseModel):
    class Meta:
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class TableCellExpressionRowalign(Enum):
    TOP = "top"
    BOTTOM = "bottom"
    CENTER = "center"
    BASELINE = "baseline"
    AXIS = "axis"


class TableCellExpressionValue(Enum):
    TRANSPARENT = "transparent"


class TableRowExpression(BaseModel):
    class Meta:
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class TokenExpression(BaseModel):
    class Meta:
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Abs(BaseModel):
    class Meta:
        name = "abs"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class And(BaseModel):
    class Meta:
        name = "and"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class AnnotationXmlModel(BaseModel):
    class Meta:
        name = "annotation-xml.model"
        target_namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Annotation1(BaseModel):
    class Meta:
        name = "annotation"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    cd: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    src: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Approx(BaseModel):
    class Meta:
        name = "approx"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Arccos(BaseModel):
    class Meta:
        name = "arccos"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arccosh(BaseModel):
    class Meta:
        name = "arccosh"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arccot(BaseModel):
    class Meta:
        name = "arccot"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arccoth(BaseModel):
    class Meta:
        name = "arccoth"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arccsc(BaseModel):
    class Meta:
        name = "arccsc"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arccsch(BaseModel):
    class Meta:
        name = "arccsch"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arcsec(BaseModel):
    class Meta:
        name = "arcsec"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arcsech(BaseModel):
    class Meta:
        name = "arcsech"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arcsin(BaseModel):
    class Meta:
        name = "arcsin"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arcsinh(BaseModel):
    class Meta:
        name = "arcsinh"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arctan(BaseModel):
    class Meta:
        name = "arctan"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arctanh(BaseModel):
    class Meta:
        name = "arctanh"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Arg(BaseModel):
    class Meta:
        name = "arg"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class BinaryLinalgClass(BaseModel):
    class Meta:
        name = "binary-linalg.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class BinaryLogicalClass(BaseModel):
    class Meta:
        name = "binary-logical.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class BinaryRelnClass(BaseModel):
    class Meta:
        name = "binary-reln.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class BinarySetClass(BaseModel):
    class Meta:
        name = "binary-set.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Card(BaseModel):
    class Meta:
        name = "card"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Cartesianproduct(BaseModel):
    class Meta:
        name = "cartesianproduct"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Cbytes(BaseModel):
    class Meta:
        name = "cbytes"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    value: bytes = field(
        metadata={
            "required": True,
            "format": "base64",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Ceiling(BaseModel):
    class Meta:
        name = "ceiling"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Codomain(BaseModel):
    class Meta:
        name = "codomain"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Columnalignstyle(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class Complexes(BaseModel):
    class Meta:
        name = "complexes"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Compose(BaseModel):
    class Meta:
        name = "compose"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Conjugate(BaseModel):
    class Meta:
        name = "conjugate"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class ConstantArithClass(BaseModel):
    class Meta:
        name = "constant-arith.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class ConstantSetClass(BaseModel):
    class Meta:
        name = "constant-set.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Cos(BaseModel):
    class Meta:
        name = "cos"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Cosh(BaseModel):
    class Meta:
        name = "cosh"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Cot(BaseModel):
    class Meta:
        name = "cot"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Coth(BaseModel):
    class Meta:
        name = "coth"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Cs(BaseModel):
    class Meta:
        name = "cs"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Csc(BaseModel):
    class Meta:
        name = "csc"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Csch(BaseModel):
    class Meta:
        name = "csch"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Curl(BaseModel):
    class Meta:
        name = "curl"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class DeclareOccurrence(Enum):
    PREFIX = "prefix"
    INFIX = "infix"
    FUNCTION_MODEL = "function-model"


class Determinant(BaseModel):
    class Meta:
        name = "determinant"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Diff(BaseModel):
    class Meta:
        name = "diff"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Divergence(BaseModel):
    class Meta:
        name = "divergence"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Divide(BaseModel):
    class Meta:
        name = "divide"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Domain(BaseModel):
    class Meta:
        name = "domain"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Emptyset(BaseModel):
    class Meta:
        name = "emptyset"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Eq(BaseModel):
    class Meta:
        name = "eq"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Equivalent(BaseModel):
    class Meta:
        name = "equivalent"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Eulergamma(BaseModel):
    class Meta:
        name = "eulergamma"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Exists(BaseModel):
    class Meta:
        name = "exists"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Exp(BaseModel):
    class Meta:
        name = "exp"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Exponentiale(BaseModel):
    class Meta:
        name = "exponentiale"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Factorial(BaseModel):
    class Meta:
        name = "factorial"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Factorof(BaseModel):
    class Meta:
        name = "factorof"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class FalseType(BaseModel):
    class Meta:
        name = "false"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Floor(BaseModel):
    class Meta:
        name = "floor"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Forall(BaseModel):
    class Meta:
        name = "forall"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Gcd(BaseModel):
    class Meta:
        name = "gcd"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Geq(BaseModel):
    class Meta:
        name = "geq"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Grad(BaseModel):
    class Meta:
        name = "grad"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class GroupAlignment(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    DECIMALPOINT = "decimalpoint"


class Gt(BaseModel):
    class Meta:
        name = "gt"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Ident(BaseModel):
    class Meta:
        name = "ident"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Image(BaseModel):
    class Meta:
        name = "image"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Imaginary(BaseModel):
    class Meta:
        name = "imaginary"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Imaginaryi(BaseModel):
    class Meta:
        name = "imaginaryi"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Implies(BaseModel):
    class Meta:
        name = "implies"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class In(BaseModel):
    class Meta:
        name = "in"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Infinity(BaseModel):
    class Meta:
        name = "infinity"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Int(BaseModel):
    class Meta:
        name = "int"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class IntClass(BaseModel):
    class Meta:
        name = "int.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Integers(BaseModel):
    class Meta:
        name = "integers"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Intersect(BaseModel):
    class Meta:
        name = "intersect"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Interval(BaseModel):
    class Meta:
        name = "interval"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Inverse(BaseModel):
    class Meta:
        name = "inverse"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Lambda(BaseModel):
    class Meta:
        name = "lambda"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Laplacian(BaseModel):
    class Meta:
        name = "laplacian"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Lcm(BaseModel):
    class Meta:
        name = "lcm"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Leq(BaseModel):
    class Meta:
        name = "leq"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Limit(BaseModel):
    class Meta:
        name = "limit"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class LimitClass(BaseModel):
    class Meta:
        name = "limit.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Linestyle(Enum):
    NONE = "none"
    SOLID = "solid"
    DASHED = "dashed"


class ListOrder(Enum):
    NUMERIC = "numeric"
    LEXICOGRAPHIC = "lexicographic"


class Ln(BaseModel):
    class Meta:
        name = "ln"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Log(BaseModel):
    class Meta:
        name = "log"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Lt(BaseModel):
    class Meta:
        name = "lt"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class MactionValue(Enum):
    TRANSPARENT = "transparent"


class MaligngroupGroupalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    DECIMALPOINT = "decimalpoint"


class MaligngroupValue(Enum):
    TRANSPARENT = "transparent"


class MalignmarkEdge(Enum):
    LEFT = "left"
    RIGHT = "right"


class MalignmarkValue(Enum):
    TRANSPARENT = "transparent"


class MathAccent(Enum):
    TRUE = "true"
    FALSE = "false"


class MathAccentunder(Enum):
    TRUE = "true"
    FALSE = "false"


class MathAlign(Enum):
    LEFT = "left"
    RIGHT = "right"
    CENTER = "center"


class MathBevelled(Enum):
    TRUE = "true"
    FALSE = "false"


class MathCharalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MathDenomalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MathDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MathDisplay(Enum):
    BLOCK = "block"
    INLINE = "inline"


class MathDisplaystyle(Enum):
    TRUE = "true"
    FALSE = "false"


class MathEdge(Enum):
    LEFT = "left"
    RIGHT = "right"


class MathEqualcolumns(Enum):
    TRUE = "true"
    FALSE = "false"


class MathEqualrows(Enum):
    TRUE = "true"
    FALSE = "false"


class MathFence(Enum):
    TRUE = "true"
    FALSE = "false"


class MathForm(Enum):
    PREFIX = "prefix"
    INFIX = "infix"
    POSTFIX = "postfix"


class MathIndentalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"


class MathIndentalignfirst(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"
    INDENTALIGN = "indentalign"


class MathIndentalignlast(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"
    INDENTALIGN = "indentalign"


class MathInfixlinebreakstyle(Enum):
    BEFORE = "before"
    AFTER = "after"
    DUPLICATE = "duplicate"


class MathLargeop(Enum):
    TRUE = "true"
    FALSE = "false"


class MathLinebreak(Enum):
    AUTO = "auto"
    NEWLINE = "newline"
    NOBREAK = "nobreak"
    GOODBREAK = "goodbreak"
    BADBREAK = "badbreak"


class MathLinebreakstyle(Enum):
    BEFORE = "before"
    AFTER = "after"
    DUPLICATE = "duplicate"
    INFIXLINEBREAKSTYLE = "infixlinebreakstyle"


class MathLocation(Enum):
    W = "w"
    NW = "nw"
    N = "n"
    NE = "ne"
    E = "e"
    SE = "se"
    S = "s"
    SW = "sw"


class MathLongdivstyle(Enum):
    LEFTTOP = "lefttop"
    STACKEDRIGHTRIGHT = "stackedrightright"
    MEDIUMSTACKEDRIGHTRIGHT = "mediumstackedrightright"
    SHORTSTACKEDRIGHTRIGHT = "shortstackedrightright"
    RIGHTTOP = "righttop"
    LEFT_RIGHT = "left/\\right"
    LEFT_RIGHT_1 = "left)(right"
    RIGHT_RIGHT = ":right=right"
    STACKEDLEFTLEFT = "stackedleftleft"
    STACKEDLEFTLINETOP = "stackedleftlinetop"


class MathMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MathMovablelimits(Enum):
    TRUE = "true"
    FALSE = "false"


class MathNumalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MathOverflow(Enum):
    LINEBREAK = "linebreak"
    SCROLL = "scroll"
    ELIDE = "elide"
    TRUNCATE = "truncate"
    SCALE = "scale"


class MathSeparator(Enum):
    TRUE = "true"
    FALSE = "false"


class MathSide(Enum):
    LEFT = "left"
    RIGHT = "right"
    LEFTOVERLAP = "leftoverlap"
    RIGHTOVERLAP = "rightoverlap"


class MathStackalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    DECIMALPOINT = "decimalpoint"


class MathStretchy(Enum):
    TRUE = "true"
    FALSE = "false"


class MathSymmetric(Enum):
    TRUE = "true"
    FALSE = "false"


class MathValue(Enum):
    TOP = "top"


class Matrix(BaseModel):
    class Meta:
        name = "matrix"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Matrixrow(BaseModel):
    class Meta:
        name = "matrixrow"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Max(BaseModel):
    class Meta:
        name = "max"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Mean(BaseModel):
    class Meta:
        name = "mean"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Median(BaseModel):
    class Meta:
        name = "median"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class MencloseValue(Enum):
    TRANSPARENT = "transparent"


class MerrorValue(Enum):
    TRANSPARENT = "transparent"


class MfencedValue(Enum):
    TRANSPARENT = "transparent"


class MfracBevelled(Enum):
    TRUE = "true"
    FALSE = "false"


class MfracDenomalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MfracNumalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MfracValue(Enum):
    THIN = "thin"


class MglyphFontstyle(Enum):
    NORMAL = "normal"
    ITALIC = "italic"


class MglyphFontweight(Enum):
    NORMAL = "normal"
    BOLD = "bold"


class MglyphMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MglyphValue(Enum):
    TRANSPARENT = "transparent"


class MiDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MiFontstyle(Enum):
    NORMAL = "normal"
    ITALIC = "italic"


class MiFontweight(Enum):
    NORMAL = "normal"
    BOLD = "bold"


class MiMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MiValue(Enum):
    TRANSPARENT = "transparent"


class Min(BaseModel):
    class Meta:
        name = "min"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Minus(BaseModel):
    class Meta:
        name = "minus"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class MlabeledtrRowalign(Enum):
    TOP = "top"
    BOTTOM = "bottom"
    CENTER = "center"
    BASELINE = "baseline"
    AXIS = "axis"


class MlabeledtrValue(Enum):
    TRANSPARENT = "transparent"


class MlongdivLongdivstyle(Enum):
    LEFTTOP = "lefttop"
    STACKEDRIGHTRIGHT = "stackedrightright"
    MEDIUMSTACKEDRIGHTRIGHT = "mediumstackedrightright"
    SHORTSTACKEDRIGHTRIGHT = "shortstackedrightright"
    RIGHTTOP = "righttop"
    LEFT_RIGHT = "left/\\right"
    LEFT_RIGHT_1 = "left)(right"
    RIGHT_RIGHT = ":right=right"
    STACKEDLEFTLEFT = "stackedleftleft"
    STACKEDLEFTLINETOP = "stackedleftlinetop"


class MlongdivValue(Enum):
    TRANSPARENT = "transparent"


class MmultiscriptsValue(Enum):
    TRANSPARENT = "transparent"


class MnDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MnFontstyle(Enum):
    NORMAL = "normal"
    ITALIC = "italic"


class MnFontweight(Enum):
    NORMAL = "normal"
    BOLD = "bold"


class MnMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MnValue(Enum):
    TRANSPARENT = "transparent"


class MoAccent(Enum):
    TRUE = "true"
    FALSE = "false"


class MoDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MoFence(Enum):
    TRUE = "true"
    FALSE = "false"


class MoFontstyle(Enum):
    NORMAL = "normal"
    ITALIC = "italic"


class MoFontweight(Enum):
    NORMAL = "normal"
    BOLD = "bold"


class MoForm(Enum):
    PREFIX = "prefix"
    INFIX = "infix"
    POSTFIX = "postfix"


class MoIndentalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"


class MoIndentalignfirst(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"
    INDENTALIGN = "indentalign"


class MoIndentalignlast(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"
    INDENTALIGN = "indentalign"


class MoLargeop(Enum):
    TRUE = "true"
    FALSE = "false"


class MoLinebreak(Enum):
    AUTO = "auto"
    NEWLINE = "newline"
    NOBREAK = "nobreak"
    GOODBREAK = "goodbreak"
    BADBREAK = "badbreak"


class MoLinebreakstyle(Enum):
    BEFORE = "before"
    AFTER = "after"
    DUPLICATE = "duplicate"
    INFIXLINEBREAKSTYLE = "infixlinebreakstyle"


class MoMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MoMovablelimits(Enum):
    TRUE = "true"
    FALSE = "false"


class MoSeparator(Enum):
    TRUE = "true"
    FALSE = "false"


class MoStretchy(Enum):
    TRUE = "true"
    FALSE = "false"


class MoSymmetric(Enum):
    TRUE = "true"
    FALSE = "false"


class MoValue(Enum):
    INFINITY = "infinity"


class Mode(BaseModel):
    class Meta:
        name = "mode"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Moment(BaseModel):
    class Meta:
        name = "moment"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class MoverAccent(Enum):
    TRUE = "true"
    FALSE = "false"


class MoverAlign(Enum):
    LEFT = "left"
    RIGHT = "right"
    CENTER = "center"


class MoverValue(Enum):
    TRANSPARENT = "transparent"


class MpaddedValue(Enum):
    TRANSPARENT = "transparent"


class MphantomValue(Enum):
    TRANSPARENT = "transparent"


class MprescriptsValue(Enum):
    TRANSPARENT = "transparent"


class MrootValue(Enum):
    TRANSPARENT = "transparent"


class MrowDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MrowValue(Enum):
    TRANSPARENT = "transparent"


class MsDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MsFontstyle(Enum):
    NORMAL = "normal"
    ITALIC = "italic"


class MsFontweight(Enum):
    NORMAL = "normal"
    BOLD = "bold"


class MsMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MsValue(Enum):
    TRANSPARENT = "transparent"


class MscarriesLocation(Enum):
    W = "w"
    NW = "nw"
    N = "n"
    NE = "ne"
    E = "e"
    SE = "se"
    S = "s"
    SW = "sw"


class MscarriesValue(Enum):
    NONE = "none"
    UPDIAGONALSTRIKE = "updiagonalstrike"
    DOWNDIAGONALSTRIKE = "downdiagonalstrike"
    VERTICALSTRIKE = "verticalstrike"
    HORIZONTALSTRIKE = "horizontalstrike"


class MscarryLocation(Enum):
    W = "w"
    NW = "nw"
    N = "n"
    NE = "ne"
    E = "e"
    SE = "se"
    S = "s"
    SW = "sw"


class MscarryValue(Enum):
    NONE = "none"
    UPDIAGONALSTRIKE = "updiagonalstrike"
    DOWNDIAGONALSTRIKE = "downdiagonalstrike"
    VERTICALSTRIKE = "verticalstrike"
    HORIZONTALSTRIKE = "horizontalstrike"


class MsgroupValue(Enum):
    TRANSPARENT = "transparent"


class MslineValue(Enum):
    THIN = "thin"


class MspaceDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MspaceFontstyle(Enum):
    NORMAL = "normal"
    ITALIC = "italic"


class MspaceFontweight(Enum):
    NORMAL = "normal"
    BOLD = "bold"


class MspaceIndentalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"


class MspaceIndentalignfirst(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"
    INDENTALIGN = "indentalign"


class MspaceIndentalignlast(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"
    INDENTALIGN = "indentalign"


class MspaceLinebreak(Enum):
    AUTO = "auto"
    NEWLINE = "newline"
    NOBREAK = "nobreak"
    GOODBREAK = "goodbreak"
    BADBREAK = "badbreak"
    INDENTINGNEWLINE = "indentingnewline"


class MspaceMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MspaceValue(Enum):
    INDENTSHIFT = "indentshift"


class MsqrtValue(Enum):
    TRANSPARENT = "transparent"


class MsrowValue(Enum):
    TRANSPARENT = "transparent"


class MstackCharalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MstackStackalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    DECIMALPOINT = "decimalpoint"


class MstackValue(Enum):
    LOOSE = "loose"


class MstyleAccent(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleAccentunder(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleAlign(Enum):
    LEFT = "left"
    RIGHT = "right"
    CENTER = "center"


class MstyleBevelled(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleCharalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MstyleDenomalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MstyleDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MstyleDisplaystyle(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleEdge(Enum):
    LEFT = "left"
    RIGHT = "right"


class MstyleEqualcolumns(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleEqualrows(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleFence(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleFontstyle(Enum):
    NORMAL = "normal"
    ITALIC = "italic"


class MstyleFontweight(Enum):
    NORMAL = "normal"
    BOLD = "bold"


class MstyleForm(Enum):
    PREFIX = "prefix"
    INFIX = "infix"
    POSTFIX = "postfix"


class MstyleIndentalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"


class MstyleIndentalignfirst(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"
    INDENTALIGN = "indentalign"


class MstyleIndentalignlast(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    AUTO = "auto"
    ID = "id"
    INDENTALIGN = "indentalign"


class MstyleInfixlinebreakstyle(Enum):
    BEFORE = "before"
    AFTER = "after"
    DUPLICATE = "duplicate"


class MstyleLargeop(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleLinebreak(Enum):
    AUTO = "auto"
    NEWLINE = "newline"
    NOBREAK = "nobreak"
    GOODBREAK = "goodbreak"
    BADBREAK = "badbreak"


class MstyleLinebreakstyle(Enum):
    BEFORE = "before"
    AFTER = "after"
    DUPLICATE = "duplicate"
    INFIXLINEBREAKSTYLE = "infixlinebreakstyle"


class MstyleLocation(Enum):
    W = "w"
    NW = "nw"
    N = "n"
    NE = "ne"
    E = "e"
    SE = "se"
    S = "s"
    SW = "sw"


class MstyleLongdivstyle(Enum):
    LEFTTOP = "lefttop"
    STACKEDRIGHTRIGHT = "stackedrightright"
    MEDIUMSTACKEDRIGHTRIGHT = "mediumstackedrightright"
    SHORTSTACKEDRIGHTRIGHT = "shortstackedrightright"
    RIGHTTOP = "righttop"
    LEFT_RIGHT = "left/\\right"
    LEFT_RIGHT_1 = "left)(right"
    RIGHT_RIGHT = ":right=right"
    STACKEDLEFTLEFT = "stackedleftleft"
    STACKEDLEFTLINETOP = "stackedleftlinetop"


class MstyleMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MstyleMovablelimits(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleNumalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"


class MstyleSeparator(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleSide(Enum):
    LEFT = "left"
    RIGHT = "right"
    LEFTOVERLAP = "leftoverlap"
    RIGHTOVERLAP = "rightoverlap"


class MstyleStackalign(Enum):
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    DECIMALPOINT = "decimalpoint"


class MstyleStretchy(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleSymmetric(Enum):
    TRUE = "true"
    FALSE = "false"


class MstyleValue(Enum):
    TRANSPARENT = "transparent"


class MsubValue(Enum):
    TRANSPARENT = "transparent"


class MsubsupValue(Enum):
    TRANSPARENT = "transparent"


class MsupValue(Enum):
    TRANSPARENT = "transparent"


class MtableDisplaystyle(Enum):
    TRUE = "true"
    FALSE = "false"


class MtableEqualcolumns(Enum):
    TRUE = "true"
    FALSE = "false"


class MtableEqualrows(Enum):
    TRUE = "true"
    FALSE = "false"


class MtableSide(Enum):
    LEFT = "left"
    RIGHT = "right"
    LEFTOVERLAP = "leftoverlap"
    RIGHTOVERLAP = "rightoverlap"


class MtableValue(Enum):
    TRUE = "true"
    FALSE = "false"


class Mtd(BaseModel):
    class Meta:
        name = "mtd"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class MtextDir(Enum):
    LTR = "ltr"
    RTL = "rtl"


class MtextFontstyle(Enum):
    NORMAL = "normal"
    ITALIC = "italic"


class MtextFontweight(Enum):
    NORMAL = "normal"
    BOLD = "bold"


class MtextMathvariant(Enum):
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic"
    BOLD_ITALIC = "bold-italic"
    DOUBLE_STRUCK = "double-struck"
    BOLD_FRAKTUR = "bold-fraktur"
    SCRIPT = "script"
    BOLD_SCRIPT = "bold-script"
    FRAKTUR = "fraktur"
    SANS_SERIF = "sans-serif"
    BOLD_SANS_SERIF = "bold-sans-serif"
    SANS_SERIF_ITALIC = "sans-serif-italic"
    SANS_SERIF_BOLD_ITALIC = "sans-serif-bold-italic"
    MONOSPACE = "monospace"
    INITIAL = "initial"
    TAILED = "tailed"
    LOOPED = "looped"
    STRETCHED = "stretched"


class MtextValue(Enum):
    TRANSPARENT = "transparent"


class MtrRowalign(Enum):
    TOP = "top"
    BOTTOM = "bottom"
    CENTER = "center"
    BASELINE = "baseline"
    AXIS = "axis"


class MtrValue(Enum):
    TRANSPARENT = "transparent"


class MunderAccentunder(Enum):
    TRUE = "true"
    FALSE = "false"


class MunderAlign(Enum):
    LEFT = "left"
    RIGHT = "right"
    CENTER = "center"


class MunderValue(Enum):
    TRANSPARENT = "transparent"


class MunderoverAccent(Enum):
    TRUE = "true"
    FALSE = "false"


class MunderoverAccentunder(Enum):
    TRUE = "true"
    FALSE = "false"


class MunderoverAlign(Enum):
    LEFT = "left"
    RIGHT = "right"
    CENTER = "center"


class MunderoverValue(Enum):
    TRANSPARENT = "transparent"


class NaryArithClass(BaseModel):
    class Meta:
        name = "nary-arith.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NaryFunctionalClass(BaseModel):
    class Meta:
        name = "nary-functional.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NaryLinalgClass(BaseModel):
    class Meta:
        name = "nary-linalg.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NaryLogicalClass(BaseModel):
    class Meta:
        name = "nary-logical.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NaryMinmaxClass(BaseModel):
    class Meta:
        name = "nary-minmax.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NaryRelnClass(BaseModel):
    class Meta:
        name = "nary-reln.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NarySetRelnClass(BaseModel):
    class Meta:
        name = "nary-set-reln.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NarySetClass(BaseModel):
    class Meta:
        name = "nary-set.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NarySetlistConstructorClass(BaseModel):
    class Meta:
        name = "nary-setlist-constructor.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class NaryStatsClass(BaseModel):
    class Meta:
        name = "nary-stats.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Naturalnumbers(BaseModel):
    class Meta:
        name = "naturalnumbers"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Neq(BaseModel):
    class Meta:
        name = "neq"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class NoneValue(Enum):
    TRANSPARENT = "transparent"


class Not(BaseModel):
    class Meta:
        name = "not"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Notanumber(BaseModel):
    class Meta:
        name = "notanumber"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Notin(BaseModel):
    class Meta:
        name = "notin"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Notprsubset(BaseModel):
    class Meta:
        name = "notprsubset"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Notsubset(BaseModel):
    class Meta:
        name = "notsubset"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Or(BaseModel):
    class Meta:
        name = "or"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Outerproduct(BaseModel):
    class Meta:
        name = "outerproduct"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Partialdiff(BaseModel):
    class Meta:
        name = "partialdiff"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class PartialdiffClass(BaseModel):
    class Meta:
        name = "partialdiff.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Pi(BaseModel):
    class Meta:
        name = "pi"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Piecewise(BaseModel):
    class Meta:
        name = "piecewise"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    piece: List["Piece"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    otherwise: List["Otherwise"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Plus(BaseModel):
    class Meta:
        name = "plus"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Power(BaseModel):
    class Meta:
        name = "power"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Primes(BaseModel):
    class Meta:
        name = "primes"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class ProductClass(BaseModel):
    class Meta:
        name = "product.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Product1(BaseModel):
    class Meta:
        name = "product"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Prsubset(BaseModel):
    class Meta:
        name = "prsubset"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class QuantifierClass(BaseModel):
    class Meta:
        name = "quantifier.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Quotient(BaseModel):
    class Meta:
        name = "quotient"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Rationals(BaseModel):
    class Meta:
        name = "rationals"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Real(BaseModel):
    class Meta:
        name = "real"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Reals(BaseModel):
    class Meta:
        name = "reals"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Rem(BaseModel):
    class Meta:
        name = "rem"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Root(BaseModel):
    class Meta:
        name = "root"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Scalarproduct(BaseModel):
    class Meta:
        name = "scalarproduct"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Sdev(BaseModel):
    class Meta:
        name = "sdev"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Sec1(BaseModel):
    class Meta:
        name = "sec"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Sech(BaseModel):
    class Meta:
        name = "sech"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Selector(BaseModel):
    class Meta:
        name = "selector"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Sep(BaseModel):
    class Meta:
        name = "sep"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)


class Setdiff(BaseModel):
    class Meta:
        name = "setdiff"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Share(BaseModel):
    class Meta:
        name = "share"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    src: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class Sin(BaseModel):
    class Meta:
        name = "sin"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Sinh(BaseModel):
    class Meta:
        name = "sinh"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Subset(BaseModel):
    class Meta:
        name = "subset"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Sum(BaseModel):
    class Meta:
        name = "sum"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class SumClass(BaseModel):
    class Meta:
        name = "sum.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Tan(BaseModel):
    class Meta:
        name = "tan"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Tanh(BaseModel):
    class Meta:
        name = "tanh"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Tendsto(BaseModel):
    class Meta:
        name = "tendsto"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    type_value: Optional[object] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


class Times(BaseModel):
    class Meta:
        name = "times"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Transpose(BaseModel):
    class Meta:
        name = "transpose"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class TrueType(BaseModel):
    class Meta:
        name = "true"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class UnaryElementaryClass(BaseModel):
    class Meta:
        name = "unary-elementary.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class UnaryFunctionalClass(BaseModel):
    class Meta:
        name = "unary-functional.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class UnaryLinalgClass(BaseModel):
    class Meta:
        name = "unary-linalg.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class UnaryLogicalClass(BaseModel):
    class Meta:
        name = "unary-logical.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class UnarySetClass(BaseModel):
    class Meta:
        name = "unary-set.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class UnaryVeccalcClass(BaseModel):
    class Meta:
        name = "unary-veccalc.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class UnionType(BaseModel):
    class Meta:
        name = "union"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Variance(BaseModel):
    class Meta:
        name = "variance"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Vector(BaseModel):
    class Meta:
        name = "vector"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Vectorproduct(BaseModel):
    class Meta:
        name = "vectorproduct"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class Verticalalign(Enum):
    TOP = "top"
    BOTTOM = "bottom"
    CENTER = "center"
    BASELINE = "baseline"
    AXIS = "axis"


class Xor(BaseModel):
    class Meta:
        name = "xor"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class ActuateType(Enum):
    ON_LOAD = "onLoad"
    ON_REQUEST = "onRequest"
    OTHER = "other"
    NONE = "none"


class ShowType(Enum):
    NEW = "new"
    REPLACE = "replace"
    EMBED = "embed"
    OTHER = "other"
    NONE = "none"


class TypeType(Enum):
    SIMPLE = "simple"
    EXTENDED = "extended"
    TITLE = "title"
    RESOURCE = "resource"
    LOCATOR = "locator"
    ARC = "arc"


class LangValue(Enum):
    VALUE = ""


class SpaceValue(Enum):
    DEFAULT = "default"
    PRESERVE = "preserve"


class AltText(BaseModel):
    """
    <div> <h3>Alternate Title Text For a Figure, Etc.</h3> </div>
    """

    class Meta:
        name = "alt-text"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Annotation2(BaseModel):
    """
    <div> <h3>Annotation in a Citation</h3> </div>
    """

    class Meta:
        name = "annotation"

    model_config = ConfigDict(defer_build=True)
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ArticleVersion(BaseModel):
    """
    <div> <h3>Article Version</h3> </div>
    """

    class Meta:
        name = "article-version"

    model_config = ConfigDict(defer_build=True)
    article_version_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "article-version-type",
            "type": "Attribute",
        },
    )
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    designator: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    iso_8601_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "iso-8601-date",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class AuthorComment(BaseModel):
    """
    <div> <h3>Author Comment</h3> </div>
    """

    class Meta:
        name = "author-comment"

    model_config = ConfigDict(defer_build=True)
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class AwardDesc(BaseModel):
    """
    <div> <h3>Award Description</h3> </div>
    """

    class Meta:
        name = "award-desc"

    model_config = ConfigDict(defer_build=True)
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class AwardName(BaseModel):
    """
    <div> <h3>Award Name</h3> </div>
    """

    class Meta:
        name = "award-name"

    model_config = ConfigDict(defer_build=True)
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class BlockAlternatives(BaseModel):
    """
    <div> <h3>Block-Level Alternatives For Processing</h3> </div>
    """

    class Meta:
        name = "block-alternatives"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    boxed_text: List["BoxedText"] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    fig: List["Fig"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List["FigGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Caption(BaseModel):
    """
    <div> <h3>Caption of a Figure, Table, Etc.</h3> </div>
    """

    class Meta:
        name = "caption"

    model_config = ConfigDict(defer_build=True)
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class CitationAlternatives(BaseModel):
    """
    <div> <h3>Citation Alternatives</h3> </div>
    """

    class Meta:
        name = "citation-alternatives"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    element_citation: List["ElementCitation"] = field(
        default_factory=list,
        metadata={
            "name": "element-citation",
            "type": "Element",
        },
    )
    mixed_citation: List["MixedCitation"] = field(
        default_factory=list,
        metadata={
            "name": "mixed-citation",
            "type": "Element",
        },
    )
    nlm_citation: List["NlmCitation"] = field(
        default_factory=list,
        metadata={
            "name": "nlm-citation",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class City(BaseModel):
    """
    <div> <h3>City: in an Address</h3> </div>
    """

    class Meta:
        name = "city"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Col(BaseModel):
    class Meta:
        name = "col"

    model_config = ConfigDict(defer_build=True)
    align: Optional[ColAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    char: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charoff: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    span: str = field(
        default="1",
        metadata={
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[ColValign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    width: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ContribId(BaseModel):
    """
    <div> <h3>Contributor Identifier</h3> </div>
    """

    class Meta:
        name = "contrib-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    authenticated: ContribIdAuthenticated = field(
        default=ContribIdAuthenticated.FALSE,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    contrib_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "contrib-id-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class CopyrightHolder(BaseModel):
    """
    <div> <h3>Copyright Holder</h3> </div>
    """

    class Meta:
        name = "copyright-holder"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "institution",
                    "type": ForwardRef("Institution"),
                },
                {
                    "name": "institution-wrap",
                    "type": ForwardRef("InstitutionWrap"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Country(BaseModel):
    """
    <div> <h3>Country: in an Address</h3> </div>
    """

    class Meta:
        name = "country"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    country: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Counts(BaseModel):
    """
    <div> <h3>Counts</h3> </div>
    """

    class Meta:
        name = "counts"

    model_config = ConfigDict(defer_build=True)
    count: List[Count] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_count: Optional[FigCount] = field(
        default=None,
        metadata={
            "name": "fig-count",
            "type": "Element",
        },
    )
    table_count: Optional[TableCount] = field(
        default=None,
        metadata={
            "name": "table-count",
            "type": "Element",
        },
    )
    equation_count: Optional[EquationCount] = field(
        default=None,
        metadata={
            "name": "equation-count",
            "type": "Element",
        },
    )
    ref_count: Optional[RefCount] = field(
        default=None,
        metadata={
            "name": "ref-count",
            "type": "Element",
        },
    )
    page_count: Optional[PageCount] = field(
        default=None,
        metadata={
            "name": "page-count",
            "type": "Element",
        },
    )
    word_count: Optional[WordCount] = field(
        default=None,
        metadata={
            "name": "word-count",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Day(BaseModel):
    """
    <div> <h3>Day</h3> </div>
    """

    class Meta:
        name = "day"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Def(BaseModel):
    """
    <div> <h3>Definition List: Definition</h3> </div>
    """

    class Meta:
        name = "def"

    model_config = ConfigDict(defer_build=True)
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Era(BaseModel):
    """
    <div> <h3>Era</h3> </div>
    """

    class Meta:
        name = "era"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class ExtendedBy(BaseModel):
    """
    <div> <h3>Extended-by Model</h3> </div>
    """

    class Meta:
        name = "extended-by"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    designator: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Fn2(BaseModel):
    """
    <div> <h3>Footnote</h3> </div>
    """

    class Meta:
        name = "fn"

    model_config = ConfigDict(defer_build=True)
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    custom_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "custom-type",
            "type": "Attribute",
        },
    )
    fn_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "fn-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    symbol: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Fpage(BaseModel):
    """
    <div> <h3>First Page</h3> </div>
    """

    class Meta:
        name = "fpage"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    seq: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class GlyphData(BaseModel):
    """
    <div> <h3>Glyph Data For a Private Character</h3> </div>
    """

    class Meta:
        name = "glyph-data"

    model_config = ConfigDict(defer_build=True)
    fontchar: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontname: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    format: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    resolution: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    x_size: Optional[str] = field(
        default=None,
        metadata={
            "name": "x-size",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    space: SpaceValue = field(
        const=True,
        default=SpaceValue.PRESERVE,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    y_size: Optional[str] = field(
        default=None,
        metadata={
            "name": "y-size",
            "type": "Attribute",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class IndexTerm(BaseModel):
    """
    <div> <h3>Index Term</h3> </div>
    """

    class Meta:
        name = "index-term"

    model_config = ConfigDict(defer_build=True)
    term: "Term" = field(
        metadata={
            "type": "Element",
            "required": True,
        }
    )
    index_term: Optional["IndexTerm"] = field(
        default=None,
        metadata={
            "name": "index-term",
            "type": "Element",
        },
    )
    see: List["See"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    see_also: List["SeeAlso"] = field(
        default_factory=list,
        metadata={
            "name": "see-also",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    index_type: List[str] = field(
        default_factory=list,
        metadata={
            "name": "index-type",
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class InstitutionId(BaseModel):
    """
    <div> <h3>Institution Identifier</h3> </div>
    """

    class Meta:
        name = "institution-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    institution_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "institution-id-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class IssueId(BaseModel):
    """
    <div> <h3>Issue Identifier</h3> </div>
    """

    class Meta:
        name = "issue-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pub_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "pub-id-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class JournalId(BaseModel):
    """
    <div> <h3>Journal Identifier</h3> </div>
    """

    class Meta:
        name = "journal-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    journal_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "journal-id-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class License(BaseModel):
    """
    <div> <h3>License Information</h3> </div>
    """

    class Meta:
        name = "license"

    model_config = ConfigDict(defer_build=True)
    license_ref: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.niso.org/schemas/ali/1.0/",
        },
    )
    license_p: List["LicenseP"] = field(
        default_factory=list,
        metadata={
            "name": "license-p",
            "type": "Element",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    license_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "license-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class LongDesc(BaseModel):
    """
    <div> <h3>Long Description</h3> </div>
    """

    class Meta:
        name = "long-desc"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Lpage(BaseModel):
    """
    <div> <h3>Last Page</h3> </div>
    """

    class Meta:
        name = "lpage"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class MilestoneEnd(BaseModel):
    """
    <div> <h3>Milestone End</h3> </div>
    """

    class Meta:
        name = "milestone-end"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rationale: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class MilestoneStart(BaseModel):
    """
    <div> <h3>Milestone Start</h3> </div>
    """

    class Meta:
        name = "milestone-start"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rationale: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Month(BaseModel):
    """
    <div> <h3>Month</h3> </div>
    """

    class Meta:
        name = "month"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class OpenAccess(BaseModel):
    """
    <div> <h3>Open Access</h3> </div>
    """

    class Meta:
        name = "open-access"

    model_config = ConfigDict(defer_build=True)
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class PageRange(BaseModel):
    """
    <div> <h3>Page Ranges</h3> </div>
    """

    class Meta:
        name = "page-range"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class PostalCode(BaseModel):
    """
    <div> <h3>Postal Code: in an Address</h3> </div>
    """

    class Meta:
        name = "postal-code"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class PubId(BaseModel):
    """
    <div> <h3>Publication Identifier For a Cited Publication</h3> </div>
    """

    class Meta:
        name = "pub-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    custom_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "custom-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pub_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "pub-id-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class ResourceId(BaseModel):
    """
    <div> <h3>Resource Identifier</h3> </div>
    """

    class Meta:
        name = "resource-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    resource_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "resource-id-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class RestrictedBy(BaseModel):
    """
    <div> <h3>Restricted-by Model</h3> </div>
    """

    class Meta:
        name = "restricted-by"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    designator: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Rt(BaseModel):
    """
    <div> <h3>Ruby Textual Annotation</h3> </div>
    """

    class Meta:
        name = "rt"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Season(BaseModel):
    """
    <div> <h3>Season</h3> </div>
    """

    class Meta:
        name = "season"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class State(BaseModel):
    """
    <div> <h3>State or Province: in an Address</h3> </div>
    """

    class Meta:
        name = "state"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class TexMath(BaseModel):
    """
    <div> <h3>Tex Math Equation</h3> </div>
    """

    class Meta:
        name = "tex-math"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    notation: Optional[TexMathNotation] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Year(BaseModel):
    """
    <div> <h3>Year</h3> </div>
    """

    class Meta:
        name = "year"

    model_config = ConfigDict(defer_build=True)
    calendar: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    iso_8601_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "iso-8601-date",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class AnnotationXml(AnnotationXmlModel):
    class Meta:
        name = "annotation-xml"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    cd: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    src: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class Cerror(BaseModel):
    class Meta:
        name = "cerror"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    csymbol: List["Csymbol"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    apply: List["Apply"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List["Bind"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List["Ci"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List["Cn"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List["Cerror"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List["Piecewise"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List["Declare"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List["Fn1"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List["Reln"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List["List1"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List["Set"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )


class Maligngroup(BaseModel):
    class Meta:
        name = "maligngroup"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MaligngroupValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    groupalign: Optional[MaligngroupGroupalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class Malignmark(BaseModel):
    class Meta:
        name = "malignmark"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MalignmarkValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    edge: Optional[MalignmarkEdge] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class Mglyph(BaseModel):
    class Meta:
        name = "mglyph"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MglyphValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    src: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    width: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    height: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    valign: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    alt: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    index: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mathvariant: Optional[MglyphMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mathsize: Optional[Union[str, MglyphValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    fontfamily: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontweight: Optional[MglyphFontweight] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontstyle: Optional[MglyphFontstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    color: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    background: Optional[Union[str, MglyphValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )


class Mlabeledtr(BaseModel):
    class Meta:
        name = "mlabeledtr"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    mtd: List[Mtd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MlabeledtrValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    rowalign: Optional[MlabeledtrRowalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    columnalign: List[Columnalignstyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    groupalign: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"(\s*\{\s*(left|center|right|decimalpoint)(\s+(left|center|right|decimalpoint))*\})*\s*",
        },
    )


class Mprescripts(BaseModel):
    class Meta:
        name = "mprescripts"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MprescriptsValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )


class Msline(BaseModel):
    class Meta:
        name = "msline"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MslineValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    position: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    length: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    leftoverhang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    rightoverhang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    mslinethickness: Optional[Union[str, MslineValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )


class Mspace(BaseModel):
    class Meta:
        name = "mspace"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MspaceValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathvariant: Optional[MspaceMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mathsize: Optional[Union[str, MspaceValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    dir: Optional[MspaceDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontfamily: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontweight: Optional[MspaceFontweight] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontstyle: Optional[MspaceFontstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    color: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    background: Optional[Union[str, MspaceValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    width: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    height: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    depth: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    linebreak: Optional[MspaceLinebreak] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentalign: Optional[MspaceIndentalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indenttarget: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentalignfirst: Optional[MspaceIndentalignfirst] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentshiftfirst: Optional[Union[str, MspaceValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indentalignlast: Optional[MspaceIndentalignlast] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentshiftlast: Optional[Union[str, MspaceValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )


class Mtr(BaseModel):
    class Meta:
        name = "mtr"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    mtd: List[Mtd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MtrValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    rowalign: Optional[MtrRowalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    columnalign: List[Columnalignstyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    groupalign: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"(\s*\{\s*(left|center|right|decimalpoint)(\s+(left|center|right|decimalpoint))*\})*\s*",
        },
    )


class NoneType(BaseModel):
    class Meta:
        name = "none"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, NoneValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )


class ArcType(BaseModel):
    """
    :ivar type_value:
    :ivar arcrole:
    :ivar title:
    :ivar show:
    :ivar actuate:
    :ivar from_value:
    :ivar to: from and to have default behavior when values are missing
    """

    class Meta:
        name = "arcType"
        target_namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)
    type_value: TypeType = field(
        const=True,
        default=TypeType.ARC,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    from_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "from",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    to: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


class Extended(BaseModel):
    """Intended for use as the type of user-declared elements to make them extended
    links.

    Note that the elements referenced in the content model are all
    abstract. The intention is that by simply declaring elements with
    these as their substitutionGroup, all the right things will happen.
    """

    class Meta:
        name = "extended"
        target_namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)
    type_value: TypeType = field(
        const=True,
        default=TypeType.EXTENDED,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


class LocatorType(BaseModel):
    """
    :ivar type_value:
    :ivar href:
    :ivar role:
    :ivar title:
    :ivar label: label is not required, but locators have no particular
        XLink function if they are not labeled.
    """

    class Meta:
        name = "locatorType"
        target_namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)
    type_value: TypeType = field(
        const=True,
        default=TypeType.LOCATOR,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    href: str = field(
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        }
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    label: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


class ResourceType(BaseModel):
    class Meta:
        name = "resourceType"
        target_namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)
    type_value: TypeType = field(
        const=True,
        default=TypeType.RESOURCE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    label: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class Simple(BaseModel):
    """
    Intended for use as the type of user-declared elements to make them simple
    links.
    """

    class Meta:
        name = "simple"
        target_namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class TitleEltType(BaseModel):
    """
    :ivar type_value:
    :ivar lang: xml:lang is not required, but provides much of the
        motivation for title elements in addition to attributes, and so
        is provided here for convenience.
    :ivar content:
    """

    class Meta:
        name = "titleEltType"
        target_namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)
    type_value: TypeType = field(
        const=True,
        default=TypeType.TITLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class AccessDate(BaseModel):
    """
    <div> <h3>Access Date For Cited Work</h3> </div>
    """

    class Meta:
        name = "access-date"

    model_config = ConfigDict(defer_build=True)
    calendar: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    iso_8601_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "iso-8601-date",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "era",
                    "type": Era,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class ArticleVersionAlternatives(BaseModel):
    """
    <div> <h3>Article Version Alternatives</h3> </div>
    """

    class Meta:
        name = "article-version-alternatives"

    model_config = ConfigDict(defer_build=True)
    article_version: List[ArticleVersion] = field(
        default_factory=list,
        metadata={
            "name": "article-version",
            "type": "Element",
            "min_occurs": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Colgroup(BaseModel):
    class Meta:
        name = "colgroup"

    model_config = ConfigDict(defer_build=True)
    col: List[Col] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    align: Optional[ColgroupAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    char: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charoff: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    span: str = field(
        default="1",
        metadata={
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[ColgroupValign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    width: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Date(BaseModel):
    """
    <div> <h3>Date</h3> </div>
    """

    class Meta:
        name = "date"

    model_config = ConfigDict(defer_build=True)
    day: Optional[Day] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    month: Optional[Month] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    season: Optional[Season] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    year: Optional[Year] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    era: Optional[Era] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    string_date: Optional["StringDate"] = field(
        default=None,
        metadata={
            "name": "string-date",
            "type": "Element",
        },
    )
    calendar: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    date_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "date-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    iso_8601_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "iso-8601-date",
            "type": "Attribute",
        },
    )
    publication_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-format",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class DefItem(BaseModel):
    """
    <div> <h3>Definition List: Definition Item</h3> </div>
    """

    class Meta:
        name = "def-item"

    model_config = ConfigDict(defer_build=True)
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    term: List["Term"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    def_value: List[Def] = field(
        default_factory=list,
        metadata={
            "name": "def",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class FnGroup(BaseModel):
    """
    <div> <h3>Footnote Group</h3> </div>
    """

    class Meta:
        name = "fn-group"

    model_config = ConfigDict(defer_build=True)
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class InlineGraphic(BaseModel):
    """
    <div> <h3>Inline Graphic</h3> </div>
    """

    class Meta:
        name = "inline-graphic"

    model_config = ConfigDict(defer_build=True)
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List["LongDesc"] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    baseline_shift: Optional[str] = field(
        default=None,
        metadata={
            "name": "baseline-shift",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mime_subtype: Optional[str] = field(
        default=None,
        metadata={
            "name": "mime-subtype",
            "type": "Attribute",
        },
    )
    mimetype: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: str = field(
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        }
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Mi(BaseModel):
    class Meta:
        name = "mi"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MiValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathvariant: Optional[MiMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mathsize: Optional[Union[str, MiValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    dir: Optional[MiDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontfamily: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontweight: Optional[MiFontweight] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontstyle: Optional[MiFontstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    color: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    background: Optional[Union[str, MiValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "mglyph",
                    "type": Mglyph,
                },
                {
                    "name": "malignmark",
                    "type": Malignmark,
                },
            ),
        },
    )


class Mn(BaseModel):
    class Meta:
        name = "mn"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MnValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathvariant: Optional[MnMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mathsize: Optional[Union[str, MnValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    dir: Optional[MnDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontfamily: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontweight: Optional[MnFontweight] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontstyle: Optional[MnFontstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    color: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    background: Optional[Union[str, MnValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "mglyph",
                    "type": Mglyph,
                },
                {
                    "name": "malignmark",
                    "type": Malignmark,
                },
            ),
        },
    )


class Mo(BaseModel):
    class Meta:
        name = "mo"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MoValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathvariant: Optional[MoMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mathsize: Optional[Union[str, MoValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    dir: Optional[MoDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontfamily: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontweight: Optional[MoFontweight] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontstyle: Optional[MoFontstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    color: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    background: Optional[Union[str, MoValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    form: Optional[MoForm] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fence: Optional[MoFence] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    separator: Optional[MoSeparator] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    lspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    rspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    stretchy: Optional[MoStretchy] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    symmetric: Optional[MoSymmetric] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    maxsize: Optional[Union[str, MoValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    minsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    largeop: Optional[MoLargeop] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    movablelimits: Optional[MoMovablelimits] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    accent: Optional[MoAccent] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    linebreak: Optional[MoLinebreak] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    lineleading: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    linebreakstyle: Optional[MoLinebreakstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    linebreakmultchar: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentalign: Optional[MoIndentalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indenttarget: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentalignfirst: Optional[MoIndentalignfirst] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentshiftfirst: Optional[Union[str, MoValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indentalignlast: Optional[MoIndentalignlast] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentshiftlast: Optional[Union[str, MoValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "mglyph",
                    "type": Mglyph,
                },
                {
                    "name": "malignmark",
                    "type": Malignmark,
                },
            ),
        },
    )


class Ms(BaseModel):
    class Meta:
        name = "ms"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MsValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathvariant: Optional[MsMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mathsize: Optional[Union[str, MsValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    dir: Optional[MsDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontfamily: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontweight: Optional[MsFontweight] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontstyle: Optional[MsFontstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    color: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    background: Optional[Union[str, MsValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    lquote: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rquote: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "mglyph",
                    "type": Mglyph,
                },
                {
                    "name": "malignmark",
                    "type": Malignmark,
                },
            ),
        },
    )


class Mtable(BaseModel):
    class Meta:
        name = "mtable"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    mtr: List[Mtr] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlabeledtr: List[Mlabeledtr] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MtableValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    align: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*(top|bottom|center|baseline|axis)(\s+-?[0-9]+)?\s*",
        },
    )
    rowalign: List[Verticalalign] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    columnalign: List[Columnalignstyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    groupalign: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"(\s*\{\s*(left|center|right|decimalpoint)(\s+(left|center|right|decimalpoint))*\})*\s*",
        },
    )
    alignmentscope: List[MtableValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    columnwidth: List[MtableValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    width: Optional[Union[str, MtableValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    rowspacing: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "min_length": 1,
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
            "tokens": True,
        },
    )
    columnspacing: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "min_length": 1,
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
            "tokens": True,
        },
    )
    rowlines: List[Linestyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    columnlines: List[Linestyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    frame: Optional[Linestyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    framespacing: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "length": 2,
            "tokens": True,
        },
    )
    equalrows: Optional[MtableEqualrows] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    equalcolumns: Optional[MtableEqualcolumns] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    displaystyle: Optional[MtableDisplaystyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    side: Optional[MtableSide] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    minlabelspacing: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )


class Mtext(BaseModel):
    class Meta:
        name = "mtext"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MtextValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathvariant: Optional[MtextMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mathsize: Optional[Union[str, MtextValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    dir: Optional[MtextDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontfamily: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontweight: Optional[MtextFontweight] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontstyle: Optional[MtextFontstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    color: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    background: Optional[Union[str, MtextValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "mglyph",
                    "type": Mglyph,
                },
                {
                    "name": "malignmark",
                    "type": Malignmark,
                },
            ),
        },
    )


class Arc(ArcType):
    class Meta:
        name = "arc"
        namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)


class Locator(LocatorType):
    class Meta:
        name = "locator"
        namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)


class Resource(ResourceType):
    class Meta:
        name = "resource"
        namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)


class TitleAbstract(TitleEltType):
    class Meta:
        name = "title"
        namespace = "http://www.w3.org/1999/xlink"

    model_config = ConfigDict(defer_build=True)


class PrivateChar(BaseModel):
    """
    <div> <h3>Private Character (Custom or Unicode)</h3> </div>
    """

    class Meta:
        name = "private-char"

    model_config = ConfigDict(defer_build=True)
    glyph_data: Optional[GlyphData] = field(
        default=None,
        metadata={
            "name": "glyph-data",
            "type": "Element",
        },
    )
    glyph_ref: Optional[GlyphRef] = field(
        default=None,
        metadata={
            "name": "glyph-ref",
            "type": "Element",
        },
    )
    inline_graphic: List[InlineGraphic] = field(
        default_factory=list,
        metadata={
            "name": "inline-graphic",
            "type": "Element",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class CiContent(BaseModel):
    class Meta:
        name = "ci.content"
        target_namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "mglyph",
                    "type": Mglyph,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "maction",
                    "type": ForwardRef("Maction"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mlongdiv",
                    "type": ForwardRef("Mlongdiv"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mstack",
                    "type": ForwardRef("Mstack"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mtable",
                    "type": Mtable,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mmultiscripts",
                    "type": ForwardRef("Mmultiscripts"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "munderover",
                    "type": ForwardRef("Munderover"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mover",
                    "type": ForwardRef("Mover"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "munder",
                    "type": ForwardRef("Munder"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msubsup",
                    "type": ForwardRef("Msubsup"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msup",
                    "type": ForwardRef("Msup"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msub",
                    "type": ForwardRef("Msub"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "menclose",
                    "type": ForwardRef("Menclose"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mfenced",
                    "type": ForwardRef("Mfenced"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mphantom",
                    "type": ForwardRef("Mphantom"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mpadded",
                    "type": ForwardRef("Mpadded"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "merror",
                    "type": ForwardRef("Merror"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mstyle",
                    "type": ForwardRef("Mstyle"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mroot",
                    "type": ForwardRef("Mroot"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msqrt",
                    "type": ForwardRef("Msqrt"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mfrac",
                    "type": ForwardRef("Mfrac"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mrow",
                    "type": ForwardRef("Mrow"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "maligngroup",
                    "type": Maligngroup,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "malignmark",
                    "type": Malignmark,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "ms",
                    "type": Ms,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mspace",
                    "type": Mspace,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mtext",
                    "type": Mtext,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mo",
                    "type": Mo,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mn",
                    "type": Mn,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mi",
                    "type": Mi,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
            ),
        },
    )


class CnContent(BaseModel):
    class Meta:
        name = "cn.content"
        target_namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "mglyph",
                    "type": Mglyph,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "sep",
                    "type": Sep,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "maction",
                    "type": ForwardRef("Maction"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mlongdiv",
                    "type": ForwardRef("Mlongdiv"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mstack",
                    "type": ForwardRef("Mstack"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mtable",
                    "type": Mtable,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mmultiscripts",
                    "type": ForwardRef("Mmultiscripts"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "munderover",
                    "type": ForwardRef("Munderover"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mover",
                    "type": ForwardRef("Mover"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "munder",
                    "type": ForwardRef("Munder"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msubsup",
                    "type": ForwardRef("Msubsup"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msup",
                    "type": ForwardRef("Msup"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msub",
                    "type": ForwardRef("Msub"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "menclose",
                    "type": ForwardRef("Menclose"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mfenced",
                    "type": ForwardRef("Mfenced"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mphantom",
                    "type": ForwardRef("Mphantom"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mpadded",
                    "type": ForwardRef("Mpadded"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "merror",
                    "type": ForwardRef("Merror"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mstyle",
                    "type": ForwardRef("Mstyle"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mroot",
                    "type": ForwardRef("Mroot"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msqrt",
                    "type": ForwardRef("Msqrt"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mfrac",
                    "type": ForwardRef("Mfrac"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mrow",
                    "type": ForwardRef("Mrow"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "maligngroup",
                    "type": Maligngroup,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "malignmark",
                    "type": Malignmark,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "ms",
                    "type": Ms,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mspace",
                    "type": Mspace,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mtext",
                    "type": Mtext,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mo",
                    "type": Mo,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mn",
                    "type": Mn,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mi",
                    "type": Mi,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
            ),
        },
    )


class CsymbolContent(BaseModel):
    class Meta:
        name = "csymbol.content"
        target_namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "mglyph",
                    "type": Mglyph,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "maction",
                    "type": ForwardRef("Maction"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mlongdiv",
                    "type": ForwardRef("Mlongdiv"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mstack",
                    "type": ForwardRef("Mstack"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mtable",
                    "type": Mtable,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mmultiscripts",
                    "type": ForwardRef("Mmultiscripts"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "munderover",
                    "type": ForwardRef("Munderover"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mover",
                    "type": ForwardRef("Mover"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "munder",
                    "type": ForwardRef("Munder"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msubsup",
                    "type": ForwardRef("Msubsup"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msup",
                    "type": ForwardRef("Msup"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msub",
                    "type": ForwardRef("Msub"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "menclose",
                    "type": ForwardRef("Menclose"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mfenced",
                    "type": ForwardRef("Mfenced"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mphantom",
                    "type": ForwardRef("Mphantom"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mpadded",
                    "type": ForwardRef("Mpadded"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "merror",
                    "type": ForwardRef("Merror"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mstyle",
                    "type": ForwardRef("Mstyle"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mroot",
                    "type": ForwardRef("Mroot"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "msqrt",
                    "type": ForwardRef("Msqrt"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mfrac",
                    "type": ForwardRef("Mfrac"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mrow",
                    "type": ForwardRef("Mrow"),
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "maligngroup",
                    "type": Maligngroup,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "malignmark",
                    "type": Malignmark,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "ms",
                    "type": Ms,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mspace",
                    "type": Mspace,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mtext",
                    "type": Mtext,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mo",
                    "type": Mo,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mn",
                    "type": Mn,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "mi",
                    "type": Mi,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
            ),
        },
    )


class Ci(CiContent):
    class Meta:
        name = "ci"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    type_value: Optional[object] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


class Cn(CnContent):
    class Meta:
        name = "cn"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    type_value: Optional[object] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )
    base: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class Csymbol(CsymbolContent):
    class Meta:
        name = "csymbol"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    type_value: Optional[object] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )
    cd: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class ApplyContent(BaseModel):
    class Meta:
        name = "apply.content"
        target_namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List["Apply"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    bind: List["Bind"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    piecewise: List["Piecewise"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    declare: List["Declare"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    fn: List["Fn1"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    reln: List["Reln"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    list_value: List["List1"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    set: List["Set"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    bvar: List["Bvar"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    domainofapplication: List["Domainofapplication"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    condition: List["Condition"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    lowlimit: List["Lowlimit"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    uplimit: List["Uplimit"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    degree: List["Degree"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    momentabout: List["Momentabout"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    logbase: List["Logbase"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )


class Bvar(BaseModel):
    class Meta:
        name = "bvar"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Bvar.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    degree: List["Degree"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Bvar.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Apply(ApplyContent):
    class Meta:
        name = "apply"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )


class BindContent(ApplyContent):
    class Meta:
        name = "bind.content"
        target_namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)


class Bind(BindContent):
    class Meta:
        name = "bind"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )


class Condition(BaseModel):
    class Meta:
        name = "condition"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional["Piecewise"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional["Declare"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional["Fn1"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional["Reln"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional["List1"] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional["Set"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )


class Domainofapplication(BaseModel):
    class Meta:
        name = "domainofapplication"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional["Piecewise"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional["Declare"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional["Fn1"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional["Reln"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional["List1"] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional["Set"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )


class Lowlimit(BaseModel):
    class Meta:
        name = "lowlimit"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional["Piecewise"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional["Declare"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional["Fn1"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional["Reln"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional["List1"] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional["Set"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )


class Reln(BaseModel):
    class Meta:
        name = "reln"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List["Declare"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List["Fn1"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List["Reln"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List["List1"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List["Set"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )


class Uplimit(BaseModel):
    class Meta:
        name = "uplimit"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional["Piecewise"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional["Declare"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional["Fn1"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional["Reln"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional["List1"] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional["Set"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )


class Fn1(BaseModel):
    class Meta:
        name = "fn"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional[Piecewise] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional["Declare"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional["Fn1"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional[Reln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional["List1"] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional["Set"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )


class Declare(BaseModel):
    class Meta:
        name = "declare"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List["Declare"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List["List1"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List["Set"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )
    scope: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nargs: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    occurrence: Optional[DeclareOccurrence] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Set(BaseModel):
    class Meta:
        name = "set"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    bvar: List[Bvar] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domainofapplication: List[Domainofapplication] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    condition: List[Condition] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lowlimit: List[Lowlimit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    uplimit: List[Uplimit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List["List1"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List["Set"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    type_value: Optional[object] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


class List1(BaseModel):
    class Meta:
        name = "list"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    bvar: List[Bvar] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domainofapplication: List[Domainofapplication] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    condition: List[Condition] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lowlimit: List[Lowlimit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    uplimit: List[Uplimit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List["List1"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    order: Optional[ListOrder] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class ImpliedMrow(BaseModel):
    class Meta:
        target_namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    msubsup: List["Msubsup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    msup: List["Msup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    msub: List["Msub"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    menclose: List["Menclose"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mfenced: List["Mfenced"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mphantom: List["Mphantom"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mpadded: List["Mpadded"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    merror: List["Merror"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mstyle: List["Mstyle"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mroot: List["Mroot"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    msqrt: List["Msqrt"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mfrac: List["Mfrac"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mrow: List["Mrow"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    semantics: List["ImpliedMrow.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        msubsup: Optional["Msubsup"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        msup: Optional["Msup"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        msub: Optional["Msub"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        menclose: Optional["Menclose"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mfenced: Optional["Mfenced"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mphantom: Optional["Mphantom"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mpadded: Optional["Mpadded"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        merror: Optional["Merror"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mstyle: Optional["Mstyle"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mroot: Optional["Mroot"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        msqrt: Optional["Msqrt"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mfrac: Optional["Mfrac"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mrow: Optional["Mrow"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        semantics: Optional["ImpliedMrow.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
                "namespace": "http://www.w3.org/1998/Math/MathML",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Degree(BaseModel):
    class Meta:
        name = "degree"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional[Piecewise] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional[Declare] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional[Fn1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional[Reln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional[List1] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional[Set] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )


class IntervalClass(BaseModel):
    class Meta:
        name = "interval.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )
    closure: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class LambdaClass(BaseModel):
    class Meta:
        name = "lambda.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    bvar: List[Bvar] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domainofapplication: List[Domainofapplication] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    condition: List[Condition] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lowlimit: List[Lowlimit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    uplimit: List[Uplimit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional[Piecewise] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional[Declare] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional[Fn1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional[Reln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional[List1] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional[Set] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Logbase(BaseModel):
    class Meta:
        name = "logbase"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional[Piecewise] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional[Declare] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional[Fn1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional[Reln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional[List1] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional[Set] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )


class Momentabout(BaseModel):
    class Meta:
        name = "momentabout"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional[Piecewise] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional[Declare] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional[Fn1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional[Reln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional[List1] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional[Set] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )


class NaryConstructorClass(BaseModel):
    class Meta:
        name = "nary-constructor.class"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    bvar: List[Bvar] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domainofapplication: List[Domainofapplication] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    condition: List[Condition] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lowlimit: List[Lowlimit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    uplimit: List[Uplimit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Otherwise(BaseModel):
    class Meta:
        name = "otherwise"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: Optional[Apply] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    bind: Optional[Bind] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ci: Optional[Ci] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cn: Optional[Cn] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csymbol: Optional[Csymbol] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cbytes: Optional[Cbytes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cerror: Optional[Cerror] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cs: Optional[Cs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    share: Optional[Share] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    piecewise: Optional[Piecewise] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    declare: Optional[Declare] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fn: Optional[Fn1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reln: Optional[Reln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    interval: Optional[Interval] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    moment: Optional[Moment] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    log: Optional[Log] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ln: Optional[Ln] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    image: Optional[Image] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    codomain: Optional[Codomain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    domain: Optional[Domain] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ident: Optional[Ident] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    inverse: Optional[Inverse] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: Optional[Lambda] = field(
        default=None,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: Optional[Compose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    quotient: Optional[Quotient] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divide: Optional[Divide] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    minus: Optional[Minus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    power: Optional[Power] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rem: Optional[Rem] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    root: Optional[Root] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorial: Optional[Factorial] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abs: Optional[Abs] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conjugate: Optional[Conjugate] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arg: Optional[Arg] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    real: Optional[Real] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginary: Optional[Imaginary] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floor: Optional[Floor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    ceiling: Optional[Ceiling] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exp: Optional[Exp] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    min: Optional[Min] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    max: Optional[Max] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lcm: Optional[Lcm] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gcd: Optional[Gcd] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    times: Optional[Times] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    plus: Optional[Plus] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    xor: Optional[Xor] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    or_value: Optional[Or] = field(
        default=None,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: Optional[And] = field(
        default=None,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: Optional[Not] = field(
        default=None,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: Optional[Equivalent] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    implies: Optional[Implies] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exists: Optional[Exists] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    forall: Optional[Forall] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    leq: Optional[Leq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geq: Optional[Geq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lt: Optional[Lt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    gt: Optional[Gt] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eq: Optional[Eq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tendsto: Optional[Tendsto] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    factorof: Optional[Factorof] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    approx: Optional[Approx] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    neq: Optional[Neq] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    int_value: Optional[Int] = field(
        default=None,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: Optional[Diff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: Optional[Partialdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    laplacian: Optional[Laplacian] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    curl: Optional[Curl] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    grad: Optional[Grad] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    divergence: Optional[Divergence] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_value: Optional[List1] = field(
        default=None,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: Optional[Set] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: Optional[Cartesianproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    intersect: Optional[Intersect] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    setdiff: Optional[Setdiff] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: Optional[Notprsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notsubset: Optional[Notsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notin: Optional[Notin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    in_value: Optional[In] = field(
        default=None,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: Optional[Prsubset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subset: Optional[Subset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    card: Optional[Card] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sum: Optional[Sum] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    product: Optional[Product1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    limit: Optional[Limit] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctanh: Optional[Arctanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: Optional[Arcsinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsech: Optional[Arcsech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsec: Optional[Arcsec] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsch: Optional[Arccsch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccsc: Optional[Arccsc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccoth: Optional[Arccoth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccot: Optional[Arccot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccosh: Optional[Arccosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arctan: Optional[Arctan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arccos: Optional[Arccos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    arcsin: Optional[Arcsin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    coth: Optional[Coth] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csch: Optional[Csch] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sech: Optional[Sech] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tanh: Optional[Tanh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cosh: Optional[Cosh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sinh: Optional[Sinh] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cot: Optional[Cot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    csc: Optional[Csc] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sec: Optional[Sec1] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tan: Optional[Tan] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    cos: Optional[Cos] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sin: Optional[Sin] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mode: Optional[Mode] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    median: Optional[Median] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    variance: Optional[Variance] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    sdev: Optional[Sdev] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    mean: Optional[Mean] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: Optional[Matrixrow] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    matrix: Optional[Matrix] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    transpose: Optional[Transpose] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    determinant: Optional[Determinant] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    selector: Optional[Selector] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: Optional[Outerproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: Optional[Scalarproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: Optional[Vectorproduct] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    emptyset: Optional[Emptyset] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    primes: Optional[Primes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    complexes: Optional[Complexes] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: Optional[Naturalnumbers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rationals: Optional[Rationals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    reals: Optional[Reals] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    integers: Optional[Integers] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    infinity: Optional[Infinity] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: Optional[Eulergamma] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pi: Optional[Pi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    false: Optional[FalseType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    true: Optional[TrueType] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notanumber: Optional[Notanumber] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: Optional[Imaginaryi] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: Optional[Exponentiale] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class Piece(BaseModel):
    class Meta:
        name = "piece"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    encoding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    definition_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "definitionURL",
            "type": "Attribute",
        },
    )


class TableCellExpression(ImpliedMrow):
    class Meta:
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, TableCellExpressionValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    rowspan: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    columnspan: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rowalign: Optional[TableCellExpressionRowalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    columnalign: Optional[Columnalignstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    groupalign: List[GroupAlignment] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )


class Menclose(ImpliedMrow):
    class Meta:
        name = "menclose"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MencloseValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    notation: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class Merror(ImpliedMrow):
    class Meta:
        name = "merror"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MerrorValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )


class Mpadded(ImpliedMrow):
    class Meta:
        name = "mpadded"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MpaddedValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    height: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*([\+\-]?[0-9]*([0-9]\.?|\.[0-9])[0-9]*\s*((%?\s*(height|depth|width)?)|e[mx]|in|cm|mm|p[xtc]|((negative)?((very){0,2}thi(n|ck)|medium)mathspace))?)\s*",
        },
    )
    depth: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*([\+\-]?[0-9]*([0-9]\.?|\.[0-9])[0-9]*\s*((%?\s*(height|depth|width)?)|e[mx]|in|cm|mm|p[xtc]|((negative)?((very){0,2}thi(n|ck)|medium)mathspace))?)\s*",
        },
    )
    width: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*([\+\-]?[0-9]*([0-9]\.?|\.[0-9])[0-9]*\s*((%?\s*(height|depth|width)?)|e[mx]|in|cm|mm|p[xtc]|((negative)?((very){0,2}thi(n|ck)|medium)mathspace))?)\s*",
        },
    )
    lspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*([\+\-]?[0-9]*([0-9]\.?|\.[0-9])[0-9]*\s*((%?\s*(height|depth|width)?)|e[mx]|in|cm|mm|p[xtc]|((negative)?((very){0,2}thi(n|ck)|medium)mathspace))?)\s*",
        },
    )
    voffset: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*([\+\-]?[0-9]*([0-9]\.?|\.[0-9])[0-9]*\s*((%?\s*(height|depth|width)?)|e[mx]|in|cm|mm|p[xtc]|((negative)?((very){0,2}thi(n|ck)|medium)mathspace))?)\s*",
        },
    )


class Mphantom(ImpliedMrow):
    class Meta:
        name = "mphantom"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MphantomValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )


class Msqrt(ImpliedMrow):
    class Meta:
        name = "msqrt"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MsqrtValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )


class Mstyle(ImpliedMrow):
    class Meta:
        name = "mstyle"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    scriptlevel: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    displaystyle: Optional[MstyleDisplaystyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    scriptsizemultiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    scriptminsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    infixlinebreakstyle: Optional[MstyleInfixlinebreakstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    decimalpoint: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*\S\s*",
        },
    )
    accent: Optional[MstyleAccent] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    accentunder: Optional[MstyleAccentunder] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    align: Optional[MstyleAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    alignmentscope: List[MstyleValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    bevelled: Optional[MstyleBevelled] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charalign: Optional[MstyleCharalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charspacing: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    close: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    columnalign: List[Columnalignstyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    columnlines: List[Linestyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    columnspacing: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "min_length": 1,
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
            "tokens": True,
        },
    )
    columnspan: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    columnwidth: List[MstyleValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    crossout: List[MstyleValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    denomalign: Optional[MstyleDenomalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    depth: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    dir: Optional[MstyleDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    edge: Optional[MstyleEdge] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    equalcolumns: Optional[MstyleEqualcolumns] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    equalrows: Optional[MstyleEqualrows] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fence: Optional[MstyleFence] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    form: Optional[MstyleForm] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    frame: Optional[Linestyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    framespacing: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "length": 2,
            "tokens": True,
        },
    )
    groupalign: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"(\s*\{\s*(left|center|right|decimalpoint)(\s+(left|center|right|decimalpoint))*\})*\s*",
        },
    )
    height: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indentalign: Optional[MstyleIndentalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentalignfirst: Optional[MstyleIndentalignfirst] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentalignlast: Optional[MstyleIndentalignlast] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indentshiftfirst: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indentshiftlast: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indenttarget: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    largeop: Optional[MstyleLargeop] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    leftoverhang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    length: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    linebreak: Optional[MstyleLinebreak] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    linebreakmultchar: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    linebreakstyle: Optional[MstyleLinebreakstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    lineleading: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    linethickness: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    location: Optional[MstyleLocation] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    longdivstyle: Optional[MstyleLongdivstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    lquote: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    lspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    mathsize: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    mathvariant: Optional[MstyleMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    maxsize: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    minlabelspacing: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    minsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    movablelimits: Optional[MstyleMovablelimits] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mslinethickness: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    notation: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    numalign: Optional[MstyleNumalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    open: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    position: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rightoverhang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    rowalign: List[Verticalalign] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    rowlines: List[Linestyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    rowspacing: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "min_length": 1,
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
            "tokens": True,
        },
    )
    rowspan: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rquote: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    selection: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    separator: Optional[MstyleSeparator] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    separators: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    shift: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    side: Optional[MstyleSide] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    stackalign: Optional[MstyleStackalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    stretchy: Optional[MstyleStretchy] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    subscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    superscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    symmetric: Optional[MstyleSymmetric] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    width: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    fontfamily: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontweight: Optional[MstyleFontweight] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontstyle: Optional[MstyleFontstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fontsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    color: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    background: Optional[Union[str, MstyleValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    veryverythinmathspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    verythinmathspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    thinmathspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    mediummathspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    thickmathspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    verythickmathspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    veryverythickmathspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )


class Mrow(BaseModel):
    class Meta:
        name = "mrow"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List["Msubsup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List["Msup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List["Msub"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List["Mfenced"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List["Mroot"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List["Mfrac"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List["Mrow"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Mrow.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MrowValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    dir: Optional[MrowDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional["Msubsup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional["Msup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional["Msub"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional["Mfenced"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional["Mroot"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional["Mfrac"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional["Mrow"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mrow.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Mfrac(BaseModel):
    class Meta:
        name = "mfrac"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msubsup: List["Msubsup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msup: List["Msup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msub: List["Msub"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfenced: List["Mfenced"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mroot: List["Mroot"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfrac: List["Mfrac"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    semantics: List["Mfrac.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MfracValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    linethickness: Optional[Union[str, MfracValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    numalign: Optional[MfracNumalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    denomalign: Optional[MfracDenomalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    bevelled: Optional[MfracBevelled] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional["Msubsup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional["Msup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional["Msub"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional["Mfenced"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional["Mroot"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional["Mfrac"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mfrac.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Mroot(BaseModel):
    class Meta:
        name = "mroot"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msubsup: List["Msubsup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msup: List["Msup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msub: List["Msub"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfenced: List["Mfenced"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mroot: List["Mroot"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    semantics: List["Mroot.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MrootValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional["Msubsup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional["Msup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional["Msub"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional["Mfenced"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional["Mroot"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mroot.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Mfenced(BaseModel):
    class Meta:
        name = "mfenced"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List["Msubsup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List["Msup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List["Msub"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List["Mfenced"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Mfenced.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MfencedValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    open: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    close: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    separators: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional["Msubsup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional["Msup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional["Msub"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional["Mfenced"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mfenced.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Msub(BaseModel):
    class Meta:
        name = "msub"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msubsup: List["Msubsup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msup: List["Msup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msub: List["Msub"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    semantics: List["Msub.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MsubValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    subscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional["Msubsup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional["Msup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional["Msub"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Msub.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Msup(BaseModel):
    class Meta:
        name = "msup"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msubsup: List["Msubsup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msup: List["Msup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    semantics: List["Msup.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MsupValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    superscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional["Msubsup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional["Msup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Msup.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Msubsup(BaseModel):
    class Meta:
        name = "msubsup"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    msubsup: List["Msubsup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    semantics: List["Msubsup.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MsubsupValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    subscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    superscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional["Msubsup"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Msubsup.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Munder(BaseModel):
    class Meta:
        name = "munder"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munder: List["Munder"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    semantics: List["Munder.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MunderValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    accentunder: Optional[MunderAccentunder] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    align: Optional[MunderAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional["Munder"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Munder.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Mover(BaseModel):
    class Meta:
        name = "mover"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mover: List["Mover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    semantics: List["Mover.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MoverValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    accent: Optional[MoverAccent] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    align: Optional[MoverAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional["Mover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mover.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Munderover(BaseModel):
    class Meta:
        name = "munderover"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    munderover: List["Munderover"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    semantics: List["Munderover.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "max_occurs": 3,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MunderoverValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    accent: Optional[MunderoverAccent] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    accentunder: Optional[MunderoverAccentunder] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    align: Optional[MunderoverAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional["Munderover"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Munderover.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Mmultiscripts(BaseModel):
    class Meta:
        name = "mmultiscripts"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List["Mmultiscripts"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Mmultiscripts.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    none: List[NoneType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mprescripts: Optional[Mprescripts] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MmultiscriptsValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    subscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    superscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional["Mmultiscripts"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mmultiscripts.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Mstack(BaseModel):
    class Meta:
        name = "mstack"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List["Mstack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List[Mmultiscripts] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Mstack.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mscarries: List["Mscarries"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msline: List[Msline] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msrow: List["Msrow"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msgroup: List["Msgroup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MstackValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    align: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*(top|bottom|center|baseline|axis)(\s+-?[0-9]+)?\s*",
        },
    )
    stackalign: Optional[MstackStackalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charalign: Optional[MstackCharalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charspacing: Optional[Union[str, MstackValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional["Mstack"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional[Mmultiscripts] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mstack.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Mlongdiv(BaseModel):
    class Meta:
        name = "mlongdiv"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
            "sequence": 1,
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
            "sequence": 1,
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
            "sequence": 1,
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
            "sequence": 1,
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
            "sequence": 1,
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
            "sequence": 1,
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
            "sequence": 1,
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mlongdiv: List["Mlongdiv"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mstack: List[Mstack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mmultiscripts: List[Mmultiscripts] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "sequence": 1,
        },
    )
    semantics: List["Mlongdiv.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    mscarries: List["Mscarries"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    msline: List[Msline] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    msrow: List["Msrow"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    msgroup: List["Msgroup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 3,
            "sequence": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MlongdivValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    position: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    shift: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    longdivstyle: Optional[MlongdivLongdivstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional["Mlongdiv"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional[Mstack] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional[Mmultiscripts] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mlongdiv.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Maction(BaseModel):
    class Meta:
        name = "maction"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List["Maction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List[Mlongdiv] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List[Mstack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List[Mmultiscripts] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Maction.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MactionValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    actiontype: object = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    selection: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional["Maction"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional[Mlongdiv] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional[Mstack] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional[Mmultiscripts] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Maction.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Math(BaseModel):
    class Meta:
        name = "math"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List[Maction] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List[Mlongdiv] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List[Mstack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List[Mmultiscripts] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Math.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    scriptlevel: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    displaystyle: Optional[MathDisplaystyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    scriptsizemultiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    scriptminsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    infixlinebreakstyle: Optional[MathInfixlinebreakstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    decimalpoint: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*\S\s*",
        },
    )
    accent: Optional[MathAccent] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    accentunder: Optional[MathAccentunder] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    align: Optional[MathAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    alignmentscope: List[MathValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    bevelled: Optional[MathBevelled] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charalign: Optional[MathCharalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charspacing: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    close: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    columnalign: List[Columnalignstyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    columnlines: List[Linestyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    columnspacing: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "min_length": 1,
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
            "tokens": True,
        },
    )
    columnspan: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    columnwidth: List[MathValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    crossout: List[MathValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    denomalign: Optional[MathDenomalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    depth: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    dir: Optional[MathDir] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    edge: Optional[MathEdge] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    equalcolumns: Optional[MathEqualcolumns] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    equalrows: Optional[MathEqualrows] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    fence: Optional[MathFence] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    form: Optional[MathForm] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    frame: Optional[Linestyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    framespacing: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "length": 2,
            "tokens": True,
        },
    )
    groupalign: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"(\s*\{\s*(left|center|right|decimalpoint)(\s+(left|center|right|decimalpoint))*\})*\s*",
        },
    )
    height: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indentalign: Optional[MathIndentalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentalignfirst: Optional[MathIndentalignfirst] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentalignlast: Optional[MathIndentalignlast] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indentshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indentshiftfirst: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indentshiftlast: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    indenttarget: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    largeop: Optional[MathLargeop] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    leftoverhang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    length: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    linebreak: Optional[MathLinebreak] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    linebreakmultchar: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    linebreakstyle: Optional[MathLinebreakstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    lineleading: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    linethickness: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    location: Optional[MathLocation] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    longdivstyle: Optional[MathLongdivstyle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    lquote: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    lspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    mathsize: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    mathvariant: Optional[MathMathvariant] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    maxsize: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    minlabelspacing: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    minsize: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    movablelimits: Optional[MathMovablelimits] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mslinethickness: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    notation: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    numalign: Optional[MathNumalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    open: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    position: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rightoverhang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    rowalign: List[Verticalalign] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    rowlines: List[Linestyle] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    rowspacing: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "min_length": 1,
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
            "tokens": True,
        },
    )
    rowspan: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rquote: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rspace: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    selection: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    separator: Optional[MathSeparator] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    separators: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    shift: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    side: Optional[MathSide] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    stackalign: Optional[MathStackalign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    stretchy: Optional[MathStretchy] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    subscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    superscriptshift: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    symmetric: Optional[MathSymmetric] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    width: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    display: Optional[MathDisplay] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    maxwidth: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    overflow: Optional[MathOverflow] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    altimg: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    altimg_width: Optional[str] = field(
        default=None,
        metadata={
            "name": "altimg-width",
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    altimg_height: Optional[str] = field(
        default=None,
        metadata={
            "name": "altimg-height",
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    altimg_valign: Optional[Union[str, MathValue]] = field(
        default=None,
        metadata={
            "name": "altimg-valign",
            "type": "Attribute",
            "pattern": r"\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*",
        },
    )
    alttext: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    cdgroup: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mode_attribute: Optional[str] = field(
        default=None,
        metadata={
            "name": "mode",
            "type": "Attribute",
        },
    )
    macros: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional[Maction] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional[Mlongdiv] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional[Mstack] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional[Mmultiscripts] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Math.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Mscarry(BaseModel):
    class Meta:
        name = "mscarry"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List[Maction] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List[Mlongdiv] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List[Mstack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List[Mmultiscripts] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Mscarry.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    none: List[NoneType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MscarryValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    location: Optional[MscarryLocation] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    crossout: List[MscarryValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional[Maction] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional[Mlongdiv] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional[Mstack] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional[Mmultiscripts] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mscarry.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Msrow(BaseModel):
    class Meta:
        name = "msrow"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List[Maction] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List[Mlongdiv] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List[Mstack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List[Mmultiscripts] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Msrow.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    none: List[NoneType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MsrowValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    position: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional[Maction] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional[Mlongdiv] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional[Mstack] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional[Mmultiscripts] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Msrow.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Abbrev(BaseModel):
    """
    <div> <h3>Abbreviation or Acronym</h3> </div>
    """

    class Meta:
        name = "abbrev"

    model_config = ConfigDict(defer_build=True)
    alt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": ForwardRef("Alternatives"),
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": ForwardRef("Abbrev"),
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "def",
                    "type": ForwardRef("Def"),
                },
            ),
        },
    )


class Abstract(BaseModel):
    """
    <div> <h3>Abstract</h3> </div>
    """

    class Meta:
        name = "abstract"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    sec_meta: Optional["SecMeta"] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List["Address"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List["Alternatives"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List["Answer"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List["AnswerSet"] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List["Array"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List["BlockAlternatives"] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List["BoxedText"] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List["ChemStructWrap"] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List["Code"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List["Explanation"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List["Fig"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List["FigGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List["DispFormula"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List["DispFormulaGroup"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List["DefList"] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List["Ack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List["DispQuote"] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List["Notes"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List["FnGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List["Glossary"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    abstract_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "abstract-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Ack(BaseModel):
    """
    <div> <h3>Acknowledgments</h3> </div>
    """

    class Meta:
        name = "ack"

    model_config = ConfigDict(defer_build=True)
    sec_meta: Optional["SecMeta"] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List["Address"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List["Alternatives"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List["Answer"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List["AnswerSet"] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List["Array"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List["BlockAlternatives"] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List["BoxedText"] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List["ChemStructWrap"] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List["Code"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List["Explanation"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List["Fig"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List["FigGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List["DispFormula"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List["DispFormulaGroup"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List["DefList"] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List["Ack"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List["DispQuote"] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List["Notes"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List["FnGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List["Glossary"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Alternatives(BaseModel):
    """
    <div> <h3>Alternatives For Processing</h3> </div>
    """

    class Meta:
        name = "alternatives"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    array: List["Array"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    chem_struct: List["ChemStruct"] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct",
            "type": "Element",
        },
    )
    code: List["Code"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inline_graphic: List["InlineGraphic"] = field(
        default_factory=list,
        metadata={
            "name": "inline-graphic",
            "type": "Element",
        },
    )
    inline_media: List["InlineMedia"] = field(
        default_factory=list,
        metadata={
            "name": "inline-media",
            "type": "Element",
        },
    )
    inline_supplementary_material: List["InlineSupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "inline-supplementary-material",
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    private_char: List["PrivateChar"] = field(
        default_factory=list,
        metadata={
            "name": "private-char",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table: List["Table"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    textual_form: List["TextualForm"] = field(
        default_factory=list,
        metadata={
            "name": "textual-form",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Mscarries(BaseModel):
    class Meta:
        name = "mscarries"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List[Maction] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List[Mlongdiv] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List[Mstack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List[Mmultiscripts] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Mscarries.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    none: List[NoneType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mscarry: List[Mscarry] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MscarriesValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    position: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    location: Optional[MscarriesLocation] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    crossout: List[MscarriesValue] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    scriptsizemultiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional[Maction] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional[Mlongdiv] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional[Mstack] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional[Mmultiscripts] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Mscarries.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class AddrLine(BaseModel):
    """
    <div> <h3>Address Line</h3> </div>
    """

    class Meta:
        name = "addr-line"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": ForwardRef("Alternatives"),
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "city",
                    "type": City,
                },
                {
                    "name": "country",
                    "type": ForwardRef("Country"),
                },
                {
                    "name": "fax",
                    "type": ForwardRef("Fax"),
                },
                {
                    "name": "institution",
                    "type": ForwardRef("Institution"),
                },
                {
                    "name": "institution-wrap",
                    "type": ForwardRef("InstitutionWrap"),
                },
                {
                    "name": "phone",
                    "type": ForwardRef("Phone"),
                },
                {
                    "name": "postal-code",
                    "type": PostalCode,
                },
                {
                    "name": "state",
                    "type": State,
                },
            ),
        },
    )


class AltTitle(BaseModel):
    """
    <div> <h3>Alternate Title</h3> </div>
    """

    class Meta:
        name = "alt-title"

    model_config = ConfigDict(defer_build=True)
    alt_title_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "alt-title-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": ForwardRef("Alternatives"),
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Anonymous(BaseModel):
    """
    <div> <h3>Anonymous</h3> </div>
    """

    class Meta:
        name = "anonymous"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Array(BaseModel):
    """
    <div> <h3>Array (Simple Tabular Array)</h3> </div>
    """

    class Meta:
        name = "array"

    model_config = ConfigDict(defer_build=True)
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List["LongDesc"] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    email: List["Email"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List["ExtLink"] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tbody: Optional["Tbody"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    attrib: List["Attrib"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List["Permissions"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: ArrayOrientation = field(
        default=ArrayOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ArticleTitle(BaseModel):
    """
    <div> <h3>Article Title</h3> </div>
    """

    class Meta:
        name = "article-title"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Attrib(BaseModel):
    """
    <div> <h3>Attribution</h3> </div>
    """

    class Meta:
        name = "attrib"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class AwardId(BaseModel):
    """
    <div> <h3>Award Identifier</h3> </div>
    """

    class Meta:
        name = "award-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    award_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "award-id-type",
            "type": "Attribute",
        },
    )
    award_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "award-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Bold(BaseModel):
    """
    <div> <h3>Bold</h3> </div>
    """

    class Meta:
        name = "bold"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: Optional[BoldToggle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Msgroup(BaseModel):
    class Meta:
        name = "msgroup"
        namespace = "http://www.w3.org/1998/Math/MathML"

    model_config = ConfigDict(defer_build=True)
    apply: List[Apply] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bind: List[Bind] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ci: List[Ci] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cn: List[Cn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csymbol: List[Csymbol] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cbytes: List[Cbytes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cerror: List[Cerror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cs: List[Cs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    share: List[Share] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    piecewise: List[Piecewise] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    declare: List[Declare] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reln: List[Reln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    interval: List[Interval] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    moment: List[Moment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    log: List[Log] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ln: List[Ln] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    image: List[Image] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    codomain: List[Codomain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    domain: List[Domain] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ident: List[Ident] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inverse: List[Inverse] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lambda_value: List[Lambda] = field(
        default_factory=list,
        metadata={
            "name": "lambda",
            "type": "Element",
        },
    )
    compose: List[Compose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    quotient: List[Quotient] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divide: List[Divide] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    minus: List[Minus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    power: List[Power] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rem: List[Rem] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    root: List[Root] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorial: List[Factorial] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abs: List[Abs] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conjugate: List[Conjugate] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arg: List[Arg] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    real: List[Real] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginary: List[Imaginary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    floor: List[Floor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ceiling: List[Ceiling] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exp: List[Exp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    min: List[Min] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    max: List[Max] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lcm: List[Lcm] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gcd: List[Gcd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    times: List[Times] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    plus: List[Plus] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xor: List[Xor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    or_value: List[Or] = field(
        default_factory=list,
        metadata={
            "name": "or",
            "type": "Element",
        },
    )
    and_value: List[And] = field(
        default_factory=list,
        metadata={
            "name": "and",
            "type": "Element",
        },
    )
    not_value: List[Not] = field(
        default_factory=list,
        metadata={
            "name": "not",
            "type": "Element",
        },
    )
    equivalent: List[Equivalent] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    implies: List[Implies] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exists: List[Exists] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    forall: List[Forall] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    leq: List[Leq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    geq: List[Geq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lt: List[Lt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gt: List[Gt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eq: List[Eq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tendsto: List[Tendsto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    factorof: List[Factorof] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    approx: List[Approx] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    neq: List[Neq] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    int_value: List[Int] = field(
        default_factory=list,
        metadata={
            "name": "int",
            "type": "Element",
        },
    )
    diff: List[Diff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    partialdiff: List[Partialdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    laplacian: List[Laplacian] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    curl: List[Curl] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    grad: List[Grad] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    divergence: List[Divergence] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    list_value: List[List1] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    set: List[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cartesianproduct: List[Cartesianproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    intersect: List[Intersect] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    union: List[UnionType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    setdiff: List[Setdiff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notprsubset: List[Notprsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notsubset: List[Notsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notin: List[Notin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    in_value: List[In] = field(
        default_factory=list,
        metadata={
            "name": "in",
            "type": "Element",
        },
    )
    prsubset: List[Prsubset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    subset: List[Subset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    card: List[Card] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sum: List[Sum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    limit: List[Limit] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctanh: List[Arctanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsinh: List[Arcsinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsech: List[Arcsech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsec: List[Arcsec] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsch: List[Arccsch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccsc: List[Arccsc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccoth: List[Arccoth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccot: List[Arccot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccosh: List[Arccosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arctan: List[Arctan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arccos: List[Arccos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    arcsin: List[Arcsin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    coth: List[Coth] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csch: List[Csch] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sech: List[Sech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tanh: List[Tanh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cosh: List[Cosh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sinh: List[Sinh] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cot: List[Cot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    csc: List[Csc] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tan: List[Tan] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    cos: List[Cos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sin: List[Sin] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mode: List[Mode] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    median: List[Median] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    variance: List[Variance] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sdev: List[Sdev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mean: List[Mean] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrixrow: List[Matrixrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    matrix: List[Matrix] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vector: List[Vector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    transpose: List[Transpose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    determinant: List[Determinant] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    selector: List[Selector] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    outerproduct: List[Outerproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    scalarproduct: List[Scalarproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    vectorproduct: List[Vectorproduct] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    emptyset: List[Emptyset] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    primes: List[Primes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    complexes: List[Complexes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    naturalnumbers: List[Naturalnumbers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    rationals: List[Rationals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    reals: List[Reals] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    integers: List[Integers] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    infinity: List[Infinity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    eulergamma: List[Eulergamma] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pi: List[Pi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    false: List[FalseType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    true: List[TrueType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notanumber: List[Notanumber] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    imaginaryi: List[Imaginaryi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    exponentiale: List[Exponentiale] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maction: List[Maction] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mlongdiv: List[Mlongdiv] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstack: List[Mstack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtable: List[Mtable] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mmultiscripts: List[Mmultiscripts] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munderover: List[Munderover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mover: List[Mover] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    munder: List[Munder] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msubsup: List[Msubsup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msup: List[Msup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msub: List[Msub] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    menclose: List[Menclose] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfenced: List[Mfenced] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mphantom: List[Mphantom] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mpadded: List[Mpadded] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    merror: List[Merror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mstyle: List[Mstyle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mroot: List[Mroot] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msqrt: List[Msqrt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mfrac: List[Mfrac] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mrow: List[Mrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    maligngroup: List[Maligngroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    malignmark: List[Malignmark] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ms: List[Ms] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mspace: List[Mspace] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mtext: List[Mtext] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mo: List[Mo] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mn: List[Mn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mi: List[Mi] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    semantics: List["Msgroup.Semantics"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    mscarries: List[Mscarries] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msline: List[Msline] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msrow: List[Msrow] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    msgroup: List["Msgroup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    xref: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: List[str] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Attribute",
            "tokens": True,
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other: Optional[object] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )
    mathcolor: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    mathbackground: Optional[Union[str, MsgroupValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*",
        },
    )
    position: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    shift: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Semantics(BaseModel):
        model_config = ConfigDict(defer_build=True)
        apply: Optional[Apply] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        bind: Optional[Bind] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ci: Optional[Ci] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cn: Optional[Cn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csymbol: Optional[Csymbol] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cbytes: Optional[Cbytes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cerror: Optional[Cerror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cs: Optional[Cs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        share: Optional[Share] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        piecewise: Optional[Piecewise] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        declare: Optional[Declare] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        fn: Optional[Fn1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reln: Optional[Reln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        interval: Optional[Interval] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        moment: Optional[Moment] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        log: Optional[Log] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ln: Optional[Ln] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        image: Optional[Image] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        codomain: Optional[Codomain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        domain: Optional[Domain] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ident: Optional[Ident] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        inverse: Optional[Inverse] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lambda_value: Optional[Lambda] = field(
            default=None,
            metadata={
                "name": "lambda",
                "type": "Element",
            },
        )
        compose: Optional[Compose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        quotient: Optional[Quotient] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divide: Optional[Divide] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        minus: Optional[Minus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        power: Optional[Power] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rem: Optional[Rem] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        root: Optional[Root] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorial: Optional[Factorial] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        abs: Optional[Abs] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        conjugate: Optional[Conjugate] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arg: Optional[Arg] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        real: Optional[Real] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginary: Optional[Imaginary] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        floor: Optional[Floor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ceiling: Optional[Ceiling] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exp: Optional[Exp] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        min: Optional[Min] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        max: Optional[Max] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lcm: Optional[Lcm] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gcd: Optional[Gcd] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        times: Optional[Times] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        plus: Optional[Plus] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        xor: Optional[Xor] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        or_value: Optional[Or] = field(
            default=None,
            metadata={
                "name": "or",
                "type": "Element",
            },
        )
        and_value: Optional[And] = field(
            default=None,
            metadata={
                "name": "and",
                "type": "Element",
            },
        )
        not_value: Optional[Not] = field(
            default=None,
            metadata={
                "name": "not",
                "type": "Element",
            },
        )
        equivalent: Optional[Equivalent] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        implies: Optional[Implies] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exists: Optional[Exists] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        forall: Optional[Forall] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        leq: Optional[Leq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        geq: Optional[Geq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        lt: Optional[Lt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        gt: Optional[Gt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eq: Optional[Eq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tendsto: Optional[Tendsto] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        factorof: Optional[Factorof] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        approx: Optional[Approx] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        neq: Optional[Neq] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        int_value: Optional[Int] = field(
            default=None,
            metadata={
                "name": "int",
                "type": "Element",
            },
        )
        diff: Optional[Diff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        partialdiff: Optional[Partialdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        laplacian: Optional[Laplacian] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        curl: Optional[Curl] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        grad: Optional[Grad] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        divergence: Optional[Divergence] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        list_value: Optional[List1] = field(
            default=None,
            metadata={
                "name": "list",
                "type": "Element",
            },
        )
        set: Optional[Set] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cartesianproduct: Optional[Cartesianproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        intersect: Optional[Intersect] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        union: Optional[UnionType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        setdiff: Optional[Setdiff] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notprsubset: Optional[Notprsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notsubset: Optional[Notsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notin: Optional[Notin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        in_value: Optional[In] = field(
            default=None,
            metadata={
                "name": "in",
                "type": "Element",
            },
        )
        prsubset: Optional[Prsubset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        subset: Optional[Subset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        card: Optional[Card] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sum: Optional[Sum] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        product: Optional[Product1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        limit: Optional[Limit] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctanh: Optional[Arctanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsinh: Optional[Arcsinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsech: Optional[Arcsech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsec: Optional[Arcsec] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsch: Optional[Arccsch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccsc: Optional[Arccsc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccoth: Optional[Arccoth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccot: Optional[Arccot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccosh: Optional[Arccosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arctan: Optional[Arctan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arccos: Optional[Arccos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        arcsin: Optional[Arcsin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        coth: Optional[Coth] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csch: Optional[Csch] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sech: Optional[Sech] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tanh: Optional[Tanh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cosh: Optional[Cosh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sinh: Optional[Sinh] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cot: Optional[Cot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        csc: Optional[Csc] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sec: Optional[Sec1] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        tan: Optional[Tan] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        cos: Optional[Cos] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sin: Optional[Sin] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mode: Optional[Mode] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        median: Optional[Median] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        variance: Optional[Variance] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        sdev: Optional[Sdev] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mean: Optional[Mean] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrixrow: Optional[Matrixrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        matrix: Optional[Matrix] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vector: Optional[Vector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        transpose: Optional[Transpose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        determinant: Optional[Determinant] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        selector: Optional[Selector] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        outerproduct: Optional[Outerproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        scalarproduct: Optional[Scalarproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        vectorproduct: Optional[Vectorproduct] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        emptyset: Optional[Emptyset] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        primes: Optional[Primes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        complexes: Optional[Complexes] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        naturalnumbers: Optional[Naturalnumbers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        rationals: Optional[Rationals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        reals: Optional[Reals] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        integers: Optional[Integers] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        infinity: Optional[Infinity] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        eulergamma: Optional[Eulergamma] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        pi: Optional[Pi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        false: Optional[FalseType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        true: Optional[TrueType] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        notanumber: Optional[Notanumber] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        imaginaryi: Optional[Imaginaryi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        exponentiale: Optional[Exponentiale] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maction: Optional[Maction] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mlongdiv: Optional[Mlongdiv] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstack: Optional[Mstack] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtable: Optional[Mtable] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mmultiscripts: Optional[Mmultiscripts] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munderover: Optional[Munderover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mover: Optional[Mover] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        munder: Optional[Munder] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msubsup: Optional[Msubsup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msup: Optional[Msup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msub: Optional[Msub] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        menclose: Optional[Menclose] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfenced: Optional[Mfenced] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mphantom: Optional[Mphantom] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mpadded: Optional[Mpadded] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        merror: Optional[Merror] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mstyle: Optional[Mstyle] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mroot: Optional[Mroot] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        msqrt: Optional[Msqrt] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mfrac: Optional[Mfrac] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mrow: Optional[Mrow] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        maligngroup: Optional[Maligngroup] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        malignmark: Optional[Malignmark] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        ms: Optional[Ms] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mspace: Optional[Mspace] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mtext: Optional[Mtext] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mo: Optional[Mo] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mn: Optional[Mn] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        mi: Optional[Mi] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        semantics: Optional["Msgroup.Semantics"] = field(
            default=None,
            metadata={
                "type": "Element",
            },
        )
        annotation: List[Annotation1] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )
        annotation_xml: List[AnnotationXml] = field(
            default_factory=list,
            metadata={
                "name": "annotation-xml",
                "type": "Element",
            },
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        xref: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        class_value: List[str] = field(
            default_factory=list,
            metadata={
                "name": "class",
                "type": "Attribute",
                "tokens": True,
            },
        )
        style: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other: Optional[object] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )
        encoding: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        definition_url: Optional[str] = field(
            default=None,
            metadata={
                "name": "definitionURL",
                "type": "Attribute",
            },
        )
        cd: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )


class Address(BaseModel):
    """
    <div> <h3>Address/Contact Information</h3> </div>
    """

    class Meta:
        name = "address"

    model_config = ConfigDict(defer_build=True)
    addr_line: List[AddrLine] = field(
        default_factory=list,
        metadata={
            "name": "addr-line",
            "type": "Element",
        },
    )
    city: List[City] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    country: List["Country"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fax: List["Fax"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    institution: List["Institution"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    institution_wrap: List["InstitutionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "institution-wrap",
            "type": "Element",
        },
    )
    phone: List["Phone"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    postal_code: List[PostalCode] = field(
        default_factory=list,
        metadata={
            "name": "postal-code",
            "type": "Element",
        },
    )
    state: List[State] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    email: List["Email"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List["ExtLink"] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    label: List["Label"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Aff(BaseModel):
    """
    <div> <h3>Affiliation</h3> </div>
    """

    class Meta:
        name = "aff"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "addr-line",
                    "type": AddrLine,
                },
                {
                    "name": "city",
                    "type": City,
                },
                {
                    "name": "country",
                    "type": ForwardRef("Country"),
                },
                {
                    "name": "fax",
                    "type": ForwardRef("Fax"),
                },
                {
                    "name": "institution",
                    "type": ForwardRef("Institution"),
                },
                {
                    "name": "institution-wrap",
                    "type": ForwardRef("InstitutionWrap"),
                },
                {
                    "name": "phone",
                    "type": ForwardRef("Phone"),
                },
                {
                    "name": "postal-code",
                    "type": PostalCode,
                },
                {
                    "name": "state",
                    "type": State,
                },
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": ForwardRef("Bold"),
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": ForwardRef("Alternatives"),
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "label",
                    "type": ForwardRef("Label"),
                },
            ),
        },
    )


class ChapterTitle(BaseModel):
    """
    <div> <h3>Chapter Title in a Citation</h3> </div>
    """

    class Meta:
        name = "chapter-title"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class ChemStruct(BaseModel):
    """
    <div> <h3>Chemical Structure (Display)</h3> </div>
    """

    class Meta:
        name = "chem-struct"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "alt-text",
                    "type": AltText,
                },
                {
                    "name": "long-desc",
                    "type": ForwardRef("LongDesc"),
                },
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ForwardRef("ChemStruct"),
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "object-id",
                    "type": ObjectId,
                },
                {
                    "name": "label",
                    "type": ForwardRef("Label"),
                },
                {
                    "name": "def-list",
                    "type": ForwardRef("DefList"),
                },
                {
                    "name": "list",
                    "type": ForwardRef("List2"),
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "code",
                    "type": ForwardRef("Code"),
                },
                {
                    "name": "graphic",
                    "type": ForwardRef("Graphic"),
                },
                {
                    "name": "media",
                    "type": ForwardRef("Media"),
                },
                {
                    "name": "preformat",
                    "type": ForwardRef("Preformat"),
                },
            ),
        },
    )


class Code(BaseModel):
    """
    <div> <h3>Code Text</h3> </div>
    """

    class Meta:
        name = "code"

    model_config = ConfigDict(defer_build=True)
    code_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "code-type",
            "type": "Attribute",
        },
    )
    code_version: Optional[str] = field(
        default=None,
        metadata={
            "name": "code-version",
            "type": "Attribute",
        },
    )
    executable: Optional[CodeExecutable] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    language: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    language_version: Optional[str] = field(
        default=None,
        metadata={
            "name": "language-version",
            "type": "Attribute",
        },
    )
    orientation: CodeOrientation = field(
        default=CodeOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    platforms: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    position: CodePosition = field(
        default=CodePosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    space: SpaceValue = field(
        const=True,
        default=SpaceValue.PRESERVE,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
            ),
        },
    )


class ConfDate(BaseModel):
    """
    <div> <h3>Conference Date</h3> </div>
    """

    class Meta:
        name = "conf-date"

    model_config = ConfigDict(defer_build=True)
    calendar: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    iso_8601_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "iso-8601-date",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "era",
                    "type": Era,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class DataTitle(BaseModel):
    """
    <div> <h3>Data Title in a Citation</h3> </div>
    """

    class Meta:
        name = "data-title"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
            ),
        },
    )


class DateInCitation(BaseModel):
    """
    <div> <h3>Date Inside Citation</h3> </div>
    """

    class Meta:
        name = "date-in-citation"

    model_config = ConfigDict(defer_build=True)
    calendar: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    iso_8601_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "iso-8601-date",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "era",
                    "type": Era,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class AffAlternatives(BaseModel):
    """
    <div> <h3>Affiliation Alternatives</h3> </div>
    """

    class Meta:
        name = "aff-alternatives"

    model_config = ConfigDict(defer_build=True)
    aff: List[Aff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Answer(BaseModel):
    """
    <div> <h3>Answer Elements</h3> </div>
    """

    class Meta:
        name = "answer"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subtitle: List["Subtitle"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alt_title: List[AltTitle] = field(
        default_factory=list,
        metadata={
            "name": "alt-title",
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List["Answer"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List["AnswerSet"] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List["Array"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List["BlockAlternatives"] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List["BoxedText"] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List["ChemStructWrap"] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List["Code"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List["Fig"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List["FigGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List["DispFormula"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List["DispFormulaGroup"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List["DefList"] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List["DispQuote"] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List["Notes"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List["FnGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List["Glossary"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    explanation: List["Explanation"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pointer_to_question: List[str] = field(
        default_factory=list,
        metadata={
            "name": "pointer-to-question",
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ChemStructWrap(BaseModel):
    """
    <div> <h3>Chemical Structure Wrapper</h3> </div>
    """

    class Meta:
        name = "chem-struct-wrap"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    caption: Optional[Caption] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List["KwdGroup"] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List["SubjGroup"] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List["LongDesc"] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    email: List["Email"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List["ExtLink"] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    chem_struct: List[ChemStruct] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct",
            "type": "Element",
        },
    )
    code: List["Code"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    textual_form: List["TextualForm"] = field(
        default_factory=list,
        metadata={
            "name": "textual-form",
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List["Permissions"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: ChemStructWrapOrientation = field(
        default=ChemStructWrapOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: ChemStructWrapPosition = field(
        default=ChemStructWrapPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Comment(BaseModel):
    """
    <div> <h3>Comment in a Citation</h3> </div>
    """

    class Meta:
        name = "comment"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class ConfAcronym(BaseModel):
    """
    <div> <h3>Conference Acronym</h3> </div>
    """

    class Meta:
        name = "conf-acronym"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class ConfLoc(BaseModel):
    """
    <div> <h3>Conference Location</h3> </div>
    """

    class Meta:
        name = "conf-loc"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "addr-line",
                    "type": AddrLine,
                },
                {
                    "name": "city",
                    "type": City,
                },
                {
                    "name": "country",
                    "type": ForwardRef("Country"),
                },
                {
                    "name": "fax",
                    "type": ForwardRef("Fax"),
                },
                {
                    "name": "institution",
                    "type": ForwardRef("Institution"),
                },
                {
                    "name": "institution-wrap",
                    "type": ForwardRef("InstitutionWrap"),
                },
                {
                    "name": "phone",
                    "type": ForwardRef("Phone"),
                },
                {
                    "name": "postal-code",
                    "type": PostalCode,
                },
                {
                    "name": "state",
                    "type": State,
                },
            ),
        },
    )


class ConfName(BaseModel):
    """
    <div> <h3>Conference Name</h3> </div>
    """

    class Meta:
        name = "conf-name"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class ConfSponsor(BaseModel):
    """
    <div> <h3>Conference Sponsor</h3> </div>
    """

    class Meta:
        name = "conf-sponsor"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "institution",
                    "type": ForwardRef("Institution"),
                },
                {
                    "name": "institution-wrap",
                    "type": ForwardRef("InstitutionWrap"),
                },
            ),
        },
    )


class CopyrightStatement(BaseModel):
    """
    <div> <h3>Copyright Statement</h3> </div>
    """

    class Meta:
        name = "copyright-statement"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class DefHead(BaseModel):
    """
    <div> <h3>Definition List: Definition Head</h3> </div>
    """

    class Meta:
        name = "def-head"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Degrees(BaseModel):
    """
    <div> <h3>Degree(s)</h3> </div>
    """

    class Meta:
        name = "degrees"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class DispFormula(BaseModel):
    """
    <div> <h3>Formula, Display</h3> </div>
    """

    class Meta:
        name = "disp-formula"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "abstract",
                    "type": Abstract,
                },
                {
                    "name": "alt-text",
                    "type": AltText,
                },
                {
                    "name": "long-desc",
                    "type": ForwardRef("LongDesc"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "caption",
                    "type": Caption,
                },
                {
                    "name": "attrib",
                    "type": Attrib,
                },
                {
                    "name": "permissions",
                    "type": ForwardRef("Permissions"),
                },
                {
                    "name": "object-id",
                    "type": ObjectId,
                },
                {
                    "name": "kwd-group",
                    "type": ForwardRef("KwdGroup"),
                },
                {
                    "name": "subj-group",
                    "type": ForwardRef("SubjGroup"),
                },
                {
                    "name": "label",
                    "type": ForwardRef("Label"),
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "graphic",
                    "type": ForwardRef("Graphic"),
                },
                {
                    "name": "media",
                    "type": ForwardRef("Media"),
                },
                {
                    "name": "preformat",
                    "type": ForwardRef("Preformat"),
                },
            ),
        },
    )


class Edition(BaseModel):
    """
    <div> <h3>Edition Statement, Cited</h3> </div>
    """

    class Meta:
        name = "edition"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    designator: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Email(BaseModel):
    """
    <div> <h3>Email Address</h3> </div>
    """

    class Meta:
        name = "email"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class AnswerSet(BaseModel):
    """
    <div> <h3>Answer Set</h3> </div>
    """

    class Meta:
        name = "answer-set"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subtitle: List["Subtitle"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alt_title: List[AltTitle] = field(
        default_factory=list,
        metadata={
            "name": "alt-title",
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List["Explanation"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class DefList(BaseModel):
    """
    <div> <h3>Definition List</h3> </div>
    """

    class Meta:
        name = "def-list"

    model_config = ConfigDict(defer_build=True)
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    term_head: Optional["TermHead"] = field(
        default=None,
        metadata={
            "name": "term-head",
            "type": "Element",
        },
    )
    def_head: Optional[DefHead] = field(
        default=None,
        metadata={
            "name": "def-head",
            "type": "Element",
        },
    )
    def_item: List[DefItem] = field(
        default_factory=list,
        metadata={
            "name": "def-item",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    def_list: List["DefList"] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    continued_from: Optional[str] = field(
        default=None,
        metadata={
            "name": "continued-from",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    list_content: Optional[str] = field(
        default=None,
        metadata={
            "name": "list-content",
            "type": "Attribute",
        },
    )
    list_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "list-type",
            "type": "Attribute",
        },
    )
    prefix_word: Optional[str] = field(
        default=None,
        metadata={
            "name": "prefix-word",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class DispFormulaGroup(BaseModel):
    """
    <div> <h3>Formula, Display Group</h3> </div>
    """

    class Meta:
        name = "disp-formula-group"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    caption: Optional[Caption] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List["KwdGroup"] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List["SubjGroup"] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List["LongDesc"] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    email: List["Email"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List["ExtLink"] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List["DispFormulaGroup"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Etal(BaseModel):
    """
    <div> <h3>Et Al</h3> </div>
    """

    class Meta:
        name = "etal"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class ExtLink(BaseModel):
    """
    <div> <h3>External Link</h3> </div>
    """

    class Meta:
        name = "ext-link"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    ext_link_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ext-link-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Permissions(BaseModel):
    """
    <div> <h3>Permissions</h3> </div>
    """

    class Meta:
        name = "permissions"

    model_config = ConfigDict(defer_build=True)
    copyright_statement: List[CopyrightStatement] = field(
        default_factory=list,
        metadata={
            "name": "copyright-statement",
            "type": "Element",
        },
    )
    copyright_year: List[CopyrightYear] = field(
        default_factory=list,
        metadata={
            "name": "copyright-year",
            "type": "Element",
        },
    )
    copyright_holder: List[CopyrightHolder] = field(
        default_factory=list,
        metadata={
            "name": "copyright-holder",
            "type": "Element",
        },
    )
    free_to_read: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.niso.org/schemas/ali/1.0/",
        },
    )
    license: List[License] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Bio(BaseModel):
    """
    <div> <h3>Biography</h3> </div>
    """

    class Meta:
        name = "bio"

    model_config = ConfigDict(defer_build=True)
    sec_meta: Optional["SecMeta"] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List["BlockAlternatives"] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List["BoxedText"] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List["ChemStructWrap"] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List["Code"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List["Explanation"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List["Fig"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List["FigGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List["DispFormula"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List["DispFormulaGroup"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List["DefList"] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List["DispQuote"] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List["Notes"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List["FnGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List["Glossary"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title_attribute: Optional[str] = field(
        default=None,
        metadata={
            "name": "title",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class BoxedText(BaseModel):
    """
    <div> <h3>Boxed Text</h3> </div>
    """

    class Meta:
        name = "boxed-text"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    sec_meta: Optional["SecMeta"] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    caption: Optional["Caption"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List["BoxedText"] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List["ChemStructWrap"] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List["Code"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List["Explanation"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List["Fig"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List["FigGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List["DispFormula"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List["DispFormulaGroup"] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List["DefList"] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List["DispQuote"] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List["Notes"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List["FnGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List["Glossary"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List["Permissions"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: BoxedTextOrientation = field(
        default=BoxedTextOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: BoxedTextPosition = field(
        default=BoxedTextPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Fax(BaseModel):
    """
    <div> <h3>Fax Number: in an Address</h3> </div>
    """

    class Meta:
        name = "fax"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class FixedCase(BaseModel):
    """
    <div> <h3>Fixed Case</h3> </div>
    """

    class Meta:
        name = "fixed-case"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Graphic(BaseModel):
    """
    <div> <h3>Graphic</h3> </div>
    """

    class Meta:
        name = "graphic"

    model_config = ConfigDict(defer_build=True)
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List["LongDesc"] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    caption: List[Caption] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List["Permissions"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: List["Label"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List["KwdGroup"] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List["SubjGroup"] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    xref: List["Xref"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mime_subtype: Optional[str] = field(
        default=None,
        metadata={
            "name": "mime-subtype",
            "type": "Attribute",
        },
    )
    mimetype: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: GraphicOrientation = field(
        default=GraphicOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: GraphicPosition = field(
        default=GraphicPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: str = field(
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        }
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Collab(BaseModel):
    """
    <div> <h3>Collaborative (Group) Author</h3> </div>
    """

    class Meta:
        name = "collab"

    model_config = ConfigDict(defer_build=True)
    collab_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "collab-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    symbol: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "addr-line",
                    "type": AddrLine,
                },
                {
                    "name": "city",
                    "type": City,
                },
                {
                    "name": "country",
                    "type": ForwardRef("Country"),
                },
                {
                    "name": "fax",
                    "type": ForwardRef("Fax"),
                },
                {
                    "name": "institution",
                    "type": ForwardRef("Institution"),
                },
                {
                    "name": "institution-wrap",
                    "type": ForwardRef("InstitutionWrap"),
                },
                {
                    "name": "phone",
                    "type": ForwardRef("Phone"),
                },
                {
                    "name": "postal-code",
                    "type": PostalCode,
                },
                {
                    "name": "state",
                    "type": State,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "contrib-group",
                    "type": ForwardRef("ContribGroup"),
                },
                {
                    "name": "address",
                    "type": Address,
                },
                {
                    "name": "aff",
                    "type": Aff,
                },
                {
                    "name": "aff-alternatives",
                    "type": AffAlternatives,
                },
                {
                    "name": "author-comment",
                    "type": AuthorComment,
                },
                {
                    "name": "bio",
                    "type": Bio,
                },
                {
                    "name": "email",
                    "type": ForwardRef("Email"),
                },
                {
                    "name": "etal",
                    "type": ForwardRef("Etal"),
                },
                {
                    "name": "ext-link",
                    "type": ForwardRef("ExtLink"),
                },
                {
                    "name": "fn",
                    "type": ForwardRef("Fn2"),
                },
                {
                    "name": "on-behalf-of",
                    "type": ForwardRef("OnBehalfOf"),
                },
                {
                    "name": "role",
                    "type": ForwardRef("Role"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": ForwardRef("FixedCase"),
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class DispQuote(BaseModel):
    """
    <div> <h3>Quote, Displayed</h3> </div>
    """

    class Meta:
        name = "disp-quote"

    model_config = ConfigDict(defer_build=True)
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List["Explanation"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List["Fig"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List["FigGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List["DispQuote"] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List["Permissions"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class FundingSource(BaseModel):
    """
    <div> <h3>Funding Source</h3> </div>
    """

    class Meta:
        name = "funding-source"

    model_config = ConfigDict(defer_build=True)
    country: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    source_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "source-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "institution",
                    "type": ForwardRef("Institution"),
                },
                {
                    "name": "institution-wrap",
                    "type": ForwardRef("InstitutionWrap"),
                },
            ),
        },
    )


class GivenNames(BaseModel):
    """
    <div> <h3>Given (First) Names</h3> </div>
    """

    class Meta:
        name = "given-names"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    initials: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Gov(BaseModel):
    """
    <div> <h3>Government Report, Cited</h3> </div>
    """

    class Meta:
        name = "gov"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": ForwardRef("IndexTerm"),
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class InlineFormula(BaseModel):
    """
    <div> <h3>Formula, Inline</h3> </div>
    """

    class Meta:
        name = "inline-formula"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "alt-text",
                    "type": AltText,
                },
                {
                    "name": "long-desc",
                    "type": ForwardRef("LongDesc"),
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": ForwardRef("InlineGraphic"),
                },
                {
                    "name": "inline-media",
                    "type": ForwardRef("InlineMedia"),
                },
                {
                    "name": "private-char",
                    "type": ForwardRef("PrivateChar"),
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": ForwardRef("InlineFormula"),
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class InlineMedia(BaseModel):
    """
    <div> <h3>Inline Media Object</h3> </div>
    """

    class Meta:
        name = "inline-media"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mime_subtype: Optional[str] = field(
        default=None,
        metadata={
            "name": "mime-subtype",
            "type": "Attribute",
        },
    )
    mimetype: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: str = field(
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        }
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "alt-text",
                    "type": AltText,
                },
                {
                    "name": "long-desc",
                    "type": ForwardRef("LongDesc"),
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
            ),
        },
    )


class CollabAlternatives(BaseModel):
    """
    <div> <h3>Collaboration Alternatives</h3> </div>
    """

    class Meta:
        name = "collab-alternatives"

    model_config = ConfigDict(defer_build=True)
    collab: List[Collab] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Explanation(BaseModel):
    """
    <div> <h3>Explanation</h3> </div>
    """

    class Meta:
        name = "explanation"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subtitle: List["Subtitle"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alt_title: List[AltTitle] = field(
        default_factory=list,
        metadata={
            "name": "alt-title",
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List["Fig"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List["FigGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List["Notes"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List["FnGroup"] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List["Glossary"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pointer_to_explained: List[str] = field(
        default_factory=list,
        metadata={
            "name": "pointer-to-explained",
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Fig(BaseModel):
    """
    <div> <h3>Figure</h3> </div>
    """

    class Meta:
        name = "fig"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: List["Label"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    caption: List[Caption] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List["KwdGroup"] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List["SubjGroup"] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List["LongDesc"] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xref: List["Xref"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List["Permissions"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "fig-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: FigOrientation = field(
        default=FigOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: FigPosition = field(
        default=FigPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class InlineSupplementaryMaterial(BaseModel):
    """
    <div> <h3>Inline Supplementary Material</h3> </div>
    """

    class Meta:
        name = "inline-supplementary-material"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mime_subtype: Optional[str] = field(
        default=None,
        metadata={
            "name": "mime-subtype",
            "type": "Attribute",
        },
    )
    mimetype: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "alt-text",
                    "type": AltText,
                },
                {
                    "name": "long-desc",
                    "type": ForwardRef("LongDesc"),
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": ForwardRef("InlineSupplementaryMaterial"),
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Name(BaseModel):
    """
    <div> <h3>Name of Person (Structured)</h3> </div>
    """

    class Meta:
        name = "name"

    model_config = ConfigDict(defer_build=True)
    surname: "Surname" = field(
        metadata={
            "type": "Element",
            "required": True,
        }
    )
    given_names: List[GivenNames] = field(
        default_factory=list,
        metadata={
            "name": "given-names",
            "type": "Element",
            "min_occurs": 1,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    prefix: Optional["Prefix"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    suffix: Optional["Suffix"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    name_style: NameNameStyle = field(
        default=NameNameStyle.WESTERN,
        metadata={
            "name": "name-style",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Contrib(BaseModel):
    """
    <div> <h3>Contributor</h3> </div>
    """

    class Meta:
        name = "contrib"

    model_config = ConfigDict(defer_build=True)
    contrib_id: List[ContribId] = field(
        default_factory=list,
        metadata={
            "name": "contrib-id",
            "type": "Element",
        },
    )
    anonymous: List[Anonymous] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    collab: List[Collab] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    collab_alternatives: List[CollabAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "collab-alternatives",
            "type": "Element",
        },
    )
    name: List["Name"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    name_alternatives: List["NameAlternatives"] = field(
        default_factory=list,
        metadata={
            "name": "name-alternatives",
            "type": "Element",
        },
    )
    string_name: List["StringName"] = field(
        default_factory=list,
        metadata={
            "name": "string-name",
            "type": "Element",
        },
    )
    degrees: List["Degrees"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    aff: List[Aff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    aff_alternatives: List[AffAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "aff-alternatives",
            "type": "Element",
        },
    )
    author_comment: List[AuthorComment] = field(
        default_factory=list,
        metadata={
            "name": "author-comment",
            "type": "Element",
        },
    )
    bio: List[Bio] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    email: List["Email"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    etal: List["Etal"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List["ExtLink"] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    fn: List["Fn2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    on_behalf_of: List["OnBehalfOf"] = field(
        default_factory=list,
        metadata={
            "name": "on-behalf-of",
            "type": "Element",
        },
    )
    role: List["Role"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xref: List["Xref"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    contrib_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "contrib-type",
            "type": "Attribute",
        },
    )
    corresp: Optional[ContribCorresp] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    deceased: Optional[ContribDeceased] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    equal_contrib: Optional[ContribEqualContrib] = field(
        default=None,
        metadata={
            "name": "equal-contrib",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role_attribute: Optional[str] = field(
        default=None,
        metadata={
            "name": "role",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ElementCitation(BaseModel):
    """
    <div> <h3>Element Citation</h3> </div>
    """

    class Meta:
        name = "element-citation"

    model_config = ConfigDict(defer_build=True)
    inline_supplementary_material: List["InlineSupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "inline-supplementary-material",
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    hr: List[Hr] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bold: List[Bold] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fixed_case: List["FixedCase"] = field(
        default_factory=list,
        metadata={
            "name": "fixed-case",
            "type": "Element",
        },
    )
    italic: List["Italic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    monospace: List["Monospace"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    overline: List["Overline"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    overline_start: List[OverlineStart] = field(
        default_factory=list,
        metadata={
            "name": "overline-start",
            "type": "Element",
        },
    )
    overline_end: List[OverlineEnd] = field(
        default_factory=list,
        metadata={
            "name": "overline-end",
            "type": "Element",
        },
    )
    roman: List["Roman"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sans_serif: List["SansSerif"] = field(
        default_factory=list,
        metadata={
            "name": "sans-serif",
            "type": "Element",
        },
    )
    sc: List["Sc"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    strike: List["Strike"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    underline: List["Underline"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    underline_start: List[UnderlineStart] = field(
        default_factory=list,
        metadata={
            "name": "underline-start",
            "type": "Element",
        },
    )
    underline_end: List[UnderlineEnd] = field(
        default_factory=list,
        metadata={
            "name": "underline-end",
            "type": "Element",
        },
    )
    ruby: List["Ruby"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    inline_graphic: List["InlineGraphic"] = field(
        default_factory=list,
        metadata={
            "name": "inline-graphic",
            "type": "Element",
        },
    )
    inline_media: List["InlineMedia"] = field(
        default_factory=list,
        metadata={
            "name": "inline-media",
            "type": "Element",
        },
    )
    private_char: List["PrivateChar"] = field(
        default_factory=list,
        metadata={
            "name": "private-char",
            "type": "Element",
        },
    )
    chem_struct: List[ChemStruct] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct",
            "type": "Element",
        },
    )
    inline_formula: List["InlineFormula"] = field(
        default_factory=list,
        metadata={
            "name": "inline-formula",
            "type": "Element",
        },
    )
    label: List["Label"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    abbrev: List[Abbrev] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    index_term: List["IndexTerm"] = field(
        default_factory=list,
        metadata={
            "name": "index-term",
            "type": "Element",
        },
    )
    index_term_range_end: List[IndexTermRangeEnd] = field(
        default_factory=list,
        metadata={
            "name": "index-term-range-end",
            "type": "Element",
        },
    )
    milestone_end: List[MilestoneEnd] = field(
        default_factory=list,
        metadata={
            "name": "milestone-end",
            "type": "Element",
        },
    )
    milestone_start: List[MilestoneStart] = field(
        default_factory=list,
        metadata={
            "name": "milestone-start",
            "type": "Element",
        },
    )
    named_content: List["NamedContent"] = field(
        default_factory=list,
        metadata={
            "name": "named-content",
            "type": "Element",
        },
    )
    styled_content: List["StyledContent"] = field(
        default_factory=list,
        metadata={
            "name": "styled-content",
            "type": "Element",
        },
    )
    annotation: List[Annotation2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    article_title: List[ArticleTitle] = field(
        default_factory=list,
        metadata={
            "name": "article-title",
            "type": "Element",
        },
    )
    chapter_title: List[ChapterTitle] = field(
        default_factory=list,
        metadata={
            "name": "chapter-title",
            "type": "Element",
        },
    )
    collab: List[Collab] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    collab_alternatives: List[CollabAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "collab-alternatives",
            "type": "Element",
        },
    )
    comment: List[Comment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    conf_acronym: List[ConfAcronym] = field(
        default_factory=list,
        metadata={
            "name": "conf-acronym",
            "type": "Element",
        },
    )
    conf_date: List[ConfDate] = field(
        default_factory=list,
        metadata={
            "name": "conf-date",
            "type": "Element",
        },
    )
    conf_loc: List[ConfLoc] = field(
        default_factory=list,
        metadata={
            "name": "conf-loc",
            "type": "Element",
        },
    )
    conf_name: List[ConfName] = field(
        default_factory=list,
        metadata={
            "name": "conf-name",
            "type": "Element",
        },
    )
    conf_sponsor: List[ConfSponsor] = field(
        default_factory=list,
        metadata={
            "name": "conf-sponsor",
            "type": "Element",
        },
    )
    data_title: List[DataTitle] = field(
        default_factory=list,
        metadata={
            "name": "data-title",
            "type": "Element",
        },
    )
    date: List[Date] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    date_in_citation: List[DateInCitation] = field(
        default_factory=list,
        metadata={
            "name": "date-in-citation",
            "type": "Element",
        },
    )
    day: List[Day] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    edition: List[Edition] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    email: List["Email"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    elocation_id: List[ElocationId] = field(
        default_factory=list,
        metadata={
            "name": "elocation-id",
            "type": "Element",
        },
    )
    etal: List["Etal"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List["ExtLink"] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    fpage: List[Fpage] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    gov: List["Gov"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    institution: List["Institution"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    institution_wrap: List["InstitutionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "institution-wrap",
            "type": "Element",
        },
    )
    isbn: List["Isbn"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    issn: List["Issn"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    issn_l: List["IssnL"] = field(
        default_factory=list,
        metadata={
            "name": "issn-l",
            "type": "Element",
        },
    )
    issue: List["Issue"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    issue_id: List[IssueId] = field(
        default_factory=list,
        metadata={
            "name": "issue-id",
            "type": "Element",
        },
    )
    issue_part: List["IssuePart"] = field(
        default_factory=list,
        metadata={
            "name": "issue-part",
            "type": "Element",
        },
    )
    issue_title: List["IssueTitle"] = field(
        default_factory=list,
        metadata={
            "name": "issue-title",
            "type": "Element",
        },
    )
    lpage: List[Lpage] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    month: List[Month] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    name: List["Name"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    name_alternatives: List["NameAlternatives"] = field(
        default_factory=list,
        metadata={
            "name": "name-alternatives",
            "type": "Element",
        },
    )
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    page_range: List[PageRange] = field(
        default_factory=list,
        metadata={
            "name": "page-range",
            "type": "Element",
        },
    )
    part_title: List["PartTitle"] = field(
        default_factory=list,
        metadata={
            "name": "part-title",
            "type": "Element",
        },
    )
    patent: List["Patent"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    person_group: List["PersonGroup"] = field(
        default_factory=list,
        metadata={
            "name": "person-group",
            "type": "Element",
        },
    )
    pub_id: List[PubId] = field(
        default_factory=list,
        metadata={
            "name": "pub-id",
            "type": "Element",
        },
    )
    publisher_loc: List["PublisherLoc"] = field(
        default_factory=list,
        metadata={
            "name": "publisher-loc",
            "type": "Element",
        },
    )
    publisher_name: List["PublisherName"] = field(
        default_factory=list,
        metadata={
            "name": "publisher-name",
            "type": "Element",
        },
    )
    role: List["Role"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    season: List[Season] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    series: List["Series"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    size: List["Size"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    source: List["Source"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    std: List["Std"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    string_date: List["StringDate"] = field(
        default_factory=list,
        metadata={
            "name": "string-date",
            "type": "Element",
        },
    )
    string_name: List["StringName"] = field(
        default_factory=list,
        metadata={
            "name": "string-name",
            "type": "Element",
        },
    )
    supplement: List["Supplement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    trans_source: List["TransSource"] = field(
        default_factory=list,
        metadata={
            "name": "trans-source",
            "type": "Element",
        },
    )
    trans_title: List["TransTitle"] = field(
        default_factory=list,
        metadata={
            "name": "trans-title",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    version: List["Version"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    volume: List["Volume"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    volume_id: List["VolumeId"] = field(
        default_factory=list,
        metadata={
            "name": "volume-id",
            "type": "Element",
        },
    )
    volume_series: List["VolumeSeries"] = field(
        default_factory=list,
        metadata={
            "name": "volume-series",
            "type": "Element",
        },
    )
    year: List[Year] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List["Fn2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    target: List["Target"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xref: List["Xref"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sub: List["Sub"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sup: List["Sup"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    publication_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-format",
            "type": "Attribute",
        },
    )
    publication_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-type",
            "type": "Attribute",
        },
    )
    publisher_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "publisher-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    use_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "use-type",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role_attribute: Optional[str] = field(
        default=None,
        metadata={
            "name": "role",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class FigGroup(BaseModel):
    """
    <div> <h3>Figure Group</h3> </div>
    """

    class Meta:
        name = "fig-group"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: List["Label"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    caption: List[Caption] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List["KwdGroup"] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List["SubjGroup"] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List["LongDesc"] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    xref: List["Xref"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: FigGroupOrientation = field(
        default=FigGroupOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: FigGroupPosition = field(
        default=FigGroupPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Institution(BaseModel):
    """
    <div> <h3>Institution Name: in an Address</h3> </div>
    """

    class Meta:
        name = "institution"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Issue(BaseModel):
    """
    <div> <h3>Issue Number</h3> </div>
    """

    class Meta:
        name = "issue"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    seq: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class IssuePart(BaseModel):
    """
    <div> <h3>Issue Part</h3> </div>
    """

    class Meta:
        name = "issue-part"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class IssueTitle(BaseModel):
    """
    <div> <h3>Issue Title</h3> </div>
    """

    class Meta:
        name = "issue-title"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Italic(BaseModel):
    """
    <div> <h3>Italic</h3> </div>
    """

    class Meta:
        name = "italic"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: ItalicToggle = field(
        default=ItalicToggle.YES,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": ForwardRef("Italic"),
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class NameAlternatives(BaseModel):
    """
    <div> <h3>Name Alternatives</h3> </div>
    """

    class Meta:
        name = "name-alternatives"

    model_config = ConfigDict(defer_build=True)
    name: List[Name] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    string_name: List["StringName"] = field(
        default_factory=list,
        metadata={
            "name": "string-name",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ContribGroup(BaseModel):
    """
    <div> <h3>Contributor Group</h3> </div>
    """

    class Meta:
        name = "contrib-group"

    model_config = ConfigDict(defer_build=True)
    contrib: List[Contrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    aff: List[Aff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    aff_alternatives: List[AffAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "aff-alternatives",
            "type": "Element",
        },
    )
    author_comment: List[AuthorComment] = field(
        default_factory=list,
        metadata={
            "name": "author-comment",
            "type": "Element",
        },
    )
    bio: List[Bio] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    email: List["Email"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    etal: List["Etal"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List["ExtLink"] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    fn: List["Fn2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    on_behalf_of: List["OnBehalfOf"] = field(
        default_factory=list,
        metadata={
            "name": "on-behalf-of",
            "type": "Element",
        },
    )
    role: List["Role"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xref: List["Xref"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Glossary(BaseModel):
    """
    <div> <h3>Glossary Elements</h3> </div>
    """

    class Meta:
        name = "glossary"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List["Graphic"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List["Media"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List["List2"] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    glossary: List["Glossary"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class InstitutionWrap(BaseModel):
    """
    <div> <h3>Institution Wrapper</h3> </div>
    """

    class Meta:
        name = "institution-wrap"

    model_config = ConfigDict(defer_build=True)
    institution: List[Institution] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    institution_id: List[InstitutionId] = field(
        default_factory=list,
        metadata={
            "name": "institution-id",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Kwd(BaseModel):
    """
    <div> <h3>Keyword</h3> </div>
    """

    class Meta:
        name = "kwd"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Label(BaseModel):
    """
    <div> <h3>Label of a Figure, Reference, Etc.</h3> </div>
    """

    class Meta:
        name = "label"

    model_config = ConfigDict(defer_build=True)
    alt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Monospace(BaseModel):
    """
    <div> <h3>Monospace Text (Typewriter Text)</h3> </div>
    """

    class Meta:
        name = "monospace"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: Optional[MonospaceToggle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class NlmCitation(BaseModel):
    """
    <div> <h3>Nlm Citation Model</h3> </div>
    """

    class Meta:
        name = "nlm-citation"

    model_config = ConfigDict(defer_build=True)
    person_group: List["PersonGroup"] = field(
        default_factory=list,
        metadata={
            "name": "person-group",
            "type": "Element",
        },
    )
    collab: List[Collab] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    article_title: List[ArticleTitle] = field(
        default_factory=list,
        metadata={
            "name": "article-title",
            "type": "Element",
        },
    )
    trans_title: List["TransTitle"] = field(
        default_factory=list,
        metadata={
            "name": "trans-title",
            "type": "Element",
        },
    )
    source: Optional["Source"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    patent: Optional["Patent"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    trans_source: Optional["TransSource"] = field(
        default=None,
        metadata={
            "name": "trans-source",
            "type": "Element",
        },
    )
    year: Optional[Year] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    month: Optional[Month] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    day: Optional[Day] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    time_stamp: Optional["TimeStamp"] = field(
        default=None,
        metadata={
            "name": "time-stamp",
            "type": "Element",
        },
    )
    season: Optional[Season] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    access_date: Optional[AccessDate] = field(
        default=None,
        metadata={
            "name": "access-date",
            "type": "Element",
        },
    )
    volume: Optional["Volume"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    edition: Optional[Edition] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    conf_name: Optional[ConfName] = field(
        default=None,
        metadata={
            "name": "conf-name",
            "type": "Element",
        },
    )
    conf_date: Optional[ConfDate] = field(
        default=None,
        metadata={
            "name": "conf-date",
            "type": "Element",
        },
    )
    conf_loc: Optional[ConfLoc] = field(
        default=None,
        metadata={
            "name": "conf-loc",
            "type": "Element",
        },
    )
    issue: List[Issue] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    supplement: List["Supplement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    publisher_loc: Optional["PublisherLoc"] = field(
        default=None,
        metadata={
            "name": "publisher-loc",
            "type": "Element",
        },
    )
    publisher_name: Optional["PublisherName"] = field(
        default=None,
        metadata={
            "name": "publisher-name",
            "type": "Element",
        },
    )
    fpage: List[Fpage] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    lpage: List[Lpage] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    page_count: Optional[PageCount] = field(
        default=None,
        metadata={
            "name": "page-count",
            "type": "Element",
        },
    )
    series: Optional["Series"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    comment: List[Comment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    pub_id: List[PubId] = field(
        default_factory=list,
        metadata={
            "name": "pub-id",
            "type": "Element",
        },
    )
    annotation: Optional[Annotation2] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    publication_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-format",
            "type": "Attribute",
        },
    )
    publication_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-type",
            "type": "Attribute",
        },
    )
    publisher_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "publisher-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class PersonGroup(BaseModel):
    """
    <div> <h3>Person Group For a Cited Publication</h3> </div>
    """

    class Meta:
        name = "person-group"

    model_config = ConfigDict(defer_build=True)
    custom_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "custom-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    person_group_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "person-group-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "anonymous",
                    "type": Anonymous,
                },
                {
                    "name": "collab",
                    "type": Collab,
                },
                {
                    "name": "collab-alternatives",
                    "type": CollabAlternatives,
                },
                {
                    "name": "name",
                    "type": Name,
                },
                {
                    "name": "name-alternatives",
                    "type": NameAlternatives,
                },
                {
                    "name": "string-name",
                    "type": ForwardRef("StringName"),
                },
                {
                    "name": "aff",
                    "type": Aff,
                },
                {
                    "name": "aff-alternatives",
                    "type": AffAlternatives,
                },
                {
                    "name": "etal",
                    "type": Etal,
                },
                {
                    "name": "role",
                    "type": ForwardRef("Role"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class List2(BaseModel):
    """
    <div> <h3>List</h3> </div>
    """

    class Meta:
        name = "list"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    list_item: List["ListItem"] = field(
        default_factory=list,
        metadata={
            "name": "list-item",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    continued_from: Optional[str] = field(
        default=None,
        metadata={
            "name": "continued-from",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    list_content: Optional[str] = field(
        default=None,
        metadata={
            "name": "list-content",
            "type": "Attribute",
        },
    )
    list_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "list-type",
            "type": "Attribute",
        },
    )
    prefix_word: Optional[str] = field(
        default=None,
        metadata={
            "name": "prefix-word",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class MixedCitation(BaseModel):
    """
    <div> <h3>Mixed Citation</h3> </div>
    """

    class Meta:
        name = "mixed-citation"

    model_config = ConfigDict(defer_build=True)
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    publication_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-format",
            "type": "Attribute",
        },
    )
    publication_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-type",
            "type": "Attribute",
        },
    )
    publisher_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "publisher-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    use_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "use-type",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": ForwardRef("Monospace"),
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "label",
                    "type": Label,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "annotation",
                    "type": Annotation2,
                },
                {
                    "name": "article-title",
                    "type": ArticleTitle,
                },
                {
                    "name": "chapter-title",
                    "type": ChapterTitle,
                },
                {
                    "name": "collab",
                    "type": Collab,
                },
                {
                    "name": "collab-alternatives",
                    "type": CollabAlternatives,
                },
                {
                    "name": "comment",
                    "type": Comment,
                },
                {
                    "name": "conf-acronym",
                    "type": ConfAcronym,
                },
                {
                    "name": "conf-date",
                    "type": ConfDate,
                },
                {
                    "name": "conf-loc",
                    "type": ConfLoc,
                },
                {
                    "name": "conf-name",
                    "type": ConfName,
                },
                {
                    "name": "conf-sponsor",
                    "type": ConfSponsor,
                },
                {
                    "name": "data-title",
                    "type": DataTitle,
                },
                {
                    "name": "date",
                    "type": Date,
                },
                {
                    "name": "date-in-citation",
                    "type": DateInCitation,
                },
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "edition",
                    "type": Edition,
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "elocation-id",
                    "type": ElocationId,
                },
                {
                    "name": "etal",
                    "type": Etal,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "fpage",
                    "type": Fpage,
                },
                {
                    "name": "gov",
                    "type": Gov,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
                {
                    "name": "isbn",
                    "type": Isbn,
                },
                {
                    "name": "issn",
                    "type": Issn,
                },
                {
                    "name": "issn-l",
                    "type": IssnL,
                },
                {
                    "name": "issue",
                    "type": Issue,
                },
                {
                    "name": "issue-id",
                    "type": IssueId,
                },
                {
                    "name": "issue-part",
                    "type": IssuePart,
                },
                {
                    "name": "issue-title",
                    "type": IssueTitle,
                },
                {
                    "name": "lpage",
                    "type": Lpage,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "name",
                    "type": ForwardRef("Name"),
                },
                {
                    "name": "name-alternatives",
                    "type": ForwardRef("NameAlternatives"),
                },
                {
                    "name": "object-id",
                    "type": ObjectId,
                },
                {
                    "name": "page-range",
                    "type": PageRange,
                },
                {
                    "name": "part-title",
                    "type": ForwardRef("PartTitle"),
                },
                {
                    "name": "patent",
                    "type": ForwardRef("Patent"),
                },
                {
                    "name": "person-group",
                    "type": ForwardRef("PersonGroup"),
                },
                {
                    "name": "pub-id",
                    "type": PubId,
                },
                {
                    "name": "publisher-loc",
                    "type": ForwardRef("PublisherLoc"),
                },
                {
                    "name": "publisher-name",
                    "type": ForwardRef("PublisherName"),
                },
                {
                    "name": "role",
                    "type": ForwardRef("Role"),
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "series",
                    "type": ForwardRef("Series"),
                },
                {
                    "name": "size",
                    "type": ForwardRef("Size"),
                },
                {
                    "name": "source",
                    "type": ForwardRef("Source"),
                },
                {
                    "name": "std",
                    "type": ForwardRef("Std"),
                },
                {
                    "name": "string-date",
                    "type": ForwardRef("StringDate"),
                },
                {
                    "name": "string-name",
                    "type": ForwardRef("StringName"),
                },
                {
                    "name": "supplement",
                    "type": ForwardRef("Supplement"),
                },
                {
                    "name": "trans-source",
                    "type": ForwardRef("TransSource"),
                },
                {
                    "name": "trans-title",
                    "type": ForwardRef("TransTitle"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "version",
                    "type": ForwardRef("Version"),
                },
                {
                    "name": "volume",
                    "type": ForwardRef("Volume"),
                },
                {
                    "name": "volume-id",
                    "type": ForwardRef("VolumeId"),
                },
                {
                    "name": "volume-series",
                    "type": ForwardRef("VolumeSeries"),
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class NestedKwd(BaseModel):
    """
    <div> <h3>Nested Keyword</h3> </div>
    """

    class Meta:
        name = "nested-kwd"

    model_config = ConfigDict(defer_build=True)
    kwd: List[Kwd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    compound_kwd: List[CompoundKwd] = field(
        default_factory=list,
        metadata={
            "name": "compound-kwd",
            "type": "Element",
        },
    )
    nested_kwd: List["NestedKwd"] = field(
        default_factory=list,
        metadata={
            "name": "nested-kwd",
            "type": "Element",
        },
    )
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Note(BaseModel):
    """
    <div> <h3>Note in a Reference List</h3> </div>
    """

    class Meta:
        name = "note"

    model_config = ConfigDict(defer_build=True)
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List["Product2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class KwdGroup(BaseModel):
    """
    <div> <h3>Keyword Group</h3> </div>
    """

    class Meta:
        name = "kwd-group"

    model_config = ConfigDict(defer_build=True)
    label: Optional["Label"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    kwd: List[Kwd] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    compound_kwd: List[CompoundKwd] = field(
        default_factory=list,
        metadata={
            "name": "compound-kwd",
            "type": "Element",
        },
    )
    nested_kwd: List[NestedKwd] = field(
        default_factory=list,
        metadata={
            "name": "nested-kwd",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    unstructured_kwd_group: List["UnstructuredKwdGroup"] = field(
        default_factory=list,
        metadata={
            "name": "unstructured-kwd-group",
            "type": "Element",
        },
    )
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    kwd_group_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "kwd-group-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Media(BaseModel):
    """
    <div> <h3>Media Object</h3> </div>
    """

    class Meta:
        name = "media"

    model_config = ConfigDict(defer_build=True)
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List[LongDesc] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List["Uri"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    caption: List[Caption] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List[Permissions] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: List[Label] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List["SubjGroup"] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    xref: List["Xref"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mime_subtype: Optional[str] = field(
        default=None,
        metadata={
            "name": "mime-subtype",
            "type": "Attribute",
        },
    )
    mimetype: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: MediaOrientation = field(
        default=MediaOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: MediaPosition = field(
        default=MediaPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: str = field(
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        }
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class NamedContent(BaseModel):
    """
    <div> <h3>Named Special (Subject) Content</h3> </div>
    """

    class Meta:
        name = "named-content"

    model_config = ConfigDict(defer_build=True)
    alt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: str = field(
        metadata={
            "name": "content-type",
            "type": "Attribute",
            "required": True,
        }
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": ForwardRef("NamedContent"),
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "address",
                    "type": Address,
                },
                {
                    "name": "answer",
                    "type": Answer,
                },
                {
                    "name": "answer-set",
                    "type": AnswerSet,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "block-alternatives",
                    "type": BlockAlternatives,
                },
                {
                    "name": "boxed-text",
                    "type": BoxedText,
                },
                {
                    "name": "chem-struct-wrap",
                    "type": ChemStructWrap,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "explanation",
                    "type": Explanation,
                },
                {
                    "name": "fig",
                    "type": Fig,
                },
                {
                    "name": "fig-group",
                    "type": FigGroup,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": ForwardRef("Preformat"),
                },
                {
                    "name": "question",
                    "type": ForwardRef("Question"),
                },
                {
                    "name": "question-wrap",
                    "type": ForwardRef("QuestionWrap"),
                },
                {
                    "name": "question-wrap-group",
                    "type": ForwardRef("QuestionWrapGroup"),
                },
                {
                    "name": "supplementary-material",
                    "type": ForwardRef("SupplementaryMaterial"),
                },
                {
                    "name": "table-wrap",
                    "type": ForwardRef("TableWrap"),
                },
                {
                    "name": "table-wrap-group",
                    "type": ForwardRef("TableWrapGroup"),
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "def-list",
                    "type": DefList,
                },
                {
                    "name": "list",
                    "type": List2,
                },
                {
                    "name": "ack",
                    "type": Ack,
                },
                {
                    "name": "disp-quote",
                    "type": DispQuote,
                },
                {
                    "name": "speech",
                    "type": ForwardRef("Speech"),
                },
                {
                    "name": "statement",
                    "type": ForwardRef("Statement"),
                },
                {
                    "name": "verse-group",
                    "type": ForwardRef("VerseGroup"),
                },
            ),
        },
    )


class Notes(BaseModel):
    """
    <div> <h3>Notes</h3> </div>
    """

    class Meta:
        name = "notes"

    model_config = ConfigDict(defer_build=True)
    sec_meta: Optional["SecMeta"] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List["Notes"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List[Glossary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    notes_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "notes-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Option(BaseModel):
    """
    <div> <h3>Option Elements</h3> </div>
    """

    class Meta:
        name = "option"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subtitle: List["Subtitle"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alt_title: List[AltTitle] = field(
        default_factory=list,
        metadata={
            "name": "alt-title",
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List["Preformat"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List["P"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List[Glossary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    correct: Optional[OptionCorrect] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Overline(BaseModel):
    """
    <div> <h3>Overline</h3> </div>
    """

    class Meta:
        name = "overline"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: Optional[OverlineToggle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": ForwardRef("Overline"),
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class P(BaseModel):
    """
    <div> <h3>Paragraph</h3> </div>
    """

    class Meta:
        name = "p"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "address",
                    "type": Address,
                },
                {
                    "name": "answer",
                    "type": Answer,
                },
                {
                    "name": "answer-set",
                    "type": AnswerSet,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "block-alternatives",
                    "type": BlockAlternatives,
                },
                {
                    "name": "boxed-text",
                    "type": BoxedText,
                },
                {
                    "name": "chem-struct-wrap",
                    "type": ChemStructWrap,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "explanation",
                    "type": Explanation,
                },
                {
                    "name": "fig",
                    "type": Fig,
                },
                {
                    "name": "fig-group",
                    "type": FigGroup,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": ForwardRef("Preformat"),
                },
                {
                    "name": "question",
                    "type": ForwardRef("Question"),
                },
                {
                    "name": "question-wrap",
                    "type": ForwardRef("QuestionWrap"),
                },
                {
                    "name": "question-wrap-group",
                    "type": ForwardRef("QuestionWrapGroup"),
                },
                {
                    "name": "supplementary-material",
                    "type": ForwardRef("SupplementaryMaterial"),
                },
                {
                    "name": "table-wrap",
                    "type": ForwardRef("TableWrap"),
                },
                {
                    "name": "table-wrap-group",
                    "type": ForwardRef("TableWrapGroup"),
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "citation-alternatives",
                    "type": CitationAlternatives,
                },
                {
                    "name": "element-citation",
                    "type": ElementCitation,
                },
                {
                    "name": "mixed-citation",
                    "type": MixedCitation,
                },
                {
                    "name": "nlm-citation",
                    "type": NlmCitation,
                },
                {
                    "name": "award-id",
                    "type": AwardId,
                },
                {
                    "name": "funding-source",
                    "type": FundingSource,
                },
                {
                    "name": "open-access",
                    "type": OpenAccess,
                },
                {
                    "name": "def-list",
                    "type": DefList,
                },
                {
                    "name": "list",
                    "type": List2,
                },
                {
                    "name": "ack",
                    "type": Ack,
                },
                {
                    "name": "disp-quote",
                    "type": DispQuote,
                },
                {
                    "name": "speech",
                    "type": ForwardRef("Speech"),
                },
                {
                    "name": "statement",
                    "type": ForwardRef("Statement"),
                },
                {
                    "name": "verse-group",
                    "type": ForwardRef("VerseGroup"),
                },
            ),
        },
    )


class PartTitle(BaseModel):
    """
    <div> <h3>Part Title in a Citation</h3> </div>
    """

    class Meta:
        name = "part-title"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Patent(BaseModel):
    """
    <div> <h3>Patent Number, Cited</h3> </div>
    """

    class Meta:
        name = "patent"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    country: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Phone(BaseModel):
    """
    <div> <h3>Phone Number: in an Address</h3> </div>
    """

    class Meta:
        name = "phone"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Prefix(BaseModel):
    """
    <div> <h3>Prefix</h3> </div>
    """

    class Meta:
        name = "prefix"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Preformat(BaseModel):
    """
    <div> <h3>Preformatted Text</h3> </div>
    """

    class Meta:
        name = "preformat"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: PreformatOrientation = field(
        default=PreformatOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: PreformatPosition = field(
        default=PreformatPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    preformat_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "preformat-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    space: SpaceValue = field(
        const=True,
        default=SpaceValue.PRESERVE,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "alt-text",
                    "type": AltText,
                },
                {
                    "name": "long-desc",
                    "type": LongDesc,
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "attrib",
                    "type": Attrib,
                },
                {
                    "name": "permissions",
                    "type": Permissions,
                },
            ),
        },
    )


class PublisherName(BaseModel):
    """
    <div> <h3>Publisher's Name</h3> </div>
    """

    class Meta:
        name = "publisher-name"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
            ),
        },
    )


class Rb(BaseModel):
    """
    <div> <h3>Ruby Base</h3> </div>
    """

    class Meta:
        name = "rb"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class PublisherLoc(BaseModel):
    """
    <div> <h3>Publisher's Location</h3> </div>
    """

    class Meta:
        name = "publisher-loc"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "addr-line",
                    "type": AddrLine,
                },
                {
                    "name": "city",
                    "type": City,
                },
                {
                    "name": "country",
                    "type": Country,
                },
                {
                    "name": "fax",
                    "type": Fax,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
                {
                    "name": "phone",
                    "type": Phone,
                },
                {
                    "name": "postal-code",
                    "type": PostalCode,
                },
                {
                    "name": "state",
                    "type": State,
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": ForwardRef("Ruby"),
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Question(BaseModel):
    """
    <div> <h3>Question</h3> </div>
    """

    class Meta:
        name = "question"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    sec_meta: Optional["SecMeta"] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subtitle: List["Subtitle"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alt_title: List[AltTitle] = field(
        default_factory=list,
        metadata={
            "name": "alt-title",
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List["Question"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List["QuestionWrap"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    option: List[Option] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List[Glossary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    question_response_type: Optional[QuestionQuestionResponseType] = field(
        default=None,
        metadata={
            "name": "question-response-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Ruby(BaseModel):
    """
    <div> <h3>Ruby Wrapper</h3> </div>
    """

    class Meta:
        name = "ruby"

    model_config = ConfigDict(defer_build=True)
    rb: Rb = field(
        metadata={
            "type": "Element",
            "required": True,
        }
    )
    rt: List[Rt] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    rp: List[Rp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 2,
            "max_occurs": 2,
            "sequence": 1,
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Statement(BaseModel):
    """
    <div> <h3>Statement, Formal</h3> </div>
    """

    class Meta:
        name = "statement"

    model_config = ConfigDict(defer_build=True)
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List["SubjGroup"] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List[Permissions] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class SupportDescription(BaseModel):
    """
    <div> <h3>Support Description</h3> </div>
    """

    class Meta:
        name = "support-description"

    model_config = ConfigDict(defer_build=True)
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Publisher(BaseModel):
    """
    <div> <h3>Publisher</h3> </div>
    """

    class Meta:
        name = "publisher"

    model_config = ConfigDict(defer_build=True)
    publisher_name: List[PublisherName] = field(
        default_factory=list,
        metadata={
            "name": "publisher-name",
            "type": "Element",
            "sequence": 1,
        },
    )
    publisher_loc: List[PublisherLoc] = field(
        default_factory=list,
        metadata={
            "name": "publisher-loc",
            "type": "Element",
            "sequence": 1,
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class QuestionWrap(BaseModel):
    """
    <div> <h3>Question Wrap</h3> </div>
    """

    class Meta:
        name = "question-wrap"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    question: Question = field(
        metadata={
            "type": "Element",
            "required": True,
        }
    )
    answer: Optional[Answer] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    answer_set: Optional[AnswerSet] = field(
        default=None,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    audience: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class RelatedArticle(BaseModel):
    """
    <div> <h3>Related Article Information</h3> </div>
    """

    class Meta:
        name = "related-article"

    model_config = ConfigDict(defer_build=True)
    elocation_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "elocation-id",
            "type": "Attribute",
        },
    )
    ext_link_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ext-link-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    issue: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    journal_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "journal-id",
            "type": "Attribute",
        },
    )
    journal_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "journal-id-type",
            "type": "Attribute",
        },
    )
    page: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    related_article_type: str = field(
        metadata={
            "name": "related-article-type",
            "type": "Attribute",
            "required": True,
        }
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vol: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": ForwardRef("RelatedArticle"),
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "journal-id",
                    "type": JournalId,
                },
                {
                    "name": "label",
                    "type": Label,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "annotation",
                    "type": Annotation2,
                },
                {
                    "name": "article-title",
                    "type": ArticleTitle,
                },
                {
                    "name": "chapter-title",
                    "type": ChapterTitle,
                },
                {
                    "name": "collab",
                    "type": Collab,
                },
                {
                    "name": "collab-alternatives",
                    "type": CollabAlternatives,
                },
                {
                    "name": "comment",
                    "type": Comment,
                },
                {
                    "name": "conf-acronym",
                    "type": ConfAcronym,
                },
                {
                    "name": "conf-date",
                    "type": ConfDate,
                },
                {
                    "name": "conf-loc",
                    "type": ConfLoc,
                },
                {
                    "name": "conf-name",
                    "type": ConfName,
                },
                {
                    "name": "conf-sponsor",
                    "type": ConfSponsor,
                },
                {
                    "name": "data-title",
                    "type": DataTitle,
                },
                {
                    "name": "date",
                    "type": Date,
                },
                {
                    "name": "date-in-citation",
                    "type": DateInCitation,
                },
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "edition",
                    "type": Edition,
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "elocation-id",
                    "type": ElocationId,
                },
                {
                    "name": "etal",
                    "type": Etal,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "fpage",
                    "type": Fpage,
                },
                {
                    "name": "gov",
                    "type": Gov,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
                {
                    "name": "isbn",
                    "type": Isbn,
                },
                {
                    "name": "issn",
                    "type": Issn,
                },
                {
                    "name": "issn-l",
                    "type": IssnL,
                },
                {
                    "name": "issue",
                    "type": Issue,
                },
                {
                    "name": "issue-id",
                    "type": IssueId,
                },
                {
                    "name": "issue-part",
                    "type": IssuePart,
                },
                {
                    "name": "issue-title",
                    "type": IssueTitle,
                },
                {
                    "name": "lpage",
                    "type": Lpage,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "name",
                    "type": Name,
                },
                {
                    "name": "name-alternatives",
                    "type": NameAlternatives,
                },
                {
                    "name": "object-id",
                    "type": ObjectId,
                },
                {
                    "name": "page-range",
                    "type": PageRange,
                },
                {
                    "name": "part-title",
                    "type": PartTitle,
                },
                {
                    "name": "patent",
                    "type": Patent,
                },
                {
                    "name": "person-group",
                    "type": PersonGroup,
                },
                {
                    "name": "pub-id",
                    "type": PubId,
                },
                {
                    "name": "publisher-loc",
                    "type": PublisherLoc,
                },
                {
                    "name": "publisher-name",
                    "type": PublisherName,
                },
                {
                    "name": "role",
                    "type": ForwardRef("Role"),
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "series",
                    "type": ForwardRef("Series"),
                },
                {
                    "name": "size",
                    "type": ForwardRef("Size"),
                },
                {
                    "name": "source",
                    "type": ForwardRef("Source"),
                },
                {
                    "name": "std",
                    "type": ForwardRef("Std"),
                },
                {
                    "name": "string-date",
                    "type": ForwardRef("StringDate"),
                },
                {
                    "name": "string-name",
                    "type": ForwardRef("StringName"),
                },
                {
                    "name": "supplement",
                    "type": ForwardRef("Supplement"),
                },
                {
                    "name": "trans-source",
                    "type": ForwardRef("TransSource"),
                },
                {
                    "name": "trans-title",
                    "type": ForwardRef("TransTitle"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "version",
                    "type": ForwardRef("Version"),
                },
                {
                    "name": "volume",
                    "type": ForwardRef("Volume"),
                },
                {
                    "name": "volume-id",
                    "type": ForwardRef("VolumeId"),
                },
                {
                    "name": "volume-series",
                    "type": ForwardRef("VolumeSeries"),
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class QuestionPreamble(BaseModel):
    """
    <div> <h3>Question Preamble</h3> </div>
    """

    class Meta:
        name = "question-preamble"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subtitle: List["Subtitle"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alt_title: List[AltTitle] = field(
        default_factory=list,
        metadata={
            "name": "alt-title",
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List[Question] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List[QuestionWrap] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List["QuestionWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List["SupplementaryMaterial"] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List["TableWrap"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List["TableWrapGroup"] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List["RelatedArticle"] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List["RelatedObject"] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List["Speech"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List["Statement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List["X"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class RelatedObject(BaseModel):
    """
    <div> <h3>Related Object Information</h3> </div>
    """

    class Meta:
        name = "related-object"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    document_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "document-id",
            "type": "Attribute",
        },
    )
    document_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "document-id-type",
            "type": "Attribute",
        },
    )
    document_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "document-type",
            "type": "Attribute",
        },
    )
    ext_link_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ext-link-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    link_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "link-type",
            "type": "Attribute",
        },
    )
    object_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "object-id",
            "type": "Attribute",
        },
    )
    object_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "object-id-type",
            "type": "Attribute",
        },
    )
    object_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "object-type",
            "type": "Attribute",
        },
    )
    source_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "source-id",
            "type": "Attribute",
        },
    )
    source_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "source-id-type",
            "type": "Attribute",
        },
    )
    source_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "source-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": ForwardRef("RelatedObject"),
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "label",
                    "type": Label,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "annotation",
                    "type": Annotation2,
                },
                {
                    "name": "article-title",
                    "type": ArticleTitle,
                },
                {
                    "name": "chapter-title",
                    "type": ChapterTitle,
                },
                {
                    "name": "collab",
                    "type": Collab,
                },
                {
                    "name": "collab-alternatives",
                    "type": CollabAlternatives,
                },
                {
                    "name": "comment",
                    "type": Comment,
                },
                {
                    "name": "conf-acronym",
                    "type": ConfAcronym,
                },
                {
                    "name": "conf-date",
                    "type": ConfDate,
                },
                {
                    "name": "conf-loc",
                    "type": ConfLoc,
                },
                {
                    "name": "conf-name",
                    "type": ConfName,
                },
                {
                    "name": "conf-sponsor",
                    "type": ConfSponsor,
                },
                {
                    "name": "data-title",
                    "type": DataTitle,
                },
                {
                    "name": "date",
                    "type": Date,
                },
                {
                    "name": "date-in-citation",
                    "type": DateInCitation,
                },
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "edition",
                    "type": Edition,
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "elocation-id",
                    "type": ElocationId,
                },
                {
                    "name": "etal",
                    "type": Etal,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "fpage",
                    "type": Fpage,
                },
                {
                    "name": "gov",
                    "type": Gov,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
                {
                    "name": "isbn",
                    "type": Isbn,
                },
                {
                    "name": "issn",
                    "type": Issn,
                },
                {
                    "name": "issn-l",
                    "type": IssnL,
                },
                {
                    "name": "issue",
                    "type": Issue,
                },
                {
                    "name": "issue-id",
                    "type": IssueId,
                },
                {
                    "name": "issue-part",
                    "type": IssuePart,
                },
                {
                    "name": "issue-title",
                    "type": IssueTitle,
                },
                {
                    "name": "lpage",
                    "type": Lpage,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "name",
                    "type": Name,
                },
                {
                    "name": "name-alternatives",
                    "type": NameAlternatives,
                },
                {
                    "name": "object-id",
                    "type": ObjectId,
                },
                {
                    "name": "page-range",
                    "type": PageRange,
                },
                {
                    "name": "part-title",
                    "type": PartTitle,
                },
                {
                    "name": "patent",
                    "type": Patent,
                },
                {
                    "name": "person-group",
                    "type": PersonGroup,
                },
                {
                    "name": "pub-id",
                    "type": PubId,
                },
                {
                    "name": "publisher-loc",
                    "type": PublisherLoc,
                },
                {
                    "name": "publisher-name",
                    "type": PublisherName,
                },
                {
                    "name": "role",
                    "type": ForwardRef("Role"),
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "series",
                    "type": ForwardRef("Series"),
                },
                {
                    "name": "size",
                    "type": ForwardRef("Size"),
                },
                {
                    "name": "source",
                    "type": ForwardRef("Source"),
                },
                {
                    "name": "std",
                    "type": ForwardRef("Std"),
                },
                {
                    "name": "string-date",
                    "type": ForwardRef("StringDate"),
                },
                {
                    "name": "string-name",
                    "type": ForwardRef("StringName"),
                },
                {
                    "name": "supplement",
                    "type": ForwardRef("Supplement"),
                },
                {
                    "name": "trans-source",
                    "type": ForwardRef("TransSource"),
                },
                {
                    "name": "trans-title",
                    "type": ForwardRef("TransTitle"),
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "version",
                    "type": ForwardRef("Version"),
                },
                {
                    "name": "volume",
                    "type": ForwardRef("Volume"),
                },
                {
                    "name": "volume-id",
                    "type": ForwardRef("VolumeId"),
                },
                {
                    "name": "volume-series",
                    "type": ForwardRef("VolumeSeries"),
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class QuestionWrapGroup(BaseModel):
    """
    <div> <h3>Question Wrap Group</h3> </div>
    """

    class Meta:
        name = "question-wrap-group"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional["Title"] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subtitle: List["Subtitle"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alt_title: List[AltTitle] = field(
        default_factory=list,
        metadata={
            "name": "alt-title",
            "type": "Element",
        },
    )
    question_preamble: Optional[QuestionPreamble] = field(
        default=None,
        metadata={
            "name": "question-preamble",
            "type": "Element",
        },
    )
    question_wrap: List[QuestionWrap] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
            "min_occurs": 1,
        },
    )
    audience: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Roman(BaseModel):
    """
    <div> <h3>Roman</h3> </div>
    """

    class Meta:
        name = "roman"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: RomanToggle = field(
        default=RomanToggle.NO,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": ForwardRef("Roman"),
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class SansSerif(BaseModel):
    """
    <div> <h3>Sans Serif</h3> </div>
    """

    class Meta:
        name = "sans-serif"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: Optional[SansSerifToggle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": ForwardRef("SansSerif"),
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Sc(BaseModel):
    """
    <div> <h3>Small Caps</h3> </div>
    """

    class Meta:
        name = "sc"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: Optional[ScToggle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": ForwardRef("Sc"),
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Speaker(BaseModel):
    """
    <div> <h3>Speaker</h3> </div>
    """

    class Meta:
        name = "speaker"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "degrees",
                    "type": Degrees,
                },
                {
                    "name": "given-names",
                    "type": GivenNames,
                },
                {
                    "name": "prefix",
                    "type": Prefix,
                },
                {
                    "name": "surname",
                    "type": ForwardRef("Surname"),
                },
                {
                    "name": "suffix",
                    "type": ForwardRef("Suffix"),
                },
            ),
        },
    )


class Strike(BaseModel):
    """
    <div> <h3>Strike Through</h3> </div>
    """

    class Meta:
        name = "strike"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: Optional[StrikeToggle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": ForwardRef("Strike"),
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Speech(BaseModel):
    """
    <div> <h3>Speech</h3> </div>
    """

    class Meta:
        name = "speech"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    speaker: Speaker = field(
        metadata={
            "type": "Element",
            "required": True,
        }
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class StyledContent(BaseModel):
    """
    <div> <h3>Styled Special (Subject) Content</h3> </div>
    """

    class Meta:
        name = "styled-content"

    model_config = ConfigDict(defer_build=True)
    alt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style_detail: Optional[str] = field(
        default=None,
        metadata={
            "name": "style-detail",
            "type": "Attribute",
        },
    )
    style_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "style-type",
            "type": "Attribute",
        },
    )
    toggle: Optional[StyledContentToggle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": ForwardRef("StyledContent"),
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "address",
                    "type": Address,
                },
                {
                    "name": "answer",
                    "type": Answer,
                },
                {
                    "name": "answer-set",
                    "type": AnswerSet,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "block-alternatives",
                    "type": BlockAlternatives,
                },
                {
                    "name": "boxed-text",
                    "type": BoxedText,
                },
                {
                    "name": "chem-struct-wrap",
                    "type": ChemStructWrap,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "explanation",
                    "type": Explanation,
                },
                {
                    "name": "fig",
                    "type": Fig,
                },
                {
                    "name": "fig-group",
                    "type": FigGroup,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": Preformat,
                },
                {
                    "name": "question",
                    "type": Question,
                },
                {
                    "name": "question-wrap",
                    "type": QuestionWrap,
                },
                {
                    "name": "question-wrap-group",
                    "type": QuestionWrapGroup,
                },
                {
                    "name": "supplementary-material",
                    "type": ForwardRef("SupplementaryMaterial"),
                },
                {
                    "name": "table-wrap",
                    "type": ForwardRef("TableWrap"),
                },
                {
                    "name": "table-wrap-group",
                    "type": ForwardRef("TableWrapGroup"),
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "def-list",
                    "type": DefList,
                },
                {
                    "name": "list",
                    "type": List2,
                },
                {
                    "name": "ack",
                    "type": Ack,
                },
                {
                    "name": "disp-quote",
                    "type": DispQuote,
                },
                {
                    "name": "speech",
                    "type": Speech,
                },
                {
                    "name": "statement",
                    "type": Statement,
                },
                {
                    "name": "verse-group",
                    "type": ForwardRef("VerseGroup"),
                },
            ),
        },
    )


class Sub(BaseModel):
    """
    <div> <h3>Subscript</h3> </div>
    """

    class Meta:
        name = "sub"

    model_config = ConfigDict(defer_build=True)
    arrange: Optional[SubArrange] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": ForwardRef("Sub"),
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Sup(BaseModel):
    """
    <div> <h3>Superscript</h3> </div>
    """

    class Meta:
        name = "sup"

    model_config = ConfigDict(defer_build=True)
    arrange: Optional[SupArrange] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": ForwardRef("Sup"),
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Target(BaseModel):
    """
    <div> <h3>Target of an Internal Link</h3> </div>
    """

    class Meta:
        name = "target"

    model_config = ConfigDict(defer_build=True)
    id: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    target_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "target-type",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": ForwardRef("Target"),
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Underline(BaseModel):
    """
    <div> <h3>Underline</h3> </div>
    """

    class Meta:
        name = "underline"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    toggle: Optional[UnderlineToggle] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    underline_style: Optional[str] = field(
        default=None,
        metadata={
            "name": "underline-style",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": ForwardRef("Underline"),
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class CompoundSubjectPart(BaseModel):
    """
    <div> <h3>Compound Subject Part Name</h3> </div>
    """

    class Meta:
        name = "compound-subject-part"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
            ),
        },
    )


class Price(BaseModel):
    """
    <div> <h3>Price</h3> </div>
    """

    class Meta:
        name = "price"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    currency: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
            ),
        },
    )


class ResourceName(BaseModel):
    """
    <div> <h3>Resource Name</h3> </div>
    """

    class Meta:
        name = "resource-name"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
            ),
        },
    )


class TextualForm(BaseModel):
    """
    <div> <h3>Textual Form</h3> </div>
    """

    class Meta:
        name = "textual-form"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "label",
                    "type": Label,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
            ),
        },
    )


class X(BaseModel):
    """<div>
    <h3>X - Generated Text and Punctuation</h3>
    </div>"""

    class Meta:
        name = "x"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    space: SpaceValue = field(
        const=True,
        default=SpaceValue.PRESERVE,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": ForwardRef("X"),
                },
            ),
        },
    )


class Ref(BaseModel):
    """
    <div> <h3>Reference Item</h3> </div>
    """

    class Meta:
        name = "ref"

    model_config = ConfigDict(defer_build=True)
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    citation_alternatives: List[CitationAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "citation-alternatives",
            "type": "Element",
        },
    )
    element_citation: List[ElementCitation] = field(
        default_factory=list,
        metadata={
            "name": "element-citation",
            "type": "Element",
        },
    )
    mixed_citation: List[MixedCitation] = field(
        default_factory=list,
        metadata={
            "name": "mixed-citation",
            "type": "Element",
        },
    )
    nlm_citation: List[NlmCitation] = field(
        default_factory=list,
        metadata={
            "name": "nlm-citation",
            "type": "Element",
        },
    )
    note: List[Note] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ResourceWrap(BaseModel):
    """
    <div> <h3>Resource Wrap</h3> </div>
    """

    class Meta:
        name = "resource-wrap"

    model_config = ConfigDict(defer_build=True)
    resource_name: ResourceName = field(
        metadata={
            "name": "resource-name",
            "type": "Element",
            "required": True,
        }
    )
    resource_id: List[ResourceId] = field(
        default_factory=list,
        metadata={
            "name": "resource-id",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Size(BaseModel):
    """
    <div> <h3>Size</h3> </div>
    """

    class Meta:
        name = "size"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    units: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class TimeStamp(BaseModel):
    """
    <div> <h3>Time Stamp For Cited Work</h3> </div>
    """

    class Meta:
        name = "time-stamp"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "era",
                    "type": Era,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class Uri(BaseModel):
    """
    <div> <h3>Uri</h3> </div>
    """

    class Meta:
        name = "uri"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": ForwardRef("Uri"),
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class ResourceGroup(BaseModel):
    """
    <div> <h3>Resource Group</h3> </div>
    """

    class Meta:
        name = "resource-group"

    model_config = ConfigDict(defer_build=True)
    resource_name: List[ResourceName] = field(
        default_factory=list,
        metadata={
            "name": "resource-name",
            "type": "Element",
        },
    )
    resource_wrap: List[ResourceWrap] = field(
        default_factory=list,
        metadata={
            "name": "resource-wrap",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Xref(BaseModel):
    """
    <div> <h3>X(cross) Reference</h3> </div>
    """

    class Meta:
        name = "xref"

    model_config = ConfigDict(defer_build=True)
    alt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    custom_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "custom-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    ref_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ref-type",
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": ForwardRef("Xref"),
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class AbbrevJournalTitle(BaseModel):
    """
    <div> <h3>Abbreviated Journal Title</h3> </div>
    """

    class Meta:
        name = "abbrev-journal-title"

    model_config = ConfigDict(defer_build=True)
    abbrev_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "abbrev-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class CompoundKwdPart(BaseModel):
    """
    <div> <h3>Compound Keyword Part</h3> </div>
    """

    class Meta:
        name = "compound-kwd-part"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class ConfNum(BaseModel):
    """
    <div> <h3>Conference Number</h3> </div>
    """

    class Meta:
        name = "conf-num"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class ConfTheme(BaseModel):
    """
    <div> <h3>Conference Theme</h3> </div>
    """

    class Meta:
        name = "conf-theme"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class Corresp(BaseModel):
    """
    <div> <h3>Correspondence Information</h3> </div>
    """

    class Meta:
        name = "corresp"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "addr-line",
                    "type": AddrLine,
                },
                {
                    "name": "city",
                    "type": City,
                },
                {
                    "name": "country",
                    "type": Country,
                },
                {
                    "name": "fax",
                    "type": Fax,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
                {
                    "name": "phone",
                    "type": Phone,
                },
                {
                    "name": "postal-code",
                    "type": PostalCode,
                },
                {
                    "name": "state",
                    "type": State,
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "label",
                    "type": Label,
                },
            ),
        },
    )


class FundingStatement(BaseModel):
    """
    <div> <h3>Funding Statement</h3> </div>
    """

    class Meta:
        name = "funding-statement"

    model_config = ConfigDict(defer_build=True)
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "award-id",
                    "type": AwardId,
                },
                {
                    "name": "funding-source",
                    "type": FundingSource,
                },
                {
                    "name": "open-access",
                    "type": OpenAccess,
                },
            ),
        },
    )


class IssueSponsor(BaseModel):
    """
    <div> <h3>Issue Title</h3> </div>
    """

    class Meta:
        name = "issue-sponsor"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class IssueSubtitle(BaseModel):
    """
    <div> <h3>Issue Subtitle</h3> </div>
    """

    class Meta:
        name = "issue-subtitle"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class JournalSubtitle(BaseModel):
    """
    <div> <h3>Journal Subtitle</h3> </div>
    """

    class Meta:
        name = "journal-subtitle"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class JournalTitle(BaseModel):
    """
    <div> <h3>Journal Title (Full)</h3> </div>
    """

    class Meta:
        name = "journal-title"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class MetaName(BaseModel):
    """
    <div> <h3>Metadata Data Name For Custom Metadata</h3> </div>
    """

    class Meta:
        name = "meta-name"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class MetaValue(BaseModel):
    """
    <div> <h3>Metadata Data Value For Custom Metadata</h3> </div>
    """

    class Meta:
        name = "meta-value"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class OnBehalfOf(BaseModel):
    """
    <div> <h3>On Behalf of</h3> </div>
    """

    class Meta:
        name = "on-behalf-of"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
            ),
        },
    )


class Role(BaseModel):
    """
    <div> <h3>Role or Function Title of Contributor</h3> </div>
    """

    class Meta:
        name = "role"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    degree_contribution: Optional[str] = field(
        default=None,
        metadata={
            "name": "degree-contribution",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class See(BaseModel):
    """
    <div> <h3>See</h3> </div>
    """

    class Meta:
        name = "see"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": Preformat,
                },
            ),
        },
    )


class SeeAlso(BaseModel):
    """
    <div> <h3>See-Also Term</h3> </div>
    """

    class Meta:
        name = "see-also"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": Preformat,
                },
            ),
        },
    )


class SelfUri(BaseModel):
    """
    <div> <h3>Uri For This Same Article Online</h3> </div>
    """

    class Meta:
        name = "self-uri"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class Series(BaseModel):
    """
    <div> <h3>Series</h3> </div>
    """

    class Meta:
        name = "series"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class SeriesText(BaseModel):
    """
    <div> <h3>Series Text: Header Text to Describe</h3> </div>
    """

    class Meta:
        name = "series-text"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class SeriesTitle(BaseModel):
    """
    <div> <h3>Series Title</h3> </div>
    """

    class Meta:
        name = "series-title"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class Sig(BaseModel):
    """
    <div> <h3>Signature</h3> </div>
    """

    class Meta:
        name = "sig"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
            ),
        },
    )


class Source(BaseModel):
    """
    <div> <h3>Source</h3> </div>
    """

    class Meta:
        name = "source"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class StdOrganization(BaseModel):
    """
    <div> <h3>Standards Organization</h3> </div>
    """

    class Meta:
        name = "std-organization"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class StringDate(BaseModel):
    """
    <div> <h3>Date As a String</h3> </div>
    """

    class Meta:
        name = "string-date"

    model_config = ConfigDict(defer_build=True)
    calendar: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    iso_8601_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "iso-8601-date",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "era",
                    "type": Era,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "year",
                    "type": Year,
                },
            ),
        },
    )


class Subject(BaseModel):
    """
    <div> <h3>Subject Name</h3> </div>
    """

    class Meta:
        name = "subject"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Subtitle(BaseModel):
    """
    <div> <h3>Article Subtitle</h3> </div>
    """

    class Meta:
        name = "subtitle"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class Suffix(BaseModel):
    """
    <div> <h3>Suffix</h3> </div>
    """

    class Meta:
        name = "suffix"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class SupportSource(BaseModel):
    """
    <div> <h3>Support Source</h3> </div>
    """

    class Meta:
        name = "support-source"

    model_config = ConfigDict(defer_build=True)
    country: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    support_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "support-type",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
            ),
        },
    )


class Surname(BaseModel):
    """
    <div> <h3>Surname</h3> </div>
    """

    class Meta:
        name = "surname"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    initials: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class Term(BaseModel):
    """
    <div> <h3>Definition List: Term</h3> </div>
    """

    class Meta:
        name = "term"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    term_status: Optional[str] = field(
        default=None,
        metadata={
            "name": "term-status",
            "type": "Attribute",
        },
    )
    term_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "term-type",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "chem-struct-wrap",
                    "type": ChemStructWrap,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": Preformat,
                },
            ),
        },
    )


class TermHead(BaseModel):
    """
    <div> <h3>Definition List: Term Head</h3> </div>
    """

    class Meta:
        name = "term-head"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class Title(BaseModel):
    """
    <div> <h3>Title</h3> </div>
    """

    class Meta:
        name = "title"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "citation-alternatives",
                    "type": CitationAlternatives,
                },
                {
                    "name": "element-citation",
                    "type": ElementCitation,
                },
                {
                    "name": "mixed-citation",
                    "type": MixedCitation,
                },
                {
                    "name": "nlm-citation",
                    "type": NlmCitation,
                },
            ),
        },
    )


class TransSource(BaseModel):
    """
    <div> <h3>Translated Source</h3> </div>
    """

    class Meta:
        name = "trans-source"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class TransSubtitle(BaseModel):
    """
    <div> <h3>Translated Subtitle</h3> </div>
    """

    class Meta:
        name = "trans-subtitle"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class TransTitle(BaseModel):
    """
    <div> <h3>Translated Title</h3> </div>
    """

    class Meta:
        name = "trans-title"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
            ),
        },
    )


class UnstructuredKwdGroup(BaseModel):
    """
    <div> <h3>Unstructured Keyword Group</h3> </div>
    """

    class Meta:
        name = "unstructured-kwd-group"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    kwd_group_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "kwd-group-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class VerseLine(BaseModel):
    """
    <div> <h3>Line of a Verse</h3> </div>
    """

    class Meta:
        name = "verse-line"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    indent_level: Optional[str] = field(
        default=None,
        metadata={
            "name": "indent-level",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style_detail: Optional[str] = field(
        default=None,
        metadata={
            "name": "style-detail",
            "type": "Attribute",
        },
    )
    style_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "style-type",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class Version(BaseModel):
    """
    <div> <h3>Version Statement, Cited</h3> </div>
    """

    class Meta:
        name = "version"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    designator: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class Volume(BaseModel):
    """
    <div> <h3>Volume Number</h3> </div>
    """

    class Meta:
        name = "volume"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    seq: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class VolumeId(BaseModel):
    """
    <div> <h3>Volume Identifier</h3> </div>
    """

    class Meta:
        name = "volume-id"

    model_config = ConfigDict(defer_build=True)
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pub_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "pub-id-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class VolumeSeries(BaseModel):
    """
    <div> <h3>Volume Series</h3> </div>
    """

    class Meta:
        name = "volume-series"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class AuthorNotes(BaseModel):
    """
    <div> <h3>Author Note Group</h3> </div>
    """

    class Meta:
        name = "author-notes"

    model_config = ConfigDict(defer_build=True)
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    corresp: List[Corresp] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn: List[Fn2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class CustomMeta(BaseModel):
    """
    <div> <h3>Custom Metadata</h3> </div>
    """

    class Meta:
        name = "custom-meta"

    model_config = ConfigDict(defer_build=True)
    meta_name: MetaName = field(
        metadata={
            "name": "meta-name",
            "type": "Element",
            "required": True,
        }
    )
    meta_value: MetaValue = field(
        metadata={
            "name": "meta-value",
            "type": "Element",
            "required": True,
        }
    )
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    vocab_term: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term",
            "type": "Attribute",
        },
    )
    vocab_term_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-term-identifier",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class History(BaseModel):
    """
    <div> <h3>History: Document History</h3> </div>
    """

    class Meta:
        name = "history"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "date",
                    "type": Date,
                },
                {
                    "name": "string-date",
                    "type": StringDate,
                },
            ),
        },
    )


class ListItem(BaseModel):
    """
    <div> <h3>List Item</h3> </div>
    """

    class Meta:
        name = "list-item"

    model_config = ConfigDict(defer_build=True)
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class PubDate(BaseModel):
    """
    <div> <h3>Publication Date</h3> </div>
    """

    class Meta:
        name = "pub-date"

    model_config = ConfigDict(defer_build=True)
    day: List[Day] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    era: List[Era] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    month: List[Month] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    season: List[Season] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    year: List[Year] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    string_date: List[StringDate] = field(
        default_factory=list,
        metadata={
            "name": "string-date",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    calendar: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    date_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "date-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    iso_8601_date: Optional[str] = field(
        default=None,
        metadata={
            "name": "iso-8601-date",
            "type": "Attribute",
        },
    )
    pub_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "pub-type",
            "type": "Attribute",
        },
    )
    publication_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "publication-format",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class SigBlock(BaseModel):
    """
    <div> <h3>Signature Block</h3> </div>
    """

    class Meta:
        name = "sig-block"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "contrib",
                    "type": Contrib,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "aff",
                    "type": Aff,
                },
                {
                    "name": "aff-alternatives",
                    "type": AffAlternatives,
                },
                {
                    "name": "etal",
                    "type": Etal,
                },
                {
                    "name": "role",
                    "type": Role,
                },
                {
                    "name": "sig",
                    "type": Sig,
                },
            ),
        },
    )


class Std(BaseModel):
    """
    <div> <h3>Standard, Cited</h3> </div>
    """

    class Meta:
        name = "std"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "pub-id",
                    "type": PubId,
                },
                {
                    "name": "source",
                    "type": Source,
                },
                {
                    "name": "std-organization",
                    "type": StdOrganization,
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
            ),
        },
    )


class StringConf(BaseModel):
    """
    <div> <h3>String Conference Name</h3> </div>
    """

    class Meta:
        name = "string-conf"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "conf-date",
                    "type": ConfDate,
                },
                {
                    "name": "conf-name",
                    "type": ConfName,
                },
                {
                    "name": "conf-num",
                    "type": ConfNum,
                },
                {
                    "name": "conf-loc",
                    "type": ConfLoc,
                },
                {
                    "name": "conf-sponsor",
                    "type": ConfSponsor,
                },
                {
                    "name": "conf-theme",
                    "type": ConfTheme,
                },
                {
                    "name": "conf-acronym",
                    "type": ConfAcronym,
                },
                {
                    "name": "string-conf",
                    "type": ForwardRef("StringConf"),
                },
            ),
        },
    )


class StringName(BaseModel):
    """
    <div> <h3>Name of Person (Unstructured)</h3> </div>
    """

    class Meta:
        name = "string-name"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    name_style: StringNameNameStyle = field(
        default=StringNameNameStyle.WESTERN,
        metadata={
            "name": "name-style",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "degrees",
                    "type": Degrees,
                },
                {
                    "name": "given-names",
                    "type": GivenNames,
                },
                {
                    "name": "prefix",
                    "type": Prefix,
                },
                {
                    "name": "surname",
                    "type": Surname,
                },
                {
                    "name": "suffix",
                    "type": Suffix,
                },
            ),
        },
    )


class SubjGroup(BaseModel):
    class Meta:
        name = "subj-group"

    model_config = ConfigDict(defer_build=True)
    subject: List[Subject] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    compound_subject: List[CompoundSubject] = field(
        default_factory=list,
        metadata={
            "name": "compound-subject",
            "type": "Element",
        },
    )
    subj_group: List["SubjGroup"] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    assigning_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "assigning-authority",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    subj_group_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "subj-group-type",
            "type": "Attribute",
        },
    )
    vocab: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    vocab_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vocab-identifier",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Supplement(BaseModel):
    """
    <div> <h3>Supplement</h3> </div>
    """

    class Meta:
        name = "supplement"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    supplement_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "supplement-type",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "contrib-group",
                    "type": ContribGroup,
                },
                {
                    "name": "title",
                    "type": Title,
                },
            ),
        },
    )


class TableWrapFoot(BaseModel):
    """
    <div> <h3>Table Wrap Footer</h3> </div>
    """

    class Meta:
        name = "table-wrap-foot"

    model_config = ConfigDict(defer_build=True)
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    fn: List[Fn2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List[Permissions] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class TransTitleGroup(BaseModel):
    """
    <div> <h3>Translated Title Group</h3> </div>
    """

    class Meta:
        name = "trans-title-group"

    model_config = ConfigDict(defer_build=True)
    trans_title: TransTitle = field(
        metadata={
            "name": "trans-title",
            "type": "Element",
            "required": True,
        }
    )
    trans_subtitle: List[TransSubtitle] = field(
        default_factory=list,
        metadata={
            "name": "trans-subtitle",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class VerseGroup(BaseModel):
    """
    <div> <h3>Verse Form For Poetry</h3> </div>
    """

    class Meta:
        name = "verse-group"

    model_config = ConfigDict(defer_build=True)
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    subtitle: Optional[Subtitle] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    verse_line: List[VerseLine] = field(
        default_factory=list,
        metadata={
            "name": "verse-line",
            "type": "Element",
        },
    )
    verse_group: List["VerseGroup"] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List[Permissions] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style_detail: Optional[str] = field(
        default=None,
        metadata={
            "name": "style-detail",
            "type": "Attribute",
        },
    )
    style_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "style-type",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ArticleCategories(BaseModel):
    """
    <div> <h3>Article Grouping Data</h3> </div>
    """

    class Meta:
        name = "article-categories"

    model_config = ConfigDict(defer_build=True)
    subj_group: List[SubjGroup] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    series_title: List[SeriesTitle] = field(
        default_factory=list,
        metadata={
            "name": "series-title",
            "type": "Element",
        },
    )
    series_text: List[SeriesText] = field(
        default_factory=list,
        metadata={
            "name": "series-text",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Conference(BaseModel):
    """
    <div> <h3>Conference Information</h3> </div>
    """

    class Meta:
        name = "conference"

    model_config = ConfigDict(defer_build=True)
    conf_date: List[ConfDate] = field(
        default_factory=list,
        metadata={
            "name": "conf-date",
            "type": "Element",
        },
    )
    conf_name: List[ConfName] = field(
        default_factory=list,
        metadata={
            "name": "conf-name",
            "type": "Element",
        },
    )
    conf_num: List[ConfNum] = field(
        default_factory=list,
        metadata={
            "name": "conf-num",
            "type": "Element",
        },
    )
    conf_loc: List[ConfLoc] = field(
        default_factory=list,
        metadata={
            "name": "conf-loc",
            "type": "Element",
        },
    )
    conf_sponsor: List[ConfSponsor] = field(
        default_factory=list,
        metadata={
            "name": "conf-sponsor",
            "type": "Element",
        },
    )
    conf_theme: List[ConfTheme] = field(
        default_factory=list,
        metadata={
            "name": "conf-theme",
            "type": "Element",
        },
    )
    conf_acronym: List[ConfAcronym] = field(
        default_factory=list,
        metadata={
            "name": "conf-acronym",
            "type": "Element",
        },
    )
    string_conf: List[StringConf] = field(
        default_factory=list,
        metadata={
            "name": "string-conf",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class CustomMetaGroup(BaseModel):
    """
    <div> <h3>Custom Metadata Group</h3> </div>
    """

    class Meta:
        name = "custom-meta-group"

    model_config = ConfigDict(defer_build=True)
    custom_meta: List[CustomMeta] = field(
        default_factory=list,
        metadata={
            "name": "custom-meta",
            "type": "Element",
            "min_occurs": 1,
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class EventDesc(BaseModel):
    """
    <div> <h3>Event Description</h3> </div>
    """

    class Meta:
        name = "event-desc"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "article-id",
                    "type": ArticleId,
                },
                {
                    "name": "issn",
                    "type": Issn,
                },
                {
                    "name": "issn-l",
                    "type": IssnL,
                },
                {
                    "name": "isbn",
                    "type": Isbn,
                },
                {
                    "name": "article-version",
                    "type": ArticleVersion,
                },
                {
                    "name": "article-version-alternatives",
                    "type": ArticleVersionAlternatives,
                },
                {
                    "name": "date",
                    "type": Date,
                },
                {
                    "name": "string-date",
                    "type": StringDate,
                },
                {
                    "name": "pub-date",
                    "type": PubDate,
                },
                {
                    "name": "pub-date-not-available",
                    "type": PubDateNotAvailable,
                },
            ),
        },
    )


class IssueTitleGroup(BaseModel):
    """
    <div> <h3>Issue Title Group</h3> </div>
    """

    class Meta:
        name = "issue-title-group"

    model_config = ConfigDict(defer_build=True)
    issue_title: IssueTitle = field(
        metadata={
            "name": "issue-title",
            "type": "Element",
            "required": True,
        }
    )
    issue_subtitle: List[IssueSubtitle] = field(
        default_factory=list,
        metadata={
            "name": "issue-subtitle",
            "type": "Element",
        },
    )
    trans_title_group: List[TransTitleGroup] = field(
        default_factory=list,
        metadata={
            "name": "trans-title-group",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class JournalTitleGroup(BaseModel):
    """
    <div> <h3>Journal Title Group</h3> </div>
    """

    class Meta:
        name = "journal-title-group"

    model_config = ConfigDict(defer_build=True)
    journal_title: List[JournalTitle] = field(
        default_factory=list,
        metadata={
            "name": "journal-title",
            "type": "Element",
        },
    )
    journal_subtitle: List[JournalSubtitle] = field(
        default_factory=list,
        metadata={
            "name": "journal-subtitle",
            "type": "Element",
        },
    )
    trans_title_group: List[TransTitleGroup] = field(
        default_factory=list,
        metadata={
            "name": "trans-title-group",
            "type": "Element",
        },
    )
    abbrev_journal_title: List[AbbrevJournalTitle] = field(
        default_factory=list,
        metadata={
            "name": "abbrev-journal-title",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class PrincipalAwardRecipient(BaseModel):
    """
    <div> <h3>Principal Award Recipient</h3> </div>
    """

    class Meta:
        name = "principal-award-recipient"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "contrib-id",
                    "type": ContribId,
                },
                {
                    "name": "name",
                    "type": Name,
                },
                {
                    "name": "name-alternatives",
                    "type": NameAlternatives,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
                {
                    "name": "string-name",
                    "type": StringName,
                },
            ),
        },
    )


class PrincipalInvestigator(BaseModel):
    """
    <div> <h3>Principal Investigator Recipient</h3> </div>
    """

    class Meta:
        name = "principal-investigator"

    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "contrib-id",
                    "type": ContribId,
                },
                {
                    "name": "name",
                    "type": Name,
                },
                {
                    "name": "name-alternatives",
                    "type": NameAlternatives,
                },
                {
                    "name": "string-name",
                    "type": StringName,
                },
            ),
        },
    )


class Product2(BaseModel):
    """
    <div> <h3>Product Information</h3> </div>
    """

    class Meta:
        name = "product"

    model_config = ConfigDict(defer_build=True)
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    product_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "product-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "label",
                    "type": Label,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "price",
                    "type": Price,
                },
                {
                    "name": "annotation",
                    "type": Annotation2,
                },
                {
                    "name": "article-title",
                    "type": ArticleTitle,
                },
                {
                    "name": "chapter-title",
                    "type": ChapterTitle,
                },
                {
                    "name": "collab",
                    "type": Collab,
                },
                {
                    "name": "collab-alternatives",
                    "type": CollabAlternatives,
                },
                {
                    "name": "comment",
                    "type": Comment,
                },
                {
                    "name": "conf-acronym",
                    "type": ConfAcronym,
                },
                {
                    "name": "conf-date",
                    "type": ConfDate,
                },
                {
                    "name": "conf-loc",
                    "type": ConfLoc,
                },
                {
                    "name": "conf-name",
                    "type": ConfName,
                },
                {
                    "name": "conf-sponsor",
                    "type": ConfSponsor,
                },
                {
                    "name": "data-title",
                    "type": DataTitle,
                },
                {
                    "name": "date",
                    "type": Date,
                },
                {
                    "name": "date-in-citation",
                    "type": DateInCitation,
                },
                {
                    "name": "day",
                    "type": Day,
                },
                {
                    "name": "edition",
                    "type": Edition,
                },
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "elocation-id",
                    "type": ElocationId,
                },
                {
                    "name": "etal",
                    "type": Etal,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "fpage",
                    "type": Fpage,
                },
                {
                    "name": "gov",
                    "type": Gov,
                },
                {
                    "name": "institution",
                    "type": Institution,
                },
                {
                    "name": "institution-wrap",
                    "type": InstitutionWrap,
                },
                {
                    "name": "isbn",
                    "type": Isbn,
                },
                {
                    "name": "issn",
                    "type": Issn,
                },
                {
                    "name": "issn-l",
                    "type": IssnL,
                },
                {
                    "name": "issue",
                    "type": Issue,
                },
                {
                    "name": "issue-id",
                    "type": IssueId,
                },
                {
                    "name": "issue-part",
                    "type": IssuePart,
                },
                {
                    "name": "issue-title",
                    "type": IssueTitle,
                },
                {
                    "name": "lpage",
                    "type": Lpage,
                },
                {
                    "name": "month",
                    "type": Month,
                },
                {
                    "name": "name",
                    "type": Name,
                },
                {
                    "name": "name-alternatives",
                    "type": NameAlternatives,
                },
                {
                    "name": "object-id",
                    "type": ObjectId,
                },
                {
                    "name": "page-range",
                    "type": PageRange,
                },
                {
                    "name": "part-title",
                    "type": PartTitle,
                },
                {
                    "name": "patent",
                    "type": Patent,
                },
                {
                    "name": "person-group",
                    "type": PersonGroup,
                },
                {
                    "name": "pub-id",
                    "type": PubId,
                },
                {
                    "name": "publisher-loc",
                    "type": PublisherLoc,
                },
                {
                    "name": "publisher-name",
                    "type": PublisherName,
                },
                {
                    "name": "role",
                    "type": Role,
                },
                {
                    "name": "season",
                    "type": Season,
                },
                {
                    "name": "series",
                    "type": Series,
                },
                {
                    "name": "size",
                    "type": Size,
                },
                {
                    "name": "source",
                    "type": Source,
                },
                {
                    "name": "std",
                    "type": Std,
                },
                {
                    "name": "string-date",
                    "type": StringDate,
                },
                {
                    "name": "string-name",
                    "type": StringName,
                },
                {
                    "name": "supplement",
                    "type": Supplement,
                },
                {
                    "name": "trans-source",
                    "type": TransSource,
                },
                {
                    "name": "trans-title",
                    "type": TransTitle,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "version",
                    "type": Version,
                },
                {
                    "name": "volume",
                    "type": Volume,
                },
                {
                    "name": "volume-id",
                    "type": VolumeId,
                },
                {
                    "name": "volume-series",
                    "type": VolumeSeries,
                },
                {
                    "name": "year",
                    "type": Year,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
            ),
        },
    )


class SecMeta(BaseModel):
    """
    <div> <h3>Section Metadata</h3> </div>
    """

    class Meta:
        name = "sec-meta"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    contrib_group: List[ContribGroup] = field(
        default_factory=list,
        metadata={
            "name": "contrib-group",
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List[SubjGroup] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    permissions: Optional[Permissions] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Td(BaseModel):
    class Meta:
        name = "td"

    model_config = ConfigDict(defer_build=True)
    abbr: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    align: Optional[TdAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    axis: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    char: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charoff: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    colspan: str = field(
        default="1",
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    headers: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rowspan: str = field(
        default="1",
        metadata={
            "type": "Attribute",
        },
    )
    scope: Optional[TdScope] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[TdValign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "chem-struct-wrap",
                    "type": ChemStructWrap,
                },
                {
                    "name": "citation-alternatives",
                    "type": CitationAlternatives,
                },
                {
                    "name": "element-citation",
                    "type": ElementCitation,
                },
                {
                    "name": "mixed-citation",
                    "type": MixedCitation,
                },
                {
                    "name": "nlm-citation",
                    "type": NlmCitation,
                },
                {
                    "name": "disp-quote",
                    "type": DispQuote,
                },
                {
                    "name": "speech",
                    "type": Speech,
                },
                {
                    "name": "statement",
                    "type": Statement,
                },
                {
                    "name": "verse-group",
                    "type": VerseGroup,
                },
                {
                    "name": "def-list",
                    "type": DefList,
                },
                {
                    "name": "list",
                    "type": List2,
                },
                {
                    "name": "p",
                    "type": P,
                },
                {
                    "name": "answer",
                    "type": Answer,
                },
                {
                    "name": "answer-set",
                    "type": AnswerSet,
                },
                {
                    "name": "explanation",
                    "type": Explanation,
                },
                {
                    "name": "question",
                    "type": Question,
                },
                {
                    "name": "question-wrap",
                    "type": QuestionWrap,
                },
                {
                    "name": "question-wrap-group",
                    "type": QuestionWrapGroup,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": Preformat,
                },
            ),
        },
    )


class Th(BaseModel):
    class Meta:
        name = "th"

    model_config = ConfigDict(defer_build=True)
    abbr: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    align: Optional[ThAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    axis: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    char: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charoff: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    colspan: str = field(
        default="1",
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    headers: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rowspan: str = field(
        default="1",
        metadata={
            "type": "Attribute",
        },
    )
    scope: Optional[ThScope] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[ThValign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "break",
                    "type": Break,
                },
                {
                    "name": "chem-struct-wrap",
                    "type": ChemStructWrap,
                },
                {
                    "name": "citation-alternatives",
                    "type": CitationAlternatives,
                },
                {
                    "name": "element-citation",
                    "type": ElementCitation,
                },
                {
                    "name": "mixed-citation",
                    "type": MixedCitation,
                },
                {
                    "name": "nlm-citation",
                    "type": NlmCitation,
                },
                {
                    "name": "disp-quote",
                    "type": DispQuote,
                },
                {
                    "name": "speech",
                    "type": Speech,
                },
                {
                    "name": "statement",
                    "type": Statement,
                },
                {
                    "name": "verse-group",
                    "type": VerseGroup,
                },
                {
                    "name": "def-list",
                    "type": DefList,
                },
                {
                    "name": "list",
                    "type": List2,
                },
                {
                    "name": "p",
                    "type": P,
                },
                {
                    "name": "answer",
                    "type": Answer,
                },
                {
                    "name": "answer-set",
                    "type": AnswerSet,
                },
                {
                    "name": "explanation",
                    "type": Explanation,
                },
                {
                    "name": "question",
                    "type": Question,
                },
                {
                    "name": "question-wrap",
                    "type": QuestionWrap,
                },
                {
                    "name": "question-wrap-group",
                    "type": QuestionWrapGroup,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": Preformat,
                },
            ),
        },
    )


class TitleGroup(BaseModel):
    """
    <div> <h3>Title Group</h3> </div>
    """

    class Meta:
        name = "title-group"

    model_config = ConfigDict(defer_build=True)
    article_title: ArticleTitle = field(
        metadata={
            "name": "article-title",
            "type": "Element",
            "required": True,
        }
    )
    subtitle: List[Subtitle] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    trans_title_group: List[TransTitleGroup] = field(
        default_factory=list,
        metadata={
            "name": "trans-title-group",
            "type": "Element",
        },
    )
    alt_title: List[AltTitle] = field(
        default_factory=list,
        metadata={
            "name": "alt-title",
            "type": "Element",
        },
    )
    fn_group: Optional[FnGroup] = field(
        default=None,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class AwardGroup(BaseModel):
    """
    <div> <h3>Award Group</h3> </div>
    """

    class Meta:
        name = "award-group"

    model_config = ConfigDict(defer_build=True)
    funding_source: List[FundingSource] = field(
        default_factory=list,
        metadata={
            "name": "funding-source",
            "type": "Element",
        },
    )
    support_source: List[SupportSource] = field(
        default_factory=list,
        metadata={
            "name": "support-source",
            "type": "Element",
        },
    )
    award_id: List[AwardId] = field(
        default_factory=list,
        metadata={
            "name": "award-id",
            "type": "Element",
        },
    )
    award_name: Optional[AwardName] = field(
        default=None,
        metadata={
            "name": "award-name",
            "type": "Element",
        },
    )
    award_desc: Optional[AwardDesc] = field(
        default=None,
        metadata={
            "name": "award-desc",
            "type": "Element",
        },
    )
    principal_award_recipient: List[PrincipalAwardRecipient] = field(
        default_factory=list,
        metadata={
            "name": "principal-award-recipient",
            "type": "Element",
        },
    )
    principal_investigator: List[PrincipalInvestigator] = field(
        default_factory=list,
        metadata={
            "name": "principal-investigator",
            "type": "Element",
        },
    )
    award_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "award-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rid: List[str] = field(
        default_factory=list,
        metadata={
            "type": "Attribute",
            "tokens": True,
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Event(BaseModel):
    """
    <div> <h3>Event in Publishing History</h3> </div>
    """

    class Meta:
        name = "event"

    model_config = ConfigDict(defer_build=True)
    event_desc: Optional[EventDesc] = field(
        default=None,
        metadata={
            "name": "event-desc",
            "type": "Element",
        },
    )
    article_id: List[ArticleId] = field(
        default_factory=list,
        metadata={
            "name": "article-id",
            "type": "Element",
        },
    )
    article_version: Optional[ArticleVersion] = field(
        default=None,
        metadata={
            "name": "article-version",
            "type": "Element",
        },
    )
    article_version_alternatives: Optional[ArticleVersionAlternatives] = field(
        default=None,
        metadata={
            "name": "article-version-alternatives",
            "type": "Element",
        },
    )
    pub_date: List[PubDate] = field(
        default_factory=list,
        metadata={
            "name": "pub-date",
            "type": "Element",
        },
    )
    pub_date_not_available: Optional[PubDateNotAvailable] = field(
        default=None,
        metadata={
            "name": "pub-date-not-available",
            "type": "Element",
        },
    )
    date: List[Date] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    string_date: List[StringDate] = field(
        default_factory=list,
        metadata={
            "name": "string-date",
            "type": "Element",
        },
    )
    issn: List[Issn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    issn_l: Optional[IssnL] = field(
        default=None,
        metadata={
            "name": "issn-l",
            "type": "Element",
        },
    )
    isbn: List[Isbn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: Optional[Permissions] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    self_uri: List[SelfUri] = field(
        default_factory=list,
        metadata={
            "name": "self-uri",
            "type": "Element",
        },
    )
    event_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "event-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class JournalMeta(BaseModel):
    """
    <div> <h3>Journal Metadata</h3> </div>
    """

    class Meta:
        name = "journal-meta"

    model_config = ConfigDict(defer_build=True)
    journal_id: List[JournalId] = field(
        default_factory=list,
        metadata={
            "name": "journal-id",
            "type": "Element",
        },
    )
    journal_title_group: List[JournalTitleGroup] = field(
        default_factory=list,
        metadata={
            "name": "journal-title-group",
            "type": "Element",
        },
    )
    contrib_group: List[ContribGroup] = field(
        default_factory=list,
        metadata={
            "name": "contrib-group",
            "type": "Element",
        },
    )
    aff: List[Aff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    aff_alternatives: List[AffAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "aff-alternatives",
            "type": "Element",
        },
    )
    issn: List[Issn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    issn_l: Optional[IssnL] = field(
        default=None,
        metadata={
            "name": "issn-l",
            "type": "Element",
        },
    )
    isbn: List[Isbn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    publisher: Optional[Publisher] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    self_uri: List[SelfUri] = field(
        default_factory=list,
        metadata={
            "name": "self-uri",
            "type": "Element",
        },
    )
    custom_meta_group: Optional[CustomMetaGroup] = field(
        default=None,
        metadata={
            "name": "custom-meta-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ProcessingMeta(BaseModel):
    """
    <div> <h3>Processing Metadata Model</h3> </div>
    """

    class Meta:
        name = "processing-meta"

    model_config = ConfigDict(defer_build=True)
    restricted_by: List[RestrictedBy] = field(
        default_factory=list,
        metadata={
            "name": "restricted-by",
            "type": "Element",
        },
    )
    extended_by: List[ExtendedBy] = field(
        default_factory=list,
        metadata={
            "name": "extended-by",
            "type": "Element",
        },
    )
    custom_meta_group: List[CustomMetaGroup] = field(
        default_factory=list,
        metadata={
            "name": "custom-meta-group",
            "type": "Element",
        },
    )
    base_tagset: Optional[ProcessingMetaBaseTagset] = field(
        default=None,
        metadata={
            "name": "base-tagset",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    math_representation: List[str] = field(
        default_factory=list,
        metadata={
            "name": "math-representation",
            "type": "Attribute",
            "tokens": True,
        },
    )
    mathml_version: Optional[ProcessingMetaMathmlVersion] = field(
        default=None,
        metadata={
            "name": "mathml-version",
            "type": "Attribute",
        },
    )
    table_model: Optional[ProcessingMetaTableModel] = field(
        default=None,
        metadata={
            "name": "table-model",
            "type": "Attribute",
        },
    )
    tagset_family: Optional[ProcessingMetaTagsetFamily] = field(
        default=None,
        metadata={
            "name": "tagset-family",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Tr(BaseModel):
    class Meta:
        name = "tr"

    model_config = ConfigDict(defer_build=True)
    th: List[Th] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    td: List[Td] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    align: Optional[TrAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    char: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charoff: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[TrValign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class VolumeIssueGroup(BaseModel):
    """
    <div> <h3>Translated Title Group</h3> </div>
    """

    class Meta:
        name = "volume-issue-group"

    model_config = ConfigDict(defer_build=True)
    volume: List[Volume] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    volume_id: List[VolumeId] = field(
        default_factory=list,
        metadata={
            "name": "volume-id",
            "type": "Element",
        },
    )
    volume_series: Optional[VolumeSeries] = field(
        default=None,
        metadata={
            "name": "volume-series",
            "type": "Element",
        },
    )
    issue: List[Issue] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    issue_id: List[IssueId] = field(
        default_factory=list,
        metadata={
            "name": "issue-id",
            "type": "Element",
        },
    )
    issue_title: List[IssueTitle] = field(
        default_factory=list,
        metadata={
            "name": "issue-title",
            "type": "Element",
        },
    )
    issue_title_group: List[IssueTitleGroup] = field(
        default_factory=list,
        metadata={
            "name": "issue-title-group",
            "type": "Element",
        },
    )
    issue_sponsor: List[IssueSponsor] = field(
        default_factory=list,
        metadata={
            "name": "issue-sponsor",
            "type": "Element",
        },
    )
    issue_part: Optional[IssuePart] = field(
        default=None,
        metadata={
            "name": "issue-part",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ContributedResourceGroup(BaseModel):
    """
    <div> <h3>Contributed Resource Group</h3> </div>
    """

    class Meta:
        name = "contributed-resource-group"

    model_config = ConfigDict(defer_build=True)
    award_group: List[AwardGroup] = field(
        default_factory=list,
        metadata={
            "name": "award-group",
            "type": "Element",
        },
    )
    support_description: List[SupportDescription] = field(
        default_factory=list,
        metadata={
            "name": "support-description",
            "type": "Element",
        },
    )
    resource_group: List[ResourceGroup] = field(
        default_factory=list,
        metadata={
            "name": "resource-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    resource_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "resource-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class FundingGroup(BaseModel):
    """
    <div> <h3>Funding Group</h3> </div>
    """

    class Meta:
        name = "funding-group"

    model_config = ConfigDict(defer_build=True)
    award_group: List[AwardGroup] = field(
        default_factory=list,
        metadata={
            "name": "award-group",
            "type": "Element",
        },
    )
    funding_statement: List[FundingStatement] = field(
        default_factory=list,
        metadata={
            "name": "funding-statement",
            "type": "Element",
        },
    )
    open_access: List[OpenAccess] = field(
        default_factory=list,
        metadata={
            "name": "open-access",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class PubHistory(BaseModel):
    """
    <div> <h3>Publication History</h3> </div>
    """

    class Meta:
        name = "pub-history"

    model_config = ConfigDict(defer_build=True)
    event: List[Event] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Tbody(BaseModel):
    class Meta:
        name = "tbody"

    model_config = ConfigDict(defer_build=True)
    tr: List[Tr] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    align: Optional[TbodyAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    char: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charoff: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[TbodyValign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Tfoot(BaseModel):
    class Meta:
        name = "tfoot"

    model_config = ConfigDict(defer_build=True)
    tr: List[Tr] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    align: Optional[TfootAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    char: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charoff: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[TfootValign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Thead(BaseModel):
    class Meta:
        name = "thead"

    model_config = ConfigDict(defer_build=True)
    tr: List[Tr] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "min_occurs": 1,
        },
    )
    align: Optional[TheadAlign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    char: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    charoff: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    valign: Optional[TheadValign] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class SupportGroup(BaseModel):
    """
    <div> <h3>Support Group</h3> </div>
    """

    class Meta:
        name = "support-group"

    model_config = ConfigDict(defer_build=True)
    funding_group: List[FundingGroup] = field(
        default_factory=list,
        metadata={
            "name": "funding-group",
            "type": "Element",
        },
    )
    contributed_resource_group: List[ContributedResourceGroup] = field(
        default_factory=list,
        metadata={
            "name": "contributed-resource-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Table(BaseModel):
    """
    <div> <h3>Table: Table Element ..............................</h3> </div>
    """

    class Meta:
        name = "table"

    model_config = ConfigDict(defer_build=True)
    col: List[Col] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    colgroup: List[Colgroup] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    thead: Optional[Thead] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tfoot: Optional[Tfoot] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    tbody: List[Tbody] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    tr: List[Tr] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    border: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    cellpadding: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    cellspacing: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    frame: Optional[TableFrame] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    rules: Optional[TableRules] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    style: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    summary: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    width: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class TableWrap(BaseModel):
    """
    <div> <h3>Table Wrapper</h3> </div>
    """

    class Meta:
        name = "table-wrap"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: List[Label] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    caption: List[Caption] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List[SubjGroup] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List[LongDesc] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List[Uri] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List[Speech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List[Statement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List[VerseGroup] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    table: List[Table] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xref: List[Xref] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    table_wrap_foot: List[TableWrapFoot] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-foot",
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List[Permissions] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: TableWrapOrientation = field(
        default=TableWrapOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: TableWrapPosition = field(
        default=TableWrapPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class SupplementaryMaterial(BaseModel):
    """
    <div> <h3>Supplementary Material</h3> </div>
    """

    class Meta:
        name = "supplementary-material"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: List[Label] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    caption: List[Caption] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List[SubjGroup] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List[LongDesc] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List[Uri] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List[Speech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List[Statement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List[VerseGroup] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    xref: List[Xref] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    attrib: List[Attrib] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    permissions: List[Permissions] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    hreflang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    mime_subtype: Optional[str] = field(
        default=None,
        metadata={
            "name": "mime-subtype",
            "type": "Attribute",
        },
    )
    mimetype: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: SupplementaryMaterialOrientation = field(
        default=SupplementaryMaterialOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: SupplementaryMaterialPosition = field(
        default=SupplementaryMaterialPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    type_value: TypeType = field(
        const=True,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class TableWrapGroup(BaseModel):
    """
    <div> <h3>Table Wrapper Group</h3> </div>
    """

    class Meta:
        name = "table-wrap-group"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: List[Label] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    caption: List[Caption] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List[SubjGroup] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    alt_text: List[AltText] = field(
        default_factory=list,
        metadata={
            "name": "alt-text",
            "type": "Element",
        },
    )
    long_desc: List[LongDesc] = field(
        default_factory=list,
        metadata={
            "name": "long-desc",
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List[Uri] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    xref: List[Xref] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    orientation: TableWrapGroupOrientation = field(
        default=TableWrapGroupOrientation.PORTRAIT,
        metadata={
            "type": "Attribute",
        },
    )
    position: TableWrapGroupPosition = field(
        default=TableWrapGroupPosition.FLOAT,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class FloatsGroup(BaseModel):
    """
    <div> <h3>Floats Group</h3> </div>
    """

    class Meta:
        name = "floats-group"

    model_config = ConfigDict(defer_build=True)
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List[TableWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class LicenseP(BaseModel):
    """
    <div> <h3>License Paragraph</h3> </div>
    """

    class Meta:
        name = "license-p"

    model_config = ConfigDict(defer_build=True)
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "email",
                    "type": Email,
                },
                {
                    "name": "ext-link",
                    "type": ExtLink,
                },
                {
                    "name": "uri",
                    "type": Uri,
                },
                {
                    "name": "inline-supplementary-material",
                    "type": InlineSupplementaryMaterial,
                },
                {
                    "name": "related-article",
                    "type": RelatedArticle,
                },
                {
                    "name": "related-object",
                    "type": RelatedObject,
                },
                {
                    "name": "hr",
                    "type": Hr,
                },
                {
                    "name": "bold",
                    "type": Bold,
                },
                {
                    "name": "fixed-case",
                    "type": FixedCase,
                },
                {
                    "name": "italic",
                    "type": Italic,
                },
                {
                    "name": "monospace",
                    "type": Monospace,
                },
                {
                    "name": "overline",
                    "type": Overline,
                },
                {
                    "name": "overline-start",
                    "type": OverlineStart,
                },
                {
                    "name": "overline-end",
                    "type": OverlineEnd,
                },
                {
                    "name": "roman",
                    "type": Roman,
                },
                {
                    "name": "sans-serif",
                    "type": SansSerif,
                },
                {
                    "name": "sc",
                    "type": Sc,
                },
                {
                    "name": "strike",
                    "type": Strike,
                },
                {
                    "name": "underline",
                    "type": Underline,
                },
                {
                    "name": "underline-start",
                    "type": UnderlineStart,
                },
                {
                    "name": "underline-end",
                    "type": UnderlineEnd,
                },
                {
                    "name": "ruby",
                    "type": Ruby,
                },
                {
                    "name": "alternatives",
                    "type": Alternatives,
                },
                {
                    "name": "inline-graphic",
                    "type": InlineGraphic,
                },
                {
                    "name": "inline-media",
                    "type": InlineMedia,
                },
                {
                    "name": "private-char",
                    "type": PrivateChar,
                },
                {
                    "name": "chem-struct",
                    "type": ChemStruct,
                },
                {
                    "name": "inline-formula",
                    "type": InlineFormula,
                },
                {
                    "name": "tex-math",
                    "type": TexMath,
                },
                {
                    "name": "math",
                    "type": Math,
                    "namespace": "http://www.w3.org/1998/Math/MathML",
                },
                {
                    "name": "abbrev",
                    "type": Abbrev,
                },
                {
                    "name": "index-term",
                    "type": IndexTerm,
                },
                {
                    "name": "index-term-range-end",
                    "type": IndexTermRangeEnd,
                },
                {
                    "name": "milestone-end",
                    "type": MilestoneEnd,
                },
                {
                    "name": "milestone-start",
                    "type": MilestoneStart,
                },
                {
                    "name": "named-content",
                    "type": NamedContent,
                },
                {
                    "name": "styled-content",
                    "type": StyledContent,
                },
                {
                    "name": "fn",
                    "type": Fn2,
                },
                {
                    "name": "target",
                    "type": Target,
                },
                {
                    "name": "xref",
                    "type": Xref,
                },
                {
                    "name": "sub",
                    "type": Sub,
                },
                {
                    "name": "sup",
                    "type": Sup,
                },
                {
                    "name": "x",
                    "type": X,
                },
                {
                    "name": "address",
                    "type": Address,
                },
                {
                    "name": "answer",
                    "type": Answer,
                },
                {
                    "name": "answer-set",
                    "type": AnswerSet,
                },
                {
                    "name": "array",
                    "type": Array,
                },
                {
                    "name": "block-alternatives",
                    "type": BlockAlternatives,
                },
                {
                    "name": "boxed-text",
                    "type": BoxedText,
                },
                {
                    "name": "chem-struct-wrap",
                    "type": ChemStructWrap,
                },
                {
                    "name": "code",
                    "type": Code,
                },
                {
                    "name": "explanation",
                    "type": Explanation,
                },
                {
                    "name": "fig",
                    "type": Fig,
                },
                {
                    "name": "fig-group",
                    "type": FigGroup,
                },
                {
                    "name": "graphic",
                    "type": Graphic,
                },
                {
                    "name": "media",
                    "type": Media,
                },
                {
                    "name": "preformat",
                    "type": Preformat,
                },
                {
                    "name": "question",
                    "type": Question,
                },
                {
                    "name": "question-wrap",
                    "type": QuestionWrap,
                },
                {
                    "name": "question-wrap-group",
                    "type": QuestionWrapGroup,
                },
                {
                    "name": "supplementary-material",
                    "type": SupplementaryMaterial,
                },
                {
                    "name": "table-wrap",
                    "type": TableWrap,
                },
                {
                    "name": "table-wrap-group",
                    "type": TableWrapGroup,
                },
                {
                    "name": "disp-formula",
                    "type": DispFormula,
                },
                {
                    "name": "disp-formula-group",
                    "type": DispFormulaGroup,
                },
                {
                    "name": "citation-alternatives",
                    "type": CitationAlternatives,
                },
                {
                    "name": "element-citation",
                    "type": ElementCitation,
                },
                {
                    "name": "mixed-citation",
                    "type": MixedCitation,
                },
                {
                    "name": "nlm-citation",
                    "type": NlmCitation,
                },
                {
                    "name": "award-id",
                    "type": AwardId,
                },
                {
                    "name": "funding-source",
                    "type": FundingSource,
                },
                {
                    "name": "open-access",
                    "type": OpenAccess,
                },
                {
                    "name": "def-list",
                    "type": DefList,
                },
                {
                    "name": "list",
                    "type": List2,
                },
                {
                    "name": "ack",
                    "type": Ack,
                },
                {
                    "name": "disp-quote",
                    "type": DispQuote,
                },
                {
                    "name": "speech",
                    "type": Speech,
                },
                {
                    "name": "statement",
                    "type": Statement,
                },
                {
                    "name": "verse-group",
                    "type": VerseGroup,
                },
                {
                    "name": "price",
                    "type": Price,
                },
            ),
        },
    )


class RefList(BaseModel):
    """
    <div> <h3>Reference List (Bibliographic Reference List)</h3> </div>
    """

    class Meta:
        name = "ref-list"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List[Question] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List[QuestionWrap] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List[QuestionWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List[TableWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List[RelatedArticle] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List[RelatedObject] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List[Speech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List[Statement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List[VerseGroup] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref: List[Ref] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List["RefList"] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Sec2(BaseModel):
    """
    <div> <h3>Section</h3> </div>
    """

    class Meta:
        name = "sec"

    model_config = ConfigDict(defer_build=True)
    sec_meta: Optional[SecMeta] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List[Question] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List[QuestionWrap] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List[QuestionWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List[TableWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List[RelatedArticle] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List[RelatedObject] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List[Speech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List[Statement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List[VerseGroup] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List["Sec2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List[Glossary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List[RefList] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    disp_level: Optional[str] = field(
        default=None,
        metadata={
            "name": "disp-level",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    sec_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "sec-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class App(BaseModel):
    """
    <div> <h3>Appendix</h3> </div>
    """

    class Meta:
        name = "app"

    model_config = ConfigDict(defer_build=True)
    sec_meta: Optional[SecMeta] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List[Question] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List[QuestionWrap] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List[QuestionWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List[TableWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List[RelatedArticle] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List[RelatedObject] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List[Speech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List[Statement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List[VerseGroup] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List[Glossary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List[RefList] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    permissions: Optional[Permissions] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Body(BaseModel):
    """
    <div> <h3>Body of the Article</h3> </div>
    """

    class Meta:
        name = "body"

    model_config = ConfigDict(defer_build=True)
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List[Question] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List[QuestionWrap] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List[QuestionWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List[TableWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List[RelatedArticle] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List[RelatedObject] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List[Speech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List[Statement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List[VerseGroup] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sig_block: Optional[SigBlock] = field(
        default=None,
        metadata={
            "name": "sig-block",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class TransAbstract(BaseModel):
    """
    <div> <h3>Translated Abstract</h3> </div>
    """

    class Meta:
        name = "trans-abstract"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    sec_meta: Optional[SecMeta] = field(
        default=None,
        metadata={
            "name": "sec-meta",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List[Question] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List[QuestionWrap] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List[QuestionWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List[TableWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List[RelatedArticle] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List[RelatedObject] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List[Speech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List[Statement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List[VerseGroup] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List[Glossary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List[RefList] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    abstract_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "abstract-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class AppGroup(BaseModel):
    """
    <div> <h3>Appendix Group</h3> </div>
    """

    class Meta:
        name = "app-group"

    model_config = ConfigDict(defer_build=True)
    object_id: List[ObjectId] = field(
        default_factory=list,
        metadata={
            "name": "object-id",
            "type": "Element",
        },
    )
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: Optional[Title] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    subj_group: List[SubjGroup] = field(
        default_factory=list,
        metadata={
            "name": "subj-group",
            "type": "Element",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    alternatives: List[Alternatives] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer: List[Answer] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    answer_set: List[AnswerSet] = field(
        default_factory=list,
        metadata={
            "name": "answer-set",
            "type": "Element",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    block_alternatives: List[BlockAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "block-alternatives",
            "type": "Element",
        },
    )
    boxed_text: List[BoxedText] = field(
        default_factory=list,
        metadata={
            "name": "boxed-text",
            "type": "Element",
        },
    )
    chem_struct_wrap: List[ChemStructWrap] = field(
        default_factory=list,
        metadata={
            "name": "chem-struct-wrap",
            "type": "Element",
        },
    )
    code: List[Code] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    explanation: List[Explanation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig: List[Fig] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fig_group: List[FigGroup] = field(
        default_factory=list,
        metadata={
            "name": "fig-group",
            "type": "Element",
        },
    )
    graphic: List[Graphic] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    media: List[Media] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    preformat: List[Preformat] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question: List[Question] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    question_wrap: List[QuestionWrap] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap",
            "type": "Element",
        },
    )
    question_wrap_group: List[QuestionWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "question-wrap-group",
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    table_wrap: List[TableWrap] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap",
            "type": "Element",
        },
    )
    table_wrap_group: List[TableWrapGroup] = field(
        default_factory=list,
        metadata={
            "name": "table-wrap-group",
            "type": "Element",
        },
    )
    disp_formula: List[DispFormula] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula",
            "type": "Element",
        },
    )
    disp_formula_group: List[DispFormulaGroup] = field(
        default_factory=list,
        metadata={
            "name": "disp-formula-group",
            "type": "Element",
        },
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    tex_math: List[TexMath] = field(
        default_factory=list,
        metadata={
            "name": "tex-math",
            "type": "Element",
        },
    )
    math: List[Math] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.w3.org/1998/Math/MathML",
        },
    )
    p: List[P] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    related_article: List[RelatedArticle] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List[RelatedObject] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    disp_quote: List[DispQuote] = field(
        default_factory=list,
        metadata={
            "name": "disp-quote",
            "type": "Element",
        },
    )
    speech: List[Speech] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    statement: List[Statement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    verse_group: List[VerseGroup] = field(
        default_factory=list,
        metadata={
            "name": "verse-group",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    app: List[App] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List[RefList] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "content-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class ArticleMeta(BaseModel):
    """
    <div> <h3>Article Metadata</h3> </div>
    """

    class Meta:
        name = "article-meta"

    model_config = ConfigDict(defer_build=True)
    article_id: List[ArticleId] = field(
        default_factory=list,
        metadata={
            "name": "article-id",
            "type": "Element",
        },
    )
    article_version: Optional[ArticleVersion] = field(
        default=None,
        metadata={
            "name": "article-version",
            "type": "Element",
        },
    )
    article_version_alternatives: Optional[ArticleVersionAlternatives] = field(
        default=None,
        metadata={
            "name": "article-version-alternatives",
            "type": "Element",
        },
    )
    article_categories: Optional[ArticleCategories] = field(
        default=None,
        metadata={
            "name": "article-categories",
            "type": "Element",
        },
    )
    title_group: Optional[TitleGroup] = field(
        default=None,
        metadata={
            "name": "title-group",
            "type": "Element",
        },
    )
    contrib_group: List[ContribGroup] = field(
        default_factory=list,
        metadata={
            "name": "contrib-group",
            "type": "Element",
        },
    )
    aff: List[Aff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    aff_alternatives: List[AffAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "aff-alternatives",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    author_notes: Optional[AuthorNotes] = field(
        default=None,
        metadata={
            "name": "author-notes",
            "type": "Element",
        },
    )
    pub_date: List[PubDate] = field(
        default_factory=list,
        metadata={
            "name": "pub-date",
            "type": "Element",
        },
    )
    pub_date_not_available: Optional[PubDateNotAvailable] = field(
        default=None,
        metadata={
            "name": "pub-date-not-available",
            "type": "Element",
        },
    )
    volume: List[Volume] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    volume_id: List[VolumeId] = field(
        default_factory=list,
        metadata={
            "name": "volume-id",
            "type": "Element",
        },
    )
    volume_series: Optional[VolumeSeries] = field(
        default=None,
        metadata={
            "name": "volume-series",
            "type": "Element",
        },
    )
    issue: List[Issue] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    issue_id: List[IssueId] = field(
        default_factory=list,
        metadata={
            "name": "issue-id",
            "type": "Element",
        },
    )
    issue_title: List[IssueTitle] = field(
        default_factory=list,
        metadata={
            "name": "issue-title",
            "type": "Element",
        },
    )
    issue_title_group: List[IssueTitleGroup] = field(
        default_factory=list,
        metadata={
            "name": "issue-title-group",
            "type": "Element",
        },
    )
    issue_sponsor: List[IssueSponsor] = field(
        default_factory=list,
        metadata={
            "name": "issue-sponsor",
            "type": "Element",
        },
    )
    issue_part: Optional[IssuePart] = field(
        default=None,
        metadata={
            "name": "issue-part",
            "type": "Element",
        },
    )
    volume_issue_group: List[VolumeIssueGroup] = field(
        default_factory=list,
        metadata={
            "name": "volume-issue-group",
            "type": "Element",
        },
    )
    isbn: List[Isbn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    supplement: Optional[Supplement] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fpage: Optional[Fpage] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lpage: Optional[Lpage] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    page_range: Optional[PageRange] = field(
        default=None,
        metadata={
            "name": "page-range",
            "type": "Element",
        },
    )
    elocation_id: Optional[ElocationId] = field(
        default=None,
        metadata={
            "name": "elocation-id",
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List[Uri] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    history: Optional[History] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pub_history: Optional[PubHistory] = field(
        default=None,
        metadata={
            "name": "pub-history",
            "type": "Element",
        },
    )
    permissions: Optional[Permissions] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    self_uri: List[SelfUri] = field(
        default_factory=list,
        metadata={
            "name": "self-uri",
            "type": "Element",
        },
    )
    related_article: List[RelatedArticle] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List[RelatedObject] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    trans_abstract: List[TransAbstract] = field(
        default_factory=list,
        metadata={
            "name": "trans-abstract",
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    funding_group: List[FundingGroup] = field(
        default_factory=list,
        metadata={
            "name": "funding-group",
            "type": "Element",
        },
    )
    support_group: List[SupportGroup] = field(
        default_factory=list,
        metadata={
            "name": "support-group",
            "type": "Element",
        },
    )
    conference: List[Conference] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    counts: Optional[Counts] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    custom_meta_group: Optional[CustomMetaGroup] = field(
        default=None,
        metadata={
            "name": "custom-meta-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class FrontStub(BaseModel):
    """
    <div> <h3>Stub Front Metadata</h3> </div>
    """

    class Meta:
        name = "front-stub"

    model_config = ConfigDict(defer_build=True)
    article_id: List[ArticleId] = field(
        default_factory=list,
        metadata={
            "name": "article-id",
            "type": "Element",
        },
    )
    article_version: Optional[ArticleVersion] = field(
        default=None,
        metadata={
            "name": "article-version",
            "type": "Element",
        },
    )
    article_version_alternatives: Optional[ArticleVersionAlternatives] = field(
        default=None,
        metadata={
            "name": "article-version-alternatives",
            "type": "Element",
        },
    )
    article_categories: Optional[ArticleCategories] = field(
        default=None,
        metadata={
            "name": "article-categories",
            "type": "Element",
        },
    )
    title_group: Optional[TitleGroup] = field(
        default=None,
        metadata={
            "name": "title-group",
            "type": "Element",
        },
    )
    contrib_group: List[ContribGroup] = field(
        default_factory=list,
        metadata={
            "name": "contrib-group",
            "type": "Element",
        },
    )
    aff: List[Aff] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    aff_alternatives: List[AffAlternatives] = field(
        default_factory=list,
        metadata={
            "name": "aff-alternatives",
            "type": "Element",
        },
    )
    x: List[X] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    author_notes: Optional[AuthorNotes] = field(
        default=None,
        metadata={
            "name": "author-notes",
            "type": "Element",
        },
    )
    pub_date: List[PubDate] = field(
        default_factory=list,
        metadata={
            "name": "pub-date",
            "type": "Element",
        },
    )
    pub_date_not_available: Optional[PubDateNotAvailable] = field(
        default=None,
        metadata={
            "name": "pub-date-not-available",
            "type": "Element",
        },
    )
    volume: List[Volume] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    volume_id: List[VolumeId] = field(
        default_factory=list,
        metadata={
            "name": "volume-id",
            "type": "Element",
        },
    )
    volume_series: Optional[VolumeSeries] = field(
        default=None,
        metadata={
            "name": "volume-series",
            "type": "Element",
        },
    )
    issue: List[Issue] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    issue_id: List[IssueId] = field(
        default_factory=list,
        metadata={
            "name": "issue-id",
            "type": "Element",
        },
    )
    issue_title: List[IssueTitle] = field(
        default_factory=list,
        metadata={
            "name": "issue-title",
            "type": "Element",
        },
    )
    issue_title_group: List[IssueTitleGroup] = field(
        default_factory=list,
        metadata={
            "name": "issue-title-group",
            "type": "Element",
        },
    )
    issue_sponsor: List[IssueSponsor] = field(
        default_factory=list,
        metadata={
            "name": "issue-sponsor",
            "type": "Element",
        },
    )
    issue_part: Optional[IssuePart] = field(
        default=None,
        metadata={
            "name": "issue-part",
            "type": "Element",
        },
    )
    volume_issue_group: List[VolumeIssueGroup] = field(
        default_factory=list,
        metadata={
            "name": "volume-issue-group",
            "type": "Element",
        },
    )
    isbn: List[Isbn] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    supplement: Optional[Supplement] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    fpage: Optional[Fpage] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    lpage: Optional[Lpage] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    page_range: Optional[PageRange] = field(
        default=None,
        metadata={
            "name": "page-range",
            "type": "Element",
        },
    )
    elocation_id: Optional[ElocationId] = field(
        default=None,
        metadata={
            "name": "elocation-id",
            "type": "Element",
        },
    )
    email: List[Email] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ext_link: List[ExtLink] = field(
        default_factory=list,
        metadata={
            "name": "ext-link",
            "type": "Element",
        },
    )
    uri: List[Uri] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    product: List[Product2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    supplementary_material: List[SupplementaryMaterial] = field(
        default_factory=list,
        metadata={
            "name": "supplementary-material",
            "type": "Element",
        },
    )
    history: Optional[History] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    pub_history: Optional[PubHistory] = field(
        default=None,
        metadata={
            "name": "pub-history",
            "type": "Element",
        },
    )
    permissions: Optional[Permissions] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    self_uri: List[SelfUri] = field(
        default_factory=list,
        metadata={
            "name": "self-uri",
            "type": "Element",
        },
    )
    related_article: List[RelatedArticle] = field(
        default_factory=list,
        metadata={
            "name": "related-article",
            "type": "Element",
        },
    )
    related_object: List[RelatedObject] = field(
        default_factory=list,
        metadata={
            "name": "related-object",
            "type": "Element",
        },
    )
    abstract: List[Abstract] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    trans_abstract: List[TransAbstract] = field(
        default_factory=list,
        metadata={
            "name": "trans-abstract",
            "type": "Element",
        },
    )
    kwd_group: List[KwdGroup] = field(
        default_factory=list,
        metadata={
            "name": "kwd-group",
            "type": "Element",
        },
    )
    funding_group: List[FundingGroup] = field(
        default_factory=list,
        metadata={
            "name": "funding-group",
            "type": "Element",
        },
    )
    support_group: List[SupportGroup] = field(
        default_factory=list,
        metadata={
            "name": "support-group",
            "type": "Element",
        },
    )
    conference: List[Conference] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    counts: Optional[Counts] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    custom_meta_group: Optional[CustomMetaGroup] = field(
        default=None,
        metadata={
            "name": "custom-meta-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Back(BaseModel):
    """
    <div> <h3>Back Matter</h3> </div>
    """

    class Meta:
        name = "back"

    model_config = ConfigDict(defer_build=True)
    label: Optional[Label] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    title: List[Title] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    app_group: List[AppGroup] = field(
        default_factory=list,
        metadata={
            "name": "app-group",
            "type": "Element",
        },
    )
    bio: List[Bio] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List[Glossary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    ref_list: List[RefList] = field(
        default_factory=list,
        metadata={
            "name": "ref-list",
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    sec: List[Sec2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Front(BaseModel):
    """
    <div> <h3>Front Matter</h3> </div>
    """

    class Meta:
        name = "front"

    model_config = ConfigDict(defer_build=True)
    journal_meta: Optional[JournalMeta] = field(
        default=None,
        metadata={
            "name": "journal-meta",
            "type": "Element",
        },
    )
    article_meta: ArticleMeta = field(
        metadata={
            "name": "article-meta",
            "type": "Element",
            "required": True,
        }
    )
    def_list: List[DefList] = field(
        default_factory=list,
        metadata={
            "name": "def-list",
            "type": "Element",
        },
    )
    list_value: List[List2] = field(
        default_factory=list,
        metadata={
            "name": "list",
            "type": "Element",
        },
    )
    ack: List[Ack] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    bio: List[Bio] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    fn_group: List[FnGroup] = field(
        default_factory=list,
        metadata={
            "name": "fn-group",
            "type": "Element",
        },
    )
    glossary: List[Glossary] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    notes: List[Notes] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Response(BaseModel):
    """
    <div> <h3>Response</h3> </div>
    """

    class Meta:
        name = "response"

    model_config = ConfigDict(defer_build=True)
    processing_meta: Optional[ProcessingMeta] = field(
        default=None,
        metadata={
            "name": "processing-meta",
            "type": "Element",
        },
    )
    front: Optional[Front] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    front_stub: Optional[FrontStub] = field(
        default=None,
        metadata={
            "name": "front-stub",
            "type": "Element",
        },
    )
    body: Optional[Body] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    back: Optional[Back] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floats_group: Optional[FloatsGroup] = field(
        default=None,
        metadata={
            "name": "floats-group",
            "type": "Element",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    response_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "response-type",
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class SubArticle(BaseModel):
    """
    <div> <h3>Sub-Article</h3> </div>
    """

    class Meta:
        name = "sub-article"

    model_config = ConfigDict(defer_build=True)
    processing_meta: Optional[ProcessingMeta] = field(
        default=None,
        metadata={
            "name": "processing-meta",
            "type": "Element",
        },
    )
    front: Optional[Front] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    front_stub: Optional[FrontStub] = field(
        default=None,
        metadata={
            "name": "front-stub",
            "type": "Element",
        },
    )
    body: Optional[Body] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    back: Optional[Back] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floats_group: Optional[FloatsGroup] = field(
        default=None,
        metadata={
            "name": "floats-group",
            "type": "Element",
        },
    )
    sub_article: List["SubArticle"] = field(
        default_factory=list,
        metadata={
            "name": "sub-article",
            "type": "Element",
        },
    )
    response: List[Response] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    article_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "article-type",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class Article(BaseModel):
    """
    <div> <h3>Article</h3> </div>
    """

    class Meta:
        name = "article"

    model_config = ConfigDict(defer_build=True)
    processing_meta: Optional[ProcessingMeta] = field(
        default=None,
        metadata={
            "name": "processing-meta",
            "type": "Element",
        },
    )
    front: Front = field(
        metadata={
            "type": "Element",
            "required": True,
        }
    )
    body: Optional[Body] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    back: Optional[Back] = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    floats_group: Optional[FloatsGroup] = field(
        default=None,
        metadata={
            "name": "floats-group",
            "type": "Element",
        },
    )
    sub_article: List[SubArticle] = field(
        default_factory=list,
        metadata={
            "name": "sub-article",
            "type": "Element",
        },
    )
    response: List[Response] = field(
        default_factory=list,
        metadata={
            "type": "Element",
        },
    )
    article_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "article-type",
            "type": "Attribute",
        },
    )
    dtd_version: Optional[ArticleDtdVersion] = field(
        default=None,
        metadata={
            "name": "dtd-version",
            "type": "Attribute",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    specific_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "specific-use",
            "type": "Attribute",
        },
    )
    base: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    lang: Union[str, LangValue] = field(
        default="en",
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
