{"version":3,"file":"index.BOyxPY6U.js","sources":["../../../../lib/src/components/widgets/TextInput/styled-components.ts","../../../../lib/src/components/widgets/TextInput/TextInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledTextInputProps {\n  width: number\n}\n\nexport const StyledTextInput = styled.div<StyledTextInputProps>(\n  ({ width }) => ({\n    position: \"relative\",\n    width,\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useCallback, useState } from \"react\"\n\nimport uniqueId from \"lodash/uniqueId\"\nimport { Input as UIInput } from \"baseui/input\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { TextInput as TextInputProto } from \"@streamlit/lib/src/proto\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/hooks/useBasicWidgetState\"\nimport useUpdateUiValue from \"@streamlit/lib/src/hooks/useUpdateUiValue\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport {\n  isInForm,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport { StyledTextInput } from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\nfunction TextInput({\n  disabled,\n  element,\n  widgetMgr,\n  width,\n  fragmentId,\n}: Props): ReactElement {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  const [uiValue, setUiValue] = useState<string | null>(\n    getStateFromWidgetMgr(widgetMgr, element) ?? null\n  )\n\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  const [dirty, setDirty] = useState(false)\n\n  const onFormCleared = useCallback(() => {\n    setUiValue(element.default ?? null)\n    setDirty(true)\n  }, [element.default])\n\n  const [value, setValueWithSource] = useBasicWidgetState<\n    string | null,\n    TextInputProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  useUpdateUiValue(value, uiValue, setUiValue, dirty)\n\n  /**\n   * Whether the input is currently focused.\n   */\n  const [focused, setFocused] = useState(false)\n\n  const theme = useTheme()\n  const [id] = useState(() => uniqueId(\"text_input_\"))\n  const { placeholder, formId } = element\n\n  const commitWidgetValue = useCallback((): void => {\n    setDirty(false)\n    setValueWithSource({ value: uiValue, fromUi: true })\n  }, [uiValue, setValueWithSource])\n\n  // Show \"Please enter\" instructions if in a form & allowed, or not in form and state is dirty.\n  const allowEnterToSubmit = isInForm({ formId })\n    ? widgetMgr.allowFormEnterToSubmit(formId)\n    : dirty\n\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    focused && width > theme.breakpoints.hideWidgetDetails\n\n  const onBlur = useCallback((): void => {\n    if (dirty) {\n      commitWidgetValue()\n    }\n    setFocused(false)\n  }, [dirty, commitWidgetValue])\n\n  const onFocus = useCallback((): void => {\n    setFocused(true)\n  }, [])\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const { value: newValue } = e.target\n      const { maxChars } = element\n\n      if (maxChars !== 0 && newValue.length > maxChars) {\n        return\n      }\n\n      setDirty(true)\n      setUiValue(newValue)\n\n      // We immediately update its widgetValue on text changes in forms\n      // see here for why: https://github.com/streamlit/streamlit/issues/7101\n      // The widgetValue won't be passed to the Python script until the form\n      // is submitted, so this won't cause the script to re-run.\n      if (isInForm(element)) {\n        // Make sure dirty is true so that enter to submit form text shows\n        setValueWithSource({ value: newValue, fromUi: true })\n      }\n      // If the TextInput is *not* part of a form, we mark it dirty but don't\n      // update its value in the WidgetMgr. This means that individual keypresses\n      // won't trigger a script re-run.\n    },\n    [element, setValueWithSource]\n  )\n\n  const onKeyPress = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      if (e.key !== \"Enter\") {\n        return\n      }\n\n      if (dirty) {\n        commitWidgetValue()\n      }\n\n      if (widgetMgr.allowFormEnterToSubmit(element.formId)) {\n        widgetMgr.submitForm(element.formId, fragmentId)\n      }\n    },\n    [element, fragmentId, dirty, commitWidgetValue, widgetMgr]\n  )\n\n  return (\n    <StyledTextInput\n      className=\"stTextInput\"\n      data-testid=\"stTextInput\"\n      width={width}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <UIInput\n        value={uiValue ?? \"\"}\n        placeholder={placeholder}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n        aria-label={element.label}\n        disabled={disabled}\n        id={id}\n        type={getTypeString(element)}\n        autoComplete={element.autocomplete}\n        overrides={{\n          Input: {\n            style: {\n              // Issue: https://github.com/streamlit/streamlit/issues/2495\n              // The input won't shrink in Firefox,\n              // unless the line below is provided.\n              // See https://stackoverflow.com/a/33811151\n              minWidth: 0,\n              \"::placeholder\": {\n                opacity: \"0.7\",\n              },\n              lineHeight: theme.lineHeights.inputWidget,\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              paddingRight: theme.spacing.sm,\n              paddingLeft: theme.spacing.sm,\n              paddingBottom: theme.spacing.sm,\n              paddingTop: theme.spacing.sm,\n            },\n          },\n          Root: {\n            props: {\n              \"data-testid\": \"stTextInputRootElement\",\n            },\n            style: {\n              height: theme.sizes.minElementHeight,\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              borderLeftWidth: theme.sizes.borderWidth,\n              borderRightWidth: theme.sizes.borderWidth,\n              borderTopWidth: theme.sizes.borderWidth,\n              borderBottomWidth: theme.sizes.borderWidth,\n            },\n          },\n        }}\n      />\n      {shouldShowInstructions && (\n        <InputInstructions\n          dirty={dirty}\n          value={uiValue ?? \"\"}\n          maxLength={element.maxChars}\n          inForm={isInForm({ formId: element.formId })}\n          allowEnterToSubmit={allowEnterToSubmit}\n        />\n      )}\n    </StyledTextInput>\n  )\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: TextInputProto\n): string | null {\n  return widgetMgr.getStringValue(element) ?? null\n}\n\nfunction getDefaultStateFromProto(element: TextInputProto): string | null {\n  return element.default ?? null\n}\n\nfunction getCurrStateFromProto(element: TextInputProto): string | null {\n  return element.value ?? null\n}\n\nfunction updateWidgetMgrState(\n  element: TextInputProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWithSource<string | null>,\n  fragmentId?: string\n): void {\n  widgetMgr.setStringValue(\n    element,\n    vws.value,\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nfunction getTypeString(element: TextInputProto): string {\n  return element.type === TextInputProto.Type.PASSWORD ? \"password\" : \"text\"\n}\n\nexport default TextInput\n"],"names":["StyledTextInput","styled","width","position","TextInput","disabled","element","widgetMgr","fragmentId","uiValue","setUiValue","useState","getStateFromWidgetMgr","dirty","setDirty","onFormCleared","useCallback","default","value","setValueWithSource","useBasicWidgetState","getDefaultStateFromProto","getCurrStateFromProto","updateWidgetMgrState","focused","setFocused","theme","useTheme","id","uniqueId","placeholder","formId","commitWidgetValue","fromUi","allowEnterToSubmit","isInForm","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","onBlur","onFocus","onChange","e","newValue","target","maxChars","length","onKeyPress","key","submitForm","className","data-testid","WidgetLabel","label","labelVisibility","labelVisibilityProtoValueToEnum","htmlFor","help","_jsx","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","TOP_RIGHT","UIInput","aria-label","type","getTypeString","autoComplete","autocomplete","overrides","Input","style","minWidth","opacity","lineHeight","lineHeights","inputWidget","paddingRight","spacing","sm","paddingLeft","paddingBottom","paddingTop","Root","props","height","sizes","minElementHeight","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","InputInstructions","maxLength","inForm","getStringValue","vws","setStringValue","TextInputProto","Type","PASSWORD"],"mappings":"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"}