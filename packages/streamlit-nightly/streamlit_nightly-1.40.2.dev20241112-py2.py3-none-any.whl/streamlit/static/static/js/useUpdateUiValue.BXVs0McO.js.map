{"version":3,"file":"useUpdateUiValue.BXVs0McO.js","sources":["../../../../lib/src/hooks/useUpdateUiValue.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Dispatch, SetStateAction, useEffect } from \"react\"\n\n/**\n * Sets the ui value to the new value if they are not equal and the ui value is not dirty.\n * If the ui value is dirty, it means the user has made changes to the ui value that have not been synced to the backend.\n *\n * @param newValue the new value to set the ui value to\n * @param uiValue the current ui value\n * @param setUiValue the function to set the ui value\n * @param dirty whether the ui value is dirty (has unsynced changes)\n */\nexport default function useUpdateUiValue<T>(\n  newValue: T,\n  uiValue: T,\n  setUiValue: Dispatch<SetStateAction<T>>,\n  dirty: boolean\n): void {\n  useEffect(() => {\n    // the UI did not sync its value\n    if (dirty) {\n      return\n    }\n    // If the incoming value changes, update the UI value (e.g. set via state)\n    if (newValue !== uiValue) {\n      setUiValue(newValue)\n    }\n  }, [newValue, uiValue, dirty, setUiValue])\n}\n"],"names":["useUpdateUiValue","newValue","uiValue","setUiValue","dirty","useEffect"],"mappings":"wCA2BA,SAAwBA,EACtBC,EACAC,EACAC,EACAC,EAAc,CAEdC,EAAAA,UAAU,IAAA,CAEJD,GAIAH,IAAaC,GACfC,EAAWF,CAAAA,CACb,EACC,CAACA,EAAUC,EAASE,EAAOD,CAAAA,CAAW,CAC3C"}