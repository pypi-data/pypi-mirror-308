{"version":3,"file":"index.DrnoRdkG.js","sources":["../../../../lib/src/components/elements/IFrame/IFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { CSSProperties, ReactElement } from \"react\"\n\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { IFrame as IFrameProto } from \"@streamlit/lib/src/proto\"\nimport {\n  DEFAULT_IFRAME_FEATURE_POLICY,\n  DEFAULT_IFRAME_SANDBOX_POLICY,\n} from \"@streamlit/lib/src/util/IFrameUtil\"\n\nexport interface IFrameProps {\n  element: IFrameProto\n  width: number\n}\n\nexport default function IFrame({\n  element,\n  width: propWidth,\n}: Readonly<IFrameProps>): ReactElement {\n  const width = element.hasWidth ? element.width : propWidth\n\n  // Handle scrollbar visibility. Chrome and other WebKit browsers still\n  // seem to use the deprecated \"scrolling\" attribute, whereas the standard\n  // says to use a CSS style.\n  let scrolling: string\n  let style: CSSProperties\n  if (element.scrolling) {\n    scrolling = \"auto\"\n    style = {}\n  } else {\n    scrolling = \"no\"\n    style = { overflow: \"hidden\" }\n  }\n\n  style.colorScheme = \"normal\"\n\n  // Either 'src' or 'srcDoc' will be set in our element. If 'src'\n  // is set, we're loading a remote URL in the iframe.\n  const src = getNonEmptyString(element.src)\n  const srcDoc = notNullOrUndefined(src)\n    ? undefined\n    : getNonEmptyString(element.srcdoc)\n\n  return (\n    <iframe\n      className=\"stIFrame\"\n      data-testid=\"stIFrame\"\n      allow={DEFAULT_IFRAME_FEATURE_POLICY}\n      style={style}\n      src={src}\n      srcDoc={srcDoc}\n      width={width}\n      height={element.height}\n      scrolling={scrolling}\n      sandbox={DEFAULT_IFRAME_SANDBOX_POLICY}\n      title=\"st.iframe\"\n    />\n  )\n}\n\n/**\n * Return a string property from an element. If the string is\n * null or empty, return undefined instead.\n */\nfunction getNonEmptyString(\n  value: string | null | undefined\n): string | undefined {\n  return isNullOrUndefined(value) || value === \"\" ? undefined : value\n}\n"],"names":["IFrame","element","width","propWidth","hasWidth","scrolling","style","overflow","colorScheme","src","getNonEmptyString","srcDoc","notNullOrUndefined","undefined","srcdoc","iframe","className","data-testid","allow","DEFAULT_IFRAME_FEATURE_POLICY","height","sandbox","DEFAULT_IFRAME_SANDBOX_POLICY","title","value","isNullOrUndefined"],"mappings":"sEAgCA,SAAwBA,EAAO,CAC7BC,QAAAA,EACAC,MAAOC,GACe,CACtB,MAAMD,EAAQD,EAAQG,SAAWH,EAAQC,MAAQC,EAK7CE,IAAAA,EACAC,EACAL,EAAQI,WACEA,EAAA,OACZC,EAAQ,CAAA,IAEID,EAAA,KACJC,EAAA,CAAEC,SAAU,QAAA,GAGtBD,EAAME,YAAc,SAIdC,MAAAA,EAAMC,EAAkBT,EAAQQ,GAAG,EACnCE,EAASC,EAAmBH,CAAAA,EAC9BI,OACAH,EAAkBT,EAAQa,MAAM,EAEpC,SACGC,SAAAA,CACCC,UAAU,WACVC,cAAY,WACZC,MAAOC,EACPb,MAAAA,EACAG,IAAAA,EACAE,OAAAA,EACAT,MAAAA,EACAkB,OAAQnB,EAAQmB,OAChBf,UAAAA,EACAgB,QAASC,EACTC,MAAM,WAAA,EAGZ,CAMA,SAASb,EACPc,EAAgC,CAEhC,OAAOC,EAAkBD,CAAAA,GAAUA,IAAU,GAAKX,OAAYW,CAChE"}