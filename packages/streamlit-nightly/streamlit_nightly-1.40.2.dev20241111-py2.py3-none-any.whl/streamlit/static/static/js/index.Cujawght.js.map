{"version":3,"file":"index.Cujawght.js","sources":["../../../../lib/src/components/widgets/TextArea/TextArea.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nimport { Textarea as UITextArea } from \"baseui/textarea\"\nimport { useTheme } from \"@emotion/react\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport { TextArea as TextAreaProto } from \"@streamlit/lib/src/proto\"\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport {\n  isInForm,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/useBasicWidgetState\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextAreaProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ntype TextAreaValue = string | null\n\nconst getStateFromWidgetMgr = (\n  widgetMgr: WidgetStateManager,\n  element: TextAreaProto\n): TextAreaValue | undefined => {\n  return widgetMgr.getStringValue(element) ?? element.default ?? null\n}\n\nconst getDefaultStateFromProto = (element: TextAreaProto): TextAreaValue => {\n  return element.default ?? null\n}\n\nconst getCurrStateFromProto = (element: TextAreaProto): TextAreaValue => {\n  return element.value ?? null\n}\n\nconst updateWidgetMgrState = (\n  element: TextAreaProto,\n  widgetMgr: WidgetStateManager,\n  valueWithSource: ValueWithSource<TextAreaValue>,\n  fragmentId?: string\n): void => {\n  widgetMgr.setStringValue(\n    element,\n    valueWithSource.value,\n    { fromUi: valueWithSource.fromUi },\n    fragmentId\n  )\n}\n\nconst TextArea: FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  fragmentId,\n  width,\n}) => {\n  const id = useRef(uniqueId(\"text_area_\")).current\n\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  const [dirty, setDirty] = useState(false)\n  /**\n   * Whether the area is currently focused.\n   */\n  const [focused, setFocused] = useState(false)\n\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  const [uiValue, setUiValue] = useState<string | null>(\n    getStateFromWidgetMgr(widgetMgr, element) ?? null\n  )\n\n  const onFormCleared = useCallback(() => {\n    setUiValue(element.default ?? null)\n    setDirty(true)\n  }, [element])\n\n  const [value, setValueWithSource] = useBasicWidgetState<\n    TextAreaValue,\n    TextAreaProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  useEffect(() => {\n    // the UI did not sync its value\n    if (dirty) {\n      return\n    }\n    // If the incoming value changes, update the UI value (e.g. set via state)\n    if (value !== uiValue) {\n      setUiValue(value)\n    }\n  }, [value, uiValue, dirty])\n\n  const theme: EmotionTheme = useTheme()\n\n  const commitWidgetValue = useCallback(\n    ({ fromUi }: Source): void => {\n      setValueWithSource({ value: uiValue, fromUi })\n      setDirty(false)\n    },\n    [uiValue, setValueWithSource]\n  )\n\n  const onBlur = useCallback(() => {\n    if (dirty) {\n      commitWidgetValue({ fromUi: true })\n    }\n    setFocused(false)\n  }, [dirty, commitWidgetValue])\n\n  const onFocus = useCallback(() => {\n    setFocused(true)\n  }, [])\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n      const { value } = e.target\n      const { maxChars } = element\n\n      if (maxChars !== 0 && value.length > maxChars) {\n        return\n      }\n\n      // mark it dirty but don't update its value in the WidgetMgr\n      // This means that individual keypresses won't trigger a script re-run.\n      setUiValue(value)\n      setDirty(true)\n    },\n    [element]\n  )\n\n  const isEnterKeyPressed = (\n    event: React.KeyboardEvent<HTMLTextAreaElement>\n  ): boolean => {\n    const { keyCode, key } = event\n\n    // Using keyCode as well due to some different behaviors on Windows\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=79407\n    return (\n      (key === \"Enter\" || keyCode === 13 || keyCode === 10) &&\n      // Do not send the sentence being composed when Enter is typed into the IME.\n      !(event.nativeEvent?.isComposing === true)\n    )\n  }\n\n  const onKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>): void => {\n      const { metaKey, ctrlKey } = e\n      const { formId } = element\n      const allowFormEnterToSubmit = widgetMgr.allowFormEnterToSubmit(formId)\n\n      if (isEnterKeyPressed(e) && (ctrlKey || metaKey) && dirty) {\n        e.preventDefault()\n\n        commitWidgetValue({ fromUi: true })\n        if (allowFormEnterToSubmit) {\n          widgetMgr.submitForm(formId, fragmentId)\n        }\n      }\n    },\n    [element, widgetMgr, dirty, commitWidgetValue, fragmentId]\n  )\n\n  const style = { width }\n  const { height, placeholder, formId } = element\n\n  // Show \"Please enter\" instructions if in a form & allowed, or not in form and state is dirty.\n  const allowEnterToSubmit = isInForm({ formId })\n    ? widgetMgr.allowFormEnterToSubmit(formId)\n    : dirty\n\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    focused && width > theme.breakpoints.hideWidgetDetails\n\n  return (\n    <div className=\"stTextArea\" data-testid=\"stTextArea\" style={style}>\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <UITextArea\n        value={uiValue ?? \"\"}\n        placeholder={placeholder}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        aria-label={element.label}\n        disabled={disabled}\n        id={id}\n        overrides={{\n          Input: {\n            style: {\n              lineHeight: theme.lineHeights.inputWidget,\n\n              // The default height of the text area is calculated to perfectly fit 3 lines of text.\n              height: height ? `${height}px` : \"\",\n              minHeight: theme.sizes.largestElementHeight,\n              resize: \"vertical\",\n              \"::placeholder\": {\n                opacity: \"0.7\",\n              },\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              paddingRight: theme.spacing.lg,\n              paddingLeft: theme.spacing.lg,\n              paddingBottom: theme.spacing.lg,\n              paddingTop: theme.spacing.lg,\n            },\n          },\n          Root: {\n            props: {\n              \"data-testid\": \"stTextAreaRootElement\",\n            },\n            style: {\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              borderLeftWidth: theme.sizes.borderWidth,\n              borderRightWidth: theme.sizes.borderWidth,\n              borderTopWidth: theme.sizes.borderWidth,\n              borderBottomWidth: theme.sizes.borderWidth,\n            },\n          },\n        }}\n      />\n      {shouldShowInstructions && (\n        <InputInstructions\n          dirty={dirty}\n          value={uiValue ?? \"\"}\n          maxLength={element.maxChars}\n          type={\"multiline\"}\n          inForm={isInForm({ formId })}\n          allowEnterToSubmit={allowEnterToSubmit}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default memo(TextArea)\n"],"names":["getStateFromWidgetMgr","widgetMgr","element","getStringValue","default","getDefaultStateFromProto","getCurrStateFromProto","value","updateWidgetMgrState","valueWithSource","fragmentId","setStringValue","fromUi","TextArea","disabled","width","id","useRef","uniqueId","current","dirty","setDirty","useState","focused","setFocused","uiValue","setUiValue","onFormCleared","useCallback","setValueWithSource","useBasicWidgetState","useEffect","theme","useTheme","commitWidgetValue","onBlur","onFocus","onChange","e","target","maxChars","length","isEnterKeyPressed","event","keyCode","key","nativeEvent","isComposing","onKeyDown","metaKey","ctrlKey","formId","allowFormEnterToSubmit","preventDefault","submitForm","style","height","placeholder","allowEnterToSubmit","isInForm","shouldShowInstructions","breakpoints","hideWidgetDetails","div","className","data-testid","WidgetLabel","label","labelVisibility","labelVisibilityProtoValueToEnum","htmlFor","help","_jsx","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","TOP_RIGHT","UITextArea","aria-label","overrides","Input","lineHeight","lineHeights","inputWidget","minHeight","sizes","largestElementHeight","resize","opacity","paddingRight","spacing","lg","paddingLeft","paddingBottom","paddingTop","Root","props","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","InputInstructions","maxLength","type","inForm","TextArea$1"],"mappings":"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"}