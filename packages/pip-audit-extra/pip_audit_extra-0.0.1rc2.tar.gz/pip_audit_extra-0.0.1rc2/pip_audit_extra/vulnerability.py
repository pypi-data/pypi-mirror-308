from pip_audit_extra.severity import Severity, SEVERITY_PRIORITY, SEVERITY_COLOR

from typing import List, Optional, Iterable, Tuple

from rich.console import Console
from rich.table import Table


class Vulnerability:
	__slots__ = "id", "package_name", "package_version", "fix_versions", "severity"

	def __init__(
		self,
		id: str,
		package_name: str,
		package_version: str,
		fix_versions: List[str],
		severity: Optional[Severity],
	) -> None:
		self.id = id
		self.package_name = package_name
		self.package_version = package_version
		self.fix_versions = fix_versions
		self.severity = severity


def sort_vulnerabilities(vulns: Iterable[Vulnerability]) -> List[Vulnerability]:
	"""
	Sorts vulnerabilities by priority and package name.

	Args:
		vulns: Vulnerabilities to sort.

	Returns:
		Sorted list of vulnerabilities.
	"""
	lowest_priority = max(SEVERITY_PRIORITY.values()) + 1		# Maximum value - minimum priority

	def sort_key(x: Vulnerability) -> Tuple[int, str]:
		if x.severity:
			return SEVERITY_PRIORITY.get(x.severity, lowest_priority), x.package_name

		return lowest_priority, x.package_name

	return sorted(vulns, key=sort_key)


def print_vulnerabilities(console: Console, vulns: Iterable[Vulnerability]) -> None:
	"""
	Prints table of vulnerabilities.

	Args:
		console: The `rich.console.Console` object to use for drawing the table.
		vulns: Vulnerabilities to print.
	"""
	table = Table()
	table.add_column("Id")
	table.add_column("Package name")
	table.add_column("Package version")
	table.add_column("Fix versions")
	table.add_column("Severity")

	for vuln in sort_vulnerabilities(vulns):
		if vuln.severity:
			severity = vuln.severity.value
			severity_color = SEVERITY_COLOR.get(vuln.severity, "")
		else:
			severity = ""
			severity_color = ""

		if severity_color:
			severity = f"[{severity_color}]{severity}[/{severity_color}]"

		table.add_row(
			vuln.id,
			vuln.package_name,
			vuln.package_version,
			", ".join(vuln.fix_versions),
			severity,
		)

	console.print(table)
