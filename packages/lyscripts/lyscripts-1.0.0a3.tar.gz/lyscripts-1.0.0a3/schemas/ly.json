{
  "$defs": {
    "DataConfig": {
      "description": "Where to load the data from and how to feed it into the model.",
      "properties": {
        "source": {
          "anyOf": [
            {
              "format": "file-path",
              "type": "string"
            },
            {
              "$ref": "#/$defs/LyDatasetConfig"
            }
          ],
          "description": "Either a path to a CSV file or a config that specifies how and where to fetch the data from.",
          "title": "Source"
        },
        "side": {
          "anyOf": [
            {
              "enum": [
                "ipsi",
                "contra"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Side of the neck to load data for. Only for Unilateral models.",
          "title": "Side"
        },
        "mapping": {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          },
          "default": {
            "0": "early",
            "1": "early",
            "2": "early",
            "3": "late",
            "4": "late"
          },
          "description": "Optional mapping of numeric T-stages to model T-stages.",
          "title": "Mapping",
          "type": "object"
        }
      },
      "required": [
        "source"
      ],
      "title": "DataConfig",
      "type": "object"
    },
    "DiagnosisConfig": {
      "description": "Defines an ipsi- and contralateral diagnosis pattern.",
      "properties": {
        "ipsi": {
          "additionalProperties": {
            "additionalProperties": {
              "anyOf": [
                {
                  "enum": [
                    false,
                    0,
                    "healthy",
                    true,
                    1,
                    "involved",
                    "micro",
                    "macro",
                    "notmacro"
                  ]
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object"
          },
          "default": {},
          "description": "Observed diagnoses by different modalities on the ipsi neck.",
          "examples": [
            {
              "CT": {
                "II": true,
                "III": false
              }
            }
          ],
          "title": "Ipsi",
          "type": "object"
        },
        "contra": {
          "additionalProperties": {
            "additionalProperties": {
              "anyOf": [
                {
                  "enum": [
                    false,
                    0,
                    "healthy",
                    true,
                    1,
                    "involved",
                    "micro",
                    "macro",
                    "notmacro"
                  ]
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object"
          },
          "default": {},
          "description": "Observed diagnoses by different modalities on the contra neck.",
          "title": "Contra",
          "type": "object"
        }
      },
      "title": "DiagnosisConfig",
      "type": "object"
    },
    "DistributionConfig": {
      "description": "Configuration defining a distribution over diagnose times.",
      "properties": {
        "kind": {
          "default": "frozen",
          "description": "Parametric distributions may be updated.",
          "enum": [
            "frozen",
            "parametric"
          ],
          "title": "Kind",
          "type": "string"
        },
        "func": {
          "const": "binomial",
          "default": "binomial",
          "description": "Name of predefined function to use as distribution.",
          "enum": [
            "binomial"
          ],
          "title": "Func",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ]
          },
          "default": {},
          "description": "Parameters to pass to the predefined function.",
          "title": "Params",
          "type": "object"
        }
      },
      "title": "DistributionConfig",
      "type": "object"
    },
    "GraphConfig": {
      "description": "Specifies how the tumor(s) and LNLs are connected in a DAG.",
      "properties": {
        "tumor": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Define the name of the tumor(s) and which LNLs it/they drain to.",
          "title": "Tumor",
          "type": "object"
        },
        "lnl": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Define the name of the LNL(s) and which LNLs it/they drain to.",
          "title": "Lnl",
          "type": "object"
        }
      },
      "required": [
        "tumor",
        "lnl"
      ],
      "title": "GraphConfig",
      "type": "object"
    },
    "HDF5FileStorage": {
      "description": "HDF5 file storage for in- and outputs of computations.",
      "properties": {
        "file": {
          "description": "Path to the HDF5 file. Parent directories are created if needed.",
          "format": "path",
          "title": "File",
          "type": "string"
        },
        "dataset": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Name of the dataset in the HDF5 file. Save/load methods can override this.",
          "title": "Dataset"
        }
      },
      "required": [
        "file"
      ],
      "title": "HDF5FileStorage",
      "type": "object"
    },
    "InvolvementConfig": {
      "description": "Config that defines an ipsi- and contralateral involvement pattern.",
      "properties": {
        "ipsi": {
          "additionalProperties": {
            "anyOf": [
              {
                "enum": [
                  false,
                  0,
                  "healthy",
                  true,
                  1,
                  "involved",
                  "micro",
                  "macro",
                  "notmacro"
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {},
          "description": "Involvement pattern for the ipsilateral side of the neck.",
          "examples": [
            {
              "II": true,
              "III": false
            }
          ],
          "title": "Ipsi",
          "type": "object"
        },
        "contra": {
          "additionalProperties": {
            "anyOf": [
              {
                "enum": [
                  false,
                  0,
                  "healthy",
                  true,
                  1,
                  "involved",
                  "micro",
                  "macro",
                  "notmacro"
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {},
          "description": "Involvement pattern for the contralateral side of the neck.",
          "title": "Contra",
          "type": "object"
        }
      },
      "title": "InvolvementConfig",
      "type": "object"
    },
    "LyDatasetConfig": {
      "description": "Specification of a dataset.",
      "properties": {
        "year": {
          "description": "Release year of dataset.",
          "exclusiveMaximum": 2024,
          "exclusiveMinimum": 0,
          "title": "Year",
          "type": "integer"
        },
        "institution": {
          "description": "Institution's short code. E.g., University Hospital Zurich: `usz`.",
          "minLength": 1,
          "title": "Institution",
          "type": "string"
        },
        "subsite": {
          "description": "Subsite(s) this dataset covers.",
          "minLength": 1,
          "title": "Subsite",
          "type": "string"
        },
        "repo": {
          "default": "rmnldwg/lydata",
          "description": "GitHub `repository/owner`.",
          "minLength": 1,
          "title": "Repo",
          "type": "string"
        },
        "revision": {
          "default": "main",
          "description": "Branch/tag/commit of the repo.",
          "minLength": 1,
          "title": "Revision",
          "type": "string"
        }
      },
      "required": [
        "year",
        "institution",
        "subsite"
      ],
      "title": "LyDatasetConfig",
      "type": "object"
    },
    "ModalityConfig": {
      "description": "Define a diagnostic or pathological modality.",
      "properties": {
        "spec": {
          "description": "Specificity of the modality.",
          "maximum": 1.0,
          "minimum": 0.5,
          "title": "Spec",
          "type": "number"
        },
        "sens": {
          "description": "Sensitivity of the modality.",
          "maximum": 1.0,
          "minimum": 0.5,
          "title": "Sens",
          "type": "number"
        },
        "kind": {
          "default": "clinical",
          "description": "Clinical modalities cannot detect microscopic disease.",
          "enum": [
            "clinical",
            "pathological"
          ],
          "title": "Kind",
          "type": "string"
        }
      },
      "required": [
        "spec",
        "sens"
      ],
      "title": "ModalityConfig",
      "type": "object"
    },
    "ModelConfig": {
      "description": "Define which of the ``lymph`` models to use and how to set them up.\n\nAlso allows loading a pre-defined model from an external Python file. Note that it\nshould provide at least the methods defined by the `lymph.types.Model` protocol,\npossibly more.",
      "properties": {
        "external": {
          "anyOf": [
            {
              "format": "file-path",
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Path to a Python file that defines a model.",
          "title": "External"
        },
        "class_name": {
          "default": "Unilateral",
          "description": "Name of the model class to use.",
          "enum": [
            "Unilateral",
            "Bilateral",
            "Midline"
          ],
          "title": "Class Name",
          "type": "string"
        },
        "constructor": {
          "default": "binary",
          "description": "Trinary models differentiate btw. micro- and macroscopic disease.",
          "enum": [
            "binary",
            "trinary"
          ],
          "title": "Constructor",
          "type": "string"
        },
        "max_time": {
          "default": 10,
          "description": "Max. number of time-steps to evolve the model over.",
          "title": "Max Time",
          "type": "integer"
        },
        "kwargs": {
          "default": {},
          "description": "Additional keyword arguments to pass to the model constructor.",
          "title": "Kwargs",
          "type": "object"
        }
      },
      "title": "ModelConfig",
      "type": "object"
    },
    "SamplingConfig": {
      "description": "Settings to configure the MCMC sampling.",
      "properties": {
        "file": {
          "description": "Path to HDF5 file for the results to be stored on or loaded from.",
          "format": "path",
          "title": "File",
          "type": "string"
        },
        "history_file": {
          "anyOf": [
            {
              "format": "path",
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Path to store the burn-in metrics in (as CSV file).",
          "title": "History File"
        },
        "dataset": {
          "default": "mcmc",
          "description": "Name of the dataset in the HDF5 file.",
          "title": "Dataset",
          "type": "string"
        },
        "cores": {
          "anyOf": [
            {
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 16,
          "description": "Number of cores to use for parallel sampling. If `None`, no parallel processing is used.",
          "title": "Cores"
        },
        "seed": {
          "default": 42,
          "description": "Seed for the random number generator.",
          "title": "Seed",
          "type": "integer"
        },
        "walkers_per_dim": {
          "default": 20,
          "description": "Number of walkers per parameter space dimension.",
          "title": "Walkers Per Dim",
          "type": "integer"
        },
        "max_burnin": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Maximum number of burn-in steps.",
          "title": "Max Burnin"
        },
        "check_interval": {
          "default": 50,
          "description": "Check for convergence each time after this many steps.",
          "title": "Check Interval",
          "type": "integer"
        },
        "trust_factor": {
          "default": 50.0,
          "description": "Trust the autocorrelation time only when it's smaller than this factor times the length of the chain.",
          "title": "Trust Factor",
          "type": "number"
        },
        "relative_thresh": {
          "default": 0.05,
          "description": "Relative threshold for convergence.",
          "title": "Relative Thresh",
          "type": "number"
        },
        "thin": {
          "default": 10,
          "description": "How many samples to draw before for saving one.",
          "title": "Thin",
          "type": "integer"
        },
        "nsteps": {
          "default": 100,
          "description": "Number of samples after convergence, regardless of thinning.",
          "title": "Nsteps",
          "type": "integer"
        },
        "inverse_temp": {
          "default": 1.0,
          "description": "Inverse temperature for thermodynamic integration. Note that this is not yet fully implemented.",
          "title": "Inverse Temp",
          "type": "number"
        }
      },
      "required": [
        "file"
      ],
      "title": "SamplingConfig",
      "type": "object"
    },
    "ScenarioConfig": {
      "description": "Define a scenario for which e.g. prevalences and risks may be computed.",
      "properties": {
        "t_stages": {
          "description": "List of T-stages to marginalize over in the scenario.",
          "examples": [
            [
              "early"
            ],
            [
              3,
              4
            ]
          ],
          "items": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          },
          "title": "T Stages",
          "type": "array"
        },
        "t_stages_dist": {
          "default": [
            1.0
          ],
          "description": "Distribution over T-stages to use for marginalization.",
          "examples": [
            [
              1.0
            ],
            [
              0.6,
              0.4
            ]
          ],
          "items": {
            "type": "number"
          },
          "title": "T Stages Dist",
          "type": "array"
        },
        "midext": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Whether the patient's tumor extends over the midline.",
          "title": "Midext"
        },
        "mode": {
          "default": "HMM",
          "description": "Which underlying model architecture to use.",
          "enum": [
            "HMM",
            "BN"
          ],
          "title": "Mode",
          "type": "string"
        },
        "involvement": {
          "allOf": [
            {
              "$ref": "#/$defs/InvolvementConfig"
            }
          ],
          "default": {
            "ipsi": {},
            "contra": {}
          }
        },
        "diagnosis": {
          "allOf": [
            {
              "$ref": "#/$defs/DiagnosisConfig"
            }
          ],
          "default": {
            "ipsi": {},
            "contra": {}
          }
        }
      },
      "required": [
        "t_stages"
      ],
      "title": "ScenarioConfig",
      "type": "object"
    }
  },
  "additionalProperties": true,
  "description": "Settings for generating a JSON schema for lyscripts configuration files.",
  "properties": {
    "cache_dir": {
      "default": "/home/rmnldwg/repos/lyscripts/.cache",
      "description": "Cache directory for storing function calls.",
      "format": "path",
      "title": "Cache Dir",
      "type": "string"
    },
    "sampling": {
      "$ref": "#/$defs/SamplingConfig"
    },
    "priors": {
      "allOf": [
        {
          "$ref": "#/$defs/HDF5FileStorage"
        }
      ],
      "description": "Storage for the computed priors."
    },
    "graph": {
      "$ref": "#/$defs/GraphConfig"
    },
    "model": {
      "allOf": [
        {
          "$ref": "#/$defs/ModelConfig"
        }
      ],
      "default": {
        "external": null,
        "class_name": "Unilateral",
        "constructor": "binary",
        "max_time": 10,
        "kwargs": {}
      }
    },
    "distributions": {
      "additionalProperties": {
        "$ref": "#/$defs/DistributionConfig"
      },
      "default": {},
      "description": "Mapping of model T-categories to predefined distributions over diagnose times.",
      "title": "Distributions",
      "type": "object"
    },
    "scenarios": {
      "default": [],
      "description": "List of scenarios to compute priors for.",
      "items": {
        "$ref": "#/$defs/ScenarioConfig"
      },
      "title": "Scenarios",
      "type": "array"
    },
    "modalities": {
      "additionalProperties": {
        "$ref": "#/$defs/ModalityConfig"
      },
      "default": {},
      "description": "Maps names of diagnostic modalities to their specificity/sensitivity.",
      "title": "Modalities",
      "type": "object"
    },
    "data": {
      "$ref": "#/$defs/DataConfig"
    }
  },
  "title": "SchemaSettings",
  "type": "object"
}
