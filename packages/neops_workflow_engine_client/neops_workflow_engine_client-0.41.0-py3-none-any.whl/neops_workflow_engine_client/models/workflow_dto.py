# coding: utf-8

"""
    Neops Workflow Engine

    Neops workflow engine API documentation

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class WorkflowDto(BaseModel):
    """
    WorkflowDto
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    description: StrictStr
    cron: Optional[List[Dict[str, Any]]] = None
    hide_for_execution: StrictBool = Field(alias="hideForExecution")
    type: StrictStr
    config: Dict[str, Any]
    steps: List[Dict[str, Any]]
    retry_config: Dict[str, Any] = Field(alias="retryConfig")
    condition: Optional[StrictStr] = None
    var_schema: StrictStr = Field(alias="$schema")
    continue_on_error: Optional[StrictBool] = Field(default=None, alias="continueOnError")
    delay: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "cron", "hideForExecution", "type", "config", "steps", "retryConfig", "condition", "$schema", "continueOnError", "delay"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "cron": obj.get("cron"),
            "hideForExecution": obj.get("hideForExecution"),
            "type": obj.get("type"),
            "config": obj.get("config"),
            "steps": obj.get("steps"),
            "retryConfig": obj.get("retryConfig"),
            "condition": obj.get("condition"),
            "$schema": obj.get("$schema"),
            "continueOnError": obj.get("continueOnError"),
            "delay": obj.get("delay")
        })
        return _obj


