"""Prompt classes for each document"""

class BookingConfirmationPrompt:
    """A class for generating a booking confirmation prompt for LLM extraction.
    It utilizes a predefined JSON schema and a detailed prompt to guide the extraction process.

    Attributes:
        schema (dict): A dictionary defining the JSON schema.
        pre_prompt (str): A detailed prompt explaining the extraction process.
        prompt (str): The final prompt generated by replacing placeholders in the `pre_prompt` with the actual schema.

    Methods:
        _create_prompt(schema, prompt): Replaces the placeholder in the prompt with the given schema to generate the final prompt.
    """

    def __init__(self) -> None:
        self.schema = {
            "bookingNumber": "",
            "cyCutOff": "",
            "gateInReference": "",
            "gateInTerminal": "",
            "mblNumber": "",
            "pickUpReference": "",
            "pickUpTerminal": "",
            "siCutOff": "",
            "vgmCutOff": "",
            "transportLegs": [{
                "eta": "",
                "etd": "",
                "imoNumber": "",
                "portOfDischarge": "",
                "portOfLoading": "",
                "vesselName": "",
                "voyage": ""
            }]
        }

        self.pre_prompt = """
            You are a document entity extraction specialist. Given a document, the explained datapoint need to extract.
            
            bookingNumber: A unique identifier for the booking.
            cyCutOff: The deadline for cargo to be delivered to the Container Yard.
            gateInReference: A reference code for cargo entering the terminal.
            gateInTerminal: The specific terminal where cargo is gated in.
            mblNumber: The Master Bill of Lading number. Mostly comes after BL no., B/L no. etc
            pickUpReference: A reference code for cargo pickup.
            pickUpTerminal: The specific terminal for cargo pickup.
            siCutOff: The deadline for submitting shipping instructions.
            vgmCutOff: The deadline for submitting the Verified Gross Mass of the cargo.
            transportLegs: 
                eta: The estimated time of arrival for a specific leg.
                etd: The estimated time of departure for a specific leg.
                imoNumber: The International Maritime Organization number for a specific leg.
                portOfDischarge: The port where cargo is unloaded for a specific leg.
                portOfLoading: The port where cargo is loaded for a specific leg.
                vesselName: The name of the vessel for a specific leg.
                voyage: The journey or route taken by the vessel for a specific leg.

            your task is to extract the text value of the following entities:
            SCHEMA_PLACEHOLDER

            Further explanation for the transportLegs part as follows:
            - There is at least one leg in each document
            - There may be multiple legs between the inital and final destination 
            - If there are multiple eta, etd, vesselName, ports, there is a higher chance multiple legs occurs
            - Some documents not following an order between legs
            - 'eta' must be equal or later than 'etd'!
            - portOfLoading and portOfDischarge are name of the Ports. You can rely on the port names from all over the world.
            - portOfLoading and portOfDischarge distinctly denotes the name of the ports. If you find abbreviation of the port use it, if not you can use the full name of the port
            - Abbrevations most likely to be in the paranthesis like follows (DEHAM).

            Possible keywords for datapoints:
            - bookingNumber: Our Reference, Booking No., BOOKING NUMBER
            - cyCutOff: FCL delivery cut-off, CY CUT OFF, CY Closing - Latest Return Container Date, Cargo Cut-off deadline
            - gateInReference: Our Reference
            - gateInTerminal: Export terminal delivery address, PORT OF LOADING (after the slash '/')
            - mblNumber: BL/SWB No(s)., CS Reference Number
            - pickUpReference: Export door positioning address(es), Empty Container Depot and Location interception, S/C
            - pickUpTerminal: PORT OF DISCHARGE (after the slash '/')
            - siCutOff: shipping instruction closing, SI Cut Off, Shipping Instruction deadline, INTENDED SI CUT-OFF
            - vgmCutOff: VGM cut-off, VGM Submission Deadline, Verified Gross Mass deadline
            - eta: eta, ETA
            - etd: etd, ETD
            - imoNumber: IMO No, IMO number
            - portOfDischarge: to, PORT OF DISCHARGE
            - portOfLoading: from, PORT OF LOADING
            - vesselName: vessel, INTENDED VESSEL/VOYAGE
            - voyage: Voy. no, INTENDED VESSEL/VOYAGE

            You must apply the following rules:

            - The JSON schema must be followed during the extraction.
            - The values must only include text found in the document
            - Do not normalize any entity value.
            - If an entity is not found in the document, set the entity value to null.
            - Validate the JSON make sure its a valid JSON ! No extra text, no missing comma!
            - Eventhough nothing can be extracted or processed, you still need to provide the JSON with null values!!!
            """
        self.prompt = self._create_prompt(self.schema, self.pre_prompt)

    def _create_prompt(self, schema, prompt):
        return prompt.replace("SCHEMA_PLACEHOLDER", str(schema))


class BookingConfirmationHapagPrompt:
    """A class for generating a booking confirmation prompt for LLM extraction.
    It utilizes a predefined JSON schema and a detailed prompt to guide the extraction process.

    Attributes:
        schema (dict): A dictionary defining the JSON schema.
        pre_prompt (str): A detailed prompt explaining the extraction process.
        prompt (str): The final prompt generated by replacing placeholders in the `pre_prompt` with the actual schema.

    Methods:
        _create_prompt(schema, prompt): Replaces the placeholder in the prompt with the given schema to generate the final prompt.
    """

    def __init__(self) -> None:
        self.schema = {
            "bookingNumber": "",
            "cyCutOff": "",
            "gateInReference": "",
            "gateInTerminal": "",
            "mblNumber": "",
            "pickUpReference": "",
            "pickUpTerminal": "",
            "siCutOff": "",
            "vgmCutOff": "",
            "transportLegs": [{
                "eta": "",
                "etd": "",
                "imoNumber": "",
                "portOfDischarge": "",
                "portOfLoading": "",
                "vesselName": "",
                "voyage": ""
            }]
        }

        self.pre_prompt = """
            You are a document entity extraction specialist. Given a document, the explained datapoint need to extract.

            bookingNumber: A unique identifier for the booking.
            cyCutOff: The deadline for cargo to be delivered to the Container Yard.
            gateInReference: A reference code for cargo entering the terminal.
            gateInTerminal: The specific terminal where cargo is gated in.
            mblNumber: The Master Bill of Lading number.
            pickUpReference: A reference code for cargo pickup.
            pickUpTerminal: The specific terminal for cargo pickup.
            siCutOff: The deadline for submitting shipping instructions.
            vgmCutOff: The deadline for submitting the Verified Gross Mass of the cargo.
            transportLegs: 
                eta: The estimated time of arrival for a specific leg.
                etd: The estimated time of departure for a specific leg.
                imoNumber: The International Maritime Organization number for a specific leg.
                portOfDischarge: The port where cargo is unloaded for a specific leg.
                portOfLoading: The port where cargo is loaded for a specific leg.
                vesselName: The name of the vessel for a specific leg.
                voyage: The journey or route taken by the vessel for a specific leg.

            your task is to extract the text value of the following entities:
            SCHEMA_PLACEHOLDER

            Keywords for datapoints:
            - bookingNumber: Our Reference
            - cyCutOff: FCL delivery cut-off
            - gateInReference: Our Reference
            - gateInTerminal: Export terminal delivery address
            - mblNumber: BL/SWB No(s).
            - pickUpReference: Export door positioning address(es)
            - siCutOff: shipping instruction closing
            - vgmCutOff: VGM cut-off
            - eta: eta, ETA
            - etd: etd, ETD
            - imoNumber: IMO No, IMO number
            - portOfDischarge: to
            - portOfLoading: from
            - vesselName: vessel
            - voyage: Voy. no

            Table Structure to extract TransporLegs:
            - transportlegs table has following colum names: From, To, By, ETD, ETA
            - If the first leg does not have a ETD and ETA, Also By column includes following info: ["Truck", "Combined Waterway"]; skip the row, start from one row below.            

            Further explanation for the transportLegs part as follows:
            - you must differentiate the Voyage from DP Voyage. Never used the value with the key 'DP Voyage'.
            - Vessel name is in 'By' column and under the key Vessel
            - 'eta' must be equal or later than 'etd'!
            - portOfLoading and portOfDischarge are name of the Ports. You can rely on the port names from all over the world.
            - portOfLoading and portOfDischarge distinctly denotes the name of the ports. If you find abbreviation of the port use it, if not you can use the full name of the port
            - Abbrevations most likely to be in the paranthesis like follows (DEHAM).

            Further explanation for datapoints except transportLegs part as follows:
            - If gateInReference is null, assign it the same value as bookingNumber.
            - If pickUpReference is null, assign it the same value as bookingNumber.
            - If mblNumber is null, assign it the same value as bookingNumber.

            You must apply the following rules:
            - The JSON schema must be followed during the extraction.
            - The values must only include text found in the document
            - Do not normalize any entity value.
            - If an entity is not found in the document, set the entity value to null.
            - Validate the JSON make sure its a valid JSON ! No extra text, no missing comma!
            - Eventhough nothing can be extracted or processed, you still need to provide the JSON with null values!!!
        """
        self.prompt = self._create_prompt(self.schema, self.pre_prompt)

    def _create_prompt(self, schema, prompt):
        return prompt.replace("SCHEMA_PLACEHOLDER", str(schema))


class BookingConfirmationMscPrompt:
    """A class for generating a booking confirmation prompt for LLM extraction.
    It utilizes a predefined JSON schema and a detailed prompt to guide the extraction process.

    Attributes:
        schema (dict): A dictionary defining the JSON schema.
        pre_prompt (str): A detailed prompt explaining the extraction process.
        prompt (str): The final prompt generated by replacing placeholders in the `pre_prompt` with the actual schema.

    Methods:
        _create_prompt(schema, prompt): Replaces the placeholder in the prompt with the given schema to generate the final prompt.
    """

    def __init__(self) -> None:
        self.schema = {
            "bookingNumber": "",
            "cyCutOff": "",
            "gateInReference": "",
            "gateInTerminal": "",
            "mblNumber": "",
            "pickUpReference": "",
            "pickUpTerminal": "",
            "siCutOff": "",
            "vgmCutOff": "",
            "transportLegs": [{
                "eta": "",
                "etd": "",
                "imoNumber": "",
                "portOfDischarge": "",
                "portOfLoading": "",
                "vesselName": "",
                "voyage": ""
            }]
        }

        self.pre_prompt = """
            You are a document entity extraction specialist. Given a document, the explained datapoint need to extract.

            bookingNumber: A unique identifier for the booking.
            cyCutOff: The deadline for cargo to be delivered to the Container Yard.
            gateInReference: A reference code for cargo entering the terminal.
            gateInTerminal: The specific terminal where cargo is gated in.
            mblNumber: The Master Bill of Lading number.
            pickUpReference: A reference code for cargo pickup.
            pickUpTerminal: The specific terminal for cargo pickup.
            siCutOff: The deadline for submitting shipping instructions.
            vgmCutOff: The deadline for submitting the Verified Gross Mass of the cargo.
            transportLegs: 
                eta: The estimated time of arrival for a specific leg.
                etd: The estimated time of departure for a specific leg.
                imoNumber: The International Maritime Organization number for a specific leg.
                portOfDischarge: The port where cargo is unloaded for a specific leg.
                portOfLoading: The port where cargo is loaded for a specific leg.
                vesselName: The name of the vessel for a specific leg.
                voyage: The journey or route taken by the vessel for a specific leg.

            your task is to extract the text value of the following entities:
            SCHEMA_PLACEHOLDER

            Further explanation and Keywords for the transportLegs part as follows. The below 2 conditions is crucial. Take attention here:
            - if PORT OF TRANSHIPMENT N*1 value is avaliable, it means we have the second leg, otherwise skip the second and third leg instructions, make it only one leg!
            - if PORT OF TRANSHIPMENT N*2 value is avaliable, it means we have the third leg, otherwise skip the third leg instructions, make it only two leg!

            - first leg instructions:
                - first leg's portOfLoading is always PLACE OF LOADING value.
                - first leg's vesselName is always VESSEL NAME value, Ignore the paranthesis part!.
                - first leg's portOfDischarge is PORT OF TRANSHIPMENT N*1 value if PORT OF TRANSHIPMENT N*1 value is exists.
                - first leg's portOfDischarge is PORT OF DISCHARGE value if PORT OF TRANSHIPMENT N*1 value is not exists.
                - first leg's voyage is always VOYAGE NUMBER value with the same row VESSEL NAME.
                - first leg's imoNumber is in the VESSEL NAME which the number following of LLOYDS NO.
                - first leg's eta is EST. TIME OF ARRIVAL value with the same row VESSEL NAME if PORT OF TRANSHIPMENT N*1 value is not exists.
                - first leg's etd is always EST. TIME OF ARRIVAL/DEPARTURE second value E.g. 30/08/2023 14:00 31/08/2023 22:00 you need the select 31/08/2023 22:00.

            - second leg instructions:
                - second leg's portOfLoading is always PORT OF TRANSHIPMENT N*1 value.
                - second leg's vesselName is always CONNECTING VESSEL N*1 value.
                - second leg's portOfDischarge is PORT OF TRANSHIPMENT N*2 value if PORT OF TRANSHIPMENT N*2 value is exists.
                - second leg's portOfDischarge is PORT OF DISCHARGE value if PORT OF TRANSHIPMENT N*2 value is not exists.
                - second leg's voyage is always VOYAGE NUMBER value with the same row CONNECTING VESSEL N*1.
                - second leg's imoNumber is in the CONNECTING VESSEL N*1 which the number following of LLOYDS NO.
                - second leg's eta is never available so set it to null.
                - second leg's etd is always EST. TIME OF DEPARTURE value with the same row PORT OF TRANSHIPMENT N*1.

            - third leg instructions:
                - third leg's portOfLoading is always PORT OF TRANSHIPMENT N*2 value.
                - third leg's vesselName is always CONNECTING VESSEL N*2 value.
                - third leg's portOfDischarge is always PORT OF DISCHARGE value.
                - third leg's voyage is always VOYAGE NUMBER value with the same row CONNECTING VESSEL N*2.
                - third leg's imoNumber is in the CONNECTING VESSEL N*2 which the number following of LLOYDS NO.
                - third leg's eta is never available so set it to null.
                - third leg's etd is always EST. TIME OF DEPARTURE value with the same row PORT OF TRANSHIPMENT N*2.

            - finalizing transporLegs:
                - Check number of legs
                - If the last item of the transportLegs' portOfLoading is the same value with PORT OF DISCHARGE DELETE THE ITEM!

            Further explanation for datapoints except transportLegs part as follows:
            - If gateInReference is null, assign it the same value as bookingNumber.
            - If pickUpReference is null, assign it the same value as bookingNumber.

            You must apply the following rules:
            - The JSON schema must be followed during the extraction.
            - The values must only include text found in the document
            - Do not normalize any entity value.
            - If an entity is not found in the document, set the entity value to null.
            - Validate the JSON make sure its a valid JSON ! No extra text, no missing comma!
            - Eventhough nothing can be extracted or processed, you still need to provide the JSON with null values!!!
        """
        self.prompt = self._create_prompt(self.schema, self.pre_prompt)

    def _create_prompt(self, schema, prompt):
        return prompt.replace("SCHEMA_PLACEHOLDER", str(schema))


class BookingConfirmationMaerskPrompt:
    """A class for generating a booking confirmation prompt for LLM extraction.
    It utilizes a predefined JSON schema and a detailed prompt to guide the extraction process.

    Attributes:
        schema (dict): A dictionary defining the JSON schema.
        pre_prompt (str): A detailed prompt explaining the extraction process.
        prompt (str): The final prompt generated by replacing placeholders in the `pre_prompt` with the actual schema.

    Methods:
        _create_prompt(schema, prompt): Replaces the placeholder in the prompt with the given schema to generate the final prompt.
    """

    def __init__(self) -> None:
        self.schema = {
            "bookingNumber": "",
            "cyCutOff": "",
            "gateInReference": "",
            "gateInTerminal": "",
            "mblNumber": "",
            "pickUpReference": "",
            "pickUpTerminal": "",
            "siCutOff": "",
            "vgmCutOff": "",
            "transportLegs": [{
                "eta": "",
                "etd": "",
                "imoNumber": "",
                "portOfDischarge": "",
                "portOfLoading": "",
                "vesselName": "",
                "voyage": ""
            }]
        }

        self.pre_prompt = """
            You are a document entity extraction specialist. Given a document, the explained datapoint need to extract.

            bookingNumber: A unique identifier for the booking.
            cyCutOff: The deadline for cargo to be delivered to the Container Yard.
            gateInReference: A reference code for cargo entering the terminal.
            gateInTerminal: The specific terminal where cargo is gated in.
            mblNumber: The Master Bill of Lading number.
            pickUpReference: A reference code for cargo pickup.
            pickUpTerminal: The specific terminal for cargo pickup.
            siCutOff: The deadline for submitting shipping instructions.
            vgmCutOff: The deadline for submitting the Verified Gross Mass of the cargo.
            transportLegs: 
                eta: The estimated time of arrival for a specific leg.
                etd: The estimated time of departure for a specific leg.
                imoNumber: The International Maritime Organization number for a specific leg.
                portOfDischarge: The port where cargo is unloaded for a specific leg.
                portOfLoading: The port where cargo is loaded for a specific leg.
                vesselName: The name of the vessel for a specific leg.
                voyage: The journey or route taken by the vessel for a specific leg.

            your task is to extract the text value of the following entities:
            SCHEMA_PLACEHOLDER

            Keywords for datapoints:
            - bookingNumber: Booking No.
            - cyCutOff: CY CUT OFF, CY Closing - Latest Return Container Date, Cargo Cut-off deadline
            - gateInTerminal: Return Equip Delivery Terminal and Location interception
            - pickUpTerminal: Empty Container Depot and Location interception
            - siCutOff: SI Cut Off, Shipping Instruction deadline
            - vgmCutOff: VGM Submission Deadline, Verified Gross Mass deadline
            - eta: ETA
            - etd: ETD
            - portOfDischarge: To
            - portOfLoading: From
            - vesselName: Vessel
            - voyage: Voy No.

            Table Structure to extract TransportLegs:
            - transportlegs table has following colum names: From, To, Mode, Vessel, Voy No., ETD, ETA
            - The tables can be found under the title of Intended Transport Plan
            - use Vessel column for vesselName. Do not mixed 'Vessel' column with 'Mode' column.
            - If vesselName value is ROC, TRK or MVS its a Mode not a vesselName.
            - The table rows are not uniform, the words can be wrapped.
            - To be able to determine the number of row; you can reference the number of ETA and ETD.

            Further explanation for datapoints except transportLegs part as follows:
            - If gateInReference is null, assign it the same value as bookingNumber.
            - If pickUpReference is null, assign it the same value as bookingNumber.
            - If mblNumber is null, assign 'MAEU' + bookingNumber. E.g. if booking number is '244211559', assign 'MAEU244211559'.

            You must apply the following rules:
            - The JSON schema must be followed during the extraction.
            - The values must only include text found in the document
            - Do not normalize any entity value.
            - If an entity is not found in the document, set the entity value to null.
            - Validate the JSON make sure its a valid JSON ! No extra text, no missing comma!
            - Eventhough nothing can be extracted or processed, you still need to provide the JSON with null values!!!
        """
        self.prompt = self._create_prompt(self.schema, self.pre_prompt)

    def _create_prompt(self, schema, prompt):
        return prompt.replace("SCHEMA_PLACEHOLDER", str(schema))

class BookingConfirmationYangmingPrompt:
    """A class for generating a booking confirmation prompt for LLM extraction.
    It utilizes a predefined JSON schema and a detailed prompt to guide the extraction process.

    Attributes:
        schema (dict): A dictionary defining the JSON schema.
        pre_prompt (str): A detailed prompt explaining the extraction process.
        prompt (str): The final prompt generated by replacing placeholders in the `pre_prompt` with the actual schema.

    Methods:
        _create_prompt(schema, prompt): Replaces the placeholder in the prompt with the given schema to generate the final prompt.
    """

    def __init__(self) -> None:
        self.schema = {
            "bookingNumber": "",
            "cyCutOff": "",
            "gateInReference": "",
            "gateInTerminal": "",
            "mblNumber": "",
            "pickUpReference": "",
            "pickUpTerminal": "",
            "siCutOff": "",
            "vgmCutOff": "",
            "transportLegs": [{
                "eta": "",
                "etd": "",
                "imoNumber": "",
                "portOfDischarge": "",
                "portOfLoading": "",
                "vesselName": "",
                "voyage": ""
            }]
        }

        self.pre_prompt = """
            You are a document entity extraction specialist. Given a document, the explained datapoint need to extract.

            bookingNumber: A unique identifier for the booking.
            cyCutOff: The deadline for cargo to be delivered to the Container Yard.
            gateInReference: A reference code for cargo entering the terminal.
            gateInTerminal: The specific terminal where cargo is gated in.
            mblNumber: The Master Bill of Lading number.
            pickUpReference: A reference code for cargo pickup.
            pickUpTerminal: The specific terminal for cargo pickup.
            siCutOff: The deadline for submitting shipping instructions.
            vgmCutOff: The deadline for submitting the Verified Gross Mass of the cargo.
            transportLegs: 
                eta: The estimated time of arrival for a specific leg.
                etd: The estimated time of departure for a specific leg.
                imoNumber: The International Maritime Organization number for a specific leg.
                portOfDischarge: The port where cargo is unloaded for a specific leg.
                portOfLoading: The port where cargo is loaded for a specific leg.
                vesselName: The name of the vessel for a specific leg.
                voyage: The journey or route taken by the vessel for a specific leg.

            your task is to extract the text value of the following entities:
            SCHEMA_PLACEHOLDER

            Keywords for datapoints:
            - bookingNumber: Booking No
            - cyCutOff: Cargo Cut Off
            - gateInTerminal: Delivery Terminal
            - mblNumber: BL/SWB No(s).
            - pickUpReference: Pickup Ref
            - pickUpTerminal: Pickup Depot
            - siCutOff: Closing Date B/L
            - vgmCutOff: Closing Date VGM
            - eta: Discharge Date ETA 
            - etd: Sailing Date ETS
            - portOfDischarge: Discharge, Transhipment
            - portOfLoading: Sailing, Transhipment
            - vesselName: Vessel from Vessel/Voyage 
            - voyage: Voyage from Vessel/Voyage 
            - Transhipment: Transhipment 

            Further explanation and Keywords for the transportLegs part as follows. Take attention here:
            - The document has 2 legs only if Transhipment value is avaliable! otherwise skip the second leg instructions, make it only one leg!

            - first leg instructions:
                - first leg's portOfLoading is always Sailing value.
                - first leg's vesselName is always Vessel value from Vessel/Voyage, Ignore the slash the part after.
                - first leg's portOfDischarge is Sailing value if Transhipment value is exists.
                - first leg's portOfDischarge is Discharge value if Transhipment value is not exists.
                - first leg's voyage is always Voyage value from Vessel/Voyage.
                - first leg's eta is Discharge Date ETA  value if PORT OF Transhipment value is not exists. Otherwise it is not available
                - first leg's etd is always Sailing Date ETS value.

            - second leg instructions:
                - second leg's portOfLoading is always Transhipment value.
                - second leg's portOfDischarge is always Discharge.
                - second leg's eta is always Discharge Date ETA.
                - second leg's etd is not available.

            Further explanation for datapoints except transportLegs part as follows:
            - If gateInReference is null, assign it the same value as bookingNumber.
            - If pickUpReference is null, assign it the same value as bookingNumber.

            You must apply the following rules:
            - The JSON schema must be followed during the extraction.
            - The values must only include text found in the document
            - Do not normalize any entity value.
            - If an entity is not found in the document, set the entity value to null.
            - Validate the JSON make sure its a valid JSON ! No extra text, no missing comma!
            - Eventhough nothing can be extracted or processed, you still need to provide the JSON with null values!!!
        """
        self.prompt = self._create_prompt(self.schema, self.pre_prompt)

    def _create_prompt(self, schema, prompt):
        return prompt.replace("SCHEMA_PLACEHOLDER", str(schema))
    

class PostProcessPort:
    """A class for generating a booking confirmation prompt for LLM extraction.
    It utilizes a predefined JSON schema and a detailed prompt to guide the extraction process.

    Attributes:
        schema (dict): A dictionary defining the JSON schema.
        pre_prompt (str): A detailed prompt explaining the extraction process.
        prompt (str): The final prompt generated by replacing placeholders in the `pre_prompt` with the actual schema.

    Methods:
        _create_prompt(schema, prompt): Replaces the placeholder in the prompt with the given schema to generate the final prompt.
    """

    def __init__(self) -> None:
        self.prompt = """
            You are a person who works for a freight-forwarder company. You need to convert the given Port name to Port Code. 
            Do not include the USA ports! Do the convertion for following inputs:
            PORT_VALUES_TO_REPLACE

            return as JSON, You must keep the keys, only change the values. fill empty or None values with 'null'
        """
    def implement_data(self, ports):
        return self.prompt.replace("PORT_VALUES_TO_REPLACE", str(ports))

class PostProcessDate:
    """A class for generating a booking confirmation prompt for LLM extraction.
    It utilizes a predefined JSON schema and a detailed prompt to guide the extraction process.

    Attributes:
        schema (dict): A dictionary defining the JSON schema.
        pre_prompt (str): A detailed prompt explaining the extraction process.
        prompt (str): The final prompt generated by replacing placeholders in the `pre_prompt` with the actual schema.

    Methods:
        _create_prompt(schema, prompt): Replaces the placeholder in the prompt with the given schema to generate the final prompt.
    """

    def __init__(self) -> None:
        self.prompt = """
            You are a person who works for a freight-forwarder company. You need to Convert the each date input to the ISO 8601 formatted date with timezone. Do this for following inputs:
            DATE_VALUES_TO_REPLACE

            return as JSON, You must keep the keys, only change the values. fill empty or None values with 'null'
        """
    def implement_data(self, dates):
        return self.prompt.replace("DATE_VALUES_TO_REPLACE", str(dates))

PROMPT_LIBRARY = {
    "bookingConfirmation": {
        "other": BookingConfirmationPrompt().prompt,
        "hapag-lloyd": BookingConfirmationHapagPrompt().prompt,
        "msc": BookingConfirmationMscPrompt().prompt,
        "maersk": BookingConfirmationMaerskPrompt().prompt,
        "yangming": BookingConfirmationYangmingPrompt().prompt
    }
}

PROMPT_LIBRARY_POSTPROCESS = {
    "port": PostProcessPort(),
    "date": PostProcessDate()
}