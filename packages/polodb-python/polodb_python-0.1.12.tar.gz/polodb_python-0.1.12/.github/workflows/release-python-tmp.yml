name: Build and Publish python version

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"  # Optional: only run on version tags
  pull_request:
    branches:
      - main

jobs:
    create-dist:
        runs-on:  ubuntu-latest    
        steps:
          - name: Check out the code
            uses: actions/checkout@v4
    
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: 3.9
    
          - name: Create source distribution
            uses: PyO3/maturin-action@v1
            with:
              command: sdist
              args: >
                --manifest-path Cargo.toml
                --out dist
    
          - name: Test sdist
            run: |
              python -m pip install --upgrade pip
              pip install --force-reinstall --verbose dist/*.tar.gz
              python -c 'from polodb import PoloDB'
    
    
          - name: Upload sdist
            uses: actions/upload-artifact@v4
            with:
              name: sdist
              path: dist/*.tar.gz  
    build:
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          os: [ubuntu-latest, macos-latest, windows-latest]
          python-version: ["3.9", "3.10"]
          architecture: [x86_64, aarch64]  # Explicitly define architectures
          exclude: 
              - os: windows-latest
                architecture: aarch64  # Skip aarch64 on W
  
      steps:
        - name: Check out the code
          uses: actions/checkout@v4
  
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
  
        - name: Create source distribution
          uses: PyO3/maturin-action@v1
          with:
            command: build
            args: >
              --manifest-path Cargo.toml
              --profile dist-release
              --out target/wheels
  

        - name: Extract Version from pyproject.toml
          id: get_version
          run: |
              VERSION=$(grep -oP '^version = "\K[0-9]+\.[0-9]+\.[0-9]+' pyproject.toml)
              echo "VERSION=$VERSION" >> $GITHUB_ENV

        - name: Print Version
          run: |
            echo "The current version is ${{ env.VERSION }}"

        - name: Upload Artifact with OS and Architecture Tags
          uses: actions/upload-artifact@v2
          with:
            name: polodb_python-${{env.VERSION}}-${{ matrix.os }}-${{ matrix.architecture }}
            path: target/wheels/*
    publish:
        needs: build  # Ensure it runs after build job
        runs-on: ubuntu-latest
        
        steps:
          - name: Check out the code
            uses: actions/checkout@v2

          - name: Download Artifacts
            uses: actions/download-artifact@v2
            with:
                name: dist-artifact
                path: dist  # Download to dist/ directory

          - name: Download Wheel Artifacts
            uses: actions/download-artifact@v2
            with:
                name: wheels-artifact
                path: target/wheels  # Download to target/wheels directory

          - name: Install Twine
            run: |
                python -m pip install --upgrade pip
                pip install twine

          - name: Upload to PyPI with Twine
            env:
                TWINE_USERNAME: "__token__"
                TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
            run: |
                twine upload dist/* target/wheels/* 