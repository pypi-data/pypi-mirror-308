import argparse
import logging
import random
import time
from collections import defaultdict
from os import getenv
from typing import TextIO, Tuple

from ..api import ApiClient, ApiError, BadRequest
from ..main import BaseOperation
from ..main import Namespace as BaseNamespace
from ..telemetry_client import TelemetryError
from ..telemetry_client import get_client as get_telemetry_client
from ..types import ApiListResponse, VacancyItem
from ..utils import fix_datetime, print_err, truncate_string

logger = logging.getLogger(__package__)


class Namespace(BaseNamespace):
    resume_id: str | None
    message_list: TextIO
    force_message: bool
    apply_interval: Tuple[float, float]
    page_interval: Tuple[float, float]


class Operation(BaseOperation):
    """–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument("--resume-id", help="–ò–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ")
        parser.add_argument(
            "--message-list",
            help="–ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –í —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —Ç–∏–ø–∞ %%(name)s",
            type=argparse.FileType(),
        )
        parser.add_argument(
            "--force-message",
            help="–í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ",
            default=False,
            action=argparse.BooleanOptionalAction,
        )
        parser.add_argument(
            "--apply-interval",
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (X, X-Y)",
            default="1-5",
            type=self._parse_interval,
        )
        parser.add_argument(
            "--page-interval",
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (X, X-Y)",
            default="1-3",
            type=self._parse_interval,
        )

    @staticmethod
    def _parse_interval(interval: str) -> Tuple[float, float]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
        if "-" in interval:
            min_interval, max_interval = map(float, interval.split("-"))
        else:
            min_interval = max_interval = float(interval)
        return min(min_interval, max_interval), max(min_interval, max_interval)

    def run(self, args: Namespace) -> None:
        assert args.config["token"]
        api = ApiClient(
            access_token=args.config["token"]["access_token"],
            user_agent=args.config["user_agent"],
        )
        resume_id = self._get_resume_id(args, api)
        application_messages = self._get_application_messages(args)

        apply_min_interval, apply_max_interval = args.apply_interval
        page_min_interval, page_max_interval = args.page_interval

        self._apply_similar(
            api,
            resume_id,
            args.force_message,
            application_messages,
            apply_min_interval,
            apply_max_interval,
            page_min_interval,
            page_max_interval,
        )

    def _get_resume_id(self, args: Namespace, api: ApiClient) -> str:
        if not (
            resume_id := args.resume_id or args.config["default_resume_id"]
        ):
            resumes: ApiListResponse = api.get("/resumes/mine")
            resume_id = resumes["items"][0]["id"]
        return resume_id

    def _get_application_messages(self, args: Namespace) -> list[str]:
        if args.message_list:
            application_messages = list(
                filter(None, map(str.strip, args.message_list))
            )
        else:
            application_messages = [
                "–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è %(name)s",
                "–ü—Ä–æ—à—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∂–∞–ª–∫—É—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é %(name)s",
                "–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è %(name)s —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–∏–º –Ω–∞–≤—ã–∫–∞–º –∏ –æ–ø—ã—Ç—É",
                "–•–æ—á—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –ª–∏–¥–µ—Ä–æ–≤ —Ä—ã–Ω–∫–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ %(name)s",
                "–ú–æ–µ —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –±–∞–∑–∑–≤–æ—Ä–¥—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ %(name)s",
            ]
        return application_messages

    def _apply_similar(
        self,
        api: ApiClient,
        resume_id: str,
        force_message: bool,
        application_messages: list[str],
        apply_min_interval: float,
        apply_max_interval: float,
        page_min_interval: float,
        page_max_interval: float,
    ) -> None:
        telemetry_client = get_telemetry_client()
        telemetry_data = defaultdict(dict)

        vacancies = self._get_vacancies(
            api, resume_id, page_min_interval, page_max_interval, per_page=100
        )

        self._collect_vacancy_telemetry(telemetry_data, vacancies)

        for vacancy in vacancies:
            try:
                if getenv("TEST_TELEMETRY"):
                    break

                if vacancy.get("has_test"):
                    print("üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç", vacancy["alternate_url"])
                    continue

                relations = vacancy.get("relations", [])

                if relations:
                    print(
                        "üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É",
                        vacancy["alternate_url"],
                    )
                    continue

                try:
                    employer_id = vacancy["employer"]["id"]
                except IndexError:
                    logger.warning(
                        f"–í–∞–∫–∞–Ω—Å–∏—è –±–µ–∑ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è: {vacancy['alternate_url']}"
                    )
                else:
                    employer = api.get(f"/employers/{employer_id}")

                    telemetry_data["employers"][employer_id] = {
                        "name": employer.get("name"),
                        "type": employer.get("type"),
                        "description": employer.get("description"),
                        "site_url": employer.get("site_url"),
                        "area": employer.get("area", {}).get("name"),  # –≥–æ—Ä–æ–¥
                    }

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–∫–ª–∏–∫–∞
                interval = random.uniform(
                    apply_min_interval, apply_max_interval
                )
                time.sleep(interval)

                params = {
                    "resume_id": resume_id,
                    "vacancy_id": vacancy["id"],
                    "message": (
                        random.choice(application_messages) % vacancy
                        if force_message or vacancy["response_letter_required"]
                        else ""
                    ),
                }

                res = api.post("/negotiations", params)
                assert res == {}
                print(
                    "üì® –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∫–ª–∏–∫",
                    vacancy["alternate_url"],
                    "(",
                    truncate_string(vacancy["name"]),
                    ")",
                )
            except ApiError as ex:
                print_err("‚ùó –û—à–∏–±–∫–∞:", ex)
                if isinstance(ex, BadRequest) and ex.limit_exceeded:
                    break

        print("üìù –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")

        self._send_telemetry(telemetry_client, telemetry_data)

    def _get_vacancies(
        self,
        api: ApiClient,
        resume_id: str,
        page_min_interval: float,
        page_max_interval: float,
        per_page: int,
    ) -> list[VacancyItem]:
        rv = []
        for page in range(20):
            res: ApiListResponse = api.get(
                f"/resumes/{resume_id}/similar_vacancies",
                page=page,
                per_page=per_page,
                order_by="relevance",
            )
            rv.extend(res["items"])

            if getenv("TEST_TELEMETRY"):
                break

            if page >= res["pages"] - 1:
                break

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page > 0:
                interval = random.uniform(page_min_interval, page_max_interval)
                time.sleep(interval)

        return rv

    def _collect_vacancy_telemetry(
        self, telemetry_data: defaultdict, vacancies: list[VacancyItem]
    ) -> None:
        for vacancy in vacancies:
            vacancy_id = vacancy["id"]
            telemetry_data["vacancies"][vacancy_id] = {
                "name": vacancy.get("name"),
                "type": vacancy.get("type", {}).get("id"),  # open/closed
                "area": vacancy.get("area", {}).get("name"),  # –≥–æ—Ä–æ–¥
                "salary": vacancy.get("salary"),  # from, to, currency, gross
                "direct_url": vacancy.get(
                    "alternate_url"
                ),  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
                "created_at": fix_datetime(
                    vacancy.get("created_at")
                ),  # –±—É–¥–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å –≥–æ–≤–Ω–æ-–≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ –ø–æ–ª–≥–æ–¥–∞ –≤–∏—Å—è—Ç
                "published_at": fix_datetime(vacancy.get("published_at")),
                "contacts": vacancy.get(
                    "contacts"
                ),  # –ø–∏–∑–¥–æ—Ä–≤–∞–Ω–∫–∏ —Ç–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç
                # HH —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–µ—Ä—Ñ–∏–∫—Ü–∏–æ–Ω–∏—Å—Ç–∞ ‚Äî –∫—É—Å–æ–∫ –≥–æ–≤–Ω–∞, –≥–¥–µ –∫—Ä–∏–≤—ã–µ
                # —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã, —É –≤–∞–∫–∞–Ω—Å–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è...
                "employer_id": int(vacancy["employer"]["id"])
                if "employer" in vacancy and "id" in vacancy["employer"]
                else None,
                # –û—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
            }

    def _send_telemetry(
        self, telemetry_client, telemetry_data: defaultdict
    ) -> None:
        try:
            res = telemetry_client.send_telemetry(
                "/collect", dict(telemetry_data)
            )
            logger.debug(res)
        except TelemetryError as ex:
            logger.error(ex)
