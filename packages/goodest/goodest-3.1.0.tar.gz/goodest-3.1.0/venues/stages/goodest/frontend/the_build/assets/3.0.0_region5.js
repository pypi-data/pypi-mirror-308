import{s as D,d as J,t as st}from"./3.0.0_transform.js";import{D as q,_ as tt,r as et,o as B,f as ut,w as ct,c as nt,n as lt,b as ft,F as ht,a as gt}from"./3.0.0_index.js";function dt(t){let e;for(;e=t.sourceEvent;)t=e;return t}function Z(t,e){if(t=dt(t),e===void 0&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=t.clientX,a.y=t.clientY,a=a.matrixTransform(e.getScreenCTM().inverse()),[a.x,a.y]}if(e.getBoundingClientRect){var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]}}return[t.pageX,t.pageY]}const yt={passive:!1},z={capture:!0,passive:!1};function j(t){t.stopImmediatePropagation()}function k(t){t.preventDefault(),t.stopImmediatePropagation()}function pt(t){var e=t.document.documentElement,n=D(t).on("dragstart.drag",k,z);"onselectstart"in e?n.on("selectstart.drag",k,z):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function vt(t,e){var n=t.document.documentElement,a=D(t).on("dragstart.drag",null);e&&(a.on("click.drag",k,z),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}const $=t=>()=>t;function X(t,{sourceEvent:e,subject:n,target:a,identifier:o,active:i,x:c,y:s,dx:h,dy:u,dispatch:p}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:a,enumerable:!0,configurable:!0},identifier:{value:o,enumerable:!0,configurable:!0},active:{value:i,enumerable:!0,configurable:!0},x:{value:c,enumerable:!0,configurable:!0},y:{value:s,enumerable:!0,configurable:!0},dx:{value:h,enumerable:!0,configurable:!0},dy:{value:u,enumerable:!0,configurable:!0},_:{value:p}})}X.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};function xt(t){return!t.ctrlKey&&!t.button}function mt(){return this.parentNode}function _t(t,e){return e??{x:t.x,y:t.y}}function wt(){return navigator.maxTouchPoints||"ontouchstart"in this}function bt(){var t=xt,e=mt,n=_t,a=wt,o={},i=J("start","drag","end"),c=0,s,h,u,p,w=0;function v(r){r.on("mousedown.drag",g).filter(a).on("touchstart.drag",l).on("touchmove.drag",y,yt).on("touchend.drag touchcancel.drag",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function g(r,x){if(!(p||!t.call(this,r,x))){var b=m(this,e.call(this,r,x),r,x,"mouse");b&&(D(r.view).on("mousemove.drag",_,z).on("mouseup.drag",f,z),pt(r.view),j(r),u=!1,s=r.clientX,h=r.clientY,b("start",r))}}function _(r){if(k(r),!u){var x=r.clientX-s,b=r.clientY-h;u=x*x+b*b>w}o.mouse("drag",r)}function f(r){D(r.view).on("mousemove.drag mouseup.drag",null),vt(r.view,u),k(r),o.mouse("end",r)}function l(r,x){if(t.call(this,r,x)){var b=r.changedTouches,N=e.call(this,r,x),A=b.length,R,M;for(R=0;R<A;++R)(M=m(this,N,r,x,b[R].identifier,b[R]))&&(j(r),M("start",r,b[R]))}}function y(r){var x=r.changedTouches,b=x.length,N,A;for(N=0;N<b;++N)(A=o[x[N].identifier])&&(k(r),A("drag",r,x[N]))}function d(r){var x=r.changedTouches,b=x.length,N,A;for(p&&clearTimeout(p),p=setTimeout(function(){p=null},500),N=0;N<b;++N)(A=o[x[N].identifier])&&(j(r),A("end",r,x[N]))}function m(r,x,b,N,A,R){var M=i.copy(),T=Z(R||b,x),I,S,U;if((U=n.call(r,new X("beforestart",{sourceEvent:b,target:v,identifier:A,active:c,x:T[0],y:T[1],dx:0,dy:0,dispatch:M}),N))!=null)return I=U.x-T[0]||0,S=U.y-T[1]||0,function at(Y,H,ot){var V=T,F;switch(Y){case"start":o[A]=at,F=c++;break;case"end":delete o[A],--c;case"drag":T=Z(ot||H,x),F=c;break}M.call(Y,r,new X(Y,{sourceEvent:H,subject:U,target:v,identifier:A,active:F,x:T[0]+I,y:T[1]+S,dx:T[0]-V[0],dy:T[1]-V[1],dispatch:M}),N)}}return v.filter=function(r){return arguments.length?(t=typeof r=="function"?r:$(!!r),v):t},v.container=function(r){return arguments.length?(e=typeof r=="function"?r:$(r),v):e},v.subject=function(r){return arguments.length?(n=typeof r=="function"?r:$(r),v):n},v.touchable=function(r){return arguments.length?(a=typeof r=="function"?r:$(!!r),v):a},v.on=function(){var r=i.on.apply(i,arguments);return r===i?v:r},v.clickDistance=function(r){return arguments.length?(w=(r=+r)*r,v):Math.sqrt(w)},v}function At(t,e){var n,a=1;t==null&&(t=0),e==null&&(e=0);function o(){var i,c=n.length,s,h=0,u=0;for(i=0;i<c;++i)s=n[i],h+=s.x,u+=s.y;for(h=(h/c-t)*a,u=(u/c-e)*a,i=0;i<c;++i)s=n[i],s.x-=h,s.y-=u}return o.initialize=function(i){n=i},o.x=function(i){return arguments.length?(t=+i,o):t},o.y=function(i){return arguments.length?(e=+i,o):e},o.strength=function(i){return arguments.length?(a=+i,o):a},o}function Nt(t){const e=+this._x.call(null,t),n=+this._y.call(null,t);return rt(this.cover(e,n),e,n,t)}function rt(t,e,n,a){if(isNaN(e)||isNaN(n))return t;var o,i=t._root,c={data:a},s=t._x0,h=t._y0,u=t._x1,p=t._y1,w,v,g,_,f,l,y,d;if(!i)return t._root=c,t;for(;i.length;)if((f=e>=(w=(s+u)/2))?s=w:u=w,(l=n>=(v=(h+p)/2))?h=v:p=v,o=i,!(i=i[y=l<<1|f]))return o[y]=c,t;if(g=+t._x.call(null,i.data),_=+t._y.call(null,i.data),e===g&&n===_)return c.next=i,o?o[y]=c:t._root=c,t;do o=o?o[y]=new Array(4):t._root=new Array(4),(f=e>=(w=(s+u)/2))?s=w:u=w,(l=n>=(v=(h+p)/2))?h=v:p=v;while((y=l<<1|f)===(d=(_>=v)<<1|g>=w));return o[d]=i,o[y]=c,t}function Mt(t){var e,n,a=t.length,o,i,c=new Array(a),s=new Array(a),h=1/0,u=1/0,p=-1/0,w=-1/0;for(n=0;n<a;++n)isNaN(o=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(c[n]=o,s[n]=i,o<h&&(h=o),o>p&&(p=o),i<u&&(u=i),i>w&&(w=i));if(h>p||u>w)return this;for(this.cover(h,u).cover(p,w),n=0;n<a;++n)rt(this,c[n],s[n],t[n]);return this}function Rt(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,a=this._y0,o=this._x1,i=this._y1;if(isNaN(n))o=(n=Math.floor(t))+1,i=(a=Math.floor(e))+1;else{for(var c=o-n||1,s=this._root,h,u;n>t||t>=o||a>e||e>=i;)switch(u=(e<a)<<1|t<n,h=new Array(4),h[u]=s,s=h,c*=2,u){case 0:o=n+c,i=a+c;break;case 1:n=o-c,i=a+c;break;case 2:o=n+c,a=i-c;break;case 3:n=o-c,a=i-c;break}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=a,this._x1=o,this._y1=i,this}function Tt(){var t=[];return this.visit(function(e){if(!e.length)do t.push(e.data);while(e=e.next)}),t}function Et(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]}function E(t,e,n,a,o){this.node=t,this.x0=e,this.y0=n,this.x1=a,this.y1=o}function Pt(t,e,n){var a,o=this._x0,i=this._y0,c,s,h,u,p=this._x1,w=this._y1,v=[],g=this._root,_,f;for(g&&v.push(new E(g,o,i,p,w)),n==null?n=1/0:(o=t-n,i=e-n,p=t+n,w=e+n,n*=n);_=v.pop();)if(!(!(g=_.node)||(c=_.x0)>p||(s=_.y0)>w||(h=_.x1)<o||(u=_.y1)<i))if(g.length){var l=(c+h)/2,y=(s+u)/2;v.push(new E(g[3],l,y,h,u),new E(g[2],c,y,l,u),new E(g[1],l,s,h,y),new E(g[0],c,s,l,y)),(f=(e>=y)<<1|t>=l)&&(_=v[v.length-1],v[v.length-1]=v[v.length-1-f],v[v.length-1-f]=_)}else{var d=t-+this._x.call(null,g.data),m=e-+this._y.call(null,g.data),r=d*d+m*m;if(r<n){var x=Math.sqrt(n=r);o=t-x,i=e-x,p=t+x,w=e+x,a=g.data}}return a}function Ct(t){if(isNaN(p=+this._x.call(null,t))||isNaN(w=+this._y.call(null,t)))return this;var e,n=this._root,a,o,i,c=this._x0,s=this._y0,h=this._x1,u=this._y1,p,w,v,g,_,f,l,y;if(!n)return this;if(n.length)for(;;){if((_=p>=(v=(c+h)/2))?c=v:h=v,(f=w>=(g=(s+u)/2))?s=g:u=g,e=n,!(n=n[l=f<<1|_]))return this;if(!n.length)break;(e[l+1&3]||e[l+2&3]||e[l+3&3])&&(a=e,y=l)}for(;n.data!==t;)if(o=n,!(n=n.next))return this;return(i=n.next)&&delete n.next,o?(i?o.next=i:delete o.next,this):e?(i?e[l]=i:delete e[l],(n=e[0]||e[1]||e[2]||e[3])&&n===(e[3]||e[2]||e[1]||e[0])&&!n.length&&(a?a[y]=n:this._root=n),this):(this._root=i,this)}function St(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this}function It(){return this._root}function Ot(){var t=0;return this.visit(function(e){if(!e.length)do++t;while(e=e.next)}),t}function Dt(t){var e=[],n,a=this._root,o,i,c,s,h;for(a&&e.push(new E(a,this._x0,this._y0,this._x1,this._y1));n=e.pop();)if(!t(a=n.node,i=n.x0,c=n.y0,s=n.x1,h=n.y1)&&a.length){var u=(i+s)/2,p=(c+h)/2;(o=a[3])&&e.push(new E(o,u,p,s,h)),(o=a[2])&&e.push(new E(o,i,p,u,h)),(o=a[1])&&e.push(new E(o,u,c,s,p)),(o=a[0])&&e.push(new E(o,i,c,u,p))}return this}function kt(t){var e=[],n=[],a;for(this._root&&e.push(new E(this._root,this._x0,this._y0,this._x1,this._y1));a=e.pop();){var o=a.node;if(o.length){var i,c=a.x0,s=a.y0,h=a.x1,u=a.y1,p=(c+h)/2,w=(s+u)/2;(i=o[0])&&e.push(new E(i,c,s,p,w)),(i=o[1])&&e.push(new E(i,p,s,h,w)),(i=o[2])&&e.push(new E(i,c,w,p,u)),(i=o[3])&&e.push(new E(i,p,w,h,u))}n.push(a)}for(;a=n.pop();)t(a.node,a.x0,a.y0,a.x1,a.y1);return this}function zt(t){return t[0]}function Ut(t){return arguments.length?(this._x=t,this):this._x}function $t(t){return t[1]}function Yt(t){return arguments.length?(this._y=t,this):this._y}function L(t,e,n){var a=new G(e??zt,n??$t,NaN,NaN,NaN,NaN);return t==null?a:a.addAll(t)}function G(t,e,n,a,o,i){this._x=t,this._y=e,this._x0=n,this._y0=a,this._x1=o,this._y1=i,this._root=void 0}function K(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var C=L.prototype=G.prototype;C.copy=function(){var t=new G(this._x,this._y,this._x0,this._y0,this._x1,this._y1),e=this._root,n,a;if(!e)return t;if(!e.length)return t._root=K(e),t;for(n=[{source:e,target:t._root=new Array(4)}];e=n.pop();)for(var o=0;o<4;++o)(a=e.source[o])&&(a.length?n.push({source:a,target:e.target[o]=new Array(4)}):e.target[o]=K(a));return t};C.add=Nt;C.addAll=Mt;C.cover=Rt;C.data=Tt;C.extent=Et;C.find=Pt;C.remove=Ct;C.removeAll=St;C.root=It;C.size=Ot;C.visit=Dt;C.visitAfter=kt;C.x=Ut;C.y=Yt;function P(t){return function(){return t}}function O(t){return(t()-.5)*1e-6}function Ft(t){return t.x+t.vx}function jt(t){return t.y+t.vy}function it(t){var e,n,a,o=1,i=1;typeof t!="function"&&(t=P(t==null?1:+t));function c(){for(var u,p=e.length,w,v,g,_,f,l,y=0;y<i;++y)for(w=L(e,Ft,jt).visitAfter(s),u=0;u<p;++u)v=e[u],f=n[v.index],l=f*f,g=v.x+v.vx,_=v.y+v.vy,w.visit(d);function d(m,r,x,b,N){var A=m.data,R=m.r,M=f+R;if(A){if(A.index>v.index){var T=g-A.x-A.vx,I=_-A.y-A.vy,S=T*T+I*I;S<M*M&&(T===0&&(T=O(a),S+=T*T),I===0&&(I=O(a),S+=I*I),S=(M-(S=Math.sqrt(S)))/S*o,v.vx+=(T*=S)*(M=(R*=R)/(l+R)),v.vy+=(I*=S)*M,A.vx-=T*(M=1-M),A.vy-=I*M)}return}return r>g+M||b<g-M||x>_+M||N<_-M}}function s(u){if(u.data)return u.r=n[u.data.index];for(var p=u.r=0;p<4;++p)u[p]&&u[p].r>u.r&&(u.r=u[p].r)}function h(){if(e){var u,p=e.length,w;for(n=new Array(p),u=0;u<p;++u)w=e[u],n[w.index]=+t(w,u,e)}}return c.initialize=function(u,p){e=u,a=p,h()},c.iterations=function(u){return arguments.length?(i=+u,c):i},c.strength=function(u){return arguments.length?(o=+u,c):o},c.radius=function(u){return arguments.length?(t=typeof u=="function"?u:P(+u),h(),c):t},c}function Bt(t){return t.index}function W(t,e){var n=t.get(e);if(!n)throw new Error("node not found: "+e);return n}function Xt(t){var e=Bt,n=w,a,o=P(30),i,c,s,h,u,p=1;t==null&&(t=[]);function w(l){return 1/Math.min(s[l.source.index],s[l.target.index])}function v(l){for(var y=0,d=t.length;y<p;++y)for(var m=0,r,x,b,N,A,R,M;m<d;++m)r=t[m],x=r.source,b=r.target,N=b.x+b.vx-x.x-x.vx||O(u),A=b.y+b.vy-x.y-x.vy||O(u),R=Math.sqrt(N*N+A*A),R=(R-i[m])/R*l*a[m],N*=R,A*=R,b.vx-=N*(M=h[m]),b.vy-=A*M,x.vx+=N*(M=1-M),x.vy+=A*M}function g(){if(c){var l,y=c.length,d=t.length,m=new Map(c.map((x,b)=>[e(x,b,c),x])),r;for(l=0,s=new Array(y);l<d;++l)r=t[l],r.index=l,typeof r.source!="object"&&(r.source=W(m,r.source)),typeof r.target!="object"&&(r.target=W(m,r.target)),s[r.source.index]=(s[r.source.index]||0)+1,s[r.target.index]=(s[r.target.index]||0)+1;for(l=0,h=new Array(d);l<d;++l)r=t[l],h[l]=s[r.source.index]/(s[r.source.index]+s[r.target.index]);a=new Array(d),_(),i=new Array(d),f()}}function _(){if(c)for(var l=0,y=t.length;l<y;++l)a[l]=+n(t[l],l,t)}function f(){if(c)for(var l=0,y=t.length;l<y;++l)i[l]=+o(t[l],l,t)}return v.initialize=function(l,y){c=l,u=y,g()},v.links=function(l){return arguments.length?(t=l,g(),v):t},v.id=function(l){return arguments.length?(e=l,v):e},v.iterations=function(l){return arguments.length?(p=+l,v):p},v.strength=function(l){return arguments.length?(n=typeof l=="function"?l:P(+l),_(),v):n},v.distance=function(l){return arguments.length?(o=typeof l=="function"?l:P(+l),f(),v):o},v}const Lt=1664525,Gt=1013904223,Q=4294967296;function Ht(){let t=1;return()=>(t=(Lt*t+Gt)%Q)/Q}function Vt(t){return t.x}function Zt(t){return t.y}var Kt=10,Wt=Math.PI*(3-Math.sqrt(5));function Qt(t){var e,n=1,a=.001,o=1-Math.pow(a,1/300),i=0,c=.6,s=new Map,h=st(w),u=J("tick","end"),p=Ht();t==null&&(t=[]);function w(){v(),u.call("tick",e),n<a&&(h.stop(),u.call("end",e))}function v(f){var l,y=t.length,d;f===void 0&&(f=1);for(var m=0;m<f;++m)for(n+=(i-n)*o,s.forEach(function(r){r(n)}),l=0;l<y;++l)d=t[l],d.fx==null?d.x+=d.vx*=c:(d.x=d.fx,d.vx=0),d.fy==null?d.y+=d.vy*=c:(d.y=d.fy,d.vy=0);return e}function g(){for(var f=0,l=t.length,y;f<l;++f){if(y=t[f],y.index=f,y.fx!=null&&(y.x=y.fx),y.fy!=null&&(y.y=y.fy),isNaN(y.x)||isNaN(y.y)){var d=Kt*Math.sqrt(.5+f),m=f*Wt;y.x=d*Math.cos(m),y.y=d*Math.sin(m)}(isNaN(y.vx)||isNaN(y.vy))&&(y.vx=y.vy=0)}}function _(f){return f.initialize&&f.initialize(t,p),f}return g(),e={tick:v,restart:function(){return h.restart(w),e},stop:function(){return h.stop(),e},nodes:function(f){return arguments.length?(t=f,g(),s.forEach(_),e):t},alpha:function(f){return arguments.length?(n=+f,e):n},alphaMin:function(f){return arguments.length?(a=+f,e):a},alphaDecay:function(f){return arguments.length?(o=+f,e):+o},alphaTarget:function(f){return arguments.length?(i=+f,e):i},velocityDecay:function(f){return arguments.length?(c=1-f,e):1-c},randomSource:function(f){return arguments.length?(p=f,s.forEach(_),e):p},force:function(f,l){return arguments.length>1?(l==null?s.delete(f):s.set(f,_(l)),e):s.get(f)},find:function(f,l,y){var d=0,m=t.length,r,x,b,N,A;for(y==null?y=1/0:y*=y,d=0;d<m;++d)N=t[d],r=f-N.x,x=l-N.y,b=r*r+x*x,b<y&&(A=N,y=b);return A},on:function(f,l){return arguments.length>1?(u.on(f,l),e):u.on(f)}}}function Jt(){var t,e,n,a,o=P(-30),i,c=1,s=1/0,h=.81;function u(g){var _,f=t.length,l=L(t,Vt,Zt).visitAfter(w);for(a=g,_=0;_<f;++_)e=t[_],l.visit(v)}function p(){if(t){var g,_=t.length,f;for(i=new Array(_),g=0;g<_;++g)f=t[g],i[f.index]=+o(f,g,t)}}function w(g){var _=0,f,l,y=0,d,m,r;if(g.length){for(d=m=r=0;r<4;++r)(f=g[r])&&(l=Math.abs(f.value))&&(_+=f.value,y+=l,d+=l*f.x,m+=l*f.y);g.x=d/y,g.y=m/y}else{f=g,f.x=f.data.x,f.y=f.data.y;do _+=i[f.data.index];while(f=f.next)}g.value=_}function v(g,_,f,l){if(!g.value)return!0;var y=g.x-e.x,d=g.y-e.y,m=l-_,r=y*y+d*d;if(m*m/h<r)return r<s&&(y===0&&(y=O(n),r+=y*y),d===0&&(d=O(n),r+=d*d),r<c&&(r=Math.sqrt(c*r)),e.vx+=y*g.value*a/r,e.vy+=d*g.value*a/r),!0;if(g.length||r>=s)return;(g.data!==e||g.next)&&(y===0&&(y=O(n),r+=y*y),d===0&&(d=O(n),r+=d*d),r<c&&(r=Math.sqrt(c*r)));do g.data!==e&&(m=i[g.data.index]*a/r,e.vx+=y*m,e.vy+=d*m);while(g=g.next)}return u.initialize=function(g,_){t=g,n=_,p()},u.strength=function(g){return arguments.length?(o=typeof g=="function"?g:P(+g),p(),u):o},u.distanceMin=function(g){return arguments.length?(c=g*g,u):Math.sqrt(c)},u.distanceMax=function(g){return arguments.length?(s=g*g,u):Math.sqrt(s)},u.theta=function(g){return arguments.length?(h=g*g,u):Math.sqrt(h)},u}function qt(t){var e=P(.1),n,a,o;typeof t!="function"&&(t=P(t==null?0:+t));function i(s){for(var h=0,u=n.length,p;h<u;++h)p=n[h],p.vx+=(o[h]-p.x)*a[h]*s}function c(){if(n){var s,h=n.length;for(a=new Array(h),o=new Array(h),s=0;s<h;++s)a[s]=isNaN(o[s]=+t(n[s],s,n))?0:+e(n[s],s,n)}}return i.initialize=function(s){n=s,c()},i.strength=function(s){return arguments.length?(e=typeof s=="function"?s:P(+s),c(),i):e},i.x=function(s){return arguments.length?(t=typeof s=="function"?s:P(+s),c(),i):t},i}function te(t){var e=P(.1),n,a,o;typeof t!="function"&&(t=P(t==null?0:+t));function i(s){for(var h=0,u=n.length,p;h<u;++h)p=n[h],p.vy+=(o[h]-p.y)*a[h]*s}function c(){if(n){var s,h=n.length;for(a=new Array(h),o=new Array(h),s=0;s<h;++s)a[s]=isNaN(o[s]=+t(n[s],s,n))?0:+e(n[s],s,n)}}return i.initialize=function(s){n=s,c()},i.strength=function(s){return arguments.length?(e=typeof s=="function"?s:P(+s),c(),i):e},i.y=function(s){return arguments.length?(t=typeof s=="function"?s:P(+s),c(),i):t},i}const ee=async function(){const t=this;var e=this.ZOOM;const n=this.$refs.NETWORK,a=this.GRAPH;q(this.GRAPH.nodes);const o=this.FIND_STRUCTURE;var i=D(n);this.width=+i.node().getBoundingClientRect().width,this.height=+i.node().getBoundingClientRect().height;var c,s,h=this.FORCE_PROPERTIES,u=Qt();this.simulation=u,v();function p(){u.nodes(a.nodes),w(),u.on("tick",_),t.OPACITY=1}p();function w(){u.force("link",Xt()).force("charge",Jt()).force("collide",it()).force("center",At()).force("forceX",qt()).force("forceY",te()),t.reinvigorate()}function v(){c=i.selectAll("line").data(a.links).enter().append("line").style("stroke","#000").style("stroke-width","3px");var d=i.append("g").attr("class","nodes").selectAll("circle");console.log({nodes:d});var m=d.data(a.nodes).enter().append("g").attr("transform",function(r){return console.log("transform",r.x,r.y,{d:r}),"translate("+r.x+","+r.y+")"});m.append("circle").attr("r",function(r){var x=o(r.id);return x.mass.full[0]/e}).style("fill","rgba(0,0,0,.1)").style("stroke","#000").style("stroke-width","1px"),m.append("circle").attr("r",function(r){var x=o(r.id);if(Array.isArray(x.mass.partial)){const b=x.mass.full[0],N=Math.PI*Math.pow(b,2),A=N*(x.mass.partial[0]/x.mass.full[0]),R=Math.sqrt(A/Math.PI);return console.log({FULL_RADIUS:b,PARTIAL_RADIUS:R,FULL_AREA:N,PARTIAL_AREA:A,1:x.mass.partial[0]}),R/e}return x.mass.full[0]/e}).style("fill","#FFF").style("stroke","#000").style("stroke-width","1px"),s=m.call(bt().on("start",f).on("drag",l).on("end",y)),s.append("text").text(function(r){var x=o(r.id);return x.name}),g()}function g(){c.attr("stroke-width",h.link.enabled?1:.5).attr("opacity",h.link.enabled?1:0)}function _(){c.attr("x1",function(d){return d.source.x}).attr("y1",function(d){return d.source.y}).attr("x2",function(d){return d.target.x}).attr("y2",function(d){return d.target.y}),s.attr("transform",function(d){return"translate("+d.x+","+d.y+")"}),D("#alpha_value").style("flex-basis",u.alpha()*100+"%")}function f(d,m){console.log("drag started",m),d.active||u.alphaTarget(.3).restart(),m.fx=m.x,m.fy=m.y}function l(d,m){m.fx=d.x,m.fy=d.y}function y(d,m){d.active||u.alphaTarget(1e-4),m.fx=null,m.fy=null}D(window).on("resize",function(){t.width=+i.node().getBoundingClientRect().width,t.height=+i.node().getBoundingClientRect().height,t.reinvigorate()})};function ne(){const t=this.ZOOM,e=this.simulation,n=this.FORCE_PROPERTIES,a=this.width,o=this.height,i=this.GRAPH;e.force("center").x(a*n.center.x).y(o*n.center.y),e.force("charge").strength(n.charge.strength*n.charge.enabled).distanceMin(n.charge.distanceMin).distanceMax(n.charge.distanceMax),e.force("collide",it().strength(.3).radius(c=>(console.log("collide",c),(c.mass.full[0]+20)/t)).iterations(1)),e.force("forceX").strength(n.forceX.strength*n.forceX.enabled).x(a*n.forceX.x),e.force("forceY").strength(n.forceY.strength*n.forceY.enabled).y(o*n.forceY.y),e.force("link").id(function(c){return c.id}).distance(n.link.distance).iterations(n.link.iterations).links(n.link.enabled?i.links:[]),e.alpha(1).restart()}function re(t){const e=q(this.GRAPH.nodes);for(let n=0;n<e.length;n++)if(e[n].id===t)return e[n];return null}const ie={data(){return{OPACITY:0,ZOOM:1,GRAPH:{nodes:[{id:0,name:"food item",mass:{full:[100,"g"],partial:[100-53,"g"]}},{id:1,name:"lipids",mass:{full:[53,"g"],partial:[53-4.25-34.7-12.6,"g"]}},{id:2,name:"saturated fatty acids",mass:{full:[4.25,"g"]}},{id:3,name:"monounsaturated fatty acids",mass:{full:[34.7,"g"]}},{id:4,name:"polyunsaturated fatty acids",mass:{full:[12.6,"g"],partial:[12.6-12.6,"g"]}},{id:5,name:"pufa 18:2 n-6 c,c",mass:{full:[12.6,"g"]}},{id:6,name:"protein",mass:{full:[59.6,"g"],partial:[59.6-8.6,"g"]}},{id:7,name:"collagen",mass:{full:[8.6,"g"],partial:[8.6-3.6,"g"]}},{id:8,name:"glycine",mass:{full:[3.6,"g"]}}],links:[{source:0,target:1},{source:1,target:2},{source:1,target:3},{source:1,target:4},{source:4,target:5},{source:0,target:6},{source:6,target:7},{source:7,target:8},{source:6,target:8}]},FORCE_PROPERTIES:{center:{x:.5,y:.5},charge:{enabled:1,strength:-200,distanceMin:200,distanceMax:2e3},collide:{enabled:1,strength:.7,iterations:1,radius:100},forceX:{enabled:1,strength:.1,x:.5},forceY:{enabled:1,strength:.1,y:.5},link:{enabled:1,distance:30,iterations:1}}}},methods:{PHYSICAL:ee,reinvigorate:ne,FIND_STRUCTURE:re},async mounted(){this.PHYSICAL()}},ae=ie;function oe(t,e,n,a,o,i){const c=et("s_panel");return B(),ut(c,null,{default:ct(()=>[(B(),nt("svg",{ref:"NETWORK",style:lt({width:"100vw",height:"500px",border:"1px solid #DDD",borderRadius:"4px",opacity:t.OPACITY,translate:"opacity .3s"})},null,4))]),_:1})}const se=tt(ae,[["render",oe]]),ue={components:{composition_DAC:se}},ce=ue,le=gt("pre",null,`		TODO:
		
		Make each label fit within each circle (bubble, ellipse, etc.)
			Then, have a scaling (@zoom, @magnify) feature.
	`,-1);function fe(t,e,n,a,o,i){const c=et("composition_DAC");return B(),nt(ht,null,[ft(c),le],64)}const de=tt(ce,[["render",fe]]);export{de as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
