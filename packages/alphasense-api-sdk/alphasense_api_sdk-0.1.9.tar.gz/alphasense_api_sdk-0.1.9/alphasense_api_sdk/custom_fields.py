# Generated by alphasense-api-sdk 
# Copyright by AlphaSense

from typing import Any, Dict, Optional, Union

from . import CompanyDocumentCategory
from .base_operation import GraphQLField
from .custom_typing_fields import (
    AISummaryModuleGraphQLField,
    BrokerResearchEntitlementRequestGraphQLField,
    BrokerResearchEntitlementSalesContactGraphQLField,
    BrokerResearchEntitlementUpdateResultGraphQLField,
    BrokerResearchSourceGraphQLField,
    BrokerResearchUserEntitlementsGraphQLField,
    CompanyGraphQLField,
    CompanyTopicsDataGraphQLField,
    CompanyTopicV2GraphQLField,
    CountryGraphQLField,
    DocumentCountGroupingPropertyUnion,
    DocumentCountResponseGraphQLField,
    DocumentExportResultGraphQLField,
    DocumentExportTaskGraphQLField,
    DocumentGraphQLField,
    DocumentImageGraphQLField,
    DocumentKpiClusterGraphQLField,
    DocumentKpiGraphQLField,
    DocumentKpiRelationAttributeGraphQLField,
    DocumentMutationGraphQLField,
    DocumentTopicClusterGraphQLField,
    DocumentTopicGraphQLField,
    DocumentTypeAndDateGroupGraphQLField,
    GroupedCountGraphQLField,
    HitOffsetGraphQLField,
    IndustryBranchGraphQLField,
    IndustrySectorGraphQLField,
    KeywordResultGraphQLField,
    PageInfoGraphQLField,
    PublicUserInfoGraphQLField,
    SavedSearchGraphQLField,
    SavedSearchResponseGraphQLField,
    SearchDocumentImageResponseGraphQLField,
    SearchResponseGraphQLField,
    SentimentCountsGraphQLField,
    SentimentCountV2GraphQLField,
    SentimentGraphQLField,
    SourceInfoGraphQLField,
    StatementGraphQLField,
    SubIndustryGraphQLField,
    TopicSentimentTrendGraphQLField,
    UserGraphQLField,
    UserOrganisationGraphQLField,
    WatchlistEdgeGraphQLField,
    WatchlistGraphQLField,
    WatchlistMutationGraphQLField,
    WatchlistMutationResultGraphQLField,
    WatchlistsConnectionGraphQLField,
)
from .input_types import (
    CompanyTopicsFilter,
    DocumentExportInput,
    KeywordHitsFilter,
    TopicsPaginationFilter,
    UpdateWatchlistCompaniesInput,
    UpdateWatchlistInput,
)


class AISummaryModuleFields(GraphQLField):
    title: "AISummaryModuleGraphQLField" = AISummaryModuleGraphQLField("title")
    type: "AISummaryModuleGraphQLField" = AISummaryModuleGraphQLField("type")

    @classmethod
    def topics(cls) -> "AISummaryTopicInterface":
        return AISummaryTopicInterface("topics")

    @classmethod
    def document(cls) -> "DocumentFields":
        return DocumentFields("document")

    def fields(
        self,
        *subfields: Union[
            AISummaryModuleGraphQLField, "AISummaryTopicInterface", "DocumentFields"
        ]
    ) -> "AISummaryModuleFields":
        """Subfields should come from the AISummaryModuleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AISummaryModuleFields":
        self._alias = alias
        return self


class BrokerResearchEntitlementRequestFields(GraphQLField):
    request_id: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("requestId")
    )
    user_id: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("userId")
    )
    first_name: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("firstName")
    )
    last_name: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("lastName")
    )
    user_email: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("userEmail")
    )
    company_name: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("companyName")
    )
    requested_at: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("requestedAt")
    )
    status: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("status")
    )

    @classmethod
    def sales_contact(cls) -> "BrokerResearchEntitlementSalesContactFields":
        return BrokerResearchEntitlementSalesContactFields("sales_contact")

    entitlement_groups: "BrokerResearchEntitlementRequestGraphQLField" = (
        BrokerResearchEntitlementRequestGraphQLField("entitlementGroups")
    )

    def fields(
        self,
        *subfields: Union[
            BrokerResearchEntitlementRequestGraphQLField,
            "BrokerResearchEntitlementSalesContactFields",
        ]
    ) -> "BrokerResearchEntitlementRequestFields":
        """Subfields should come from the BrokerResearchEntitlementRequestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BrokerResearchEntitlementRequestFields":
        self._alias = alias
        return self


class BrokerResearchEntitlementSalesContactFields(GraphQLField):
    name: "BrokerResearchEntitlementSalesContactGraphQLField" = (
        BrokerResearchEntitlementSalesContactGraphQLField("name")
    )
    email: "BrokerResearchEntitlementSalesContactGraphQLField" = (
        BrokerResearchEntitlementSalesContactGraphQLField("email")
    )

    def fields(
        self, *subfields: BrokerResearchEntitlementSalesContactGraphQLField
    ) -> "BrokerResearchEntitlementSalesContactFields":
        """Subfields should come from the BrokerResearchEntitlementSalesContactFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BrokerResearchEntitlementSalesContactFields":
        self._alias = alias
        return self


class BrokerResearchEntitlementUpdateResultFields(GraphQLField):
    message: "BrokerResearchEntitlementUpdateResultGraphQLField" = (
        BrokerResearchEntitlementUpdateResultGraphQLField("message")
    )

    @classmethod
    def broker_research_user_entitlements(
        cls,
    ) -> "BrokerResearchUserEntitlementsFields":
        return BrokerResearchUserEntitlementsFields("broker_research_user_entitlements")

    def fields(
        self,
        *subfields: Union[
            BrokerResearchEntitlementUpdateResultGraphQLField,
            "BrokerResearchUserEntitlementsFields",
        ]
    ) -> "BrokerResearchEntitlementUpdateResultFields":
        """Subfields should come from the BrokerResearchEntitlementUpdateResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BrokerResearchEntitlementUpdateResultFields":
        self._alias = alias
        return self


class BrokerResearchSourceFields(GraphQLField):
    name: "BrokerResearchSourceGraphQLField" = BrokerResearchSourceGraphQLField("name")

    @classmethod
    def children(cls) -> "BrokerResearchSourceFields":
        return BrokerResearchSourceFields("children")

    code: "BrokerResearchSourceGraphQLField" = BrokerResearchSourceGraphQLField("code")

    def fields(
        self,
        *subfields: Union[
            BrokerResearchSourceGraphQLField, "BrokerResearchSourceFields"
        ]
    ) -> "BrokerResearchSourceFields":
        """Subfields should come from the BrokerResearchSourceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BrokerResearchSourceFields":
        self._alias = alias
        return self


class BrokerResearchUserEntitlementsFields(GraphQLField):
    request_id: "BrokerResearchUserEntitlementsGraphQLField" = (
        BrokerResearchUserEntitlementsGraphQLField("requestId")
    )
    user_id: "BrokerResearchUserEntitlementsGraphQLField" = (
        BrokerResearchUserEntitlementsGraphQLField("userId")
    )
    status: "BrokerResearchUserEntitlementsGraphQLField" = (
        BrokerResearchUserEntitlementsGraphQLField("status")
    )
    entitlement_groups: "BrokerResearchUserEntitlementsGraphQLField" = (
        BrokerResearchUserEntitlementsGraphQLField("entitlementGroups")
    )

    def fields(
        self, *subfields: BrokerResearchUserEntitlementsGraphQLField
    ) -> "BrokerResearchUserEntitlementsFields":
        """Subfields should come from the BrokerResearchUserEntitlementsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BrokerResearchUserEntitlementsFields":
        self._alias = alias
        return self


class CompanyFields(GraphQLField):
    id: "CompanyGraphQLField" = CompanyGraphQLField("id")
    name: "CompanyGraphQLField" = CompanyGraphQLField("name")
    primary_ticker_code: "CompanyGraphQLField" = CompanyGraphQLField(
        "primaryTickerCode"
    )

    @classmethod
    def country(cls) -> "CountryFields":
        return CountryFields("country")

    @classmethod
    def sector(cls) -> "IndustrySectorFields":
        return IndustrySectorFields("sector")

    @classmethod
    def industry(cls) -> "IndustryBranchFields":
        return IndustryBranchFields("industry")

    @classmethod
    def sub_industry(cls) -> "SubIndustryFields":
        return SubIndustryFields("sub_industry")

    isin: "CompanyGraphQLField" = CompanyGraphQLField("isin")
    crunchbase_id: "CompanyGraphQLField" = CompanyGraphQLField("crunchbaseId")
    cik: "CompanyGraphQLField" = CompanyGraphQLField("cik")

    @classmethod
    def trending_topics(
        cls,
        *,
        pagination_filter: Optional[TopicsPaginationFilter] = None,
        data_filter: Optional[CompanyTopicsFilter] = None
    ) -> "CompanyTopicsDataFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "paginationFilter": {
                "type": "TopicsPaginationFilter",
                "value": pagination_filter,
            },
            "dataFilter": {"type": "CompanyTopicsFilter", "value": data_filter},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CompanyTopicsDataFields("trending_topics", arguments=cleared_arguments)

    primary: "CompanyGraphQLField" = CompanyGraphQLField("primary")

    @classmethod
    def ai_summary_modules(cls) -> "AISummaryModuleFields":
        return AISummaryModuleFields("ai_summary_modules")

    has_summaries: "CompanyGraphQLField" = CompanyGraphQLField("hasSummaries")

    def fields(
        self,
        *subfields: Union[
            CompanyGraphQLField,
            "AISummaryModuleFields",
            "CompanyTopicsDataFields",
            "CountryFields",
            "IndustryBranchFields",
            "IndustrySectorFields",
            "SubIndustryFields",
        ]
    ) -> "CompanyFields":
        """Subfields should come from the CompanyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanyFields":
        self._alias = alias
        return self


class CompanyTopicV2Fields(GraphQLField):
    company_id: "CompanyTopicV2GraphQLField" = CompanyTopicV2GraphQLField("companyId")
    name: "CompanyTopicV2GraphQLField" = CompanyTopicV2GraphQLField("name")
    encapsulated_topics: "CompanyTopicV2GraphQLField" = CompanyTopicV2GraphQLField(
        "encapsulatedTopics"
    )
    momentum_score: "CompanyTopicV2GraphQLField" = CompanyTopicV2GraphQLField(
        "momentumScore"
    )
    affinity_score: "CompanyTopicV2GraphQLField" = CompanyTopicV2GraphQLField(
        "affinityScore"
    )
    relevance_score: "CompanyTopicV2GraphQLField" = CompanyTopicV2GraphQLField(
        "relevanceScore"
    )

    @classmethod
    def sentiment_count(cls) -> "SentimentCountV2Fields":
        return SentimentCountV2Fields("sentiment_count")

    total_mentions_trends: "CompanyTopicV2GraphQLField" = CompanyTopicV2GraphQLField(
        "totalMentionsTrends"
    )

    @classmethod
    def sentiment_trends(cls) -> "TopicSentimentTrendFields":
        return TopicSentimentTrendFields("sentiment_trends")

    def fields(
        self,
        *subfields: Union[
            CompanyTopicV2GraphQLField,
            "SentimentCountV2Fields",
            "TopicSentimentTrendFields",
        ]
    ) -> "CompanyTopicV2Fields":
        """Subfields should come from the CompanyTopicV2Fields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanyTopicV2Fields":
        self._alias = alias
        return self


class CompanyTopicsDataFields(GraphQLField):
    count: "CompanyTopicsDataGraphQLField" = CompanyTopicsDataGraphQLField("count")

    @classmethod
    def topics(cls) -> "CompanyTopicV2Fields":
        return CompanyTopicV2Fields("topics")

    def fields(
        self, *subfields: Union[CompanyTopicsDataGraphQLField, "CompanyTopicV2Fields"]
    ) -> "CompanyTopicsDataFields":
        """Subfields should come from the CompanyTopicsDataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanyTopicsDataFields":
        self._alias = alias
        return self


class CountryFields(GraphQLField):
    code: "CountryGraphQLField" = CountryGraphQLField("code")
    name: "CountryGraphQLField" = CountryGraphQLField("name")

    def fields(self, *subfields: CountryGraphQLField) -> "CountryFields":
        """Subfields should come from the CountryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CountryFields":
        self._alias = alias
        return self


class DocumentFields(GraphQLField):
    id: "DocumentGraphQLField" = DocumentGraphQLField("id")
    released_at: "DocumentGraphQLField" = DocumentGraphQLField("releasedAt")

    @classmethod
    def type(cls) -> "DocumentTypeInterface":
        return DocumentTypeInterface("type")

    title: "DocumentGraphQLField" = DocumentGraphQLField("title")
    page_count: "DocumentGraphQLField" = DocumentGraphQLField("pageCount")
    last_processed_at: "DocumentGraphQLField" = DocumentGraphQLField("lastProcessedAt")
    summary: "DocumentGraphQLField" = DocumentGraphQLField("summary")

    @classmethod
    def companies(
        cls, *, category: Optional[CompanyDocumentCategory] = None
    ) -> "CompanyFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "category": {"type": "CompanyDocumentCategory", "value": category}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CompanyFields("companies", arguments=cleared_arguments)

    country_codes: "DocumentGraphQLField" = DocumentGraphQLField("countryCodes")

    @classmethod
    def source(cls) -> "SourceInfoFields":
        return SourceInfoFields("source")

    @classmethod
    def sentiment(cls) -> "SentimentFields":
        return SentimentFields("sentiment")

    @classmethod
    def sectors(cls) -> "IndustrySectorFields":
        return IndustrySectorFields("sectors")

    @classmethod
    def industries(cls) -> "IndustryBranchFields":
        return IndustryBranchFields("industries")

    @classmethod
    def sub_industries(cls) -> "SubIndustryFields":
        return SubIndustryFields("sub_industries")

    @classmethod
    def kpi_clusters(cls) -> "DocumentKpiClusterFields":
        return DocumentKpiClusterFields("kpi_clusters")

    @classmethod
    def topic_clusters(cls) -> "DocumentTopicClusterFields":
        return DocumentTopicClusterFields("topic_clusters")

    @classmethod
    def images(cls) -> "DocumentImageFields":
        return DocumentImageFields("images")

    image_count: "DocumentGraphQLField" = DocumentGraphQLField("imageCount")
    relevance_score: "DocumentGraphQLField" = DocumentGraphQLField("relevanceScore")

    @classmethod
    def snippets(
        cls,
        *,
        keyword_filter: Optional[KeywordHitsFilter] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None
    ) -> "KeywordResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "keywordFilter": {"type": "KeywordHitsFilter", "value": keyword_filter},
            "limit": {"type": "Int", "value": limit},
            "offset": {"type": "Int", "value": offset},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KeywordResultFields("snippets", arguments=cleared_arguments)

    @classmethod
    def ai_summary_modules(cls) -> "AISummaryModuleFields":
        return AISummaryModuleFields("ai_summary_modules")

    def fields(
        self,
        *subfields: Union[
            DocumentGraphQLField,
            "AISummaryModuleFields",
            "CompanyFields",
            "DocumentImageFields",
            "DocumentKpiClusterFields",
            "DocumentTopicClusterFields",
            "DocumentTypeInterface",
            "IndustryBranchFields",
            "IndustrySectorFields",
            "KeywordResultFields",
            "SentimentFields",
            "SourceInfoFields",
            "SubIndustryFields",
        ]
    ) -> "DocumentFields":
        """Subfields should come from the DocumentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentFields":
        self._alias = alias
        return self


class DocumentCountResponseFields(GraphQLField):
    @classmethod
    def items(cls) -> "GroupedCountFields":
        return GroupedCountFields("items")

    def fields(
        self, *subfields: Union[DocumentCountResponseGraphQLField, "GroupedCountFields"]
    ) -> "DocumentCountResponseFields":
        """Subfields should come from the DocumentCountResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentCountResponseFields":
        self._alias = alias
        return self


class DocumentExportResultFields(GraphQLField):
    status: "DocumentExportResultGraphQLField" = DocumentExportResultGraphQLField(
        "status"
    )
    file_url: "DocumentExportResultGraphQLField" = DocumentExportResultGraphQLField(
        "fileURL"
    )

    def fields(
        self, *subfields: DocumentExportResultGraphQLField
    ) -> "DocumentExportResultFields":
        """Subfields should come from the DocumentExportResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentExportResultFields":
        self._alias = alias
        return self


class DocumentExportTaskFields(GraphQLField):
    task_id: "DocumentExportTaskGraphQLField" = DocumentExportTaskGraphQLField("taskId")
    document_id: "DocumentExportTaskGraphQLField" = DocumentExportTaskGraphQLField(
        "documentId"
    )

    def fields(
        self, *subfields: DocumentExportTaskGraphQLField
    ) -> "DocumentExportTaskFields":
        """Subfields should come from the DocumentExportTaskFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentExportTaskFields":
        self._alias = alias
        return self


class DocumentImageFields(GraphQLField):
    id: "DocumentImageGraphQLField" = DocumentImageGraphQLField("id")

    @classmethod
    def document(cls) -> "DocumentFields":
        return DocumentFields("document")

    relevance_score: "DocumentImageGraphQLField" = DocumentImageGraphQLField(
        "relevanceScore"
    )
    types: "DocumentImageGraphQLField" = DocumentImageGraphQLField("types")

    def fields(
        self, *subfields: Union[DocumentImageGraphQLField, "DocumentFields"]
    ) -> "DocumentImageFields":
        """Subfields should come from the DocumentImageFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentImageFields":
        self._alias = alias
        return self


class DocumentKpiFields(GraphQLField):
    name: "DocumentKpiGraphQLField" = DocumentKpiGraphQLField("name")
    statement_index: "DocumentKpiGraphQLField" = DocumentKpiGraphQLField(
        "statementIndex"
    )

    @classmethod
    def attributes(cls) -> "DocumentKpiRelationAttributeFields":
        return DocumentKpiRelationAttributeFields("attributes")

    def fields(
        self,
        *subfields: Union[DocumentKpiGraphQLField, "DocumentKpiRelationAttributeFields"]
    ) -> "DocumentKpiFields":
        """Subfields should come from the DocumentKpiFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentKpiFields":
        self._alias = alias
        return self


class DocumentKpiClusterFields(GraphQLField):
    name: "DocumentKpiClusterGraphQLField" = DocumentKpiClusterGraphQLField("name")
    rank: "DocumentKpiClusterGraphQLField" = DocumentKpiClusterGraphQLField("rank")

    @classmethod
    def sentiment_counts(cls) -> "SentimentCountsFields":
        return SentimentCountsFields("sentiment_counts")

    net_mention_count: "DocumentKpiClusterGraphQLField" = (
        DocumentKpiClusterGraphQLField("netMentionCount")
    )

    @classmethod
    def kpi_list(cls) -> "DocumentKpiFields":
        return DocumentKpiFields("kpi_list")

    def fields(
        self,
        *subfields: Union[
            DocumentKpiClusterGraphQLField, "DocumentKpiFields", "SentimentCountsFields"
        ]
    ) -> "DocumentKpiClusterFields":
        """Subfields should come from the DocumentKpiClusterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentKpiClusterFields":
        self._alias = alias
        return self


class DocumentKpiRelationAttributeFields(GraphQLField):
    type: "DocumentKpiRelationAttributeGraphQLField" = (
        DocumentKpiRelationAttributeGraphQLField("type")
    )
    value: "DocumentKpiRelationAttributeGraphQLField" = (
        DocumentKpiRelationAttributeGraphQLField("value")
    )

    def fields(
        self, *subfields: DocumentKpiRelationAttributeGraphQLField
    ) -> "DocumentKpiRelationAttributeFields":
        """Subfields should come from the DocumentKpiRelationAttributeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentKpiRelationAttributeFields":
        self._alias = alias
        return self


class DocumentMutationFields(GraphQLField):
    @classmethod
    def export_documents(cls, input: DocumentExportInput) -> "DocumentExportTaskFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DocumentExportInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DocumentExportTaskFields("export_documents", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[DocumentMutationGraphQLField, "DocumentExportTaskFields"]
    ) -> "DocumentMutationFields":
        """Subfields should come from the DocumentMutationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentMutationFields":
        self._alias = alias
        return self


class DocumentTopicFields(GraphQLField):
    name: "DocumentTopicGraphQLField" = DocumentTopicGraphQLField("name")
    count: "DocumentTopicGraphQLField" = DocumentTopicGraphQLField("count")
    statement_id: "DocumentTopicGraphQLField" = DocumentTopicGraphQLField("statementId")

    def fields(self, *subfields: DocumentTopicGraphQLField) -> "DocumentTopicFields":
        """Subfields should come from the DocumentTopicFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentTopicFields":
        self._alias = alias
        return self


class DocumentTopicClusterFields(GraphQLField):
    name: "DocumentTopicClusterGraphQLField" = DocumentTopicClusterGraphQLField("name")
    tag: "DocumentTopicClusterGraphQLField" = DocumentTopicClusterGraphQLField("tag")
    rank: "DocumentTopicClusterGraphQLField" = DocumentTopicClusterGraphQLField("rank")

    @classmethod
    def sentiment_counts(cls) -> "SentimentCountsFields":
        return SentimentCountsFields("sentiment_counts")

    net_mention_count: "DocumentTopicClusterGraphQLField" = (
        DocumentTopicClusterGraphQLField("netMentionCount")
    )

    @classmethod
    def topics(cls) -> "DocumentTopicFields":
        return DocumentTopicFields("topics")

    def fields(
        self,
        *subfields: Union[
            DocumentTopicClusterGraphQLField,
            "DocumentTopicFields",
            "SentimentCountsFields",
        ]
    ) -> "DocumentTopicClusterFields":
        """Subfields should come from the DocumentTopicClusterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentTopicClusterFields":
        self._alias = alias
        return self


class DocumentTypeAndDateGroupFields(GraphQLField):
    name: "DocumentTypeAndDateGroupGraphQLField" = DocumentTypeAndDateGroupGraphQLField(
        "name"
    )
    date: "DocumentTypeAndDateGroupGraphQLField" = DocumentTypeAndDateGroupGraphQLField(
        "date"
    )

    def fields(
        self, *subfields: DocumentTypeAndDateGroupGraphQLField
    ) -> "DocumentTypeAndDateGroupFields":
        """Subfields should come from the DocumentTypeAndDateGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DocumentTypeAndDateGroupFields":
        self._alias = alias
        return self


class GroupedCountFields(GraphQLField):
    group_keys: "DocumentCountGroupingPropertyUnion" = (
        DocumentCountGroupingPropertyUnion("groupKeys")
    )
    value: "GroupedCountGraphQLField" = GroupedCountGraphQLField("value")

    def fields(
        self,
        *subfields: Union[
            GroupedCountGraphQLField, "DocumentCountGroupingPropertyUnion"
        ]
    ) -> "GroupedCountFields":
        """Subfields should come from the GroupedCountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GroupedCountFields":
        self._alias = alias
        return self


class HitOffsetFields(GraphQLField):
    start: "HitOffsetGraphQLField" = HitOffsetGraphQLField("start")
    end: "HitOffsetGraphQLField" = HitOffsetGraphQLField("end")

    def fields(self, *subfields: HitOffsetGraphQLField) -> "HitOffsetFields":
        """Subfields should come from the HitOffsetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HitOffsetFields":
        self._alias = alias
        return self


class IndustryBranchFields(GraphQLField):
    code: "IndustryBranchGraphQLField" = IndustryBranchGraphQLField("code")
    name: "IndustryBranchGraphQLField" = IndustryBranchGraphQLField("name")

    def fields(self, *subfields: IndustryBranchGraphQLField) -> "IndustryBranchFields":
        """Subfields should come from the IndustryBranchFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IndustryBranchFields":
        self._alias = alias
        return self


class IndustrySectorFields(GraphQLField):
    code: "IndustrySectorGraphQLField" = IndustrySectorGraphQLField("code")
    name: "IndustrySectorGraphQLField" = IndustrySectorGraphQLField("name")

    def fields(self, *subfields: IndustrySectorGraphQLField) -> "IndustrySectorFields":
        """Subfields should come from the IndustrySectorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IndustrySectorFields":
        self._alias = alias
        return self


class KeywordResultFields(GraphQLField):
    count: "KeywordResultGraphQLField" = KeywordResultGraphQLField("count")
    hits_count: "KeywordResultGraphQLField" = KeywordResultGraphQLField("hitsCount")
    statements_count: "KeywordResultGraphQLField" = KeywordResultGraphQLField(
        "statementsCount"
    )

    @classmethod
    def statements(cls) -> "StatementFields":
        return StatementFields("statements")

    def fields(
        self, *subfields: Union[KeywordResultGraphQLField, "StatementFields"]
    ) -> "KeywordResultFields":
        """Subfields should come from the KeywordResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "KeywordResultFields":
        self._alias = alias
        return self


class PageInfoFields(GraphQLField):
    start_cursor: "PageInfoGraphQLField" = PageInfoGraphQLField("startCursor")
    end_cursor: "PageInfoGraphQLField" = PageInfoGraphQLField("endCursor")
    has_next_page: "PageInfoGraphQLField" = PageInfoGraphQLField("hasNextPage")
    has_previous_page: "PageInfoGraphQLField" = PageInfoGraphQLField("hasPreviousPage")

    def fields(self, *subfields: PageInfoGraphQLField) -> "PageInfoFields":
        """Subfields should come from the PageInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PageInfoFields":
        self._alias = alias
        return self


class PublicUserInfoFields(GraphQLField):
    id: "PublicUserInfoGraphQLField" = PublicUserInfoGraphQLField("id")
    first_name: "PublicUserInfoGraphQLField" = PublicUserInfoGraphQLField("firstName")
    last_name: "PublicUserInfoGraphQLField" = PublicUserInfoGraphQLField("lastName")
    username: "PublicUserInfoGraphQLField" = PublicUserInfoGraphQLField("username")

    def fields(self, *subfields: PublicUserInfoGraphQLField) -> "PublicUserInfoFields":
        """Subfields should come from the PublicUserInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PublicUserInfoFields":
        self._alias = alias
        return self


class SavedSearchFields(GraphQLField):
    id: "SavedSearchGraphQLField" = SavedSearchGraphQLField("id")
    name: "SavedSearchGraphQLField" = SavedSearchGraphQLField("name")

    def fields(self, *subfields: SavedSearchGraphQLField) -> "SavedSearchFields":
        """Subfields should come from the SavedSearchFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedSearchFields":
        self._alias = alias
        return self


class SavedSearchResponseFields(GraphQLField):
    @classmethod
    def results(cls) -> "SearchResponseFields":
        return SearchResponseFields("results")

    def fields(
        self, *subfields: Union[SavedSearchResponseGraphQLField, "SearchResponseFields"]
    ) -> "SavedSearchResponseFields":
        """Subfields should come from the SavedSearchResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedSearchResponseFields":
        self._alias = alias
        return self


class SearchDocumentImageResponseFields(GraphQLField):
    @classmethod
    def images(cls) -> "DocumentImageFields":
        return DocumentImageFields("images")

    total_count: "SearchDocumentImageResponseGraphQLField" = (
        SearchDocumentImageResponseGraphQLField("totalCount")
    )
    cursor: "SearchDocumentImageResponseGraphQLField" = (
        SearchDocumentImageResponseGraphQLField("cursor")
    )

    def fields(
        self,
        *subfields: Union[
            SearchDocumentImageResponseGraphQLField, "DocumentImageFields"
        ]
    ) -> "SearchDocumentImageResponseFields":
        """Subfields should come from the SearchDocumentImageResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SearchDocumentImageResponseFields":
        self._alias = alias
        return self


class SearchResponseFields(GraphQLField):
    @classmethod
    def documents(cls) -> "DocumentFields":
        return DocumentFields("documents")

    total_count: "SearchResponseGraphQLField" = SearchResponseGraphQLField("totalCount")
    cursor: "SearchResponseGraphQLField" = SearchResponseGraphQLField("cursor")

    def fields(
        self, *subfields: Union[SearchResponseGraphQLField, "DocumentFields"]
    ) -> "SearchResponseFields":
        """Subfields should come from the SearchResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SearchResponseFields":
        self._alias = alias
        return self


class SentimentFields(GraphQLField):
    net: "SentimentGraphQLField" = SentimentGraphQLField("net")
    change: "SentimentGraphQLField" = SentimentGraphQLField("change")
    total_positive_count: "SentimentGraphQLField" = SentimentGraphQLField(
        "totalPositiveCount"
    )
    total_negative_count: "SentimentGraphQLField" = SentimentGraphQLField(
        "totalNegativeCount"
    )
    total_statements: "SentimentGraphQLField" = SentimentGraphQLField("totalStatements")

    def fields(self, *subfields: SentimentGraphQLField) -> "SentimentFields":
        """Subfields should come from the SentimentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SentimentFields":
        self._alias = alias
        return self


class SentimentCountV2Fields(GraphQLField):
    total: "SentimentCountV2GraphQLField" = SentimentCountV2GraphQLField("total")
    positive: "SentimentCountV2GraphQLField" = SentimentCountV2GraphQLField("positive")
    negative: "SentimentCountV2GraphQLField" = SentimentCountV2GraphQLField("negative")
    neutral: "SentimentCountV2GraphQLField" = SentimentCountV2GraphQLField("neutral")

    def fields(
        self, *subfields: SentimentCountV2GraphQLField
    ) -> "SentimentCountV2Fields":
        """Subfields should come from the SentimentCountV2Fields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SentimentCountV2Fields":
        self._alias = alias
        return self


class SentimentCountsFields(GraphQLField):
    positive: "SentimentCountsGraphQLField" = SentimentCountsGraphQLField("positive")
    negative: "SentimentCountsGraphQLField" = SentimentCountsGraphQLField("negative")
    neutral: "SentimentCountsGraphQLField" = SentimentCountsGraphQLField("neutral")

    def fields(
        self, *subfields: SentimentCountsGraphQLField
    ) -> "SentimentCountsFields":
        """Subfields should come from the SentimentCountsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SentimentCountsFields":
        self._alias = alias
        return self


class SourceInfoFields(GraphQLField):
    original_url: "SourceInfoGraphQLField" = SourceInfoGraphQLField("originalUrl")

    def fields(self, *subfields: SourceInfoGraphQLField) -> "SourceInfoFields":
        """Subfields should come from the SourceInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SourceInfoFields":
        self._alias = alias
        return self


class StatementFields(GraphQLField):
    page: "StatementGraphQLField" = StatementGraphQLField("page")
    text: "StatementGraphQLField" = StatementGraphQLField("text")
    html_text: "StatementGraphQLField" = StatementGraphQLField("htmlText")

    @classmethod
    def hit_offsets(cls) -> "HitOffsetFields":
        return HitOffsetFields("hit_offsets")

    context: "StatementGraphQLField" = StatementGraphQLField("context")

    def fields(
        self, *subfields: Union[StatementGraphQLField, "HitOffsetFields"]
    ) -> "StatementFields":
        """Subfields should come from the StatementFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StatementFields":
        self._alias = alias
        return self


class SubIndustryFields(GraphQLField):
    code: "SubIndustryGraphQLField" = SubIndustryGraphQLField("code")
    name: "SubIndustryGraphQLField" = SubIndustryGraphQLField("name")

    def fields(self, *subfields: SubIndustryGraphQLField) -> "SubIndustryFields":
        """Subfields should come from the SubIndustryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubIndustryFields":
        self._alias = alias
        return self


class TopicSentimentTrendFields(GraphQLField):
    period: "TopicSentimentTrendGraphQLField" = TopicSentimentTrendGraphQLField(
        "period"
    )

    @classmethod
    def sentiment_count(cls) -> "SentimentCountV2Fields":
        return SentimentCountV2Fields("sentiment_count")

    def fields(
        self,
        *subfields: Union[TopicSentimentTrendGraphQLField, "SentimentCountV2Fields"]
    ) -> "TopicSentimentTrendFields":
        """Subfields should come from the TopicSentimentTrendFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TopicSentimentTrendFields":
        self._alias = alias
        return self


class UserFields(GraphQLField):
    @classmethod
    def company(cls) -> "UserOrganisationFields":
        return UserOrganisationFields("company")

    @classmethod
    def watchlists(cls, *, ids: Optional[int] = None) -> "WatchlistFields":
        arguments: Dict[str, Dict[str, Any]] = {"ids": {"type": "Int", "value": ids}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WatchlistFields("watchlists", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[UserGraphQLField, "UserOrganisationFields", "WatchlistFields"]
    ) -> "UserFields":
        """Subfields should come from the UserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserFields":
        self._alias = alias
        return self


class UserOrganisationFields(GraphQLField):
    @classmethod
    def watchlists(
        cls,
        *,
        first: Optional[int] = None,
        last: Optional[int] = None,
        after: Optional[Any] = None,
        before: Optional[Any] = None
    ) -> "WatchlistsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "after": {"type": "Cursor", "value": after},
            "before": {"type": "Cursor", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WatchlistsConnectionFields("watchlists", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[UserOrganisationGraphQLField, "WatchlistsConnectionFields"]
    ) -> "UserOrganisationFields":
        """Subfields should come from the UserOrganisationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserOrganisationFields":
        self._alias = alias
        return self


class WatchlistFields(GraphQLField):
    id: "WatchlistGraphQLField" = WatchlistGraphQLField("id")
    name: "WatchlistGraphQLField" = WatchlistGraphQLField("name")
    shared: "WatchlistGraphQLField" = WatchlistGraphQLField("shared")
    modified_date: "WatchlistGraphQLField" = WatchlistGraphQLField("modifiedDate")

    @classmethod
    def author(cls) -> "PublicUserInfoFields":
        return PublicUserInfoFields("author")

    @classmethod
    def companies(cls) -> "CompanyFields":
        return CompanyFields("companies")

    def fields(
        self,
        *subfields: Union[
            WatchlistGraphQLField, "CompanyFields", "PublicUserInfoFields"
        ]
    ) -> "WatchlistFields":
        """Subfields should come from the WatchlistFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WatchlistFields":
        self._alias = alias
        return self


class WatchlistEdgeFields(GraphQLField):
    @classmethod
    def node(cls) -> "WatchlistFields":
        return WatchlistFields("node")

    cursor: "WatchlistEdgeGraphQLField" = WatchlistEdgeGraphQLField("cursor")

    def fields(
        self, *subfields: Union[WatchlistEdgeGraphQLField, "WatchlistFields"]
    ) -> "WatchlistEdgeFields":
        """Subfields should come from the WatchlistEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WatchlistEdgeFields":
        self._alias = alias
        return self


class WatchlistMutationFields(GraphQLField):
    @classmethod
    def create(
        cls, name: str, company_ids: str, shared: bool, *, user_id: Optional[int] = None
    ) -> "WatchlistFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name},
            "companyIds": {"type": "String!", "value": company_ids},
            "shared": {"type": "Boolean!", "value": shared},
            "userId": {"type": "Int", "value": user_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WatchlistFields("create", arguments=cleared_arguments)

    @classmethod
    def patch(cls, watchlist: UpdateWatchlistInput) -> "WatchlistFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "watchlist": {"type": "UpdateWatchlistInput!", "value": watchlist}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WatchlistFields("patch", arguments=cleared_arguments)

    @classmethod
    def add_companies(
        cls, watchlist: UpdateWatchlistCompaniesInput
    ) -> "WatchlistMutationGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "watchlist": {"type": "UpdateWatchlistCompaniesInput!", "value": watchlist}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WatchlistMutationGraphQLField(
            "add_companies", arguments=cleared_arguments
        )

    @classmethod
    def remove_companies(
        cls, watchlist: UpdateWatchlistCompaniesInput
    ) -> "WatchlistMutationGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "watchlist": {"type": "UpdateWatchlistCompaniesInput!", "value": watchlist}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WatchlistMutationGraphQLField(
            "remove_companies", arguments=cleared_arguments
        )

    @classmethod
    def delete(cls, id: int) -> "WatchlistMutationResultFields":
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "Int!", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WatchlistMutationResultFields("delete", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            WatchlistMutationGraphQLField,
            "WatchlistFields",
            "WatchlistMutationResultFields",
        ]
    ) -> "WatchlistMutationFields":
        """Subfields should come from the WatchlistMutationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WatchlistMutationFields":
        self._alias = alias
        return self


class WatchlistMutationResultFields(GraphQLField):
    status: "WatchlistMutationResultGraphQLField" = WatchlistMutationResultGraphQLField(
        "status"
    )
    message: "WatchlistMutationResultGraphQLField" = (
        WatchlistMutationResultGraphQLField("message")
    )

    def fields(
        self, *subfields: WatchlistMutationResultGraphQLField
    ) -> "WatchlistMutationResultFields":
        """Subfields should come from the WatchlistMutationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WatchlistMutationResultFields":
        self._alias = alias
        return self


class WatchlistsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "WatchlistFields":
        return WatchlistFields("nodes")

    @classmethod
    def edges(cls) -> "WatchlistEdgeFields":
        return WatchlistEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "WatchlistsConnectionGraphQLField" = WatchlistsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            WatchlistsConnectionGraphQLField,
            "PageInfoFields",
            "WatchlistEdgeFields",
            "WatchlistFields",
        ]
    ) -> "WatchlistsConnectionFields":
        """Subfields should come from the WatchlistsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WatchlistsConnectionFields":
        self._alias = alias
        return self
