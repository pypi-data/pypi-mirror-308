# Generated by alphasense-api-sdk 
# Copyright by AlphaSense

from typing import Any, Dict, Optional

from . import BrokerResearchEntitlementRequestStatus, BrokerTypes, DocumentCountGroupBy
from .custom_fields import (
    BrokerResearchEntitlementRequestFields,
    BrokerResearchSourceFields,
    BrokerResearchUserEntitlementsFields,
    CompanyFields,
    DocumentCountResponseFields,
    DocumentExportResultFields,
    SavedSearchFields,
    SavedSearchResponseFields,
    SearchDocumentImageResponseFields,
    SearchResponseFields,
    UserFields,
)
from .input_types import (
    CompanyIdInput,
    DateFilter,
    SavedSearchTypeFilter,
    SearchDocumentImageFilter,
    SearchFilter,
    SearchSorting,
)


class Query:
    @classmethod
    def broker_research_entitlement_requests(
        cls,
        *,
        request_status: Optional[BrokerResearchEntitlementRequestStatus] = None,
        offset: Optional[int] = None,
        limit: Optional[int] = None
    ) -> BrokerResearchEntitlementRequestFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "requestStatus": {
                "type": "BrokerResearchEntitlementRequestStatus",
                "value": request_status,
            },
            "offset": {"type": "Int", "value": offset},
            "limit": {"type": "Int", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BrokerResearchEntitlementRequestFields(
            field_name="brokerResearchEntitlementRequests", arguments=cleared_arguments
        )

    @classmethod
    def broker_research_user_entitlements(
        cls, user_ids: str
    ) -> BrokerResearchUserEntitlementsFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "userIds": {"type": "String!", "value": user_ids}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BrokerResearchUserEntitlementsFields(
            field_name="brokerResearchUserEntitlements", arguments=cleared_arguments
        )

    @classmethod
    def companies(cls, inputs: CompanyIdInput) -> CompanyFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "inputs": {"type": "CompanyIdInput!", "value": inputs}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CompanyFields(field_name="companies", arguments=cleared_arguments)

    @classmethod
    def user(cls, *, id: Optional[int] = None) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "Int", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="user", arguments=cleared_arguments)

    @classmethod
    def check_export_document_status(cls, task_id: str) -> DocumentExportResultFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "taskId": {"type": "ID!", "value": task_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DocumentExportResultFields(
            field_name="checkExportDocumentStatus", arguments=cleared_arguments
        )

    @classmethod
    def search(
        cls,
        *,
        filter: Optional[SearchFilter] = None,
        limit: Optional[int] = None,
        cursor: Optional[str] = None,
        sorting: Optional[SearchSorting] = None
    ) -> SearchResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SearchFilter", "value": filter},
            "limit": {"type": "Int", "value": limit},
            "cursor": {"type": "String", "value": cursor},
            "sorting": {"type": "SearchSorting", "value": sorting},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SearchResponseFields(field_name="search", arguments=cleared_arguments)

    @classmethod
    def search_by_id(
        cls,
        id: str,
        *,
        limit: Optional[int] = None,
        cursor: Optional[str] = None,
        sorting: Optional[SearchSorting] = None,
        date: Optional[DateFilter] = None
    ) -> SavedSearchResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "String!", "value": id},
            "limit": {"type": "Int", "value": limit},
            "cursor": {"type": "String", "value": cursor},
            "sorting": {"type": "SearchSorting", "value": sorting},
            "date": {"type": "DateFilter", "value": date},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SavedSearchResponseFields(
            field_name="searchById", arguments=cleared_arguments
        )

    @classmethod
    def saved_searches(
        cls, *, filter: Optional[SavedSearchTypeFilter] = None
    ) -> SavedSearchFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SavedSearchTypeFilter", "value": filter}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SavedSearchFields(
            field_name="savedSearches", arguments=cleared_arguments
        )

    @classmethod
    def search_document_images(
        cls,
        *,
        filter: Optional[SearchDocumentImageFilter] = None,
        limit: Optional[int] = None,
        cursor: Optional[str] = None,
        sorting: Optional[SearchSorting] = None
    ) -> SearchDocumentImageResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SearchDocumentImageFilter", "value": filter},
            "limit": {"type": "Int", "value": limit},
            "cursor": {"type": "String", "value": cursor},
            "sorting": {"type": "SearchSorting", "value": sorting},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SearchDocumentImageResponseFields(
            field_name="searchDocumentImages", arguments=cleared_arguments
        )

    @classmethod
    def document_counts_in_search_results(
        cls,
        filter: SearchFilter,
        group_by: DocumentCountGroupBy,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None
    ) -> DocumentCountResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SearchFilter!", "value": filter},
            "groupBy": {"type": "DocumentCountGroupBy!", "value": group_by},
            "limit": {"type": "Int", "value": limit},
            "offset": {"type": "Int", "value": offset},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DocumentCountResponseFields(
            field_name="documentCountsInSearchResults", arguments=cleared_arguments
        )

    @classmethod
    def brokers(
        cls, *, type: Optional[BrokerTypes] = None
    ) -> BrokerResearchSourceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "type": {"type": "BrokerTypes", "value": type}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BrokerResearchSourceFields(
            field_name="brokers", arguments=cleared_arguments
        )
