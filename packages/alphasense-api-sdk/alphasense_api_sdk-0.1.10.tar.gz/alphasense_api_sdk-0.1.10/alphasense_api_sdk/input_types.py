# Generated by alphasense-api-sdk 
# Copyright by AlphaSense
# Source: https://api.alpha-sense.com/gql/client-sdk/schema

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    BrokerResearchEntitlementRequestAction,
    CompanyTopicFilter,
    CompanyTopicPeriod,
    DocumentImageType,
    HitsSearchScope,
    SavedSearchType,
    SearchDatePreset,
    SearchScope,
    SearchSortingField,
    SortOrder,
)


class BrokerFilter(BaseModel):
    ids: Optional[List[str]] = None


class BrokerResearchEntitlementUpdateInput(BaseModel):
    request_id: str = Field(alias="requestId")
    action: BrokerResearchEntitlementRequestAction
    entitlement_groups: Optional[List[str]] = Field(
        alias="entitlementGroups", default=None
    )


class BrokerResearchUserEntitlementUpdateInput(BaseModel):
    user_id: str = Field(alias="userId")
    entitlement_groups: List[str] = Field(alias="entitlementGroups")


class CompanyFilter(BaseModel):
    ids: Optional[List[str]] = None
    include: Optional[List[str]] = None
    exclude: Optional[List[str]] = None
    watchlists: Optional[List[str]] = None
    primary_only: Optional[bool] = Field(alias="primaryOnly", default=False)


class CompanyIdInput(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    ticker_code: Optional[str] = Field(alias="tickerCode", default=None)
    crunchbase_id: Optional[str] = Field(alias="crunchbaseId", default=None)
    cik: Optional[str] = None
    isin: Optional[str] = None


class CompanyTopicsFilter(BaseModel):
    mentions_time_frame: Optional[CompanyTopicPeriod] = Field(
        alias="mentionsTimeFrame", default=None
    )
    topic_name: Optional[str] = Field(alias="topicName", default=None)


class DateFilter(BaseModel):
    preset: Optional[SearchDatePreset] = SearchDatePreset.LAST_90_DAYS
    custom_range: Optional["SearchDateRange"] = Field(alias="customRange", default=None)
    timezone: Optional[str] = "+00:00"


class DocTypesFilter(BaseModel):
    ids: List[str]


class DocumentExportInput(BaseModel):
    document_ids: List[str] = Field(alias="documentIds")


class ImageFilter(BaseModel):
    types: Optional[List[DocumentImageType]] = None


class KeywordFilter(BaseModel):
    query: str
    proximity: Optional[int] = 15
    scope: Optional[SearchScope] = None


class KeywordHitsFilter(BaseModel):
    query: str
    proximity: Optional[int] = 15
    scope: Optional[SearchScope] = None
    scopes: Optional[List[HitsSearchScope]] = None
    company_proximity_tickers: Optional[List[str]] = Field(
        alias="companyProximityTickers", default=None
    )


class KeywordHitsInput(BaseModel):
    keyword_filter: Optional["KeywordHitsFilter"] = Field(
        alias="keywordFilter", default=None
    )
    limit: Optional[int] = 5
    offset: Optional[int] = 0


class SavedSearchTypeFilter(BaseModel):
    types: Optional[List[SavedSearchType]] = None


class SearchDateRange(BaseModel):
    from_: Optional[Any] = Field(alias="from", default=None)
    to: Optional[Any] = None


class SearchDocumentImageFilter(BaseModel):
    image_filter: Optional["ImageFilter"] = Field(alias="imageFilter", default=None)
    document_metadata_filter: Optional["SearchFilter"] = Field(
        alias="documentMetadataFilter", default=None
    )


class SearchFilter(BaseModel):
    keyword: Optional["KeywordFilter"] = None
    companies: Optional["CompanyFilter"] = None
    date: Optional["DateFilter"] = None
    industries: Optional[List[str]] = None
    countries: Optional[List[str]] = None
    types: Optional["DocTypesFilter"] = None
    brokers: Optional["BrokerFilter"] = None


class SearchSorting(BaseModel):
    field: Optional[SearchSortingField] = SearchSortingField.DATE
    direction: Optional[SortOrder] = SortOrder.DESC


class TopicsPaginationFilter(BaseModel):
    offset: Optional[int] = None
    limit: Optional[int] = 20
    sort_by: Optional[CompanyTopicFilter] = Field(
        alias="sortBy", default=CompanyTopicFilter.RELEVANCE
    )
    sort_order: Optional[SortOrder] = Field(alias="sortOrder", default=SortOrder.DESC)


class UpdateWatchlistCompaniesInput(BaseModel):
    id: int
    company_ids: List[str] = Field(alias="companyIds")


class UpdateWatchlistInput(BaseModel):
    id: int
    watchlist_patch: "WatchlistPatch" = Field(alias="watchlistPatch")


class WatchlistPatch(BaseModel):
    name: Optional[str] = None
    company_ids: Optional[List[str]] = Field(alias="companyIds", default=None)


DateFilter.model_rebuild()
KeywordHitsInput.model_rebuild()
SearchDocumentImageFilter.model_rebuild()
SearchFilter.model_rebuild()
UpdateWatchlistInput.model_rebuild()
