{%- macro description(content) -%}
{%- for line in content.strip().split('\n')  -%}
/// {{ line }}
{%- endfor %}
{%- endmacro -%}
{%- if deprecated -%}
@Deprecated { message = "Use a more recent version of this action, see <{{ action.url }}>" }
{{ '' }}
{%- endif -%}
open module {{ module }}

{% for import in imports -%}
import "{{ import.path }}" as {{ import.import_as }}
{% endfor %}
hidden const ACTION_CALL = "{{ call }}"

{%- if action.outputs %}
{%- for output in action.outputs %}
hidden const OUTPUT_{{ output.name.upper_snake }} = "{{ output.name.real }}"
{%- endfor %}
{%- endif %}

{%- if action.inputs %}
{{ '' }}
/// {{ action.name.real }}
{%- if action.description %}
///
{{ description(action.description) }}
{%- endif %}
class ActionInput {
{% for input in action.inputs %}
    {%- if input.description %}
    {{ description(input.description) }}
    {%- endif %}
    {%- if input.default is not none %}
    /// Default value if null is "{{ input.default }}"
    {%- endif %}
    {%- if input.deprecationMessage %}
    @Deprecated { message = "{{ input.deprecationMessage }}" }
    {%- endif %}
    {{ input.name.camel }}: {{ input.constraint }}{% if not input.required %} = null{% endif %}
{% endfor %}
}
{%- endif %}

/// A "class as function", use this to construct a yaml{% if pkl_github_actions_enabled %} or pkl-github-actions{% endif %} output.
/// To use, run `new Step { ... }.yaml`
class Step {
    id: String? = null
    name: String? = null
    `if`: String? = null
    env: Mapping<String, Any>? = null
    {%- if action.inputs %}
    inputs: ActionInput{% if all_inputs_nullable %}? = null{% endif %}
    {%- endif %}

    fixed yaml = new {
        ["id"] = id
        ["name"] = name
        ["uses"] = ACTION_CALL
        ["if"] = `if`
        ["env"] = env
        {%- if action.inputs %}
        ["with"] = {% if all_inputs_nullable %}if(inputs != null) {% endif %}new {
        {%- for input in action.inputs %}
            ["{{ input.name.real }}"] = inputs.{{ input.name.camel }}
        {%- endfor %}
        }{% if all_inputs_nullable %} else null{% endif %}
        {%- endif  %}
    }

    {%- if pkl_github_actions_enabled %}
    fixed github_actions = create_github_action(this)
    {%- endif  %}

}

/// A convenience function to get a yaml step. If you need parameters besides id, name, and inputs,
/// use the "class-as-function"
const function Step(_id: String?, _name: String?, _inputs: ActionInput{% if all_inputs_nullable %}?{% endif %}) =
    Yaml(_id, _name, _inputs)

/// A convenience function to get a yaml step. If you need parameters besides id, name, and inputs,
/// use the "class-as-function"
const function Yaml(_id: String?, _name: String?, _inputs: ActionInput{% if all_inputs_nullable %}?{% endif %}) =
    new Step {
        id = _id
        name = _name
        inputs = _inputs
    }.yaml
{% if pkl_github_actions_enabled %}
/// A convenience function to get a github_actions step. If you need parameters besides id, name, and inputs,
/// use the "class-as-function"
const function GithubAction(_id: String?, _name: String?, _inputs: ActionInput{% if all_inputs_nullable %}?{% endif %}) =
    new Step {
        id = _id
        name = _name
        inputs = _inputs
    }.github_actions
{% endif %}

{%- if action.outputs %}
{{ '' }}
{%- for output in action.outputs %}
/// Generates the syntax to access the "{{ output.name.real }}" output given the step ID
{%- if output.description %}
///
{{ description(output.description) }}
{%- endif %}
const function outputs_{{ output.name.snake }}(id: String) =
    "steps.\(id).outputs.\(OUTPUT_{{ output.name.upper_snake }})"
{% endfor %}
{%- endif  %}

{%- if pkl_github_actions_enabled %}
{{ '' }}
local const function create_github_action(step: Step) = new pklaction.ActionStep {
    id = step.id
    name = step.name
    `if` = step.`if`
    env = step.env
    uses = ACTION_CALL
    with = {% if all_inputs_nullable %}if (step.inputs != null) {% endif %}new Mapping {
        {%- for input in action.inputs %}
        ["{{ input.name.real }}"] = step.inputs.{{ input.name.camel }}
        {%- endfor %}
    }{% if all_inputs_nullable %} else null{% endif %}
}
{%- endif  %}