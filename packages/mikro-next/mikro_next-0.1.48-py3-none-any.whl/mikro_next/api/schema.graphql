"""Make string uppercase"""
directive @upper on FIELD

directive @replace(old: String!, new: String!) on FIELD

"""Make get stuff uppercase"""
directive @relation(on: String!) on FIELD

interface RenderNode {
  kind: String!
}

type ContextNode implements RenderNode {
  kind: String!
  context: RGBContext!
  label: String
}

type RGBContext {
  id: ID!
  name: String!
  image: Image!
  snapshots(filters: SnapshotFilter, pagination: OffsetPaginationInput): [Snapshot!]!
  views: [RGBView!]!
  blending: Blending!
  z: Int!
  t: Int!
  c: Int!
  pinned: Boolean!
}

type Image {
  id: ID!
  name: String!

  """The store where the image data is stored."""
  store: ZarrStore!
  views(filters: ViewFilter, types: [ViewKind!]): [View!]!
  snapshots(filters: SnapshotFilter, pagination: OffsetPaginationInput): [Snapshot!]!
  videos(pagination: OffsetPaginationInput): [Video!]!
  dataset: Dataset
  history(pagination: OffsetPaginationInput): [History!]!

  """The affine transformation views of the image."""
  affineTransformationViews(filters: AffineTransformationViewFilter, pagination: OffsetPaginationInput): [AffineTransformationView!]!
  labelViews: [LabelView!]!
  channelViews: [ChannelView!]!
  timepointViews(filters: TimepointViewFilter, pagination: OffsetPaginationInput): [TimepointView!]!
  opticsViews(filters: OpticsViewFilter, pagination: OffsetPaginationInput): [OpticsView!]!
  structureViews(filters: StructureViewFilter, pagination: OffsetPaginationInput): [StructureView!]!
  scaleViews: [ScaleView!]!
  createdAt: DateTime!
  creator: User
  rgbContexts(filters: RGBContextFilter, pagination: OffsetPaginationInput): [RGBContext!]!
  derivedScaleViews: [ScaleView!]!
  derivedViews: [DerivedView!]!
  roiViews: [ROIView!]!
  fileViews: [FileView!]!
  pixelViews(filters: PixelViewFilter, pagination: OffsetPaginationInput): [PixelView!]!
  derivedFromViews: [DerivedView!]!
  latestSnapshot: Snapshot
  pinned: Boolean!
  tags: [String!]!
  renders(filters: ViewFilter, types: [RenderKind!]): [Render!]!
  rois(filters: ROIFilter): [ROI!]!
}

type ZarrStore {
  id: ID!

  """The path to the data. Relative to the bucket."""
  path: String

  """The shape of the data."""
  shape: [Int!]

  """The dtype of the data."""
  dtype: String

  """The bucket where the data is stored."""
  bucket: String!

  """The key where the data is stored."""
  key: String!

  """The chunks of the data."""
  chunks: [Int!]

  """Whether the zarr store was populated (e.g. was a dataset created)."""
  populated: Boolean!
}

interface View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
}

input ViewFilter {
  isGlobal: Boolean
  provenance: ProvenanceFilter
  AND: ViewFilter
  OR: ViewFilter
}

input ProvenanceFilter {
  during: String
  AND: ProvenanceFilter
  OR: ProvenanceFilter
}

enum ViewKind {
  CHANNEL
  LABEL
  AFFINE_TRANSFORMATION
  TIMEPOINT
  OPTICS
}

type Snapshot implements Render {
  createdAt: DateTime!
  creator: User
  id: ID!
  store: MediaStore!
  name: String!
}

interface Render {
  createdAt: DateTime!
  creator: User
}

"""Date with time (isoformat)"""
scalar DateTime

"""A user."""
type User {
  id: ID!
  sub: String!
  username: String!
  email: String!
  password: String!
}

type MediaStore {
  id: ID!
  path: String!
  bucket: String!
  key: String!
  presignedUrl(host: String = null): String!
}

input SnapshotFilter {
  name: StrFilterLookup
  ids: [ID!]
  AND: SnapshotFilter
  OR: SnapshotFilter
}

input StrFilterLookup {
  exact: String
  iExact: String
  contains: String
  iContains: String
  inList: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  iStartsWith: String
  endsWith: String
  iEndsWith: String
  range: [String!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: String
  nIExact: String
  nContains: String
  nIContains: String
  nInList: [String!]
  nGt: String
  nGte: String
  nLt: String
  nLte: String
  nStartsWith: String
  nIStartsWith: String
  nEndsWith: String
  nIEndsWith: String
  nRange: [String!]
  nIsNull: Boolean
  nRegex: String
  nIRegex: String
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

type Video implements Render {
  createdAt: DateTime!
  creator: User
  id: ID!
  store: MediaStore!
  thumbnail: MediaStore!
}

type Dataset {
  id: ID!
  images(filters: ImageFilter, order: ImageOrder, pagination: OffsetPaginationInput): [Image!]!
  files(filters: FileFilter, pagination: OffsetPaginationInput): [File!]!
  children(filters: DatasetFilter, pagination: OffsetPaginationInput): [Dataset!]!
  description: String
  name: String!
  history(pagination: OffsetPaginationInput): [History!]!
  isDefault: Boolean!
  createdAt: DateTime!
  creator: User
  pinned: Boolean!
  tags: [String!]!
}

input ImageFilter {
  name: StrFilterLookup
  ids: [ID!]
  store: ZarrStoreFilter
  dataset: DatasetFilter
  transformationViews: AffineTransformationViewFilter
  timepointViews: TimepointViewFilter
  notDerived: Boolean = null
  provenance: ProvenanceFilter
  AND: ImageFilter
  OR: ImageFilter
}

input ZarrStoreFilter {
  shape: IntFilterLookup
  AND: ZarrStoreFilter
  OR: ZarrStoreFilter
}

input IntFilterLookup {
  exact: Int
  iExact: Int
  contains: Int
  iContains: Int
  inList: [Int!]
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  startsWith: Int
  iStartsWith: Int
  endsWith: Int
  iEndsWith: Int
  range: [Int!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: Int
  nIExact: Int
  nContains: Int
  nIContains: Int
  nInList: [Int!]
  nGt: Int
  nGte: Int
  nLt: Int
  nLte: Int
  nStartsWith: Int
  nIStartsWith: Int
  nEndsWith: Int
  nIEndsWith: Int
  nRange: [Int!]
  nIsNull: Boolean
  nRegex: String
  nIRegex: String
}

input DatasetFilter {
  id: ID
  name: StrFilterLookup
  provenance: ProvenanceFilter
  AND: DatasetFilter
  OR: DatasetFilter
}

input AffineTransformationViewFilter {
  isGlobal: Boolean
  provenance: ProvenanceFilter
  AND: AffineTransformationViewFilter
  OR: AffineTransformationViewFilter
  stage: StageFilter
  pixelSize: FloatFilterLookup
}

input StageFilter {
  ids: [ID!]
  search: String
  id: ID
  kind: String
  name: StrFilterLookup
  provenance: ProvenanceFilter
  AND: StageFilter
  OR: StageFilter
}

input FloatFilterLookup {
  exact: Float
  iExact: Float
  contains: Float
  iContains: Float
  inList: [Float!]
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  startsWith: Float
  iStartsWith: Float
  endsWith: Float
  iEndsWith: Float
  range: [Float!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: Float
  nIExact: Float
  nContains: Float
  nIContains: Float
  nInList: [Float!]
  nGt: Float
  nGte: Float
  nLt: Float
  nLte: Float
  nStartsWith: Float
  nIStartsWith: Float
  nEndsWith: Float
  nIEndsWith: Float
  nRange: [Float!]
  nIsNull: Boolean
  nRegex: String
  nIRegex: String
}

input TimepointViewFilter {
  isGlobal: Boolean
  provenance: ProvenanceFilter
  AND: TimepointViewFilter
  OR: TimepointViewFilter
  era: EraFilter
  msSinceStart: Float
  indexSinceStart: Int
}

input EraFilter {
  id: ID
  begin: DateTime
  provenance: ProvenanceFilter
  AND: EraFilter
  OR: EraFilter
}

input ImageOrder {
  createdAt: Ordering
}

enum Ordering {
  ASC
  DESC
}

type File {
  id: ID!
  name: String!
  origins(filters: ImageFilter, order: ImageOrder, pagination: OffsetPaginationInput): [Image!]!
  store: BigFileStore!
  views: [FileView!]!
}

type BigFileStore {
  id: ID!
  path: String!
  bucket: String!
  key: String!
  presignedUrl: String!
}

type FileView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  seriesIdentifier: String
  file: File!
}

input FileFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  provenance: ProvenanceFilter
  AND: FileFilter
  OR: FileFilter
}

type History {
  app: App
  user: User
  kind: HistoryKind!
  date: DateTime!
  during: String
  id: ID!
  effectiveChanges: [ModelChange!]!
}

"""An app."""
type App {
  id: ID!
  name: String!
  clientId: String!
}

enum HistoryKind {
  CREATE
  UPDATE
  DELETE
}

type ModelChange {
  field: String!
  oldValue: String
  newValue: String
}

type AffineTransformationView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  stage: Stage!
  affineMatrix: FourByFourMatrix!
  pixelSize: ThreeDVector!
  pixelSizeX: Micrometers!
  pixelSizeY: Micrometers!
  position: ThreeDVector!
}

type Stage {
  id: ID!
  affineViews(filters: AffineTransformationViewFilter, pagination: OffsetPaginationInput): [AffineTransformationView!]!
  description: String
  name: String!
  history(pagination: OffsetPaginationInput): [History!]!
  pinned: Boolean!
}

"""
The `FourByFourMatrix` scalar type represents a matrix values as specified by
"""
scalar FourByFourMatrix

"""The `Vector` scalar type represents a matrix values as specified by"""
scalar ThreeDVector

"""
The `Micrometers` scalar type represents a matrix valuesas specified by
"""
scalar Micrometers

type LabelView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  label: String!
}

type ChannelView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  channel: Channel!
}

type Channel {
  id: ID!
  views: [ChannelView!]!
  name: String!
  emissionWavelength: Float
  excitationWavelength: Float
  acquisitionMode: String
  color: String
}

type TimepointView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  era: Era!
  msSinceStart: Milliseconds
  indexSinceStart: Int
}

type Era {
  id: ID!
  begin: DateTime
  views(filters: TimepointViewFilter, pagination: OffsetPaginationInput): [TimepointView!]!
  name: String!
  history(pagination: OffsetPaginationInput): [History!]!
}

"""The `Matrix` scalar type represents a matrix values as specified by"""
scalar Milliseconds

type OpticsView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  instrument: Instrument
  camera: Camera
  objective: Objective
}

type Instrument {
  id: ID!
  name: String!
  model: String
  serialNumber: String!
  views(filters: OpticsViewFilter, pagination: OffsetPaginationInput): [OpticsView!]!
  manufacturer: String
}

input OpticsViewFilter {
  isGlobal: Boolean
  provenance: ProvenanceFilter
  AND: OpticsViewFilter
  OR: OpticsViewFilter
  instrument: InstrumentFilter
  objective: ObjectiveFilter
  camera: CameraFilter
}

input InstrumentFilter {
  id: ID
  name: String
  provenance: ProvenanceFilter
  AND: InstrumentFilter
  OR: InstrumentFilter
}

input ObjectiveFilter {
  id: ID
  name: String
  provenance: ProvenanceFilter
  AND: ObjectiveFilter
  OR: ObjectiveFilter
}

input CameraFilter {
  id: ID
  name: String
  provenance: ProvenanceFilter
  AND: CameraFilter
  OR: CameraFilter
}

type Camera {
  id: ID!
  name: String!
  serialNumber: String!
  views(filters: OpticsViewFilter, pagination: OffsetPaginationInput): [OpticsView!]!
  model: String
  bitDepth: Int
  pixelSizeX: Micrometers
  pixelSizeY: Micrometers
  sensorSizeX: Int
  sensorSizeY: Int
  manufacturer: String
  history(pagination: OffsetPaginationInput): [History!]!
}

type Objective {
  id: ID!
  name: String!
  serialNumber: String!
  na: Float
  magnification: Float
  immersion: String
  views(filters: OpticsViewFilter, pagination: OffsetPaginationInput): [OpticsView!]!
}

type StructureView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  structure: StructureString!
}

"""
The `StructureString` scalar type represents a reference to a strucutre outside of this service previously created by the user n a datalayer
"""
scalar StructureString

input StructureViewFilter {
  isGlobal: Boolean
  provenance: ProvenanceFilter
  AND: StructureViewFilter
  OR: StructureViewFilter
  structure: StructureString
}

type ScaleView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  parent: Image!
  scaleX: Float!
  scaleY: Float!
  scaleZ: Float!
  scaleT: Float!
  scaleC: Float!
}

input RGBContextFilter {
  ids: [ID!]
  search: String
  id: ID
  provenance: ProvenanceFilter
  AND: RGBContextFilter
  OR: RGBContextFilter
}

type DerivedView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  originImage: Image!
  operation: String
}

type ROIView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  roi: ROI!
}

type ROI {
  id: ID!
  image: Image!
  kind: RoiKind!
  vectors: [FiveDVector!]!
  createdAt: DateTime!
  creator: User
  history(pagination: OffsetPaginationInput): [History!]!
  pinned: Boolean!
  name: String!
}

enum RoiKind {
  ELLIPSIS
  POLYGON
  LINE
  RECTANGLE
  SPECTRAL_RECTANGLE
  TEMPORAL_RECTANGLE
  CUBE
  SPECTRAL_CUBE
  TEMPORAL_CUBE
  HYPERCUBE
  SPECTRAL_HYPERCUBE
  PATH
  FRAME
  SLICE
  POINT
}

"""The `Vector` scalar type represents a matrix values as specified by"""
scalar FiveDVector

type PixelView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  labels(filters: PixelLabelFilter, pagination: OffsetPaginationInput): [PixelLabel!]!
  labelAccessors: [LabelAccessor!]!
}

type PixelLabel {
  id: ID!
  view: PixelView!
  value: Int!
}

input PixelLabelFilter {
  value: Float = null
  view: ID = null
  entityKind: ID = null
  entity: ID = null
  AND: PixelLabelFilter
  OR: PixelLabelFilter
}

type LabelAccessor implements Accessor {
  id: ID!
  table: Table!
  keys: [String!]!
  minIndex: Int
  maxIndex: Int
  pixelView: PixelView!
}

interface Accessor {
  id: ID!
  table: Table!
  keys: [String!]!
  minIndex: Int
  maxIndex: Int
}

type Table {
  id: ID!
  name: String!
  origins(filters: ImageFilter, order: ImageOrder, pagination: OffsetPaginationInput): [Image!]!
  store: ParquetStore!
  columns: [TableColumn!]!
  rows: [MetricMap!]!
  accessors(filters: AccessorFilter, types: [AccessorKind!]): [Accessor!]!
}

type ParquetStore {
  id: ID!
  path: String!
  bucket: String!
  key: String!
}

"""A column descriptor"""
type TableColumn {
  name: String!
  type: DuckDBDataType!
  nullable: Boolean!
  key: String
  default: String
  accessors(filters: AccessorFilter, types: [AccessorKind!]): [Accessor!]!
}

enum DuckDBDataType {
  """Represents a True/False value"""
  BOOLEAN

  """Very small integer (-128 to 127)"""
  TINYINT

  """Small integer (-32,768 to 32,767)"""
  SMALLINT

  """Standard integer (-2,147,483,648 to 2,147,483,647)"""
  INTEGER

  """Large integer for large numeric values"""
  BIGINT

  """Extremely large integer for very large numeric ranges"""
  HUGEINT

  """Single-precision floating point number"""
  FLOAT

  """Double-precision floating point number"""
  DOUBLE

  """Variable-length string (text)"""
  VARCHAR

  """Binary large object for storing binary data"""
  BLOB

  """Date and time with precision"""
  TIMESTAMP

  """Specific date (year, month, day)"""
  DATE

  """Specific time of the day (hours, minutes, seconds)"""
  TIME

  """Span of time between two dates or times"""
  INTERVAL

  """Exact decimal number with defined precision and scale"""
  DECIMAL

  """Universally Unique Identifier used to uniquely identify objects"""
  UUID

  """A list of values of the same data type"""
  LIST

  """A collection of key-value pairs where each key is unique"""
  MAP

  """Enumeration of predefined values"""
  ENUM

  """Composite type grouping several fields with different data types"""
  STRUCT

  """JSON object, a structured text format used for representing data"""
  JSON
}

input AccessorFilter {
  keys: JSON
  provenance: ProvenanceFilter
  AND: AccessorFilter
  OR: AccessorFilter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum AccessorKind {
  LABEL
  IMAGE
}

"""The `MetricMap` scalar type represents a matrix values as specified by"""
scalar MetricMap

input PixelViewFilter {
  isGlobal: Boolean
  provenance: ProvenanceFilter
  AND: PixelViewFilter
  OR: PixelViewFilter
}

enum RenderKind {
  VIDEO
  SNAPSHOT
}

input ROIFilter {
  ids: [ID!]
  id: ID
  kind: RoiKindChoices
  image: ID = null
  search: String
  AND: ROIFilter
  OR: ROIFilter
}

enum RoiKindChoices {
  ELLIPSIS
  POLYGON
  LINE
  RECTANGLE
  SPECTRAL_RECTANGLE
  TEMPORAL_RECTANGLE
  CUBE
  SPECTRAL_CUBE
  TEMPORAL_CUBE
  HYPERCUBE
  SPECTRAL_HYPERCUBE
  PATH
  UNKNOWN
  FRAME
  SLICE
  POINT
}

type RGBView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  contexts(filters: RGBContextFilter, pagination: OffsetPaginationInput): [RGBContext!]!
  colorMap: ColorMap!
  gamma: Float
  contrastLimitMin: Float
  contrastLimitMax: Float
  rescale: Boolean!
  active: Boolean!
  baseColor: [Int!]
  fullColour(format: ColorFormat = RGB): String!
  name(long: Boolean! = false): String!
}

enum ColorMap {
  VIRIDIS
  PLASMA
  INFERNO
  MAGMA
  RED
  GREEN
  BLUE
  INTENSITY
}

enum ColorFormat {
  RGB
  HSL
}

enum Blending {
  ADDITIVE
  MULTIPLICATIVE
}

type OverlayNode implements RenderNode {
  kind: String!
  children: [RenderNode!]!
  label: String
}

type GridNode implements RenderNode {
  kind: String!
  children: [RenderNode!]!
  gap: Int
  label: String
}

type SplitNode implements RenderNode {
  kind: String!
  children: [RenderNode!]!
  label: String
}

type Query {
  images(filters: ImageFilter, order: ImageOrder, pagination: OffsetPaginationInput): [Image!]!
  rois(filters: ROIFilter, pagination: OffsetPaginationInput): [ROI!]!
  myimages(filters: ImageFilter, order: ImageOrder, pagination: OffsetPaginationInput): [Image!]!
  datasets(filters: DatasetFilter, pagination: OffsetPaginationInput): [Dataset!]!
  mydatasets(filters: DatasetFilter, pagination: OffsetPaginationInput): [Dataset!]!
  timepointViews(filters: TimepointViewFilter, pagination: OffsetPaginationInput): [TimepointView!]!
  labelViews: [LabelView!]!
  channelViews: [ChannelView!]!
  continousScanViews(filters: ContinousScanViewFilter, pagination: OffsetPaginationInput): [ContinousScanView!]!
  wellPositionViews(filters: WellPositionViewFilter, pagination: OffsetPaginationInput): [WellPositionView!]!
  acquisitionViews: [AcquisitionView!]!
  rgbViews: [RGBView!]!
  affineTransformationViews(filters: AffineTransformationViewFilter, pagination: OffsetPaginationInput): [AffineTransformationView!]!
  scaleViews: [ScaleView!]!
  eras(filters: EraFilter, pagination: OffsetPaginationInput): [Era!]!
  myeras(filters: EraFilter, pagination: OffsetPaginationInput): [Era!]!
  renderedPlots(filters: RenderedPlotFilter, pagination: OffsetPaginationInput): [RenderedPlot!]!
  stages(filters: StageFilter, pagination: OffsetPaginationInput): [Stage!]!
  renderTrees(filters: RenderTreeFilter, order: RenderTreeOrder, pagination: OffsetPaginationInput): [RenderTree!]!
  experiments(filters: ExperimentFilter, pagination: OffsetPaginationInput): [Experiment!]!
  channels: [Channel!]!
  rgbcontexts(filters: RGBContextFilter, pagination: OffsetPaginationInput): [RGBContext!]!
  mychannels: [Channel!]!
  instruments: [Instrument!]!
  multiWellPlates(filters: MultiWellPlateFilter, pagination: OffsetPaginationInput): [MultiWellPlate!]!
  objectives: [Objective!]!
  myobjectives: [Objective!]!
  specimenViews(filters: StructureViewFilter, pagination: OffsetPaginationInput): [StructureView!]!
  tables(filters: TableFilter, pagination: OffsetPaginationInput): [Table!]!
  mytables(filters: TableFilter, pagination: OffsetPaginationInput): [Table!]!
  snapshots(filters: SnapshotFilter, pagination: OffsetPaginationInput): [Snapshot!]!
  mysnapshots(filters: SnapshotFilter, pagination: OffsetPaginationInput): [Snapshot!]!
  files(filters: FileFilter, pagination: OffsetPaginationInput): [File!]!
  myfiles(filters: FileFilter, pagination: OffsetPaginationInput): [File!]!
  randomImage: Image!
  labelAccessors: [LabelAccessor!]!
  imageAccessors: [ImageAccessor!]!
  children(parent: ID!, filters: DatasetChildrenFilter = null, pagination: ChildrenPaginationInput = null): [DatasetImageFile!]!
  rows(table: ID!, filters: RowFilter = null, pagination: TablePaginationInput = null): [MetricMap!]!
  pixelView(id: ID!): PixelView!
  image(id: ID!): Image!
  roi(id: ID!): ROI!
  renderTree(id: ID!): RenderTree!
  rgbcontext(id: ID!): RGBContext!
  objective(id: ID!): Objective!
  camera(id: ID!): Camera!
  snapshot(id: ID!): Snapshot!
  file(id: ID!): File!
  table(id: ID!): Table!
  instrument(id: ID!): Instrument!
  dataset(id: ID!): Dataset!
  multiWellPlate(id: ID!): MultiWellPlate!
  stage(id: ID!): Stage!
  renderedPlot(id: ID!): RenderedPlot!
  experiment(id: ID!): Experiment!
}

type ContinousScanView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  direction: ScanDirection!
}

enum ScanDirection {
  ROW_COLUMN_SLICE
  COLUMN_ROW_SLICE
  SLICE_ROW_COLUMN
  ROW_COLUMN_SLICE_SNAKE
  COLUMN_ROW_SLICE_SNAKE
  SLICE_ROW_COLUMN_SNAKE
}

input ContinousScanViewFilter {
  isGlobal: Boolean
  provenance: ProvenanceFilter
  AND: ContinousScanViewFilter
  OR: ContinousScanViewFilter
  direction: ContinousScanDirection
}

enum ContinousScanDirection {
  ROW_COLUMN_SLICE
  COLUMN_ROW_SLICE
  SLICE_ROW_COLUMN
  ROW_COLUMN_SLICE_SNAKE
  COLUMN_ROW_SLICE_SNAKE
  SLICE_ROW_COLUMN_SNAKE
}

type WellPositionView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  well: MultiWellPlate
  row: Int
  column: Int
}

type MultiWellPlate {
  id: ID!
  views(filters: WellPositionViewFilter, pagination: OffsetPaginationInput): [WellPositionView!]!
  name: String
  description: String
  rows: Int
  columns: Int
}

input WellPositionViewFilter {
  isGlobal: Boolean
  provenance: ProvenanceFilter
  AND: WellPositionViewFilter
  OR: WellPositionViewFilter
  well: MultiWellPlateFilter
  row: Int
  column: Int
}

input MultiWellPlateFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  AND: MultiWellPlateFilter
  OR: MultiWellPlateFilter
}

type AcquisitionView implements View {
  image: Image!
  zMin: Int
  zMax: Int
  xMin: Int
  xMax: Int
  yMin: Int
  yMax: Int
  tMin: Int
  tMax: Int
  cMin: Int
  cMax: Int
  isGlobal: Boolean!

  """The accessor"""
  accessor: [String!]!
  id: ID!
  description: String
  acquiredAt: DateTime
  operator: User
}

type RenderedPlot implements Plot {
  entity: String!
  id: ID!
  store: MediaStore!
  name: String!
  description: String
  overlays: [Overlay!]
}

interface Plot {
  entity: String!
}

type Overlay {
  object: String!
  identifier: String!
  color: String!
  x: Int!
  y: Int!
}

input RenderedPlotFilter {
  ids: [ID!]
  search: String
  id: ID
  AND: RenderedPlotFilter
  OR: RenderedPlotFilter
}

type RenderTree {
  id: ID!
  name: String!
  linkedContexts(filters: RGBContextFilter, pagination: OffsetPaginationInput): [RGBContext!]!
  tree: Tree!
}

type Tree {
  children: [RenderNode!]!
}

input RenderTreeFilter {
  id: ID
  provenance: ProvenanceFilter
  AND: RenderTreeFilter
  OR: RenderTreeFilter
}

input RenderTreeOrder {
  createdAt: Ordering
}

type Experiment {
  id: ID!
  name: String!
  description: String
  history(pagination: OffsetPaginationInput): [History!]!
  createdAt: DateTime!
  creator: User
}

input ExperimentFilter {
  ids: [ID!]
  search: String
  id: ID
  AND: ExperimentFilter
  OR: ExperimentFilter
}

input TableFilter {
  id: ID
  ids: [ID!]
  AND: TableFilter
  OR: TableFilter
}

type ImageAccessor implements Accessor {
  id: ID!
  table: Table!
  keys: [String!]!
  minIndex: Int
  maxIndex: Int
}

union DatasetImageFile = Dataset | Image | File

input DatasetChildrenFilter {
  showChildren: Boolean = null
}

input ChildrenPaginationInput {
  limit: Int = 200
  offset: Int = 0
}

input RowFilter {
  clause: String = null
}

input TablePaginationInput {
  limit: Int = 200
  offset: Int = 0
}

type Mutation {
  relateToDataset(
    """Input data for `relateToDataset` mutation"""
    input: RelateToDatasetInput!
  ): Image!
  requestUpload(input: RequestUploadInput!): Credentials!

  """Request upload credentials for a given key"""
  requestAccess(input: RequestAccessInput!): AccessCredentials!
  requestMediaUpload(input: RequestMediaUploadInput!): PresignedPostCredentials!
  requestTableUpload(input: RequestTableUploadInput!): Credentials!
  requestTableAccess(input: RequestTableAccessInput!): AccessCredentials!
  requestFileUpload(input: RequestFileUploadInput!): Credentials!
  requestFileUploadPresigned(input: RequestFileUploadInput!): PresignedPostCredentials!
  requestFileAccess(input: RequestFileAccessInput!): AccessCredentials!
  createAffineTransformationView(input: AffineTransformationViewInput!): AffineTransformationView!
  fromArrayLike(input: FromArrayLikeInput!): Image!
  pinImage(input: PinImageInput!): Image!
  updateImage(input: UpdateImageInput!): Image!
  deleteImage(input: DeleteImageInput!): ID!
  createRenderTree(input: RenderTreeInput!): RenderTree!
  fromParquetLike(input: FromParquetLike!): Table!
  fromFileLike(input: FromFileLike!): File!
  deleteFile(input: DeleteFileInput!): ID!
  createRenderedPlot(input: RenderedPlotInput!): RenderedPlot!
  createChannel(input: ChannelInput!): Channel!
  pinChannel(input: PinChannelInput!): Channel!
  ensureChannel(input: ChannelInput!): Channel!
  deleteChannel(input: DeleteChannelInput!): ID!
  createStage(input: StageInput!): Stage!
  pinStage(input: PinStageInput!): Stage!
  deleteStage(input: DeleteStageInput!): ID!
  createRgbContext(input: CreateRGBContextInput!): RGBContext!
  deleteRgbContext(input: DeleteRGBContextInput!): ID!

  """Update RGB Context"""
  updateRgbContext(input: UpdateRGBContextInput!): RGBContext!
  createDataset(input: CreateDatasetInput!): Dataset!
  updateDataset(input: ChangeDatasetInput!): Dataset!
  revertDataset(input: RevertInput!): Dataset!
  pinDataset(input: PinDatasetInput!): Dataset!
  deleteDataset(input: DeleteDatasetInput!): ID!
  putDatasetsInDataset(input: AssociateInput!): Dataset!
  releaseDatasetsFromDataset(input: DesociateInput!): Dataset!
  putImagesInDataset(input: AssociateInput!): Dataset!
  releaseImagesFromDataset(input: DesociateInput!): Dataset!
  putFilesInDataset(input: AssociateInput!): Dataset!
  releaseFilesFromDataset(input: DesociateInput!): Dataset!
  createMultiWellPlate(input: MultiWellPlateInput!): MultiWellPlate!
  ensureMultiWellPlate(input: MultiWellPlateInput!): MultiWellPlate!
  pinMultiWellPlate(input: PintMultiWellPlateInput!): MultiWellPlate!
  deleteMultiWellPlate(input: DeleteMultiWellInput!): ID!
  createViewCollection(input: ViewCollectionInput!): ViewCollection!
  pinViewCollection(input: PinViewCollectionInput!): ViewCollection!
  deleteViewCollection(input: DeleteViewCollectionInput!): ID!
  createEra(input: EraInput!): Era!
  pinEra(input: PinEraInput!): Era!
  deleteEra(input: DeleteEraInput!): ID!
  createLabelView(input: LabelViewInput!): LabelView!
  createTimepointView(input: TimepointViewInput!): TimepointView!
  createFileView(input: FileViewInput!): FileView!
  createRoiView(input: ROIViewInput!): ROIView!
  createOpticsView(input: OpticsViewInput!): OpticsView!
  createRgbView(input: RGBViewInput!): RGBView!
  createChannelView(input: ChannelViewInput!): ChannelView!
  createStructureView(input: StructureViewInput!): StructureView!
  createWellPositionView(input: WellPositionViewInput!): WellPositionView!
  createContinousScanView(input: ContinousScanViewInput!): ContinousScanView!
  deleteAffineTransformationView(input: DeleteViewInput!): ID!
  deleteChannelView(input: DeleteViewInput!): ID!
  deleteTimepointView(input: DeleteViewInput!): ID!
  deleteOpticsView(input: DeleteViewInput!): ID!
  deleteRgbView(input: DeleteViewInput!): ID!
  deleteView(input: DeleteViewInput!): ID!
  pinView(input: PinViewInput!): View!
  createInstrument(input: InstrumentInput!): Instrument!
  deleteInstrument(input: DeleteInstrumentInput!): ID!
  pinInstrument(input: PinInstrumentInput!): Instrument!
  ensureInstrument(input: InstrumentInput!): Instrument!
  createObjective(input: ObjectiveInput!): Objective!
  deleteObjective(input: DeleteObjectiveInput!): ID!
  pinObjective(input: PinObjectiveInput!): Objective!
  ensureObjective(input: ObjectiveInput!): Objective!
  createCamera(input: CameraInput!): Camera!
  deleteCamera(input: DeleteCameraInput!): ID!
  pinCamera(input: PinCameraInput!): Camera!
  ensureCamera(input: CameraInput!): Camera!
  createSnapshot(input: SnaphotInput!): Snapshot!
  deleteSnapshot(input: DeleteRenderedPlot!): ID!
  pinSnapshot(input: PinSnapshotInput!): Snapshot!
  createRoi(input: RoiInput!): ROI!
  updateRoi(input: UpdateRoiInput!): ROI!
  pinRoi(input: PinROIInput!): ROI!
  deleteRoi(input: DeleteRoiInput!): ID!
}

input RelateToDatasetInput {
  id: ID!
  other: ID!
}

"""
Temporary Credentials for a file upload that can be used by a Client (e.g. in a python datalayer)
"""
type Credentials {
  status: String!
  accessKey: String!
  secretKey: String!
  sessionToken: String!
  datalayer: String!
  bucket: String!
  key: String!
  store: String!
}

input RequestUploadInput {
  key: String!
  datalayer: String!
}

"""
Temporary Credentials for a file download that can be used by a Client (e.g. in a python datalayer)
"""
type AccessCredentials {
  accessKey: String!
  secretKey: String!
  sessionToken: String!
  bucket: String!
  key: String!
  path: String!
}

input RequestAccessInput {
  store: ID!
  duration: Int = null
}

"""
Temporary Credentials for a file upload that can be used by a Client (e.g. in a python datalayer)
"""
type PresignedPostCredentials {
  key: String!
  xAmzAlgorithm: String!
  xAmzCredential: String!
  xAmzDate: String!
  xAmzSignature: String!
  policy: String!
  datalayer: String!
  bucket: String!
  store: String!
}

input RequestMediaUploadInput {
  key: String!
  datalayer: String!
}

input RequestTableUploadInput {
  key: String!
  datalayer: String!
}

input RequestTableAccessInput {
  store: ID!
  duration: Int
}

input RequestFileUploadInput {
  key: String!
  datalayer: String!
}

input RequestFileAccessInput {
  store: ID!
  duration: Int
}

input AffineTransformationViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  stage: ID = null
  affineMatrix: FourByFourMatrix!
  image: ID!
}

input FromArrayLikeInput {
  name: String!
  array: ArrayLike!
  dataset: ID = null
  channelViews: [PartialChannelViewInput!] = null
  transformationViews: [PartialAffineTransformationViewInput!] = null
  acquisitionViews: [PartialAcquisitionViewInput!] = null
  pixelViews: [PartialPixelViewInput!] = null
  structureViews: [PartialStructureViewInput!] = null
  rgbViews: [PartialRGBViewInput!] = null
  timepointViews: [PartialTimepointViewInput!] = null
  opticsViews: [PartialOpticsViewInput!] = null
  scaleViews: [PartialScaleViewInput!] = null
  tags: [String!] = null
  roiViews: [PartialROIViewInput!] = null
  fileViews: [PartialFileViewInput!] = null
  derivedViews: [PartialDerivedViewInput!] = null
}

"""
The `ArrayLike` scalar type represents a reference to a store previously created by the user n a datalayer
"""
scalar ArrayLike

input PartialChannelViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  channel: ID!
}

input PartialAffineTransformationViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  stage: ID = null
  affineMatrix: FourByFourMatrix!
}

input PartialAcquisitionViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  description: String = null
  acquiredAt: DateTime = null
  operator: ID = null
}

input PartialPixelViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  linkedView: ID = null
  rangeLabels: [RangePixelLabel!] = null
}

input RangePixelLabel {
  group: ID = null
  entityKind: ID!
  min: Int!
  max: Int!
}

input PartialStructureViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  structure: StructureString!
}

input PartialRGBViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  context: ID = null
  gamma: Float = null
  contrastLimitMin: Float = null
  contrastLimitMax: Float = null
  rescale: Boolean = null
  scale: Float = null
  active: Boolean = null
  colorMap: ColorMap = null
  baseColor: [Float!] = null
}

input PartialTimepointViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  era: ID = null
  msSinceStart: Milliseconds = null
  indexSinceStart: Int = null
}

input PartialOpticsViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  instrument: ID = null
  objective: ID = null
  camera: ID = null
}

input PartialScaleViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  parent: ID = null
  scaleX: Float = null
  scaleY: Float = null
  scaleZ: Float = null
  scaleT: Float = null
  scaleC: Float = null
}

input PartialROIViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  roi: ID!
}

input PartialFileViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  file: ID!
  seriesIdentifier: String = null
}

input PartialDerivedViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  originImage: ID!
}

input PinImageInput {
  id: ID!
  pin: Boolean!
}

input UpdateImageInput {
  id: ID!
  tags: [String!] = null
  name: String = null
}

input DeleteImageInput {
  id: ID!
}

input RenderTreeInput {
  tree: TreeInput!
  name: String!
}

input TreeInput {
  id: String = "root"
  children: [TreeNodeInput!]!
}

input TreeNodeInput {
  kind: RenderNodeKind!
  label: String = null
  context: String = null
  gap: Int = null
  children: [TreeNodeInput!]
}

enum RenderNodeKind {
  CONTEXT
  OVERLAY
  GRID
  SPIT
}

input FromParquetLike {
  name: String!
  dataframe: ParquetLike!
  origins: [ID!] = null
  dataset: ID = null
  labelAccessors: [PartialLabelAccessorInput!] = null
  imageAccessors: [PartialImageAccessorInput!] = null
}

"""
The `ParquetLike` scalar type represents a reference to a parquet objected stored previously created by the user on a datalayer
"""
scalar ParquetLike

input PartialLabelAccessorInput {
  keys: [String!]!
  minIndex: Int = null
  maxIndex: Int = null
  pixelView: ID!
}

input PartialImageAccessorInput {
  keys: [String!]!
  minIndex: Int = null
  maxIndex: Int = null
  image: ID!
}

input FromFileLike {
  name: String!
  file: FileLike!
  origins: [ID!] = null
  dataset: ID = null
}

"""
The `FileLike` scalar type represents a reference to a big file storage previously created by the user n a datalayer
"""
scalar FileLike

input DeleteFileInput {
  id: ID!
}

input RenderedPlotInput {
  name: String!
  plot: Upload!
  overlays: [OverlayInput!]
}

scalar Upload

input OverlayInput {
  object: String!
  identifier: String!
  color: String!
  x: Int!
  y: Int!
}

input ChannelInput {
  name: String!
}

input PinChannelInput {
  id: ID!
  pin: Boolean!
}

input DeleteChannelInput {
  id: ID!
}

input StageInput {
  name: String!
  instrument: ID = null
}

input PinStageInput {
  id: ID!
  pin: Boolean!
}

input DeleteStageInput {
  id: ID!
}

input CreateRGBContextInput {
  name: String = null
  thumbnail: ID = null
  image: ID!
  views: [PartialRGBViewInput!] = null
  z: Int = null
  t: Int = null
  c: Int = null
}

input DeleteRGBContextInput {
  id: ID!
}

input UpdateRGBContextInput {
  id: ID!
  name: String = null
  thumbnail: ID = null
  views: [PartialRGBViewInput!] = null
  z: Int = null
  t: Int = null
  c: Int = null
}

input CreateDatasetInput {
  name: String!
}

input ChangeDatasetInput {
  name: String!
  id: ID!
}

input RevertInput {
  id: ID!
  historyId: ID!
}

input PinDatasetInput {
  id: ID!
  pin: Boolean!
}

input DeleteDatasetInput {
  id: ID!
}

input AssociateInput {
  selfs: [ID!]!
  other: ID!
}

input DesociateInput {
  selfs: [ID!]!
  other: ID!
}

input MultiWellPlateInput {
  name: String!
  columns: Int = null
  rows: Int = null
}

input PintMultiWellPlateInput {
  id: ID!
  pin: Boolean!
}

input DeleteMultiWellInput {
  id: ID!
}

type ViewCollection {
  id: ID!
  name: String!
  views: [View!]!
  history(pagination: OffsetPaginationInput): [History!]!
  affineTransformationViews(filters: AffineTransformationViewFilter, pagination: OffsetPaginationInput): [AffineTransformationView!]!
  labelViews: [LabelView!]!
  channelViews: [ChannelView!]!
}

input ViewCollectionInput {
  name: String!
}

input PinViewCollectionInput {
  id: ID!
  pin: Boolean!
}

input DeleteViewCollectionInput {
  id: ID!
}

input EraInput {
  name: String!
  begin: DateTime = null
}

input PinEraInput {
  id: ID!
  pin: Boolean!
}

input DeleteEraInput {
  id: ID!
}

input LabelViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  label: String!
  image: ID!
}

input TimepointViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  era: ID = null
  msSinceStart: Milliseconds = null
  indexSinceStart: Int = null
  image: ID!
}

input FileViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  file: ID!
  seriesIdentifier: String = null
  image: ID!
}

input ROIViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  roi: ID!
  image: ID!
}

input OpticsViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  instrument: ID = null
  objective: ID = null
  camera: ID = null
  image: ID!
}

input RGBViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  context: ID!
  gamma: Float = null
  contrastLimitMin: Float = null
  contrastLimitMax: Float = null
  rescale: Boolean = null
  scale: Float = null
  active: Boolean = null
  colorMap: ColorMap = null
  baseColor: [Float!] = null
  image: ID!
}

input ChannelViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  channel: ID!
  image: ID!
}

input StructureViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  structure: StructureString!
  image: ID!
}

input WellPositionViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  well: ID = null
  row: Int = null
  column: Int = null
  image: ID!
}

input ContinousScanViewInput {
  collection: ID = null
  zMin: Int = null
  zMax: Int = null
  xMin: Int = null
  xMax: Int = null
  yMin: Int = null
  yMax: Int = null
  tMin: Int = null
  tMax: Int = null
  cMin: Int = null
  cMax: Int = null
  direction: ScanDirection!
  image: ID!
}

input DeleteViewInput {
  id: ID!
}

input PinViewInput {
  id: ID!
  pin: Boolean!
}

input InstrumentInput {
  serialNumber: String!
  manufacturer: String = null
  name: String = null
  model: String = null
}

input DeleteInstrumentInput {
  id: ID!
}

input PinInstrumentInput {
  id: ID!
  pin: Boolean!
}

input ObjectiveInput {
  serialNumber: String!
  name: String = null
  na: Float = null
  magnification: Float = null
  immersion: String = null
}

input DeleteObjectiveInput {
  id: ID!
}

input PinObjectiveInput {
  id: ID!
  pin: Boolean!
}

input CameraInput {
  serialNumber: String!
  name: String = null
  model: String = null
  bitDepth: Int = null
  sensorSizeX: Int = null
  sensorSizeY: Int = null
  pixelSizeX: Micrometers = null
  pixelSizeY: Micrometers = null
  manufacturer: String = null
}

input DeleteCameraInput {
  id: ID!
}

input PinCameraInput {
  id: ID!
  pin: Boolean!
}

input SnaphotInput {
  file: Upload!
  image: ID!
}

input DeleteRenderedPlot {
  id: ID!
}

input PinSnapshotInput {
  id: ID!
  pin: Boolean!
}

input RoiInput {
  image: ID!
  vectors: [FiveDVector!]!
  kind: RoiKind!
  entity: ID = null
  entityKind: ID = null
  entityGroup: ID = null
  entityParent: ID = null
}

input UpdateRoiInput {
  roi: ID!
  vectors: [FiveDVector!] = null
  kind: RoiKind = null
  entity: ID = null
  entityKind: ID = null
  entityGroup: ID = null
  entityParent: ID = null
}

input PinROIInput {
  id: ID!
  pin: Boolean!
}

input DeleteRoiInput {
  id: ID!
}

type Subscription {
  historyEvents(user: String!): Image!
  rois(image: ID!): RoiEvent!
  images(dataset: ID = null): ImageEvent!
  files(dataset: ID = null): FileEvent!
}

type RoiEvent {
  create: ROI
  delete: ID
  update: ROI
}

type ImageEvent {
  create: Image
  delete: ID
  update: Image
}

type FileEvent {
  create: File
  delete: ID
  update: File
  moved: File
}