# Code generated by smithy-python-codegen DO NOT EDIT.

from smithy_core.prelude import BLOB, DOUBLE, FLOAT, INTEGER, STRING, UNIT
from smithy_core.schemas import Schema
from smithy_core.shapes import ShapeID, ShapeType
from smithy_core.traits import Trait


VALIDATION_EXCEPTION_FIELD = Schema.collection(
    id=ShapeID("smithy.framework#ValidationExceptionField"),

    members={
        "path": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

VALIDATION_EXCEPTION_FIELD_LIST = Schema.collection(
    id=ShapeID("smithy.framework#ValidationExceptionFieldList"),
    type=ShapeType.LIST,
    members={
        "member": {
            "target": VALIDATION_EXCEPTION_FIELD,
        },

    }
)

VALIDATION_EXCEPTION = Schema.collection(
    id=ShapeID("smithy.framework#ValidationException"),

    members={
        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "fieldList": {
            "target": VALIDATION_EXCEPTION_FIELD_LIST,
        },

    }
)

ACCESS_DENIED_EXCEPTION = Schema.collection(
    id=ShapeID("svector#AccessDeniedException"),

    traits=[
        Trait(id=ShapeID("smithy.api#httpError"), value=403),

    ],
    members={
        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

DATABASE_ID = Schema(
    id=ShapeID("svector#DatabaseId"),
    type=ShapeType.STRING,
    traits=[
        Trait(id=ShapeID("smithy.api#pattern"), value="^[A-Za-z0-9-_]+$"),
        Trait(id=ShapeID("smithy.api#length"), value={
                "min": 1,
                "max": 256,
            }),

    ],

)

NOT_FOUND_EXCEPTION = Schema.collection(
    id=ShapeID("svector#NotFoundException"),

    traits=[
        Trait(id=ShapeID("smithy.api#httpError"), value=404),

    ],
    members={
        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

ITEM_KEY = Schema(
    id=ShapeID("svector#ItemKey"),
    type=ShapeType.STRING,
    traits=[
        Trait(id=ShapeID("smithy.api#length"), value={
                "min": 1,
                "max": 256,
            }),

    ],

)

DELETE_ITEM_INPUT = Schema.collection(
    id=ShapeID("svector#DeleteItemInput"),

    traits=[
        Trait(id=ShapeID("smithy.api#input")),

    ],
    members={
        "databaseId": {
            "target": DATABASE_ID,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

        "key": {
            "target": ITEM_KEY,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

    }
)

DELETE_ITEM_OUTPUT = Schema.collection(
    id=ShapeID("svector#DeleteItemOutput"),

    traits=[
        Trait(id=ShapeID("smithy.synthetic#originalShapeId"), value="smithy.api#Unit"),
        Trait(id=ShapeID("smithy.api#output")),

    ],

)

INSUFFICIENT_FUNDS_EXCEPTION = Schema.collection(
    id=ShapeID("svector#InsufficientFundsException"),

    traits=[
        Trait(id=ShapeID("smithy.api#httpError"), value=402),

    ],
    members={
        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

INTERNAL_SERVER_ERROR = Schema.collection(
    id=ShapeID("svector#InternalServerError"),

    traits=[
        Trait(id=ShapeID("smithy.api#httpError"), value=500),

    ],
    members={
        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

QUOTA_EXCEEDED_EXCEPTION = Schema.collection(
    id=ShapeID("svector#QuotaExceededException"),

    traits=[
        Trait(id=ShapeID("smithy.api#httpError"), value=400),

    ],
    members={
        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

SERVICE_UNAVAILABLE_ERROR = Schema.collection(
    id=ShapeID("svector#ServiceUnavailableError"),

    traits=[
        Trait(id=ShapeID("smithy.api#httpError"), value=503),
        Trait(id=ShapeID("smithy.api#retryable")),

    ],
    members={
        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

THROTTLING_ERROR = Schema.collection(
    id=ShapeID("svector#ThrottlingError"),

    traits=[
        Trait(id=ShapeID("smithy.api#httpError"), value=429),
        Trait(id=ShapeID("smithy.api#retryable")),

    ],
    members={
        "message": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

EMBEDDING_INPUT = Schema.collection(
    id=ShapeID("svector#EmbeddingInput"),
    type=ShapeType.UNION,
    members={
        "text": {
            "target": STRING,
        },

        "image": {
            "target": BLOB,
        },

    }
)

EMBEDDING_MODEL = Schema.collection(
    id=ShapeID("svector#EmbeddingModel"),
    type=ShapeType.ENUM,
    members={
        "ALL_MINILM_L6_V2": {
            "target": UNIT,
            "traits": [
                Trait(id=ShapeID("smithy.api#enumValue"), value="ALL_MINILM_L6_V2"),

            ],
        },

        "CLIP_VIT_BASE_PATH32": {
            "target": UNIT,
            "traits": [
                Trait(id=ShapeID("smithy.api#enumValue"), value="CLIP_VIT_BASE_PATH32"),

            ],
        },

    }
)

EMBED_INPUT = Schema.collection(
    id=ShapeID("svector#EmbedInput"),

    traits=[
        Trait(id=ShapeID("smithy.api#input")),

    ],
    members={
        "databaseId": {
            "target": DATABASE_ID,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

        "model": {
            "target": EMBEDDING_MODEL,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

        "input": {
            "target": EMBEDDING_INPUT,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

VECTOR = Schema.collection(
    id=ShapeID("svector#Vector"),
    type=ShapeType.LIST,
    traits=[
        Trait(id=ShapeID("smithy.api#length"), value={
                "min": 0,
                "max": 4096,
            }),

    ],
    members={
        "member": {
            "target": FLOAT,
        },

    }
)

EMBED_OUTPUT = Schema.collection(
    id=ShapeID("svector#EmbedOutput"),

    traits=[
        Trait(id=ShapeID("smithy.api#output")),

    ],
    members={
        "vector": {
            "target": VECTOR,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "consumedEmbeddingUnits": {
            "target": INTEGER,
        },

    }
)

GET_ITEM_INPUT = Schema.collection(
    id=ShapeID("svector#GetItemInput"),

    traits=[
        Trait(id=ShapeID("smithy.api#input")),

    ],
    members={
        "databaseId": {
            "target": DATABASE_ID,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

        "key": {
            "target": ITEM_KEY,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

    }
)

NUMBER_ARRAY = Schema.collection(
    id=ShapeID("svector#NumberArray"),
    type=ShapeType.LIST,
    members={
        "member": {
            "target": DOUBLE,
        },

    }
)

STRING_ARRAY = Schema.collection(
    id=ShapeID("svector#StringArray"),
    type=ShapeType.LIST,
    members={
        "member": {
            "target": STRING,
        },

    }
)

METADATA_VALUE = Schema.collection(
    id=ShapeID("svector#MetadataValue"),
    type=ShapeType.UNION,
    members={
        "string": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#length"), value={
                        "min": 1,
                        "max": 5120,
                    }),

            ],
        },

        "stringArray": {
            "target": STRING_ARRAY,
        },

        "number": {
            "target": DOUBLE,
        },

        "numberArray": {
            "target": NUMBER_ARRAY,
        },

    }
)

METADATA = Schema.collection(
    id=ShapeID("svector#Metadata"),
    type=ShapeType.MAP,
    members={
        "key": {
            "target": STRING,
        },

        "value": {
            "target": METADATA_VALUE,
        },

    }
)

ITEM_VALUE = Schema(
    id=ShapeID("svector#ItemValue"),
    type=ShapeType.BLOB,
    traits=[
        Trait(id=ShapeID("smithy.api#length"), value={
                "min": 0,
                "max": 5120,
            }),

    ],

)

GET_ITEM_OUTPUT = Schema.collection(
    id=ShapeID("svector#GetItemOutput"),

    traits=[
        Trait(id=ShapeID("smithy.synthetic#originalShapeId"), value="svector#Item"),
        Trait(id=ShapeID("smithy.api#output")),

    ],
    members={
        "key": {
            "target": ITEM_KEY,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "value": {
            "target": ITEM_VALUE,
        },

        "vector": {
            "target": VECTOR,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "metadata": {
            "target": METADATA,
        },

    }
)

LIST_ITEMS_INPUT = Schema.collection(
    id=ShapeID("svector#ListItemsInput"),

    traits=[
        Trait(id=ShapeID("smithy.api#input")),

    ],
    members={
        "databaseId": {
            "target": DATABASE_ID,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

        "pageSize": {
            "target": INTEGER,
            "traits": [
                Trait(id=ShapeID("smithy.api#default"), value=1000),
                Trait(id=ShapeID("smithy.api#range"), value={
                        "min": 1,
                        "max": 1000,
                    }),

            ],
        },

        "nextToken": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#length"), value={
                        "max": 2048,
                    }),

            ],
        },

    }
)

ITEM = Schema.collection(
    id=ShapeID("svector#Item"),

    members={
        "key": {
            "target": ITEM_KEY,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "value": {
            "target": ITEM_VALUE,
        },

        "vector": {
            "target": VECTOR,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "metadata": {
            "target": METADATA,
        },

    }
)

ITEM_LIST = Schema.collection(
    id=ShapeID("svector#ItemList"),
    type=ShapeType.LIST,
    members={
        "member": {
            "target": ITEM,
        },

    }
)

LIST_ITEMS_OUTPUT = Schema.collection(
    id=ShapeID("svector#ListItemsOutput"),

    traits=[
        Trait(id=ShapeID("smithy.api#output")),

    ],
    members={
        "items": {
            "target": ITEM_LIST,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "nextToken": {
            "target": STRING,
        },

    }
)

QUERY_TYPE = Schema.collection(
    id=ShapeID("svector#QueryType"),
    type=ShapeType.UNION,
    members={
        "key": {
            "target": ITEM_KEY,
        },

        "vector": {
            "target": VECTOR,
        },

    }
)

QUERY_INPUT = Schema.collection(
    id=ShapeID("svector#QueryInput"),

    traits=[
        Trait(id=ShapeID("smithy.api#input")),

    ],
    members={
        "databaseId": {
            "target": DATABASE_ID,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

        "maxResults": {
            "target": INTEGER,
            "traits": [
                Trait(id=ShapeID("smithy.api#default"), value=5),
                Trait(id=ShapeID("smithy.api#range"), value={
                        "min": 1,
                        "max": 1000,
                    }),

            ],
        },

        "query": {
            "target": QUERY_TYPE,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "filter": {
            "target": STRING,
            "traits": [
                Trait(id=ShapeID("smithy.api#length"), value={
                        "max": 2048,
                    }),

            ],
        },

    }
)

QUERY_RESULT_ITEM = Schema.collection(
    id=ShapeID("svector#QueryResultItem"),

    members={
        "key": {
            "target": ITEM_KEY,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "value": {
            "target": ITEM_VALUE,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "vector": {
            "target": VECTOR,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "metadata": {
            "target": METADATA,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "distance": {
            "target": FLOAT,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

QUERY_RESULT = Schema.collection(
    id=ShapeID("svector#QueryResult"),
    type=ShapeType.LIST,
    members={
        "member": {
            "target": QUERY_RESULT_ITEM,
        },

    }
)

QUERY_OUTPUT = Schema.collection(
    id=ShapeID("svector#QueryOutput"),

    traits=[
        Trait(id=ShapeID("smithy.api#output")),

    ],
    members={
        "results": {
            "target": QUERY_RESULT,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

SET_ITEM_INPUT = Schema.collection(
    id=ShapeID("svector#SetItemInput"),

    traits=[
        Trait(id=ShapeID("smithy.api#input")),

    ],
    members={
        "databaseId": {
            "target": DATABASE_ID,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

        "key": {
            "target": ITEM_KEY,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),
                Trait(id=ShapeID("smithy.api#httpLabel")),

            ],
        },

        "value": {
            "target": ITEM_VALUE,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "vector": {
            "target": VECTOR,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

        "metadata": {
            "target": METADATA,
            "traits": [
                Trait(id=ShapeID("smithy.api#required")),

            ],
        },

    }
)

SET_ITEM_OUTPUT = Schema.collection(
    id=ShapeID("svector#SetItemOutput"),

    traits=[
        Trait(id=ShapeID("smithy.synthetic#originalShapeId"), value="smithy.api#Unit"),
        Trait(id=ShapeID("smithy.api#output")),

    ],

)
