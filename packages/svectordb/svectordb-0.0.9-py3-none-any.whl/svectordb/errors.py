# Code generated by smithy-python-codegen DO NOT EDIT.

from dataclasses import dataclass
from typing import ClassVar, Literal

from smithy_core.exceptions import SmithyException

from .models import ValidationExceptionField


class ServiceError(SmithyException):
    """Base error for all errors in the service."""
    pass

@dataclass
class ApiError(ServiceError):
    """Base error for all API errors in the service."""
    code: ClassVar[str]
    fault: ClassVar[Literal["client", "server"]]

    message: str

    def __post_init__(self) -> None:
        super().__init__(self.message)

@dataclass
class UnknownApiError(ApiError):
    """Error representing any unknown api errors"""
    code: ClassVar[str] = 'Unknown'
    fault: ClassVar[Literal["client", "server"]] = "client"

@dataclass(kw_only=True)
class ValidationException(ApiError):
    """A standard error for input validation failures.
    This should be thrown by
    services when a member of the input structure
    falls outside of the modeled or
    documented constraints.
    :param message: A message associated with the specific error.

    :param field_list: A list of specific failures encountered while validating the
    input.
    A member can appear in this list more than once if it failed to satisfy
    multiple constraints.
    """

    code: ClassVar[str] = "ValidationException"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str
    field_list: list[ValidationExceptionField] | None = None

@dataclass(kw_only=True)
class AccessDeniedException(ApiError):

    code: ClassVar[str] = "AccessDeniedException"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

@dataclass(kw_only=True)
class NotFoundException(ApiError):

    code: ClassVar[str] = "NotFoundException"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

@dataclass(kw_only=True)
class InsufficientFundsException(ApiError):

    code: ClassVar[str] = "InsufficientFundsException"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

@dataclass(kw_only=True)
class InternalServerError(ApiError):

    code: ClassVar[str] = "InternalServerError"
    fault: ClassVar[Literal["client", "server"]] = "server"

    message: str

@dataclass(kw_only=True)
class QuotaExceededException(ApiError):

    code: ClassVar[str] = "QuotaExceededException"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

@dataclass(kw_only=True)
class ServiceUnavailableError(ApiError):

    code: ClassVar[str] = "ServiceUnavailableError"
    fault: ClassVar[Literal["client", "server"]] = "server"

    message: str

@dataclass(kw_only=True)
class ThrottlingError(ApiError):

    code: ClassVar[str] = "ThrottlingError"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str
