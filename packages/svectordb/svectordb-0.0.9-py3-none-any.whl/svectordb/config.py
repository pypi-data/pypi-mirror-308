# Code generated by smithy-python-codegen DO NOT EDIT.

from dataclasses import dataclass
from typing import Any, Callable, TypeAlias, Union

from smithy_core.aio.interfaces.identity import IdentityResolver
from smithy_core.interceptors import Interceptor
from smithy_core.interfaces import URI
from smithy_core.interfaces.identity import IdentityProperties
from smithy_core.interfaces.retries import RetryStrategy
from smithy_core.retries import SimpleRetryStrategy
from smithy_http.aio.aiohttp import AIOHTTPClient
from smithy_http.aio.auth.apikey import ApiKeyAuthScheme
from smithy_http.aio.endpoints import StaticEndpointResolver
from smithy_http.aio.identity.apikey import ApiKeyIdentity
from smithy_http.aio.interfaces import EndpointResolver, HTTPClient
from smithy_http.aio.interfaces.auth import HTTPAuthScheme
from smithy_http.interfaces import HTTPRequestConfiguration

from .auth import HTTPAuthSchemeResolver
from .models import (
    DeleteItemInput,
    DeleteItemOutput,
    EmbedInput,
    EmbedOutput,
    GetItemInput,
    GetItemOutput,
    ListItemsInput,
    ListItemsOutput,
    QueryInput,
    QueryOutput,
    SetItemInput,
    SetItemOutput,
)


_ServiceInterceptor = Union[Interceptor[DeleteItemInput, DeleteItemOutput, Any, Any], Interceptor[EmbedInput, EmbedOutput, Any, Any], Interceptor[GetItemInput, GetItemOutput, Any, Any], Interceptor[ListItemsInput, ListItemsOutput, Any, Any], Interceptor[QueryInput, QueryOutput, Any, Any], Interceptor[SetItemInput, SetItemOutput, Any, Any]]
@dataclass(init=False)
class Config:
    """Configuration for DatabaseService."""

    interceptors: list[_ServiceInterceptor]
    retry_strategy: RetryStrategy
    http_client: HTTPClient
    http_request_config: HTTPRequestConfiguration | None
    endpoint_resolver: EndpointResolver[Any]
    endpoint_uri: str | URI | None
    http_auth_schemes: dict[str, HTTPAuthScheme[Any, Any, Any, Any]]
    http_auth_scheme_resolver: HTTPAuthSchemeResolver
    api_key_identity_resolver: IdentityResolver[ApiKeyIdentity, IdentityProperties] | None

    def __init__(
        self,
        *,
        interceptors: list[_ServiceInterceptor] | None = None,
        retry_strategy: RetryStrategy | None = None,
        http_client: HTTPClient | None = None,
        http_request_config: HTTPRequestConfiguration | None = None,
        endpoint_resolver: EndpointResolver[Any] | None = None,
        endpoint_uri: str | URI | None = None,
        http_auth_schemes: dict[str, HTTPAuthScheme[Any, Any, Any, Any]] | None = None,
        http_auth_scheme_resolver: HTTPAuthSchemeResolver | None = None,
        api_key_identity_resolver: IdentityResolver[ApiKeyIdentity, IdentityProperties] | None = None,
    ):
        """Constructor.

        :param interceptors: The list of interceptors, which are hooks that are called
        during the execution of a request.

        :param retry_strategy: The retry strategy for issuing retry tokens and computing
        retry delays.

        :param http_client: The HTTP client used to make requests.

        :param http_request_config: Configuration for individual HTTP requests.

        :param endpoint_resolver: The endpoint resolver used to resolve the final
        endpoint per-operation based on the configuration.

        :param endpoint_uri: A static URI to route requests to.

        :param http_auth_schemes: A map of http auth scheme ids to http auth schemes.

        :param http_auth_scheme_resolver: An http auth scheme resolver that determines
        the auth scheme for each operation.

        :param api_key_identity_resolver: Resolves the API key. Required for operations
        that use API key auth.
        """
        self.interceptors = interceptors or []
        self.retry_strategy = retry_strategy or SimpleRetryStrategy(max_attempts=12)
        self.http_client = http_client or AIOHTTPClient()
        self.http_request_config = http_request_config
        self.endpoint_resolver = endpoint_resolver or StaticEndpointResolver()
        self.endpoint_uri = endpoint_uri
        self.http_auth_schemes = http_auth_schemes or {
            "smithy.api#httpApiKeyAuth": ApiKeyAuthScheme(),
        }

        self.http_auth_scheme_resolver = http_auth_scheme_resolver or HTTPAuthSchemeResolver()
        self.api_key_identity_resolver = api_key_identity_resolver

    def set_http_auth_scheme(self, scheme: HTTPAuthScheme[Any, Any, Any, Any]) -> None:
        """Sets the implementation of an auth scheme.

        Using this method ensures the correct key is used.

        :param scheme: The auth scheme to add.
        """
        self.http_auth_schemes[scheme.scheme_id] = scheme

# A callable that allows customizing the config object on each request.
Plugin: TypeAlias = Callable[[Config], None]
