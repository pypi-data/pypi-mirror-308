"""A web3.py Contract class for the MockUniV3Zap contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..ISwapRouter import ISwapRouterTypes as ISwapRouter
from ..IUniV3Zap import IUniV3ZapTypes as IUniV3Zap

structs = {
    "IHyperdrive.Options": IHyperdrive.Options,
    "ISwapRouter.ExactInputParams": ISwapRouter.ExactInputParams,
    "IUniV3Zap.ZapInOptions": IUniV3Zap.ZapInOptions,
}

mockuniv3zap_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_swapRouter",
                    "type": "address",
                    "internalType": "contract ISwapRouter",
                },
                {
                    "name": "_weth",
                    "type": "address",
                    "internalType": "contract IWETH",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {"type": "receive", "stateMutability": "payable"},
        {
            "type": "function",
            "name": "addLiquidityZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_minLpSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minApr",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_maxApr",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "closeLongZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "closeShortZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "openLongZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minVaultSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "longAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "openShortZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_maxDeposit",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minVaultSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "deposit",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "redeemWithdrawalSharesZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_withdrawalShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutputPerShare",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "withdrawalSharesRedeemed",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeLiquidityZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutputPerShare",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "withdrawalShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "swapRouter",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract ISwapRouter",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "weth",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IWETH",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {"type": "error", "name": "InvalidInputToken", "inputs": []},
        {"type": "error", "name": "InvalidOutputToken", "inputs": []},
        {"type": "error", "name": "InvalidRecipient", "inputs": []},
        {"type": "error", "name": "InvalidSourceAmount", "inputs": []},
        {"type": "error", "name": "InvalidSourceAsset", "inputs": []},
        {"type": "error", "name": "InvalidSwap", "inputs": []},
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "InvalidTransfer", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "ReentrancyGuardReentrantCall", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {"type": "error", "name": "ShouldWrapAssets", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)


class MockUniV3ZapAddressEmptyCodeContractError(PypechainBaseError):
    """ContractError for AddressEmptyCode."""

    # Error name
    name: str = "AddressEmptyCode"
    # 4 byte error selector
    selector: str = "0x9996b315"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressEmptyCode(address)"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapAddressInsufficientBalanceContractError(PypechainBaseError):
    """ContractError for AddressInsufficientBalance."""

    # Error name
    name: str = "AddressInsufficientBalance"
    # 4 byte error selector
    selector: str = "0xcd786059"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressInsufficientBalance(address)"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapFailedInnerCallContractError(PypechainBaseError):
    """ContractError for FailedInnerCall."""

    # Error name
    name: str = "FailedInnerCall"
    # 4 byte error selector
    selector: str = "0x1425ea42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "FailedInnerCall()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidInputTokenContractError(PypechainBaseError):
    """ContractError for InvalidInputToken."""

    # Error name
    name: str = "InvalidInputToken"
    # 4 byte error selector
    selector: str = "0x2df9739b"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidInputToken()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidOutputTokenContractError(PypechainBaseError):
    """ContractError for InvalidOutputToken."""

    # Error name
    name: str = "InvalidOutputToken"
    # 4 byte error selector
    selector: str = "0x06202020"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidOutputToken()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidRecipientContractError(PypechainBaseError):
    """ContractError for InvalidRecipient."""

    # Error name
    name: str = "InvalidRecipient"
    # 4 byte error selector
    selector: str = "0x9c8d2cd2"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidRecipient()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidSourceAmountContractError(PypechainBaseError):
    """ContractError for InvalidSourceAmount."""

    # Error name
    name: str = "InvalidSourceAmount"
    # 4 byte error selector
    selector: str = "0x97e0deb1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSourceAmount()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidSourceAssetContractError(PypechainBaseError):
    """ContractError for InvalidSourceAsset."""

    # Error name
    name: str = "InvalidSourceAsset"
    # 4 byte error selector
    selector: str = "0x005605b7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSourceAsset()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidSwapContractError(PypechainBaseError):
    """ContractError for InvalidSwap."""

    # Error name
    name: str = "InvalidSwap"
    # 4 byte error selector
    selector: str = "0x11157667"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSwap()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidTimestampContractError(PypechainBaseError):
    """ContractError for InvalidTimestamp."""

    # Error name
    name: str = "InvalidTimestamp"
    # 4 byte error selector
    selector: str = "0xb7d09497"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimestamp()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidTransferContractError(PypechainBaseError):
    """ContractError for InvalidTransfer."""

    # Error name
    name: str = "InvalidTransfer"
    # 4 byte error selector
    selector: str = "0x2f352531"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTransfer()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapNotPayableContractError(PypechainBaseError):
    """ContractError for NotPayable."""

    # Error name
    name: str = "NotPayable"
    # 4 byte error selector
    selector: str = "0x1574f9f3"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "NotPayable()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapReentrancyGuardReentrantCallContractError(PypechainBaseError):
    """ContractError for ReentrancyGuardReentrantCall."""

    # Error name
    name: str = "ReentrancyGuardReentrantCall"
    # 4 byte error selector
    selector: str = "0x3ee5aeb5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ReentrancyGuardReentrantCall()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapSafeERC20FailedOperationContractError(PypechainBaseError):
    """ContractError for SafeERC20FailedOperation."""

    # Error name
    name: str = "SafeERC20FailedOperation"
    # 4 byte error selector
    selector: str = "0x5274afe7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SafeERC20FailedOperation(address)"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapShouldWrapAssetsContractError(PypechainBaseError):
    """ContractError for ShouldWrapAssets."""

    # Error name
    name: str = "ShouldWrapAssets"
    # 4 byte error selector
    selector: str = "0x7e4e2a42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ShouldWrapAssets()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapTransferFailedContractError(PypechainBaseError):
    """ContractError for TransferFailed."""

    # Error name
    name: str = "TransferFailed"
    # 4 byte error selector
    selector: str = "0x90b8ec18"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TransferFailed()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the MockUniV3Zap contract."""

    AddressEmptyCode: MockUniV3ZapAddressEmptyCodeContractError

    AddressInsufficientBalance: (
        MockUniV3ZapAddressInsufficientBalanceContractError
    )

    FailedInnerCall: MockUniV3ZapFailedInnerCallContractError

    InvalidInputToken: MockUniV3ZapInvalidInputTokenContractError

    InvalidOutputToken: MockUniV3ZapInvalidOutputTokenContractError

    InvalidRecipient: MockUniV3ZapInvalidRecipientContractError

    InvalidSourceAmount: MockUniV3ZapInvalidSourceAmountContractError

    InvalidSourceAsset: MockUniV3ZapInvalidSourceAssetContractError

    InvalidSwap: MockUniV3ZapInvalidSwapContractError

    InvalidTimestamp: MockUniV3ZapInvalidTimestampContractError

    InvalidTransfer: MockUniV3ZapInvalidTransferContractError

    NotPayable: MockUniV3ZapNotPayableContractError

    ReentrancyGuardReentrantCall: (
        MockUniV3ZapReentrancyGuardReentrantCallContractError
    )

    SafeERC20FailedOperation: MockUniV3ZapSafeERC20FailedOperationContractError

    ShouldWrapAssets: MockUniV3ZapShouldWrapAssetsContractError

    TransferFailed: MockUniV3ZapTransferFailedContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = MockUniV3ZapAddressEmptyCodeContractError()
        self.AddressInsufficientBalance = (
            MockUniV3ZapAddressInsufficientBalanceContractError()
        )
        self.FailedInnerCall = MockUniV3ZapFailedInnerCallContractError()
        self.InvalidInputToken = MockUniV3ZapInvalidInputTokenContractError()
        self.InvalidOutputToken = MockUniV3ZapInvalidOutputTokenContractError()
        self.InvalidRecipient = MockUniV3ZapInvalidRecipientContractError()
        self.InvalidSourceAmount = (
            MockUniV3ZapInvalidSourceAmountContractError()
        )
        self.InvalidSourceAsset = MockUniV3ZapInvalidSourceAssetContractError()
        self.InvalidSwap = MockUniV3ZapInvalidSwapContractError()
        self.InvalidTimestamp = MockUniV3ZapInvalidTimestampContractError()
        self.InvalidTransfer = MockUniV3ZapInvalidTransferContractError()
        self.NotPayable = MockUniV3ZapNotPayableContractError()
        self.ReentrancyGuardReentrantCall = (
            MockUniV3ZapReentrancyGuardReentrantCallContractError()
        )
        self.SafeERC20FailedOperation = (
            MockUniV3ZapSafeERC20FailedOperationContractError()
        )
        self.ShouldWrapAssets = MockUniV3ZapShouldWrapAssetsContractError()
        self.TransferFailed = MockUniV3ZapTransferFailedContractError()

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.FailedInnerCall,
            self.InvalidInputToken,
            self.InvalidOutputToken,
            self.InvalidRecipient,
            self.InvalidSourceAmount,
            self.InvalidSourceAsset,
            self.InvalidSwap,
            self.InvalidTimestamp,
            self.InvalidTransfer,
            self.NotPayable,
            self.ReentrancyGuardReentrantCall,
            self.SafeERC20FailedOperation,
            self.ShouldWrapAssets,
            self.TransferFailed,
        ]


class MockUniV3ZapAddLiquidityZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the addLiquidityZap(str,int,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "addLiquidityZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapAddLiquidityZapContractFunction(PypechainContractFunction):
    """ContractFunction for the addLiquidityZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addLiquidityZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _minLpSharePrice: int, _minApr: int, _maxApr: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> MockUniV3ZapAddLiquidityZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapAddLiquidityZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapAddLiquidityZapContractFunction0._type_signature: MockUniV3ZapAddLiquidityZapContractFunction0.factory(
                "MockUniV3ZapAddLiquidityZapContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapCloseLongZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the closeLongZap(str,int,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "closeLongZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapCloseLongZapContractFunction(PypechainContractFunction):
    """ContractFunction for the closeLongZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "closeLongZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _maturityTime: int, _bondAmount: int, _minOutput: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> MockUniV3ZapCloseLongZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapCloseLongZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapCloseLongZapContractFunction0._type_signature: MockUniV3ZapCloseLongZapContractFunction0.factory(
                "MockUniV3ZapCloseLongZapContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapCloseShortZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the closeShortZap(str,int,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "closeShortZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapCloseShortZapContractFunction(PypechainContractFunction):
    """ContractFunction for the closeShortZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "closeShortZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _maturityTime: int, _bondAmount: int, _minOutput: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> MockUniV3ZapCloseShortZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapCloseShortZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapCloseShortZapContractFunction0._type_signature: MockUniV3ZapCloseShortZapContractFunction0.factory(
                "MockUniV3ZapCloseShortZapContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapConvertToSharesContractFunction0(PypechainContractFunction):
    """ContractFunction for the convertToShares(str,int) method."""

    _function_name = "convertToShares"
    _type_signature = expand_struct_type_str(tuple(["str", "int"]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapConvertToSharesContractFunction(PypechainContractFunction):
    """ContractFunction for the convertToShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _baseAmount: int) -> MockUniV3ZapConvertToSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapConvertToSharesContractFunction0._type_signature: MockUniV3ZapConvertToSharesContractFunction0.factory(
                "MockUniV3ZapConvertToSharesContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapKindContractFunction0(PypechainContractFunction):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapKindContractFunction(PypechainContractFunction):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapKindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapKindContractFunction0._type_signature: MockUniV3ZapKindContractFunction0.factory(
                "MockUniV3ZapKindContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapNameContractFunction0(PypechainContractFunction):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapNameContractFunction(PypechainContractFunction):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapNameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapNameContractFunction0._type_signature: MockUniV3ZapNameContractFunction0.factory(
                "MockUniV3ZapNameContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapOpenLongZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the openLongZap(str,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "openLongZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenLongZap."""

        maturityTime: int
        longAmount: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapOpenLongZapContractFunction(PypechainContractFunction):
    """ContractFunction for the openLongZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "openLongZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _minOutput: int, _minVaultSharePrice: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> MockUniV3ZapOpenLongZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapOpenLongZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapOpenLongZapContractFunction0._type_signature: MockUniV3ZapOpenLongZapContractFunction0.factory(
                "MockUniV3ZapOpenLongZapContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapOpenShortZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the openShortZap(str,int,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "openShortZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenShortZap."""

        maturityTime: int
        deposit: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapOpenShortZapContractFunction(PypechainContractFunction):
    """ContractFunction for the openShortZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "openShortZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _bondAmount: int, _maxDeposit: int, _minVaultSharePrice: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> MockUniV3ZapOpenShortZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapOpenShortZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapOpenShortZapContractFunction0._type_signature: MockUniV3ZapOpenShortZapContractFunction0.factory(
                "MockUniV3ZapOpenShortZapContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the redeemWithdrawalSharesZap(str,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "redeemWithdrawalSharesZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for RedeemWithdrawalSharesZap."""

        proceeds: int
        withdrawalSharesRedeemed: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapRedeemWithdrawalSharesZapContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the redeemWithdrawalSharesZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "redeemWithdrawalSharesZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _withdrawalShares: int, _minOutputPerShare: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapRedeemWithdrawalSharesZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0._type_signature: MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0.factory(
                "MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockUniV3ZapRemoveLiquidityZapContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the removeLiquidityZap(str,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "removeLiquidityZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for RemoveLiquidityZap."""

        proceeds: int
        withdrawalShares: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapRemoveLiquidityZapContractFunction(PypechainContractFunction):
    """ContractFunction for the removeLiquidityZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeLiquidityZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _lpShares: int, _minOutputPerShare: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> MockUniV3ZapRemoveLiquidityZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapRemoveLiquidityZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapRemoveLiquidityZapContractFunction0._type_signature: MockUniV3ZapRemoveLiquidityZapContractFunction0.factory(
                "MockUniV3ZapRemoveLiquidityZapContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapSwapRouterContractFunction0(PypechainContractFunction):
    """ContractFunction for the swapRouter() method."""

    _function_name = "swapRouter"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapSwapRouterContractFunction(PypechainContractFunction):
    """ContractFunction for the swapRouter method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "swapRouter"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapSwapRouterContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapSwapRouterContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapSwapRouterContractFunction0._type_signature: MockUniV3ZapSwapRouterContractFunction0.factory(
                "MockUniV3ZapSwapRouterContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapVersionContractFunction0(PypechainContractFunction):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapVersionContractFunction(PypechainContractFunction):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapVersionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapVersionContractFunction0._type_signature: MockUniV3ZapVersionContractFunction0.factory(
                "MockUniV3ZapVersionContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapWethContractFunction0(PypechainContractFunction):
    """ContractFunction for the weth() method."""

    _function_name = "weth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapWethContractFunction(PypechainContractFunction):
    """ContractFunction for the weth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "weth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapWethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapWethContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockUniV3ZapWethContractFunction0._type_signature: MockUniV3ZapWethContractFunction0.factory(
                "MockUniV3ZapWethContractFunction0", **kwargs
            ),
        }
        return out


class MockUniV3ZapContractFunctions(ContractFunctions):
    """ContractFunctions for the MockUniV3Zap contract."""

    addLiquidityZap: MockUniV3ZapAddLiquidityZapContractFunction

    closeLongZap: MockUniV3ZapCloseLongZapContractFunction

    closeShortZap: MockUniV3ZapCloseShortZapContractFunction

    convertToShares: MockUniV3ZapConvertToSharesContractFunction

    kind: MockUniV3ZapKindContractFunction

    name: MockUniV3ZapNameContractFunction

    openLongZap: MockUniV3ZapOpenLongZapContractFunction

    openShortZap: MockUniV3ZapOpenShortZapContractFunction

    redeemWithdrawalSharesZap: (
        MockUniV3ZapRedeemWithdrawalSharesZapContractFunction
    )

    removeLiquidityZap: MockUniV3ZapRemoveLiquidityZapContractFunction

    swapRouter: MockUniV3ZapSwapRouterContractFunction

    version: MockUniV3ZapVersionContractFunction

    weth: MockUniV3ZapWethContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addLiquidityZap = (
            MockUniV3ZapAddLiquidityZapContractFunction.factory(
                "addLiquidityZap",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="addLiquidityZap",
            )
        )
        self.closeLongZap = MockUniV3ZapCloseLongZapContractFunction.factory(
            "closeLongZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="closeLongZap",
        )
        self.closeShortZap = MockUniV3ZapCloseShortZapContractFunction.factory(
            "closeShortZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="closeShortZap",
        )
        self.convertToShares = (
            MockUniV3ZapConvertToSharesContractFunction.factory(
                "convertToShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="convertToShares",
            )
        )
        self.kind = MockUniV3ZapKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kind",
        )
        self.name = MockUniV3ZapNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="name",
        )
        self.openLongZap = MockUniV3ZapOpenLongZapContractFunction.factory(
            "openLongZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="openLongZap",
        )
        self.openShortZap = MockUniV3ZapOpenShortZapContractFunction.factory(
            "openShortZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="openShortZap",
        )
        self.redeemWithdrawalSharesZap = (
            MockUniV3ZapRedeemWithdrawalSharesZapContractFunction.factory(
                "redeemWithdrawalSharesZap",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="redeemWithdrawalSharesZap",
            )
        )
        self.removeLiquidityZap = (
            MockUniV3ZapRemoveLiquidityZapContractFunction.factory(
                "removeLiquidityZap",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removeLiquidityZap",
            )
        )
        self.swapRouter = MockUniV3ZapSwapRouterContractFunction.factory(
            "swapRouter",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="swapRouter",
        )
        self.version = MockUniV3ZapVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )
        self.weth = MockUniV3ZapWethContractFunction.factory(
            "weth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="weth",
        )


class MockUniV3ZapContract(Contract):
    """A web3.py Contract class for the MockUniV3Zap contract."""

    abi: ABI = mockuniv3zap_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60c06040523480156200001157600080fd5b5060405162002eb038038062002eb083398101604081905262000034916200009e565b600160008190558390839083906200004d848262000229565b506001600160a01b039182166080521660a05250620002f592505050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200009957600080fd5b919050565b600080600060608486031215620000b457600080fd5b83516001600160401b0380821115620000cc57600080fd5b818601915086601f830112620000e157600080fd5b815181811115620000f657620000f66200006b565b604051601f8201601f19908116603f011681019083821181831017156200012157620001216200006b565b816040528281526020935089848487010111156200013e57600080fd5b600091505b8282101562000162578482018401518183018501529083019062000143565b60008484830101528097505050506200017d81870162000081565b935050506200018f6040850162000081565b90509250925092565b600181811c90821680620001ad57607f821691505b602082108103620001ce57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000224576000816000526020600020601f850160051c81016020861015620001ff5750805b601f850160051c820191505b8181101562000220578281556001016200020b565b5050505b505050565b81516001600160401b038111156200024557620002456200006b565b6200025d8162000256845462000198565b84620001d4565b602080601f8311600181146200029557600084156200027c5750858301515b600019600386901b1c1916600185901b17855562000220565b600085815260208120601f198616915b82811015620002c657888601518255948401946001909101908401620002a5565b5085821015620002e55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051612b3a62000376600039600081816101dc01528181610db101528181610f6e015281816114a301528181611a0101528181611b0d01528181611d3601528181611e3f0152611e8b0152600081816102a1015281816112f8015281816113c50152818161140d01528181611d6b0152611dc30152612b3a6000f3fe6080604052600436106100c65760003560e01c80634b22d5861161007f578063ba77fd3d11610059578063ba77fd3d1461026f578063c31c9c071461028f578063d4951838146102c3578063dcda7d3d146102e357600080fd5b80634b22d5861461021657806354fd4d50146102295780635bf840461461025c57600080fd5b806304baa00b146100f557806306fdde031461013f5780631fd5fcd61461015457806323003ba5146101755780633e5541f1146101aa5780633fc8cef3146101ca57600080fd5b366100f0576000546002146100ee57604051632f35253160e01b815260040160405180910390fd5b005b600080fd5b34801561010157600080fd5b50610129604051806040016040528060088152602001670556e6956335a61760c41b81525081565b6040516101369190612302565b60405180910390f35b34801561014b57600080fd5b50610129610303565b610167610162366004612354565b610391565b604051908152602001610136565b34801561018157600080fd5b506101956101903660046123f4565b610512565b60408051928352602083019190915201610136565b3480156101b657600080fd5b506101676101c5366004612491565b61063c565b3480156101d657600080fd5b506101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610136565b6101956102243660046124bd565b610651565b34801561023557600080fd5b5061012960405180604001604052806007815260200166076312e302e32360cc1b81525081565b61019561026a366004612354565b610779565b34801561027b57600080fd5b5061016761028a366004612547565b61097a565b34801561029b57600080fd5b506101fe7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cf57600080fd5b506101676102de366004612547565b610aab565b3480156102ef57600080fd5b506101956102fe3660046123f4565b610b67565b60018054610310906125ef565b80601f016020809104026020016040519081016040528092919081815260200182805461033c906125ef565b80156103895780601f1061035e57610100808354040283529160200191610389565b820191906000526020600020905b81548152906001019060200180831161036c57829003601f168201915b505050505081565b600061039b610c1d565b60006103a8888585610c47565b905060006103be6103b885612771565b83611143565b90508161043557610435896103d4836001612810565b6104256103e18880612823565b6103eb9080612843565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061158292505050565b6001600160a01b03169190611593565b6104456040860160208701612891565b15801561045d575061045d60a0850160808601612891565b1561046f5761046c8982611657565b90505b60008261047d57600061047f565b815b9050896001600160a01b0316634c2ac1d982848c8c8c8c6040518763ffffffff1660e01b81526004016104b6959493929190612953565b60206040518083038185885af11580156104d4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104f9919061297e565b93505050506105086001600055565b9695505050505050565b60008061051d610c1d565b6000610533898761052d88612997565b8761184e565b604051630e07895b60e11b81529091506001600160a01b038a1690631c0f12b69061056990600090339030908e906004016129a3565b600060405180830381600087803b15801561058357600080fd5b505af1158015610597573d6000803e3d6000fd5b50506040516332f04d0d60e21b81526001600160a01b038c16925063cbc1343491506105cb908b908b908b906004016129c8565b60408051808303816000875af11580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d91906129e7565b9250610624905061061d86612997565b8286611ad0565b9250506106316001600055565b965096945050505050565b60006106488383611657565b90505b92915050565b60008061065c610c1d565b6000610669888686610c47565b905060006106796103b886612771565b90508161069c5761069c8961068f836001612810565b6104256103e18980612823565b6106ac6040870160208801612891565b1580156106c457506106c460a0860160808701612891565b156106d6576106d38982611657565b90505b6000826106e45760006106e6565b815b9050896001600160a01b031663cba2e58d82848c8c8c6040518663ffffffff1660e01b815260040161071b9493929190612a0b565b604080518083038185885af1158015610738573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061075d91906129e7565b909550935050505061076f6001600055565b9550959350505050565b600080610784610c1d565b6000610791898686610c47565b905060006107a16103b886612771565b905060006107b26103e18780612823565b9050826107d9576107d98b6107c8846001612810565b6001600160a01b0384169190611593565b6000836107e75760006107e9565b825b90508b6001600160a01b031663dbbe8070828d8d8d8d6040518663ffffffff1660e01b815260040161081e9493929190612a0b565b604080518083038185885af115801561083b573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061086091906129e7565b909650945083156108e3574780156108dd57604051600090339083908381818185875af1925050503d80600081146108b4576040519150601f19603f3d011682016040523d82523d6000602084013e6108b9565b606091505b50509050806108db576040516312171d8360e31b815260040160405180910390fd5b505b5061096c565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e919061297e565b9050801561096a5761096a6001600160a01b0384163383611fd7565b505b505050506106316001600055565b6000610984610c1d565b600061099a898661099487612997565b8661184e565b9050886001600160a01b0316631c0f12b66109b660028b61200d565b33308b6040518563ffffffff1660e01b81526004016109d894939291906129a3565b600060405180830381600087803b1580156109f257600080fd5b505af1158015610a06573d6000803e3d6000fd5b50506040516329b23fc160e01b81526001600160a01b038c1692506329b23fc19150610a3c908b908b908b908b90600401612a0b565b6020604051808303816000875af1158015610a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7f919061297e565b50610a93610a8c85612997565b8285611ad0565b915050610aa06001600055565b979650505050505050565b6000610ab5610c1d565b6000610ac5898661099487612997565b9050886001600160a01b0316631c0f12b6610ae160018b61200d565b33308b6040518563ffffffff1660e01b8152600401610b0394939291906129a3565b600060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b505060405163ded0623160e01b81526001600160a01b038c16925063ded062319150610a3c908b908b908b908b90600401612a0b565b600080610b72610c1d565b6000610b82898761052d88612997565b604051630e07895b60e11b81529091506001600160a01b038a1690631c0f12b690610bbb90600360f81b90339030908e906004016129a3565b600060405180830381600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505060405163074a6de960e01b81526001600160a01b038c16925063074a6de991506105cb908b908b908b906004016129c8565b600260005403610c4057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600030610c548380612823565b610c65906040810190602001612a30565b6001600160a01b031614610c8c57604051634e46966960e11b815260040160405180910390fd5b6000610cdf610c9b8480612823565b610ca59080612843565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061204292505050565b90506000610cf06103e18580612823565b9050806001600160a01b0316826001600160a01b031603610d2457604051631115766760e01b815260040160405180910390fd5b610d346080850160608601612891565b15610e7e576001600160a01b038216610d536040860160208701612a30565b6001600160a01b031603610d7957604051625605b760e01b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610d9e6040860160208701612a30565b6001600160a01b0316148015610de657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15610e0357604051625605b760e01b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610e286040860160208701612a30565b6001600160a01b0316148015610e5c57508360400135341080610e5c5750610e508480612823565b60600135846040013514155b15610e7957604051625605b760e01b815260040160405180910390fd5b610eef565b6001600160a01b038216610e986040860160208701612a30565b6001600160a01b031614610ebe57604051625605b760e01b815260040160405180910390fd5b610ec88480612823565b60600135846040013514610eef576040516397e0deb160e01b815260040160405180910390fd5b6000866001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f539190612a4d565b9050610f656040870160208801612891565b8015610fa257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b8015610fca57506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610fdb576001935050505061113c565b610feb6040870160208801612891565b801561106a5750866001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190612a4d565b6001600160a01b0316826001600160a01b031614155b15611087576040516231010160e51b815260040160405180910390fd5b6110976040870160208801612891565b1580156111175750866001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111019190612a4d565b6001600160a01b0316826001600160a01b031614155b15611134576040516231010160e51b815260040160405180910390fd5b600093505050505b9392505050565b81515160200151600090819081908190600160601b9004905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031686602001516001600160a01b0316036111ad5785516060015161119d9034612a6a565b86516060015190935091506113f4565b85606001511561132b576111df3330886040015189602001516001600160a01b0316612050909392919063ffffffff16565b61120981876040015160016111f49190612810565b60208901516001600160a01b03169190611593565b6040868101519051630ea598cb60e41b815260048101919091526001600160a01b0382169063ea598cb0906024016020604051808303816000875af1158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a919061297e565b506040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa1580156112bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e3919061297e565b865160609081019190915286510151611323907f0000000000000000000000000000000000000000000000000000000000000000906107c8906001612810565b3492506113f4565b6040860151611348906001600160a01b0383169033903090612050565b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b0919061297e565b8651606090810191909152865101516113f0907f0000000000000000000000000000000000000000000000000000000000000000906107c8906001612810565b3492505b855160405163c04b8d5960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c04b8d5991859161144291600401612a7d565b60206040518083038185885af1158015611460573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611485919061297e565b9350841561150857604051632e1a7d4d60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156114ef57600080fd5b505af1158015611503573d6000803e3d6000fd5b505050505b821561157957604051600090339085908381818185875af1925050503d8060008114611550576040519150601f19603f3d011682016040523d82523d6000602084013e611555565b606091505b5050905080611577576040516312171d8360e31b815260040160405180910390fd5b505b50505092915050565b805101600c0151600160601b900490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526115e48482612089565b611651576040516001600160a01b0384811660248301526000604483015261164791869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612131565b6116518482612131565b50505050565b600046600114801561168557506001600160a01b03831673d7e470043241c10970953bd8374ee6238e77d735145b1561176157826001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190612a4d565b6001600160a01b03166319208451836040518263ffffffff1660e01b815260040161171991815260200190565b602060405180830381865afa158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a919061297e565b905061064b565b46600114801561178d57506001600160a01b03831673324395d5d835f84a02a75aa26814f6fd22f25698145b1561182157826001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f49190612a4d565b6001600160a01b031663c6e6f592836040518263ffffffff1660e01b815260040161171991815260200190565b6040516363737ac960e11b8152600481018390526001600160a01b0384169063c6e6f59290602401611719565b60003061185e6020860186612a30565b6001600160a01b03161461188557604051634e46966960e11b815260040160405180910390fd5b825160208101518151909101600c0151600160601b9182900491600091049050806001600160a01b0316826001600160a01b0316036118d757604051631115766760e01b815260040160405180910390fd5b60006118e96040880160208901612891565b1561195757876001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119509190612a4d565b90506119bc565b876001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b99190612a4d565b90505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03821601611a5657846119ff57604051633f27152160e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614611a5157604051632df9739b60e01b815260040160405180910390fd5b610aa0565b84158015611a765750826001600160a01b0316816001600160a01b031614155b15611a9457604051632df9739b60e01b815260040160405180910390fd5b848015611ab25750826001600160a01b0316816001600160a01b0316145b15610aa057604051632df9739b60e01b815260040160405180910390fd5b825160200151600090600160601b90048215611c7f5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601611b84577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015611b6657600080fd5b505af1158015611b7a573d6000803e3d6000fd5b5050505050611c7f565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef919061297e565b9050611c1182611c00836001612810565b6001600160a01b0388169190611593565b604051630ea598cb60e41b8152600481018290526001600160a01b0383169063ea598cb0906024016020604051808303816000875af1158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c919061297e565b50505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cea919061297e565b9050611d0986608001518760600151836121999092919063ffffffff16565b6080870152606086018190528551805101600c01516020870151600160601b909104906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603611d66573060208901525b611dac7f000000000000000000000000000000000000000000000000000000000000000089606001516001611d9b9190612810565b6001600160a01b0387169190611593565b60405163c04b8d5960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c04b8d5990611df8908b90600401612a7d565b6020604051808303816000875af1158015611e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3b919061297e565b94507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603611fcc576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d9082906370a0823190602401602060405180830381865afa158015611ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f06919061297e565b6040518263ffffffff1660e01b8152600401611f2491815260200190565b600060405180830381600087803b158015611f3e57600080fd5b505af1158015611f52573d6000803e3d6000fd5b505050506000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114611fa3576040519150601f19603f3d011682016040523d82523d6000602084013e611fa8565b606091505b5050905080611fca576040516312171d8360e31b815260040160405180910390fd5b505b505050509392505050565b6040516001600160a01b0383811660248301526044820183905261200891859182169063a9059cbb90606401611615565b505050565b60006001600160f81b038211156120375760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60200151600160601b900490565b6040516001600160a01b0384811660248301528381166044830152606482018390526116519186918216906323b872dd90608401611615565b6000806000846001600160a01b0316846040516120a69190612ad5565b6000604051808303816000865af19150503d80600081146120e3576040519150601f19603f3d011682016040523d82523d6000602084013e6120e8565b606091505b50915091508180156121125750805115806121125750808060200190518101906121129190612ae7565b801561212857506000856001600160a01b03163b115b95945050505050565b60006121466001600160a01b038416836121b7565b9050805160001415801561216b5750808060200190518101906121699190612ae7565b155b1561200857604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b60008260001904841183021582026121b057600080fd5b5091020490565b60606106488383600084600080856001600160a01b031684866040516121dd9190612ad5565b60006040518083038185875af1925050503d806000811461221a576040519150601f19603f3d011682016040523d82523d6000602084013e61221f565b606091505b509150915061050886838360608261223f5761223a82612286565b61113c565b815115801561225657506001600160a01b0384163b155b1561227f57604051639996b31560e01b81526001600160a01b0385166004820152602401612190565b508061113c565b8051156122965780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60005b838110156122cd5781810151838201526020016122b5565b50506000910152565b600081518084526122ee8160208601602086016122b2565b601f01601f19169290920160200192915050565b60208152600061064860208301846122d6565b6001600160a01b03811681146122af57600080fd5b60006060828403121561233c57600080fd5b50919050565b600060a0828403121561233c57600080fd5b60008060008060008060c0878903121561236d57600080fd5b863561237881612315565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff808211156123aa57600080fd5b6123b68a838b0161232a565b935060a08901359150808211156123cc57600080fd5b506123d989828a01612342565b9150509295509295509295565b80151581146122af57600080fd5b60008060008060008060c0878903121561240d57600080fd5b863561241881612315565b95506020870135945060408701359350606087013567ffffffffffffffff8082111561244357600080fd5b61244f8a838b0161232a565b9450608089013591508082111561246557600080fd5b5061247289828a01612342565b92505060a0870135612483816123e6565b809150509295509295509295565b600080604083850312156124a457600080fd5b82356124af81612315565b946020939093013593505050565b600080600080600060a086880312156124d557600080fd5b85356124e081612315565b94506020860135935060408601359250606086013567ffffffffffffffff8082111561250b57600080fd5b61251789838a0161232a565b9350608088013591508082111561252d57600080fd5b5061253a88828901612342565b9150509295509295909350565b600080600080600080600060e0888a03121561256257600080fd5b873561256d81612315565b9650602088013595506040880135945060608801359350608088013567ffffffffffffffff8082111561259f57600080fd5b6125ab8b838c0161232a565b945060a08a01359150808211156125c157600080fd5b506125ce8a828b01612342565b92505060c08801356125df816123e6565b8091505092959891949750929550565b600181811c9082168061260357607f821691505b60208210810361233c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561265c5761265c612623565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561268b5761268b612623565b604052919050565b803561269e81612315565b919050565b600060a082840312156126b557600080fd5b6126bd612639565b9050813567ffffffffffffffff808211156126d757600080fd5b818401915084601f8301126126eb57600080fd5b81356020828211156126ff576126ff612623565b612711601f8301601f19168201612662565b9250818352868183860101111561272757600080fd5b81818501828501376000818385010152828552612745818701612693565b818601525050505060408201356040820152606082013560608201526080820135608082015292915050565b600060a0823603121561278357600080fd5b61278b612639565b823567ffffffffffffffff8111156127a257600080fd5b6127ae368286016126a3565b82525060208301356127bf81612315565b60208201526040838101359082015260608301356127dc816123e6565b606082015260808301356127ef816123e6565b608082015292915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561064b5761064b6127fa565b60008235609e1983360301811261283957600080fd5b9190910192915050565b6000808335601e1984360301811261285a57600080fd5b83018035915067ffffffffffffffff82111561287557600080fd5b60200191503681900382131561288a57600080fd5b9250929050565b6000602082840312156128a357600080fd5b813561113c816123e6565b600081356128bb81612315565b6001600160a01b0316835260208201356128d4816123e6565b15156020840152604082013536839003601e190181126128f357600080fd5b820160208101903567ffffffffffffffff81111561291057600080fd5b80360382131561291f57600080fd5b60606040860152806060860152808260808701376000608082870101526080601f19601f8301168601019250505092915050565b85815284602082015283604082015282606082015260a060808201526000610aa060a08301846128ae565b60006020828403121561299057600080fd5b5051919050565b600061064b36836126a3565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b83815282602082015260606040820152600061212860608301846128ae565b600080604083850312156129fa57600080fd5b505080516020909101519092909150565b84815283602082015282604082015260806060820152600061050860808301846128ae565b600060208284031215612a4257600080fd5b813561113c81612315565b600060208284031215612a5f57600080fd5b815161113c81612315565b8181038181111561064b5761064b6127fa565b602081526000825160a06020840152612a9960c08401826122d6565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600082516128398184602087016122b2565b600060208284031215612af957600080fd5b815161113c816123e656fea26469706673582212203ed63de3d7c091b46ae091cbd5e66f5d75930813b8f2de6ab821b4d5ba1f50fe64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MockUniV3ZapContractFunctions(mockuniv3zap_abi, self.w3, address)  # type: ignore

        self.errors = MockUniV3ZapContractErrors()

    errors: MockUniV3ZapContractErrors = MockUniV3ZapContractErrors()

    functions: MockUniV3ZapContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        swapRouter: str

        weth: str

    @classmethod
    def constructor(cls, name: str, swapRouter: str, weth: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(swapRouter),
            dataclass_to_tuple(weth),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockUniV3ZapContractFunctions(
            mockuniv3zap_abi, w3, None
        )
        contract.errors = MockUniV3ZapContractErrors()

        return contract
