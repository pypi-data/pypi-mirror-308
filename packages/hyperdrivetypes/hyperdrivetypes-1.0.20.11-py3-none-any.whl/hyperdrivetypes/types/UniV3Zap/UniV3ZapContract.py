"""A web3.py Contract class for the UniV3Zap contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..ISwapRouter import ISwapRouterTypes as ISwapRouter
from ..IUniV3Zap import IUniV3ZapTypes as IUniV3Zap

structs = {
    "IHyperdrive.Options": IHyperdrive.Options,
    "ISwapRouter.ExactInputParams": ISwapRouter.ExactInputParams,
    "IUniV3Zap.ZapInOptions": IUniV3Zap.ZapInOptions,
}

univ3zap_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_swapRouter",
                    "type": "address",
                    "internalType": "contract ISwapRouter",
                },
                {
                    "name": "_weth",
                    "type": "address",
                    "internalType": "contract IWETH",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {"type": "receive", "stateMutability": "payable"},
        {
            "type": "function",
            "name": "addLiquidityZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_minLpSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minApr",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_maxApr",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "closeLongZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "closeShortZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "openLongZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minVaultSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "longAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "openShortZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_maxDeposit",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minVaultSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "deposit",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "redeemWithdrawalSharesZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_withdrawalShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutputPerShare",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "withdrawalSharesRedeemed",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeLiquidityZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutputPerShare",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "withdrawalShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "swapRouter",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract ISwapRouter",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "weth",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IWETH",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {"type": "error", "name": "InvalidInputToken", "inputs": []},
        {"type": "error", "name": "InvalidOutputToken", "inputs": []},
        {"type": "error", "name": "InvalidRecipient", "inputs": []},
        {"type": "error", "name": "InvalidSourceAmount", "inputs": []},
        {"type": "error", "name": "InvalidSourceAsset", "inputs": []},
        {"type": "error", "name": "InvalidSwap", "inputs": []},
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "InvalidTransfer", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "ReentrancyGuardReentrantCall", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {"type": "error", "name": "ShouldWrapAssets", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)


class UniV3ZapAddressEmptyCodeContractError(PypechainBaseError):
    """ContractError for AddressEmptyCode."""

    # Error name
    name: str = "AddressEmptyCode"
    # 4 byte error selector
    selector: str = "0x9996b315"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressEmptyCode(address)"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapAddressInsufficientBalanceContractError(PypechainBaseError):
    """ContractError for AddressInsufficientBalance."""

    # Error name
    name: str = "AddressInsufficientBalance"
    # 4 byte error selector
    selector: str = "0xcd786059"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressInsufficientBalance(address)"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapFailedInnerCallContractError(PypechainBaseError):
    """ContractError for FailedInnerCall."""

    # Error name
    name: str = "FailedInnerCall"
    # 4 byte error selector
    selector: str = "0x1425ea42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "FailedInnerCall()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapInvalidInputTokenContractError(PypechainBaseError):
    """ContractError for InvalidInputToken."""

    # Error name
    name: str = "InvalidInputToken"
    # 4 byte error selector
    selector: str = "0x2df9739b"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidInputToken()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapInvalidOutputTokenContractError(PypechainBaseError):
    """ContractError for InvalidOutputToken."""

    # Error name
    name: str = "InvalidOutputToken"
    # 4 byte error selector
    selector: str = "0x06202020"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidOutputToken()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapInvalidRecipientContractError(PypechainBaseError):
    """ContractError for InvalidRecipient."""

    # Error name
    name: str = "InvalidRecipient"
    # 4 byte error selector
    selector: str = "0x9c8d2cd2"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidRecipient()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapInvalidSourceAmountContractError(PypechainBaseError):
    """ContractError for InvalidSourceAmount."""

    # Error name
    name: str = "InvalidSourceAmount"
    # 4 byte error selector
    selector: str = "0x97e0deb1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSourceAmount()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapInvalidSourceAssetContractError(PypechainBaseError):
    """ContractError for InvalidSourceAsset."""

    # Error name
    name: str = "InvalidSourceAsset"
    # 4 byte error selector
    selector: str = "0x005605b7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSourceAsset()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapInvalidSwapContractError(PypechainBaseError):
    """ContractError for InvalidSwap."""

    # Error name
    name: str = "InvalidSwap"
    # 4 byte error selector
    selector: str = "0x11157667"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSwap()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapInvalidTimestampContractError(PypechainBaseError):
    """ContractError for InvalidTimestamp."""

    # Error name
    name: str = "InvalidTimestamp"
    # 4 byte error selector
    selector: str = "0xb7d09497"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimestamp()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapInvalidTransferContractError(PypechainBaseError):
    """ContractError for InvalidTransfer."""

    # Error name
    name: str = "InvalidTransfer"
    # 4 byte error selector
    selector: str = "0x2f352531"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTransfer()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapNotPayableContractError(PypechainBaseError):
    """ContractError for NotPayable."""

    # Error name
    name: str = "NotPayable"
    # 4 byte error selector
    selector: str = "0x1574f9f3"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "NotPayable()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapReentrancyGuardReentrantCallContractError(PypechainBaseError):
    """ContractError for ReentrancyGuardReentrantCall."""

    # Error name
    name: str = "ReentrancyGuardReentrantCall"
    # 4 byte error selector
    selector: str = "0x3ee5aeb5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ReentrancyGuardReentrantCall()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapSafeERC20FailedOperationContractError(PypechainBaseError):
    """ContractError for SafeERC20FailedOperation."""

    # Error name
    name: str = "SafeERC20FailedOperation"
    # 4 byte error selector
    selector: str = "0x5274afe7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SafeERC20FailedOperation(address)"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapShouldWrapAssetsContractError(PypechainBaseError):
    """ContractError for ShouldWrapAssets."""

    # Error name
    name: str = "ShouldWrapAssets"
    # 4 byte error selector
    selector: str = "0x7e4e2a42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ShouldWrapAssets()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapTransferFailedContractError(PypechainBaseError):
    """ContractError for TransferFailed."""

    # Error name
    name: str = "TransferFailed"
    # 4 byte error selector
    selector: str = "0x90b8ec18"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TransferFailed()"
    # Error input types
    abi: ABI = univ3zap_abi


class UniV3ZapContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the UniV3Zap contract."""

    AddressEmptyCode: UniV3ZapAddressEmptyCodeContractError

    AddressInsufficientBalance: UniV3ZapAddressInsufficientBalanceContractError

    FailedInnerCall: UniV3ZapFailedInnerCallContractError

    InvalidInputToken: UniV3ZapInvalidInputTokenContractError

    InvalidOutputToken: UniV3ZapInvalidOutputTokenContractError

    InvalidRecipient: UniV3ZapInvalidRecipientContractError

    InvalidSourceAmount: UniV3ZapInvalidSourceAmountContractError

    InvalidSourceAsset: UniV3ZapInvalidSourceAssetContractError

    InvalidSwap: UniV3ZapInvalidSwapContractError

    InvalidTimestamp: UniV3ZapInvalidTimestampContractError

    InvalidTransfer: UniV3ZapInvalidTransferContractError

    NotPayable: UniV3ZapNotPayableContractError

    ReentrancyGuardReentrantCall: (
        UniV3ZapReentrancyGuardReentrantCallContractError
    )

    SafeERC20FailedOperation: UniV3ZapSafeERC20FailedOperationContractError

    ShouldWrapAssets: UniV3ZapShouldWrapAssetsContractError

    TransferFailed: UniV3ZapTransferFailedContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = UniV3ZapAddressEmptyCodeContractError()
        self.AddressInsufficientBalance = (
            UniV3ZapAddressInsufficientBalanceContractError()
        )
        self.FailedInnerCall = UniV3ZapFailedInnerCallContractError()
        self.InvalidInputToken = UniV3ZapInvalidInputTokenContractError()
        self.InvalidOutputToken = UniV3ZapInvalidOutputTokenContractError()
        self.InvalidRecipient = UniV3ZapInvalidRecipientContractError()
        self.InvalidSourceAmount = UniV3ZapInvalidSourceAmountContractError()
        self.InvalidSourceAsset = UniV3ZapInvalidSourceAssetContractError()
        self.InvalidSwap = UniV3ZapInvalidSwapContractError()
        self.InvalidTimestamp = UniV3ZapInvalidTimestampContractError()
        self.InvalidTransfer = UniV3ZapInvalidTransferContractError()
        self.NotPayable = UniV3ZapNotPayableContractError()
        self.ReentrancyGuardReentrantCall = (
            UniV3ZapReentrancyGuardReentrantCallContractError()
        )
        self.SafeERC20FailedOperation = (
            UniV3ZapSafeERC20FailedOperationContractError()
        )
        self.ShouldWrapAssets = UniV3ZapShouldWrapAssetsContractError()
        self.TransferFailed = UniV3ZapTransferFailedContractError()

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.FailedInnerCall,
            self.InvalidInputToken,
            self.InvalidOutputToken,
            self.InvalidRecipient,
            self.InvalidSourceAmount,
            self.InvalidSourceAsset,
            self.InvalidSwap,
            self.InvalidTimestamp,
            self.InvalidTransfer,
            self.NotPayable,
            self.ReentrancyGuardReentrantCall,
            self.SafeERC20FailedOperation,
            self.ShouldWrapAssets,
            self.TransferFailed,
        ]


class UniV3ZapAddLiquidityZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the addLiquidityZap(str,int,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "addLiquidityZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = UniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapAddLiquidityZapContractFunction(PypechainContractFunction):
    """ContractFunction for the addLiquidityZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addLiquidityZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _minLpSharePrice: int, _minApr: int, _maxApr: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> UniV3ZapAddLiquidityZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapAddLiquidityZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapAddLiquidityZapContractFunction0._type_signature: UniV3ZapAddLiquidityZapContractFunction0.factory(
                "UniV3ZapAddLiquidityZapContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapCloseLongZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the closeLongZap(str,int,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "closeLongZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = UniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapCloseLongZapContractFunction(PypechainContractFunction):
    """ContractFunction for the closeLongZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "closeLongZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _maturityTime: int, _bondAmount: int, _minOutput: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> UniV3ZapCloseLongZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapCloseLongZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapCloseLongZapContractFunction0._type_signature: UniV3ZapCloseLongZapContractFunction0.factory(
                "UniV3ZapCloseLongZapContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapCloseShortZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the closeShortZap(str,int,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "closeShortZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = UniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapCloseShortZapContractFunction(PypechainContractFunction):
    """ContractFunction for the closeShortZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "closeShortZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _maturityTime: int, _bondAmount: int, _minOutput: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> UniV3ZapCloseShortZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapCloseShortZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapCloseShortZapContractFunction0._type_signature: UniV3ZapCloseShortZapContractFunction0.factory(
                "UniV3ZapCloseShortZapContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapKindContractFunction0(PypechainContractFunction):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = UniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapKindContractFunction(PypechainContractFunction):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> UniV3ZapKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapKindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapKindContractFunction0._type_signature: UniV3ZapKindContractFunction0.factory(
                "UniV3ZapKindContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapNameContractFunction0(PypechainContractFunction):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = UniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapNameContractFunction(PypechainContractFunction):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> UniV3ZapNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapNameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapNameContractFunction0._type_signature: UniV3ZapNameContractFunction0.factory(
                "UniV3ZapNameContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapOpenLongZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the openLongZap(str,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "openLongZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = UniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenLongZap."""

        maturityTime: int
        longAmount: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapOpenLongZapContractFunction(PypechainContractFunction):
    """ContractFunction for the openLongZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "openLongZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _minOutput: int, _minVaultSharePrice: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> UniV3ZapOpenLongZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapOpenLongZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapOpenLongZapContractFunction0._type_signature: UniV3ZapOpenLongZapContractFunction0.factory(
                "UniV3ZapOpenLongZapContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapOpenShortZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the openShortZap(str,int,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "openShortZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = UniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenShortZap."""

        maturityTime: int
        deposit: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapOpenShortZapContractFunction(PypechainContractFunction):
    """ContractFunction for the openShortZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "openShortZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _bondAmount: int, _maxDeposit: int, _minVaultSharePrice: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> UniV3ZapOpenShortZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapOpenShortZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapOpenShortZapContractFunction0._type_signature: UniV3ZapOpenShortZapContractFunction0.factory(
                "UniV3ZapOpenShortZapContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapRedeemWithdrawalSharesZapContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the redeemWithdrawalSharesZap(str,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "redeemWithdrawalSharesZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = UniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for RedeemWithdrawalSharesZap."""

        proceeds: int
        withdrawalSharesRedeemed: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapRedeemWithdrawalSharesZapContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the redeemWithdrawalSharesZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "redeemWithdrawalSharesZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _withdrawalShares: int, _minOutputPerShare: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> UniV3ZapRedeemWithdrawalSharesZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapRedeemWithdrawalSharesZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapRedeemWithdrawalSharesZapContractFunction0._type_signature: UniV3ZapRedeemWithdrawalSharesZapContractFunction0.factory(
                "UniV3ZapRedeemWithdrawalSharesZapContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapRemoveLiquidityZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the removeLiquidityZap(str,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "removeLiquidityZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = UniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for RemoveLiquidityZap."""

        proceeds: int
        withdrawalShares: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapRemoveLiquidityZapContractFunction(PypechainContractFunction):
    """ContractFunction for the removeLiquidityZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeLiquidityZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _lpShares: int, _minOutputPerShare: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> UniV3ZapRemoveLiquidityZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapRemoveLiquidityZapContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapRemoveLiquidityZapContractFunction0._type_signature: UniV3ZapRemoveLiquidityZapContractFunction0.factory(
                "UniV3ZapRemoveLiquidityZapContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapSwapRouterContractFunction0(PypechainContractFunction):
    """ContractFunction for the swapRouter() method."""

    _function_name = "swapRouter"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = UniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapSwapRouterContractFunction(PypechainContractFunction):
    """ContractFunction for the swapRouter method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "swapRouter"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> UniV3ZapSwapRouterContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapSwapRouterContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapSwapRouterContractFunction0._type_signature: UniV3ZapSwapRouterContractFunction0.factory(
                "UniV3ZapSwapRouterContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapVersionContractFunction0(PypechainContractFunction):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = UniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapVersionContractFunction(PypechainContractFunction):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> UniV3ZapVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapVersionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapVersionContractFunction0._type_signature: UniV3ZapVersionContractFunction0.factory(
                "UniV3ZapVersionContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapWethContractFunction0(PypechainContractFunction):
    """ContractFunction for the weth() method."""

    _function_name = "weth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = UniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class UniV3ZapWethContractFunction(PypechainContractFunction):
    """ContractFunction for the weth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "weth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> UniV3ZapWethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> UniV3ZapWethContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            UniV3ZapWethContractFunction0._type_signature: UniV3ZapWethContractFunction0.factory(
                "UniV3ZapWethContractFunction0", **kwargs
            ),
        }
        return out


class UniV3ZapContractFunctions(ContractFunctions):
    """ContractFunctions for the UniV3Zap contract."""

    addLiquidityZap: UniV3ZapAddLiquidityZapContractFunction

    closeLongZap: UniV3ZapCloseLongZapContractFunction

    closeShortZap: UniV3ZapCloseShortZapContractFunction

    kind: UniV3ZapKindContractFunction

    name: UniV3ZapNameContractFunction

    openLongZap: UniV3ZapOpenLongZapContractFunction

    openShortZap: UniV3ZapOpenShortZapContractFunction

    redeemWithdrawalSharesZap: UniV3ZapRedeemWithdrawalSharesZapContractFunction

    removeLiquidityZap: UniV3ZapRemoveLiquidityZapContractFunction

    swapRouter: UniV3ZapSwapRouterContractFunction

    version: UniV3ZapVersionContractFunction

    weth: UniV3ZapWethContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addLiquidityZap = UniV3ZapAddLiquidityZapContractFunction.factory(
            "addLiquidityZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="addLiquidityZap",
        )
        self.closeLongZap = UniV3ZapCloseLongZapContractFunction.factory(
            "closeLongZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="closeLongZap",
        )
        self.closeShortZap = UniV3ZapCloseShortZapContractFunction.factory(
            "closeShortZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="closeShortZap",
        )
        self.kind = UniV3ZapKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kind",
        )
        self.name = UniV3ZapNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="name",
        )
        self.openLongZap = UniV3ZapOpenLongZapContractFunction.factory(
            "openLongZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="openLongZap",
        )
        self.openShortZap = UniV3ZapOpenShortZapContractFunction.factory(
            "openShortZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="openShortZap",
        )
        self.redeemWithdrawalSharesZap = (
            UniV3ZapRedeemWithdrawalSharesZapContractFunction.factory(
                "redeemWithdrawalSharesZap",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="redeemWithdrawalSharesZap",
            )
        )
        self.removeLiquidityZap = (
            UniV3ZapRemoveLiquidityZapContractFunction.factory(
                "removeLiquidityZap",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removeLiquidityZap",
            )
        )
        self.swapRouter = UniV3ZapSwapRouterContractFunction.factory(
            "swapRouter",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="swapRouter",
        )
        self.version = UniV3ZapVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )
        self.weth = UniV3ZapWethContractFunction.factory(
            "weth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="weth",
        )


class UniV3ZapContract(Contract):
    """A web3.py Contract class for the UniV3Zap contract."""

    abi: ABI = univ3zap_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60c06040523480156200001157600080fd5b5060405162002e2b38038062002e2b833981016040819052620000349162000094565b600160008190556200004784826200021f565b506001600160a01b039182166080521660a05250620002eb565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200008f57600080fd5b919050565b600080600060608486031215620000aa57600080fd5b83516001600160401b0380821115620000c257600080fd5b818601915086601f830112620000d757600080fd5b815181811115620000ec57620000ec62000061565b604051601f8201601f19908116603f0116810190838211818310171562000117576200011762000061565b816040528281526020935089848487010111156200013457600080fd5b600091505b8282101562000158578482018401518183018501529083019062000139565b60008484830101528097505050506200017381870162000077565b93505050620001856040850162000077565b90509250925092565b600181811c90821680620001a357607f821691505b602082108103620001c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021a576000816000526020600020601f850160051c81016020861015620001f55750805b601f850160051c820191505b81811015620002165782815560010162000201565b5050505b505050565b81516001600160401b038111156200023b576200023b62000061565b62000253816200024c84546200018e565b84620001ca565b602080601f8311600181146200028b5760008415620002725750858301515b600019600386901b1c1916600185901b17855562000216565b600085815260208120601f198616915b82811015620002bc578886015182559484019460019091019084016200029b565b5085821015620002db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051612abf6200036c600039600081816101a101528181610d6101528181610f1e01528181611453015281816119b201528181611abe01528181611ce701528181611df00152611e3c015260008181610266015281816112a801528181611375015281816113bd01528181611d1c0152611d740152612abf6000f3fe6080604052600436106100ab5760003560e01c806354fd4d501161006457806354fd4d50146101ee5780635bf8404614610221578063ba77fd3d14610234578063c31c9c0714610254578063d495183814610288578063dcda7d3d146102a857600080fd5b806304baa00b146100da57806306fdde03146101245780631fd5fcd61461013957806323003ba51461015a5780633fc8cef31461018f5780634b22d586146101db57600080fd5b366100d5576000546002146100d357604051632f35253160e01b815260040160405180910390fd5b005b600080fd5b3480156100e657600080fd5b5061010e604051806040016040528060088152602001670556e6956335a61760c41b81525081565b60405161011b91906122b3565b60405180910390f35b34801561013057600080fd5b5061010e6102c8565b61014c610147366004612305565b610356565b60405190815260200161011b565b34801561016657600080fd5b5061017a6101753660046123a5565b6104d7565b6040805192835260208301919091520161011b565b34801561019b57600080fd5b506101c37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161011b565b61017a6101e9366004612442565b610601565b3480156101fa57600080fd5b5061010e60405180604001604052806007815260200166076312e302e32360cc1b81525081565b61017a61022f366004612305565b610729565b34801561024057600080fd5b5061014c61024f3660046124cc565b61092a565b34801561026057600080fd5b506101c37f000000000000000000000000000000000000000000000000000000000000000081565b34801561029457600080fd5b5061014c6102a33660046124cc565b610a5b565b3480156102b457600080fd5b5061017a6102c33660046123a5565b610b17565b600180546102d590612574565b80601f016020809104026020016040519081016040528092919081815260200182805461030190612574565b801561034e5780601f106103235761010080835404028352916020019161034e565b820191906000526020600020905b81548152906001019060200180831161033157829003601f168201915b505050505081565b6000610360610bcd565b600061036d888585610bf7565b9050600061038361037d856126f6565b836110f3565b9050816103fa576103fa89610399836001612795565b6103ea6103a688806127a8565b6103b090806127c8565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061153392505050565b6001600160a01b03169190611544565b61040a6040860160208701612816565b158015610422575061042260a0850160808601612816565b15610434576104318982611608565b90505b600082610442576000610444565b815b9050896001600160a01b0316634c2ac1d982848c8c8c8c6040518763ffffffff1660e01b815260040161047b9594939291906128d8565b60206040518083038185885af1158015610499573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104be9190612903565b93505050506104cd6001600055565b9695505050505050565b6000806104e2610bcd565b60006104f889876104f28861291c565b876117ff565b604051630e07895b60e11b81529091506001600160a01b038a1690631c0f12b69061052e90600090339030908e90600401612928565b600060405180830381600087803b15801561054857600080fd5b505af115801561055c573d6000803e3d6000fd5b50506040516332f04d0d60e21b81526001600160a01b038c16925063cbc134349150610590908b908b908b9060040161294d565b60408051808303816000875af11580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d2919061296c565b92506105e990506105e28661291c565b8286611a81565b9250506105f66001600055565b965096945050505050565b60008061060c610bcd565b6000610619888686610bf7565b9050600061062961037d866126f6565b90508161064c5761064c8961063f836001612795565b6103ea6103a689806127a8565b61065c6040870160208801612816565b158015610674575061067460a0860160808701612816565b15610686576106838982611608565b90505b600082610694576000610696565b815b9050896001600160a01b031663cba2e58d82848c8c8c6040518663ffffffff1660e01b81526004016106cb9493929190612990565b604080518083038185885af11580156106e8573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061070d919061296c565b909550935050505061071f6001600055565b9550959350505050565b600080610734610bcd565b6000610741898686610bf7565b9050600061075161037d866126f6565b905060006107626103a687806127a8565b905082610789576107898b610778846001612795565b6001600160a01b0384169190611544565b600083610797576000610799565b825b90508b6001600160a01b031663dbbe8070828d8d8d8d6040518663ffffffff1660e01b81526004016107ce9493929190612990565b604080518083038185885af11580156107eb573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610810919061296c565b909650945083156108935747801561088d57604051600090339083908381818185875af1925050503d8060008114610864576040519150601f19603f3d011682016040523d82523d6000602084013e610869565b606091505b505090508061088b576040516312171d8360e31b815260040160405180910390fd5b505b5061091c565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe9190612903565b9050801561091a5761091a6001600160a01b0384163383611f88565b505b505050506105f66001600055565b6000610934610bcd565b600061094a89866109448761291c565b866117ff565b9050886001600160a01b0316631c0f12b661096660028b611fbe565b33308b6040518563ffffffff1660e01b81526004016109889493929190612928565b600060405180830381600087803b1580156109a257600080fd5b505af11580156109b6573d6000803e3d6000fd5b50506040516329b23fc160e01b81526001600160a01b038c1692506329b23fc191506109ec908b908b908b908b90600401612990565b6020604051808303816000875af1158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f9190612903565b50610a43610a3c8561291c565b8285611a81565b915050610a506001600055565b979650505050505050565b6000610a65610bcd565b6000610a7589866109448761291c565b9050886001600160a01b0316631c0f12b6610a9160018b611fbe565b33308b6040518563ffffffff1660e01b8152600401610ab39493929190612928565b600060405180830381600087803b158015610acd57600080fd5b505af1158015610ae1573d6000803e3d6000fd5b505060405163ded0623160e01b81526001600160a01b038c16925063ded0623191506109ec908b908b908b908b90600401612990565b600080610b22610bcd565b6000610b3289876104f28861291c565b604051630e07895b60e11b81529091506001600160a01b038a1690631c0f12b690610b6b90600360f81b90339030908e90600401612928565b600060405180830381600087803b158015610b8557600080fd5b505af1158015610b99573d6000803e3d6000fd5b505060405163074a6de960e01b81526001600160a01b038c16925063074a6de99150610590908b908b908b9060040161294d565b600260005403610bf057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600030610c0483806127a8565b610c159060408101906020016129b5565b6001600160a01b031614610c3c57604051634e46966960e11b815260040160405180910390fd5b6000610c8f610c4b84806127a8565b610c5590806127c8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ff392505050565b90506000610ca06103a685806127a8565b9050806001600160a01b0316826001600160a01b031603610cd457604051631115766760e01b815260040160405180910390fd5b610ce46080850160608601612816565b15610e2e576001600160a01b038216610d0360408601602087016129b5565b6001600160a01b031603610d2957604051625605b760e01b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610d4e60408601602087016129b5565b6001600160a01b0316148015610d9657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15610db357604051625605b760e01b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610dd860408601602087016129b5565b6001600160a01b0316148015610e0c57508360400135341080610e0c5750610e0084806127a8565b60600135846040013514155b15610e2957604051625605b760e01b815260040160405180910390fd5b610e9f565b6001600160a01b038216610e4860408601602087016129b5565b6001600160a01b031614610e6e57604051625605b760e01b815260040160405180910390fd5b610e7884806127a8565b60600135846040013514610e9f576040516397e0deb160e01b815260040160405180910390fd5b6000866001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0391906129d2565b9050610f156040870160208801612816565b8015610f5257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b8015610f7a57506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610f8b57600193505050506110ec565b610f9b6040870160208801612816565b801561101a5750866001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100491906129d2565b6001600160a01b0316826001600160a01b031614155b15611037576040516231010160e51b815260040160405180910390fd5b6110476040870160208801612816565b1580156110c75750866001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b191906129d2565b6001600160a01b0316826001600160a01b031614155b156110e4576040516231010160e51b815260040160405180910390fd5b600093505050505b9392505050565b81515160200151600090819081908190600160601b9004905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031686602001516001600160a01b03160361115d5785516060015161114d90346129ef565b86516060015190935091506113a4565b8560600151156112db5761118f3330886040015189602001516001600160a01b0316612001909392919063ffffffff16565b6111b981876040015160016111a49190612795565b60208901516001600160a01b03169190611544565b6040868101519051630ea598cb60e41b815260048101919091526001600160a01b0382169063ea598cb0906024016020604051808303816000875af1158015611206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122a9190612903565b506040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa15801561126f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112939190612903565b8651606090810191909152865101516112d3907f000000000000000000000000000000000000000000000000000000000000000090610778906001612795565b3492506113a4565b60408601516112f8906001600160a01b0383169033903090612001565b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa15801561133c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113609190612903565b8651606090810191909152865101516113a0907f000000000000000000000000000000000000000000000000000000000000000090610778906001612795565b3492505b855160405163c04b8d5960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c04b8d599185916113f291600401612a02565b60206040518083038185885af1158015611410573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114359190612903565b935084156114b857604051632e1a7d4d60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561149f57600080fd5b505af11580156114b3573d6000803e3d6000fd5b505050505b821561152957604051600090339085908381818185875af1925050503d8060008114611500576040519150601f19603f3d011682016040523d82523d6000602084013e611505565b606091505b5050905080611527576040516312171d8360e31b815260040160405180910390fd5b505b5050505b92915050565b805101600c0151600160601b900490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611595848261203a565b611602576040516001600160a01b038481166024830152600060448301526115f891869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506120e2565b61160284826120e2565b50505050565b600046600114801561163657506001600160a01b03831673d7e470043241c10970953bd8374ee6238e77d735145b1561171257826001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169d91906129d2565b6001600160a01b03166319208451836040518263ffffffff1660e01b81526004016116ca91815260200190565b602060405180830381865afa1580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b9190612903565b905061152d565b46600114801561173e57506001600160a01b03831673324395d5d835f84a02a75aa26814f6fd22f25698145b156117d257826001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a591906129d2565b6001600160a01b031663c6e6f592836040518263ffffffff1660e01b81526004016116ca91815260200190565b6040516363737ac960e11b8152600481018390526001600160a01b0384169063c6e6f592906024016116ca565b60003061180f60208601866129b5565b6001600160a01b03161461183657604051634e46966960e11b815260040160405180910390fd5b825160208101518151909101600c0151600160601b9182900491600091049050806001600160a01b0316826001600160a01b03160361188857604051631115766760e01b815260040160405180910390fd5b600061189a6040880160208901612816565b1561190857876001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190191906129d2565b905061196d565b876001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a91906129d2565b90505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03821601611a0757846119b057604051633f27152160e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614611a0257604051632df9739b60e01b815260040160405180910390fd5b610a50565b84158015611a275750826001600160a01b0316816001600160a01b031614155b15611a4557604051632df9739b60e01b815260040160405180910390fd5b848015611a635750826001600160a01b0316816001600160a01b0316145b15610a5057604051632df9739b60e01b815260040160405180910390fd5b825160200151600090600160601b90048215611c305773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601611b35577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015611b1757600080fd5b505af1158015611b2b573d6000803e3d6000fd5b5050505050611c30565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015611b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba09190612903565b9050611bc282611bb1836001612795565b6001600160a01b0388169190611544565b604051630ea598cb60e41b8152600481018290526001600160a01b0383169063ea598cb0906024016020604051808303816000875af1158015611c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2d9190612903565b50505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9b9190612903565b9050611cba866080015187606001518361214a9092919063ffffffff16565b6080870152606086018190528551805101600c01516020870151600160601b909104906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603611d17573060208901525b611d5d7f000000000000000000000000000000000000000000000000000000000000000089606001516001611d4c9190612795565b6001600160a01b0387169190611544565b60405163c04b8d5960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c04b8d5990611da9908b90600401612a02565b6020604051808303816000875af1158015611dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dec9190612903565b94507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603611f7d576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d9082906370a0823190602401602060405180830381865afa158015611e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb79190612903565b6040518263ffffffff1660e01b8152600401611ed591815260200190565b600060405180830381600087803b158015611eef57600080fd5b505af1158015611f03573d6000803e3d6000fd5b505050506000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114611f54576040519150601f19603f3d011682016040523d82523d6000602084013e611f59565b606091505b5050905080611f7b576040516312171d8360e31b815260040160405180910390fd5b505b505050509392505050565b6040516001600160a01b03838116602483015260448201839052611fb991859182169063a9059cbb906064016115c6565b505050565b60006001600160f81b03821115611fe85760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60200151600160601b900490565b6040516001600160a01b0384811660248301528381166044830152606482018390526116029186918216906323b872dd906084016115c6565b6000806000846001600160a01b0316846040516120579190612a5a565b6000604051808303816000865af19150503d8060008114612094576040519150601f19603f3d011682016040523d82523d6000602084013e612099565b606091505b50915091508180156120c35750805115806120c35750808060200190518101906120c39190612a6c565b80156120d957506000856001600160a01b03163b115b95945050505050565b60006120f76001600160a01b03841683612168565b9050805160001415801561211c57508080602001905181019061211a9190612a6c565b155b15611fb957604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b600082600019048411830215820261216157600080fd5b5091020490565b60606110ec8383600084600080856001600160a01b0316848660405161218e9190612a5a565b60006040518083038185875af1925050503d80600081146121cb576040519150601f19603f3d011682016040523d82523d6000602084013e6121d0565b606091505b50915091506104cd8683836060826121f0576121eb82612237565b6110ec565b815115801561220757506001600160a01b0384163b155b1561223057604051639996b31560e01b81526001600160a01b0385166004820152602401612141565b50806110ec565b8051156122475780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60005b8381101561227e578181015183820152602001612266565b50506000910152565b6000815180845261229f816020860160208601612263565b601f01601f19169290920160200192915050565b6020815260006110ec6020830184612287565b6001600160a01b038116811461226057600080fd5b6000606082840312156122ed57600080fd5b50919050565b600060a082840312156122ed57600080fd5b60008060008060008060c0878903121561231e57600080fd5b8635612329816122c6565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff8082111561235b57600080fd5b6123678a838b016122db565b935060a089013591508082111561237d57600080fd5b5061238a89828a016122f3565b9150509295509295509295565b801515811461226057600080fd5b60008060008060008060c087890312156123be57600080fd5b86356123c9816122c6565b95506020870135945060408701359350606087013567ffffffffffffffff808211156123f457600080fd5b6124008a838b016122db565b9450608089013591508082111561241657600080fd5b5061242389828a016122f3565b92505060a087013561243481612397565b809150509295509295509295565b600080600080600060a0868803121561245a57600080fd5b8535612465816122c6565b94506020860135935060408601359250606086013567ffffffffffffffff8082111561249057600080fd5b61249c89838a016122db565b935060808801359150808211156124b257600080fd5b506124bf888289016122f3565b9150509295509295909350565b600080600080600080600060e0888a0312156124e757600080fd5b87356124f2816122c6565b9650602088013595506040880135945060608801359350608088013567ffffffffffffffff8082111561252457600080fd5b6125308b838c016122db565b945060a08a013591508082111561254657600080fd5b506125538a828b016122f3565b92505060c088013561256481612397565b8091505092959891949750929550565b600181811c9082168061258857607f821691505b6020821081036122ed57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156125e1576125e16125a8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612610576126106125a8565b604052919050565b8035612623816122c6565b919050565b600060a0828403121561263a57600080fd5b6126426125be565b9050813567ffffffffffffffff8082111561265c57600080fd5b818401915084601f83011261267057600080fd5b8135602082821115612684576126846125a8565b612696601f8301601f191682016125e7565b925081835286818386010111156126ac57600080fd5b818185018285013760008183850101528285526126ca818701612618565b818601525050505060408201356040820152606082013560608201526080820135608082015292915050565b600060a0823603121561270857600080fd5b6127106125be565b823567ffffffffffffffff81111561272757600080fd5b61273336828601612628565b8252506020830135612744816122c6565b602082015260408381013590820152606083013561276181612397565b6060820152608083013561277481612397565b608082015292915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561152d5761152d61277f565b60008235609e198336030181126127be57600080fd5b9190910192915050565b6000808335601e198436030181126127df57600080fd5b83018035915067ffffffffffffffff8211156127fa57600080fd5b60200191503681900382131561280f57600080fd5b9250929050565b60006020828403121561282857600080fd5b81356110ec81612397565b60008135612840816122c6565b6001600160a01b03168352602082013561285981612397565b15156020840152604082013536839003601e1901811261287857600080fd5b820160208101903567ffffffffffffffff81111561289557600080fd5b8036038213156128a457600080fd5b60606040860152806060860152808260808701376000608082870101526080601f19601f8301168601019250505092915050565b85815284602082015283604082015282606082015260a060808201526000610a5060a0830184612833565b60006020828403121561291557600080fd5b5051919050565b600061152d3683612628565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b8381528260208201526060604082015260006120d96060830184612833565b6000806040838503121561297f57600080fd5b505080516020909101519092909150565b8481528360208201528260408201526080606082015260006104cd6080830184612833565b6000602082840312156129c757600080fd5b81356110ec816122c6565b6000602082840312156129e457600080fd5b81516110ec816122c6565b8181038181111561152d5761152d61277f565b602081526000825160a06020840152612a1e60c0840182612287565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600082516127be818460208701612263565b600060208284031215612a7e57600080fd5b81516110ec8161239756fea2646970667358221220c69e2a7ded49be4a18988071abd9a9a6cab91bcf5cd00b853760dd8ad700d54f64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = UniV3ZapContractFunctions(univ3zap_abi, self.w3, address)  # type: ignore

        self.errors = UniV3ZapContractErrors()

    errors: UniV3ZapContractErrors = UniV3ZapContractErrors()

    functions: UniV3ZapContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        swapRouter: str

        weth: str

    @classmethod
    def constructor(cls, name: str, swapRouter: str, weth: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(swapRouter),
            dataclass_to_tuple(weth),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = UniV3ZapContractFunctions(univ3zap_abi, w3, None)
        contract.errors = UniV3ZapContractErrors()

        return contract
