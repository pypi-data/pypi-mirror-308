"""A web3.py Contract class for the MockFixedPointMath contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

mockfixedpointmath_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "divDown",
            "inputs": [
                {"name": "a", "type": "uint256", "internalType": "uint256"},
                {"name": "b", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "divUp",
            "inputs": [
                {"name": "a", "type": "uint256", "internalType": "uint256"},
                {"name": "b", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "exp",
            "inputs": [
                {"name": "x", "type": "int256", "internalType": "int256"}
            ],
            "outputs": [
                {"name": "r", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "ln",
            "inputs": [
                {"name": "x", "type": "int256", "internalType": "int256"}
            ],
            "outputs": [
                {"name": "", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "mulDivDown",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "d", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "z", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "mulDivUp",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "d", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "z", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "mulDown",
            "inputs": [
                {"name": "a", "type": "uint256", "internalType": "uint256"},
                {"name": "b", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "mulUp",
            "inputs": [
                {"name": "a", "type": "uint256", "internalType": "uint256"},
                {"name": "b", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "pow",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "updateWeightedAverage",
            "inputs": [
                {
                    "name": "_average",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_totalWeight",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_delta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_deltaWeight",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_isAdding", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "average",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
    ],
)


class MockFixedPointMathExpInvalidExponentContractError(PypechainBaseError):
    """ContractError for ExpInvalidExponent."""

    # Error name
    name: str = "ExpInvalidExponent"
    # 4 byte error selector
    selector: str = "0x73a2d6b1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ExpInvalidExponent()"
    # Error input types
    abi: ABI = mockfixedpointmath_abi


class MockFixedPointMathLnInvalidInputContractError(PypechainBaseError):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = mockfixedpointmath_abi


class MockFixedPointMathUnsafeCastToInt256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = mockfixedpointmath_abi


class MockFixedPointMathContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the MockFixedPointMath contract."""

    ExpInvalidExponent: MockFixedPointMathExpInvalidExponentContractError

    LnInvalidInput: MockFixedPointMathLnInvalidInputContractError

    UnsafeCastToInt256: MockFixedPointMathUnsafeCastToInt256ContractError

    def __init__(
        self,
    ) -> None:
        self.ExpInvalidExponent = (
            MockFixedPointMathExpInvalidExponentContractError()
        )
        self.LnInvalidInput = MockFixedPointMathLnInvalidInputContractError()
        self.UnsafeCastToInt256 = (
            MockFixedPointMathUnsafeCastToInt256ContractError()
        )

        self._all = [
            self.ExpInvalidExponent,
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
        ]


class MockFixedPointMathDivDownContractFunction0(PypechainContractFunction):
    """ContractFunction for the divDown(int,int) method."""

    _function_name = "divDown"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathDivDownContractFunction(PypechainContractFunction):
    """ContractFunction for the divDown method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "divDown"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, a: int, b: int) -> MockFixedPointMathDivDownContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathDivDownContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathDivDownContractFunction0._type_signature: MockFixedPointMathDivDownContractFunction0.factory(
                "MockFixedPointMathDivDownContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathDivUpContractFunction0(PypechainContractFunction):
    """ContractFunction for the divUp(int,int) method."""

    _function_name = "divUp"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathDivUpContractFunction(PypechainContractFunction):
    """ContractFunction for the divUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "divUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, a: int, b: int) -> MockFixedPointMathDivUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathDivUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathDivUpContractFunction0._type_signature: MockFixedPointMathDivUpContractFunction0.factory(
                "MockFixedPointMathDivUpContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathExpContractFunction0(PypechainContractFunction):
    """ContractFunction for the exp(int) method."""

    _function_name = "exp"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathExpContractFunction(PypechainContractFunction):
    """ContractFunction for the exp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "exp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int) -> MockFixedPointMathExpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathExpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathExpContractFunction0._type_signature: MockFixedPointMathExpContractFunction0.factory(
                "MockFixedPointMathExpContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathLnContractFunction0(PypechainContractFunction):
    """ContractFunction for the ln(int) method."""

    _function_name = "ln"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathLnContractFunction(PypechainContractFunction):
    """ContractFunction for the ln method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "ln"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int) -> MockFixedPointMathLnContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathLnContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathLnContractFunction0._type_signature: MockFixedPointMathLnContractFunction0.factory(
                "MockFixedPointMathLnContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathMulDivDownContractFunction0(PypechainContractFunction):
    """ContractFunction for the mulDivDown(int,int,int) method."""

    _function_name = "mulDivDown"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int"]), structs
    )
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathMulDivDownContractFunction(PypechainContractFunction):
    """ContractFunction for the mulDivDown method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "mulDivDown"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int, y: int, d: int) -> MockFixedPointMathMulDivDownContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathMulDivDownContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathMulDivDownContractFunction0._type_signature: MockFixedPointMathMulDivDownContractFunction0.factory(
                "MockFixedPointMathMulDivDownContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathMulDivUpContractFunction0(PypechainContractFunction):
    """ContractFunction for the mulDivUp(int,int,int) method."""

    _function_name = "mulDivUp"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int"]), structs
    )
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathMulDivUpContractFunction(PypechainContractFunction):
    """ContractFunction for the mulDivUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "mulDivUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int, y: int, d: int) -> MockFixedPointMathMulDivUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathMulDivUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathMulDivUpContractFunction0._type_signature: MockFixedPointMathMulDivUpContractFunction0.factory(
                "MockFixedPointMathMulDivUpContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathMulDownContractFunction0(PypechainContractFunction):
    """ContractFunction for the mulDown(int,int) method."""

    _function_name = "mulDown"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathMulDownContractFunction(PypechainContractFunction):
    """ContractFunction for the mulDown method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "mulDown"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, a: int, b: int) -> MockFixedPointMathMulDownContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathMulDownContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathMulDownContractFunction0._type_signature: MockFixedPointMathMulDownContractFunction0.factory(
                "MockFixedPointMathMulDownContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathMulUpContractFunction0(PypechainContractFunction):
    """ContractFunction for the mulUp(int,int) method."""

    _function_name = "mulUp"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathMulUpContractFunction(PypechainContractFunction):
    """ContractFunction for the mulUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "mulUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, a: int, b: int) -> MockFixedPointMathMulUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathMulUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathMulUpContractFunction0._type_signature: MockFixedPointMathMulUpContractFunction0.factory(
                "MockFixedPointMathMulUpContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathPowContractFunction0(PypechainContractFunction):
    """ContractFunction for the pow(int,int) method."""

    _function_name = "pow"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathPowContractFunction(PypechainContractFunction):
    """ContractFunction for the pow method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "pow"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int, y: int) -> MockFixedPointMathPowContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathPowContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathPowContractFunction0._type_signature: MockFixedPointMathPowContractFunction0.factory(
                "MockFixedPointMathPowContractFunction0", **kwargs
            ),
        }
        return out


class MockFixedPointMathUpdateWeightedAverageContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateWeightedAverage(int,int,int,int,bool) method."""

    _function_name = "updateWeightedAverage"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "bool"]), structs
    )
    _error_class = MockFixedPointMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockFixedPointMathUpdateWeightedAverageContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateWeightedAverage method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateWeightedAverage"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _average: int, _totalWeight: int, _delta: int, _deltaWeight: int, _isAdding: bool) -> MockFixedPointMathUpdateWeightedAverageContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockFixedPointMathUpdateWeightedAverageContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockFixedPointMathUpdateWeightedAverageContractFunction0._type_signature: MockFixedPointMathUpdateWeightedAverageContractFunction0.factory(
                "MockFixedPointMathUpdateWeightedAverageContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockFixedPointMathContractFunctions(ContractFunctions):
    """ContractFunctions for the MockFixedPointMath contract."""

    divDown: MockFixedPointMathDivDownContractFunction

    divUp: MockFixedPointMathDivUpContractFunction

    exp: MockFixedPointMathExpContractFunction

    ln: MockFixedPointMathLnContractFunction

    mulDivDown: MockFixedPointMathMulDivDownContractFunction

    mulDivUp: MockFixedPointMathMulDivUpContractFunction

    mulDown: MockFixedPointMathMulDownContractFunction

    mulUp: MockFixedPointMathMulUpContractFunction

    pow: MockFixedPointMathPowContractFunction

    updateWeightedAverage: (
        MockFixedPointMathUpdateWeightedAverageContractFunction
    )

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.divDown = MockFixedPointMathDivDownContractFunction.factory(
            "divDown",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="divDown",
        )
        self.divUp = MockFixedPointMathDivUpContractFunction.factory(
            "divUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="divUp",
        )
        self.exp = MockFixedPointMathExpContractFunction.factory(
            "exp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="exp",
        )
        self.ln = MockFixedPointMathLnContractFunction.factory(
            "ln",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="ln",
        )
        self.mulDivDown = MockFixedPointMathMulDivDownContractFunction.factory(
            "mulDivDown",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="mulDivDown",
        )
        self.mulDivUp = MockFixedPointMathMulDivUpContractFunction.factory(
            "mulDivUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="mulDivUp",
        )
        self.mulDown = MockFixedPointMathMulDownContractFunction.factory(
            "mulDown",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="mulDown",
        )
        self.mulUp = MockFixedPointMathMulUpContractFunction.factory(
            "mulUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="mulUp",
        )
        self.pow = MockFixedPointMathPowContractFunction.factory(
            "pow",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="pow",
        )
        self.updateWeightedAverage = (
            MockFixedPointMathUpdateWeightedAverageContractFunction.factory(
                "updateWeightedAverage",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateWeightedAverage",
            )
        )


class MockFixedPointMathContract(Contract):
    """A web3.py Contract class for the MockFixedPointMath contract."""

    abi: ABI = mockfixedpointmath_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b50610938806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639ba5f52e116100665780639ba5f52e14610114578063b67bee0414610127578063cbe8623f1461013a578063e46751e31461014d578063f3e4f87c1461016057600080fd5b80630c9b9881146100a357806312bd6ac0146100c85780632e4c697f146100db57806381e5f7c9146100ee5780638e6f235314610101575b600080fd5b6100b66100b13660046107d1565b610173565b60405190815260200160405180910390f35b6100b66100d63660046107f3565b61018a565b6100b66100e93660046107d1565b6101a1565b6100b66100fc36600461081f565b6101ae565b6100b661010f366004610871565b6101c9565b6100b66101223660046107d1565b6101dc565b6100b66101353660046107f3565b6101e9565b6100b66101483660046107d1565b6101f7565b6100b661015b366004610871565b610204565b6100b661016e3660046107d1565b610210565b600080610180848461021d565b9150505b92915050565b600080610198858585610232565b95945050505050565b6000806101808484610258565b6000806101be87878787876102cd565b979650505050505050565b6000806101d583610371565b9392505050565b60008061018084846105a0565b6000806101988585856105b1565b60008061018084846105cf565b6000806101d5836105e4565b6000806101808484610779565b60006101d58383670de0b6b3a76400006105b1565b600082600019048411830215820261024957600080fd5b50910281810615159190040190565b6000816000036102715750670de0b6b3a7640000610184565b8260000361028157506000610184565b600061028c8361078e565b905060006102a161029c8661078e565b610371565b90508181026102b8670de0b6b3a7640000826108a0565b90506102c3816105e4565b9695505050505050565b6000826000036102de575084610198565b8115610337576103156102f184876108dc565b6102fb858761021d565b610305888a61021d565b61030f91906108dc565b906105a0565b9050600061032385886107bc565b905080821015610331578091505b50610198565b82850361034657506000610198565b6102c361035384876108ef565b61035d8587610779565b610367888a61021d565b61030f91906108ef565b60008082136103935760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019061041f9084901c61078e565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b60006101d583670de0b6b3a7640000845b60008260001904841183021582026105c857600080fd5b5091020490565b60006101d583670de0b6b3a764000084610232565b6000680248ce36a70cb26b3e1982136105ff57506000919050565b680755bf798b4a1bf1e58212610628576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906102c374029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c61078e565b60006101d58383670de0b6b3a7640000610232565b60006001600160ff1b038211156107b85760405163396ea70160e11b815260040160405180910390fd5b5090565b60008183116107cb57826101d5565b50919050565b600080604083850312156107e457600080fd5b50508035926020909101359150565b60008060006060848603121561080857600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561083757600080fd5b853594506020860135935060408601359250606086013591506080860135801515811461086357600080fd5b809150509295509295909350565b60006020828403121561088357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000826108bd57634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156108d7576108d761088a565b500590565b808201808211156101845761018461088a565b818103818111156101845761018461088a56fea26469706673582212200a2cec4cd88035ad14ec7e2bc3f6e0ebf01db380342bcaf650186eac385e1e6c64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MockFixedPointMathContractFunctions(mockfixedpointmath_abi, self.w3, address)  # type: ignore

        self.errors = MockFixedPointMathContractErrors()

    errors: MockFixedPointMathContractErrors = (
        MockFixedPointMathContractErrors()
    )

    functions: MockFixedPointMathContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockFixedPointMathContractFunctions(
            mockfixedpointmath_abi, w3, None
        )
        contract.errors = MockFixedPointMathContractErrors()

        return contract
