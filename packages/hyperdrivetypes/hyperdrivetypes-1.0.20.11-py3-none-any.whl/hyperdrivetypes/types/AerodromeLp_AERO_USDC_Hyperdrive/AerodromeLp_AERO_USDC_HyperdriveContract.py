"""A web3.py Contract class for the AerodromeLp_AERO_USDC_Hyperdrive contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..AerodromeLpConversions import AerodromeLpConversionsContract
from ..LPMath import LPMathContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from .AerodromeLp_AERO_USDC_HyperdriveTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    DeployedEvent,
    InitializeEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SweepEvent,
    TransferSingleEvent,
)

structs = {
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}

aerodromelp_aero_usdc_hyperdrive_abi: ABI = cast(
    ABI,
    [
        {"type": "constructor", "inputs": [], "stateMutability": "nonpayable"},
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__deployAndInitialize__asBase",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__deployAndInitialize__asShares",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__getReward",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__kind",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__name",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__pricePerVaultShare",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__version",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_close_long_with_base",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_long_with_shares",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_short_with_base",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_short_with_shares",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_getters",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_open_long_with_base",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_long_with_eth",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_long_with_shares",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_base",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_eth",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_shares",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_vaultSharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_maturity_with_base",
            "inputs": [
                {
                    "name": "_basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_maturity_with_shares",
            "inputs": [
                {
                    "name": "_vaultSharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_withdrawal_shares_with_base",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_withdrawal_shares_with_shares",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_maturity_with_base",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_maturity_with_shares",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_directSweep",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "InsufficientLiquidity", "inputs": []},
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint256", "inputs": []},
        {"type": "error", "name": "UnsupportedToken", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class AerodromeLp_AERO_USDC_HyperdriveExpInvalidExponentContractError(
    PypechainBaseError
):
    """ContractError for ExpInvalidExponent."""

    # Error name
    name: str = "ExpInvalidExponent"
    # 4 byte error selector
    selector: str = "0x73a2d6b1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ExpInvalidExponent()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveInsufficientLiquidityContractError(
    PypechainBaseError
):
    """ContractError for InsufficientLiquidity."""

    # Error name
    name: str = "InsufficientLiquidity"
    # 4 byte error selector
    selector: str = "0xbb55fd27"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientLiquidity()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveInvalidTimestampContractError(
    PypechainBaseError
):
    """ContractError for InvalidTimestamp."""

    # Error name
    name: str = "InvalidTimestamp"
    # 4 byte error selector
    selector: str = "0xb7d09497"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimestamp()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveLnInvalidInputContractError(
    PypechainBaseError
):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveUnsafeCastToInt256ContractError(
    PypechainBaseError
):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveUnsafeCastToUint256ContractError(
    PypechainBaseError
):
    """ContractError for UnsafeCastToUint256."""

    # Error name
    name: str = "UnsafeCastToUint256"
    # 4 byte error selector
    selector: str = "0xe3a26e20"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToUint256()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveUnsupportedTokenContractError(
    PypechainBaseError
):
    """ContractError for UnsupportedToken."""

    # Error name
    name: str = "UnsupportedToken"
    # 4 byte error selector
    selector: str = "0x6a172882"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsupportedToken()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveWhaleBalanceExceededContractError(
    PypechainBaseError
):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveWhaleIsContractContractError(
    PypechainBaseError
):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi


class AerodromeLp_AERO_USDC_HyperdriveContractErrors(
    PypechainBaseContractErrors
):
    """ContractErrors for the AerodromeLp_AERO_USDC_Hyperdrive contract."""

    ExpInvalidExponent: (
        AerodromeLp_AERO_USDC_HyperdriveExpInvalidExponentContractError
    )

    InsufficientLiquidity: (
        AerodromeLp_AERO_USDC_HyperdriveInsufficientLiquidityContractError
    )

    InvalidTimestamp: (
        AerodromeLp_AERO_USDC_HyperdriveInvalidTimestampContractError
    )

    LnInvalidInput: AerodromeLp_AERO_USDC_HyperdriveLnInvalidInputContractError

    UnsafeCastToInt256: (
        AerodromeLp_AERO_USDC_HyperdriveUnsafeCastToInt256ContractError
    )

    UnsafeCastToUint256: (
        AerodromeLp_AERO_USDC_HyperdriveUnsafeCastToUint256ContractError
    )

    UnsupportedToken: (
        AerodromeLp_AERO_USDC_HyperdriveUnsupportedTokenContractError
    )

    WhaleBalanceExceeded: (
        AerodromeLp_AERO_USDC_HyperdriveWhaleBalanceExceededContractError
    )

    WhaleIsContract: (
        AerodromeLp_AERO_USDC_HyperdriveWhaleIsContractContractError
    )

    def __init__(
        self,
    ) -> None:
        self.ExpInvalidExponent = (
            AerodromeLp_AERO_USDC_HyperdriveExpInvalidExponentContractError()
        )
        self.InsufficientLiquidity = (
            AerodromeLp_AERO_USDC_HyperdriveInsufficientLiquidityContractError()
        )
        self.InvalidTimestamp = (
            AerodromeLp_AERO_USDC_HyperdriveInvalidTimestampContractError()
        )
        self.LnInvalidInput = (
            AerodromeLp_AERO_USDC_HyperdriveLnInvalidInputContractError()
        )
        self.UnsafeCastToInt256 = (
            AerodromeLp_AERO_USDC_HyperdriveUnsafeCastToInt256ContractError()
        )
        self.UnsafeCastToUint256 = (
            AerodromeLp_AERO_USDC_HyperdriveUnsafeCastToUint256ContractError()
        )
        self.UnsupportedToken = (
            AerodromeLp_AERO_USDC_HyperdriveUnsupportedTokenContractError()
        )
        self.WhaleBalanceExceeded = (
            AerodromeLp_AERO_USDC_HyperdriveWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            AerodromeLp_AERO_USDC_HyperdriveWhaleIsContractContractError()
        )

        self._all = [
            self.ExpInvalidExponent,
            self.InsufficientLiquidity,
            self.InvalidTimestamp,
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.UnsafeCastToUint256,
            self.UnsupportedToken,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, name: str) -> AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asBase() method."""

    _function_name = "test__deployAndInitialize__asBase"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__deployAndInitialize__asBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asShares() method."""

    _function_name = "test__deployAndInitialize__asShares"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__deployAndInitialize__asShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__getReward() method."""

    _function_name = "test__getReward"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__getReward method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__getReward"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__kind() method."""

    _function_name = "test__kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__name() method."""

    _function_name = "test__name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__pricePerVaultShare(int) method."""

    _function_name = "test__pricePerVaultShare"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__pricePerVaultShare method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__pricePerVaultShare"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__version() method."""

    _function_name = "test__version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_base(int,int) method."""

    _function_name = "test_close_long_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_long_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int, variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_shares(int,int) method."""

    _function_name = "test_close_long_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_long_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int, variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_base(int,int) method."""

    _function_name = "test_close_short_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_short_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int, variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_shares(int,int) method."""

    _function_name = "test_close_short_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_short_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int, variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_getters() method."""

    _function_name = "test_getters"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_getters method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_getters"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_base(int) method."""

    _function_name = "test_open_long_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_eth() method."""

    _function_name = "test_open_long_with_eth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_eth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_eth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_shares(int) method."""

    _function_name = "test_open_long_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_base(int) method."""

    _function_name = "test_open_short_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_eth() method."""

    _function_name = "test_open_short_with_eth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_eth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_eth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_shares(int) method."""

    _function_name = "test_open_short_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_long_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _basePaid: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_long_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesPaid: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_base(int,int) method."""

    _function_name = "test_round_trip_long_maturity_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_maturity_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _basePaid: int, _variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_shares(int,int) method."""

    _function_name = "test_round_trip_long_maturity_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_maturity_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesPaid: int, _variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_lp_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_lp_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_base(int,int) method."""

    _function_name = "test_round_trip_lp_withdrawal_shares_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_withdrawal_shares_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int, _variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_shares(int,int) method."""

    _function_name = "test_round_trip_lp_withdrawal_shares_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_withdrawal_shares_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int, _variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_short_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_short_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_base(int,int) method."""

    _function_name = "test_round_trip_short_maturity_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_maturity_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int, _variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_shares(int,int) method."""

    _function_name = "test_round_trip_short_maturity_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_maturity_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int, _variableRate: int) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_directSweep() method."""

    _function_name = "test_sweep_failure_directSweep"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_directSweep method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_failure_directSweep"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success() method."""

    _function_name = "test_sweep_success"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction1(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )
    _error_class = AerodromeLp_AERO_USDC_HyperdriveContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction0._type_signature: AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction0.factory(
                "AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction0",
                **kwargs,
            ),
            AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction1._type_signature: AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction1.factory(
                "AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction1",
                **kwargs,
            ),
        }
        return out


class AerodromeLp_AERO_USDC_HyperdriveContractFunctions(ContractFunctions):
    """ContractFunctions for the AerodromeLp_AERO_USDC_Hyperdrive contract."""

    IS_TEST: AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction

    createUser: AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction

    excludeArtifacts: (
        AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction
    )

    excludeContracts: (
        AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction
    )

    excludeSenders: (
        AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction
    )

    failed: AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction

    setUp: AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction

    targetArtifactSelectors: (
        AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: (
        AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction
    )

    targetContracts: (
        AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction
    )

    targetInterfaces: (
        AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction
    )

    targetSelectors: (
        AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction
    )

    targetSenders: AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction

    test__deployAndInitialize__asBase: AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction

    test__deployAndInitialize__asShares: AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction

    test__getReward: (
        AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction
    )

    test__kind: AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction

    test__name: AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction

    test__pricePerVaultShare: (
        AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction
    )

    test__version: AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction

    test_close_long_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction

    test_close_long_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction

    test_close_short_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction

    test_close_short_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction

    test_getters: AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction

    test_open_long_with_base: (
        AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction
    )

    test_open_long_with_eth: (
        AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction
    )

    test_open_long_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction

    test_open_short_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction

    test_open_short_with_eth: (
        AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction
    )

    test_open_short_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction

    test_round_trip_long_instantaneous_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction

    test_round_trip_long_instantaneous_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction

    test_round_trip_long_maturity_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction

    test_round_trip_long_maturity_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction

    test_round_trip_lp_instantaneous_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction

    test_round_trip_lp_instantaneous_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction

    test_round_trip_lp_withdrawal_shares_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction

    test_round_trip_lp_withdrawal_shares_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction

    test_round_trip_short_instantaneous_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction

    test_round_trip_short_instantaneous_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction

    test_round_trip_short_maturity_with_base: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction

    test_round_trip_short_maturity_with_shares: AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction

    test_sweep_failure_directSweep: AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction

    test_sweep_success: (
        AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction
    )

    whaleTransfer: AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = (
            AerodromeLp_AERO_USDC_HyperdriveIS_TESTContractFunction.factory(
                "IS_TEST",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="IS_TEST",
            )
        )
        self.createUser = (
            AerodromeLp_AERO_USDC_HyperdriveCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createUser",
            )
        )
        self.excludeArtifacts = AerodromeLp_AERO_USDC_HyperdriveExcludeArtifactsContractFunction.factory(
            "excludeArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeArtifacts",
        )
        self.excludeContracts = AerodromeLp_AERO_USDC_HyperdriveExcludeContractsContractFunction.factory(
            "excludeContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeContracts",
        )
        self.excludeSenders = AerodromeLp_AERO_USDC_HyperdriveExcludeSendersContractFunction.factory(
            "excludeSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeSenders",
        )
        self.failed = (
            AerodromeLp_AERO_USDC_HyperdriveFailedContractFunction.factory(
                "failed",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="failed",
            )
        )
        self.setUp = (
            AerodromeLp_AERO_USDC_HyperdriveSetUpContractFunction.factory(
                "setUp",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="setUp",
            )
        )
        self.targetArtifactSelectors = AerodromeLp_AERO_USDC_HyperdriveTargetArtifactSelectorsContractFunction.factory(
            "targetArtifactSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifactSelectors",
        )
        self.targetArtifacts = AerodromeLp_AERO_USDC_HyperdriveTargetArtifactsContractFunction.factory(
            "targetArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifacts",
        )
        self.targetContracts = AerodromeLp_AERO_USDC_HyperdriveTargetContractsContractFunction.factory(
            "targetContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetContracts",
        )
        self.targetInterfaces = AerodromeLp_AERO_USDC_HyperdriveTargetInterfacesContractFunction.factory(
            "targetInterfaces",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetInterfaces",
        )
        self.targetSelectors = AerodromeLp_AERO_USDC_HyperdriveTargetSelectorsContractFunction.factory(
            "targetSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSelectors",
        )
        self.targetSenders = AerodromeLp_AERO_USDC_HyperdriveTargetSendersContractFunction.factory(
            "targetSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSenders",
        )
        self.test__deployAndInitialize__asBase = AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asBaseContractFunction.factory(
            "test__deployAndInitialize__asBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__deployAndInitialize__asBase",
        )
        self.test__deployAndInitialize__asShares = AerodromeLp_AERO_USDC_HyperdriveTest__deployAndInitialize__asSharesContractFunction.factory(
            "test__deployAndInitialize__asShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__deployAndInitialize__asShares",
        )
        self.test__getReward = AerodromeLp_AERO_USDC_HyperdriveTest__getRewardContractFunction.factory(
            "test__getReward",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__getReward",
        )
        self.test__kind = (
            AerodromeLp_AERO_USDC_HyperdriveTest__kindContractFunction.factory(
                "test__kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__kind",
            )
        )
        self.test__name = (
            AerodromeLp_AERO_USDC_HyperdriveTest__nameContractFunction.factory(
                "test__name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__name",
            )
        )
        self.test__pricePerVaultShare = AerodromeLp_AERO_USDC_HyperdriveTest__pricePerVaultShareContractFunction.factory(
            "test__pricePerVaultShare",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__pricePerVaultShare",
        )
        self.test__version = AerodromeLp_AERO_USDC_HyperdriveTest__versionContractFunction.factory(
            "test__version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__version",
        )
        self.test_close_long_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_baseContractFunction.factory(
            "test_close_long_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_long_with_base",
        )
        self.test_close_long_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_close_long_with_sharesContractFunction.factory(
            "test_close_long_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_long_with_shares",
        )
        self.test_close_short_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_baseContractFunction.factory(
            "test_close_short_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_short_with_base",
        )
        self.test_close_short_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_close_short_with_sharesContractFunction.factory(
            "test_close_short_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_short_with_shares",
        )
        self.test_getters = AerodromeLp_AERO_USDC_HyperdriveTest_gettersContractFunction.factory(
            "test_getters",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_getters",
        )
        self.test_open_long_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_baseContractFunction.factory(
            "test_open_long_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_base",
        )
        self.test_open_long_with_eth = AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_ethContractFunction.factory(
            "test_open_long_with_eth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_eth",
        )
        self.test_open_long_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_open_long_with_sharesContractFunction.factory(
            "test_open_long_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_shares",
        )
        self.test_open_short_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_baseContractFunction.factory(
            "test_open_short_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_base",
        )
        self.test_open_short_with_eth = AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_ethContractFunction.factory(
            "test_open_short_with_eth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_eth",
        )
        self.test_open_short_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_open_short_with_sharesContractFunction.factory(
            "test_open_short_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_shares",
        )
        self.test_round_trip_long_instantaneous_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_long_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_instantaneous_with_base",
        )
        self.test_round_trip_long_instantaneous_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_long_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_instantaneous_with_shares",
        )
        self.test_round_trip_long_maturity_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_baseContractFunction.factory(
            "test_round_trip_long_maturity_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_maturity_with_base",
        )
        self.test_round_trip_long_maturity_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_long_maturity_with_sharesContractFunction.factory(
            "test_round_trip_long_maturity_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_maturity_with_shares",
        )
        self.test_round_trip_lp_instantaneous_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_lp_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_instantaneous_with_base",
        )
        self.test_round_trip_lp_instantaneous_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_lp_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_instantaneous_with_shares",
        )
        self.test_round_trip_lp_withdrawal_shares_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_baseContractFunction.factory(
            "test_round_trip_lp_withdrawal_shares_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_withdrawal_shares_with_base",
        )
        self.test_round_trip_lp_withdrawal_shares_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction.factory(
            "test_round_trip_lp_withdrawal_shares_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_withdrawal_shares_with_shares",
        )
        self.test_round_trip_short_instantaneous_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_short_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_instantaneous_with_base",
        )
        self.test_round_trip_short_instantaneous_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_short_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_instantaneous_with_shares",
        )
        self.test_round_trip_short_maturity_with_base = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_baseContractFunction.factory(
            "test_round_trip_short_maturity_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_maturity_with_base",
        )
        self.test_round_trip_short_maturity_with_shares = AerodromeLp_AERO_USDC_HyperdriveTest_round_trip_short_maturity_with_sharesContractFunction.factory(
            "test_round_trip_short_maturity_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_maturity_with_shares",
        )
        self.test_sweep_failure_directSweep = AerodromeLp_AERO_USDC_HyperdriveTest_sweep_failure_directSweepContractFunction.factory(
            "test_sweep_failure_directSweep",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_failure_directSweep",
        )
        self.test_sweep_success = AerodromeLp_AERO_USDC_HyperdriveTest_sweep_successContractFunction.factory(
            "test_sweep_success",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_success",
        )
        self.whaleTransfer = AerodromeLp_AERO_USDC_HyperdriveWhaleTransferContractFunction.factory(
            "whaleTransfer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="whaleTransfer",
        )


class AerodromeLp_AERO_USDC_HyperdriveAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveApprovalForAllContractEvent(
    ContractEvent
):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveCollectGovernanceFeeContractEvent(
    ContractEvent
):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveCreateCheckpointContractEvent(
    ContractEvent
):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdrivePauseStatusUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveRedeemWithdrawalSharesContractEvent(
    ContractEvent
):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveRemoveLiquidityContractEvent(
    ContractEvent
):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveTransferSingleContractEvent(
    ContractEvent
):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_addressContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_arrayContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_bytesContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_bytes32ContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_decimal_intContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_decimal_uintContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_stringContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_named_uintContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveContractEvents(ContractEvents):
    """ContractEvents for the AerodromeLp_AERO_USDC_Hyperdrive contract."""

    AddLiquidity: Type[
        AerodromeLp_AERO_USDC_HyperdriveAddLiquidityContractEvent
    ]

    Approval: Type[AerodromeLp_AERO_USDC_HyperdriveApprovalContractEvent]

    ApprovalForAll: Type[
        AerodromeLp_AERO_USDC_HyperdriveApprovalForAllContractEvent
    ]

    CloseLong: Type[AerodromeLp_AERO_USDC_HyperdriveCloseLongContractEvent]

    CloseShort: Type[AerodromeLp_AERO_USDC_HyperdriveCloseShortContractEvent]

    CollectGovernanceFee: Type[
        AerodromeLp_AERO_USDC_HyperdriveCollectGovernanceFeeContractEvent
    ]

    CreateCheckpoint: Type[
        AerodromeLp_AERO_USDC_HyperdriveCreateCheckpointContractEvent
    ]

    Deployed: Type[AerodromeLp_AERO_USDC_HyperdriveDeployedContractEvent]

    Initialize: Type[AerodromeLp_AERO_USDC_HyperdriveInitializeContractEvent]

    OpenLong: Type[AerodromeLp_AERO_USDC_HyperdriveOpenLongContractEvent]

    OpenShort: Type[AerodromeLp_AERO_USDC_HyperdriveOpenShortContractEvent]

    PauseStatusUpdated: Type[
        AerodromeLp_AERO_USDC_HyperdrivePauseStatusUpdatedContractEvent
    ]

    RedeemWithdrawalShares: Type[
        AerodromeLp_AERO_USDC_HyperdriveRedeemWithdrawalSharesContractEvent
    ]

    RemoveLiquidity: Type[
        AerodromeLp_AERO_USDC_HyperdriveRemoveLiquidityContractEvent
    ]

    Sweep: Type[AerodromeLp_AERO_USDC_HyperdriveSweepContractEvent]

    TransferSingle: Type[
        AerodromeLp_AERO_USDC_HyperdriveTransferSingleContractEvent
    ]

    log: Type[AerodromeLp_AERO_USDC_HyperdriveLogContractEvent]

    log_address: Type[AerodromeLp_AERO_USDC_HyperdriveLog_addressContractEvent]

    log_array: Type[AerodromeLp_AERO_USDC_HyperdriveLog_arrayContractEvent]

    log_bytes: Type[AerodromeLp_AERO_USDC_HyperdriveLog_bytesContractEvent]

    log_bytes32: Type[AerodromeLp_AERO_USDC_HyperdriveLog_bytes32ContractEvent]

    log_int: Type[AerodromeLp_AERO_USDC_HyperdriveLog_intContractEvent]

    log_named_address: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_addressContractEvent
    ]

    log_named_array: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_arrayContractEvent
    ]

    log_named_bytes: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_bytesContractEvent
    ]

    log_named_bytes32: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_bytes32ContractEvent
    ]

    log_named_decimal_int: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_decimal_intContractEvent
    ]

    log_named_decimal_uint: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_decimal_uintContractEvent
    ]

    log_named_int: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_intContractEvent
    ]

    log_named_string: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_stringContractEvent
    ]

    log_named_uint: Type[
        AerodromeLp_AERO_USDC_HyperdriveLog_named_uintContractEvent
    ]

    log_string: Type[AerodromeLp_AERO_USDC_HyperdriveLog_stringContractEvent]

    log_uint: Type[AerodromeLp_AERO_USDC_HyperdriveLog_uintContractEvent]

    logs: Type[AerodromeLp_AERO_USDC_HyperdriveLogsContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveAddLiquidityContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveApprovalContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveApprovalForAllContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveCloseLongContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveCloseShortContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            Type[
                AerodromeLp_AERO_USDC_HyperdriveCollectGovernanceFeeContractEvent
            ],
            AerodromeLp_AERO_USDC_HyperdriveCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveCreateCheckpointContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Deployed = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveDeployedContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveDeployedContractEvent.factory(
                "Deployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Deployed",
            ),
        )
        self.Initialize = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveInitializeContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveOpenLongContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveOpenShortContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            Type[
                AerodromeLp_AERO_USDC_HyperdrivePauseStatusUpdatedContractEvent
            ],
            AerodromeLp_AERO_USDC_HyperdrivePauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            Type[
                AerodromeLp_AERO_USDC_HyperdriveRedeemWithdrawalSharesContractEvent
            ],
            AerodromeLp_AERO_USDC_HyperdriveRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveRemoveLiquidityContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveSweepContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveTransferSingleContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )
        self.log = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLogContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLogContractEvent.factory(
                "log",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log",
            ),
        )
        self.log_address = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_addressContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            ),
        )
        self.log_array = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_arrayContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            ),
        )
        self.log_bytes = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_bytesContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            ),
        )
        self.log_bytes32 = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_bytes32ContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            ),
        )
        self.log_int = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_intContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            ),
        )
        self.log_named_address = cast(
            Type[
                AerodromeLp_AERO_USDC_HyperdriveLog_named_addressContractEvent
            ],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            ),
        )
        self.log_named_array = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_named_arrayContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            ),
        )
        self.log_named_bytes = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_named_bytesContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            ),
        )
        self.log_named_bytes32 = cast(
            Type[
                AerodromeLp_AERO_USDC_HyperdriveLog_named_bytes32ContractEvent
            ],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            ),
        )
        self.log_named_decimal_int = cast(
            Type[
                AerodromeLp_AERO_USDC_HyperdriveLog_named_decimal_intContractEvent
            ],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            ),
        )
        self.log_named_decimal_uint = cast(
            Type[
                AerodromeLp_AERO_USDC_HyperdriveLog_named_decimal_uintContractEvent
            ],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            ),
        )
        self.log_named_int = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_named_intContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            ),
        )
        self.log_named_string = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_named_stringContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            ),
        )
        self.log_named_uint = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_named_uintContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            ),
        )
        self.log_string = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_stringContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            ),
        )
        self.log_uint = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLog_uintContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            ),
        )
        self.logs = cast(
            Type[AerodromeLp_AERO_USDC_HyperdriveLogsContractEvent],
            AerodromeLp_AERO_USDC_HyperdriveLogsContractEvent.factory(
                "logs",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="logs",
            ),
        )


class AerodromeLp_AERO_USDC_HyperdriveContract(Contract):
    """A web3.py Contract class for the AerodromeLp_AERO_USDC_Hyperdrive contract."""

    abi: ABI = aerodromelp_aero_usdc_hyperdrive_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60c06040819052600c8054600160ff199182168117909255601e8054909116909117905563f877cb1960e01b9052602060c452601060e4526f105490925514955357d49410d7d5549360821b610104526000805160206205066d83398151915263f877cb19610124600060405180830381865afa15801562000085573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000af919081019062000aa7565b602c90620000be908262000c0d565b5060405163f877cb1960e01b815260206004820152600c60248201526b109054d157d49410d7d5549360a21b60448201526000805160206205066d8339815191529063f877cb1990606401600060405180830381865afa15801562000127573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000151919081019062000aa7565b602d9062000160908262000c0d565b5060405163f877cb1960e01b815260206004820152601460248201527f474e4f5349535f434841494e5f5250435f55524c00000000000000000000000060448201526000805160206205066d8339815191529063f877cb1990606401600060405180830381865afa158015620001da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000204919081019062000aa7565b602e9062000213908262000c0d565b5060405163f877cb1960e01b815260206004820152600d60248201526c131253915057d49410d7d55493609a1b60448201526000805160206205066d8339815191529063f877cb1990606401600060405180830381865afa1580156200027d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002a7919081019062000aa7565b602f90620002b6908262000c0d565b5060405163f877cb1960e01b815260206004820152600f60248201526e1350525393915517d49410d7d55493608a1b60448201526000805160206205066d8339815191529063f877cb1990606401600060405180830381865afa15801562000322573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200034c919081019062000aa7565b6030906200035b908262000c0d565b5060405163f877cb1960e01b815260206004820152600f60248201526e14d15413d3125057d49410d7d55493608a1b60448201526000805160206205066d8339815191529063f877cb1990606401600060405180830381865afa158015620003c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003f1919081019062000aa7565b60319062000400908262000c0d565b50603580546001600160a01b03199081169091556075805473a000ad1221c525037504452819116941338e70b292168217905560408051602081019091529081526200045190607690600162000a10565b503480156200045f57600080fd5b506040805161058081018252600a6105408201908152694879706572647269766560b01b610560830152815281518083018352601581527f4165726f64726f6d654c7048797065726472697665000000000000000000000060208281019190915280830191909152601282840152607680548451818402810184019095528085529293606085019390928301828280156200052457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000505575b505050918352505060200160006040519080825280602002602001820160405280156200055b578160200160208202803683370190505b508152602001736cdcb1c4a4d1c3c6d054b27ac5b77e89eafb971d6001600160a01b0316815260200160006001600160a01b03168152602001600081526020016305f5e10081526020016305f5e10081526020016040518060800160405280600081526020016000815260200160008152602001600081525081526020016301e133808152602001600115158152602001600015158152602001600115158152602001600015158152602001636a17288260e01b604051602401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505081526020016000151581526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600a81526020016000815260200160648152602001600a815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160648152602001600a815260200160008152602001600081526020016000815260200160008152602001600281526020016003815250734f09bab2f0e15e2a078a227fe1537665f55b83608180603860008201518160000190816200072e919062000c0d565b506020820151600182019062000745908262000c0d565b50604082015160028201805460ff191660ff909216919091179055606082015180516200077d91600384019160209091019062000a10565b50608082015180516200079b91600484019160209091019062000a10565b5060a08201516005820180546001600160a01b039283166001600160a01b03199182161790915560c084015160068401805491909316911617905560e0820151600782015561010080830151600883015561012083015160098301556101408301518051600a8401556020810151600b8401556040810151600c84015560600151600d830155610160830151600e830155610180830151600f830180546101a08601516101c08701516101e0880151151563010000000263ff0000001991151562010000029190911663ffff00001992151590960261ff00199515159590951661ffff19909316929092179390931792909216929092171790556102008201516010820190620008ac908262000c0d565b5061022082015160118201805461024085015115156101000261ff00199315159390931661ffff1990911617919091179055610260820151601282015561028082015160138201556102a082015160148201556102c082015160158201556102e08201516016820155610300820151601782015561032082015160188201556103408201516019820155610360820151601a820155610380820151601b8201556103a0820151601c8201556103c0820151601d8201556103e0820151601e820155610400820151601f82015561042082015160208201556104408201516021820155610460820151602282015561048082015160238201556104a082015160248201556104c082015160258201556104e0820151602682015561050082015160278201556105209091015160289091015550603d546001600160a01b0390811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146080521660a0525062000cd9565b82805482825590600052602060002090810192821562000a68579160200282015b8281111562000a6857825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000a31565b5062000a7692915062000a7a565b5090565b5b8082111562000a76576000815560010162000a7b565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121562000abb57600080fd5b82516001600160401b038082111562000ad357600080fd5b818501915085601f83011262000ae857600080fd5b81518181111562000afd5762000afd62000a91565b604051601f8201601f19908116603f0116810190838211818310171562000b285762000b2862000a91565b81604052828152888684870101111562000b4157600080fd5b600093505b8284101562000b65578484018601518185018701529285019262000b46565b600086848301015280965050505050505092915050565b600181811c9082168062000b9157607f821691505b60208210810362000bb257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000c08576000816000526020600020601f850160051c8101602086101562000be35750805b601f850160051c820191505b8181101562000c045782815560010162000bef565b5050505b505050565b81516001600160401b0381111562000c295762000c2962000a91565b62000c418162000c3a845462000b7c565b8462000bb8565b602080601f83116001811462000c79576000841562000c605750858301515b600019600386901b1c1916600185901b17855562000c04565b600085815260208120601f198616915b8281101562000caa5788860151825594840194600190910190840162000c89565b508582101562000cc95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516204f8cb62000da260003960008181612616015281816126d00152818161ab1f0152818161b5130152818161b5a8015261c707015260008181610876015281816109c80152818161158601528181611baf0152818161351e01528181613651015281816154c001528181615555015281816156880152818161845b01528181618b760152818161997701528181619a030152818161a5730152818161a72e0152818161a8720152818161a9d50152818161b81c015261bfe501526204f8cb6000f3fe60806040523480156200001157600080fd5b5060043610620002cd5760003560e01c8063838c573e1162000185578063ac948f4511620000df578063bd553e441162000092578063bd553e4414620005eb578063cdbfca291462000602578063e20c9f711462000619578063e7686d381462000623578063f502acad146200063a578063fa7626d4146200065157600080fd5b8063ac948f451462000577578063af5e60c4146200058e578063b22f6be914620005a5578063b5508aa914620005bc578063b75837d914620005c6578063ba414fa614620005d057600080fd5b8063942d20e21162000138578063942d20e21462000507578063982f9c56146200051e578063a10c70341462000535578063a89a9ae2146200053f578063aa55594f1462000556578063abf4cef7146200056057600080fd5b8063838c573e14620004a257806385226c8114620004b957806385b2600114620004d2578063916a17c614620004e9578063938f9cda14620004f35780639428be5e14620004fd57600080fd5b80633f7286f4116200023757806356f1045211620001ea57806356f10452146200042357806366d9a9a0146200043a5780636f3a66c7146200045357806372e78ccd146200046a578063731d599514620004815780637b09763e146200049857600080fd5b80633f7286f414620003a75780633f8b83ba14620003b157806341631a7914620003bb5780634570d0d614620003c557806349ccc4ad14620003dc578063507ffba514620003f357600080fd5b806324f5a0be116200029057806324f5a0be14620003425780632ade3880146200034c5780633c26039814620003655780633db13e72146200036f5780633e5e0d2614620003865780633e5e3c23146200039d57600080fd5b80630a9254e414620002d25780631071676014620002de5780631966d53714620003085780631ed7831c14620003125780632111c118146200032b575b600080fd5b620002dc6200065f565b005b620002f5620002ef36600462011932565b620007c6565b6040519081526020015b60405180910390f35b620002dc62000850565b6200031c62000edd565b604051620002ff9190620119cb565b620002dc6200033c366004620119e0565b62000f41565b620002dc62001516565b62000356620019f1565b604051620002ff919062011a57565b620002dc62001b3f565b620002dc6200038036600462011b1d565b62001f80565b620002f56200039736600462011b37565b620022f4565b6200031c6200254e565b6200031c620025b0565b620002dc62002612565b620002dc62002ad4565b620002dc620003d636600462011b1d565b62002d0e565b620002dc620003ed36600462011b1d565b62003175565b6200040a6200040436600462011c7b565b6200379b565b6040516001600160a01b039091168152602001620002ff565b620002dc6200043436600462011b1d565b620038ab565b6200044462003cfa565b604051620002ff919062011d02565b620002dc6200046436600462011b1d565b62003de4565b620002dc6200047b366004620119e0565b62004100565b620002dc62000492366004620119e0565b6200455f565b620002dc62004cd8565b620002dc620004b3366004620119e0565b62004e88565b620004c36200525f565b604051620002ff919062011dbb565b620002dc620004e336600462011b1d565b62005339565b620004446200588d565b620002dc62005977565b620002dc62005db5565b620002dc6200051836600462011b1d565b62005f73565b620002dc6200052f366004620119e0565b620067db565b620002dc62006e27565b620002dc6200055036600462011b1d565b62006f11565b620002dc62007279565b620002dc6200057136600462011b1d565b6200738a565b620002dc62000588366004620119e0565b620074fb565b620002dc6200059f366004620119e0565b62007a8d565b620002dc620005b636600462011b1d565b62007e75565b620004c362008247565b620002dc62008321565b620005da62008396565b6040519015158152602001620002ff565b620002dc620005fc36600462011b1d565b6200844b565b620002dc62000613366004620119e0565b62008890565b6200031c62008b03565b620002dc62000634366004620119e0565b62008b65565b620002dc6200064b366004620119e0565b620092ac565b601e54620005da9060ff1681565b604051630637469360e31b8152630144108a906000906000805160206204f856833981519152906331ba3498906200069d90602d9060040162011ee4565b6020604051808303816000875af1158015620006bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006e3919062011ef9565b604051639ebf682760e01b8152600481018290529091506000805160206204f85683398151915290639ebf682790602401600060405180830381600087803b1580156200072f57600080fd5b505af115801562000744573d6000803e3d6000fd5b505060405163d9bbf3a160e01b8152600481018590526000805160206204f856833981519152925063d9bbf3a19150602401600060405180830381600087803b1580156200079157600080fd5b505af1158015620007a6573d6000803e3d6000fd5b50506032805460ff1916600117905550620007c29050620095b9565b5050565b6040516370a0823160e01b81526001600160a01b0380851660048301526000916200084691869186918216906370a0823190602401602060405180830381865afa15801562000819573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200083f919062011ef9565b85620022f4565b90505b9392505050565b601e546047546101009091046001600160a01b0316319060ff16620008725750565b60007f00000000000000000000000000000000000000000000000000000000000000006200095757603a546200094f90620008b29060ff16600a62012026565b620008c0906103e862012037565b606154601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152600a9216906370a08231906024015b602060405180830381865afa15801562000916573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200093c919062011ef9565b62000948919062012067565b906200a332565b9050620009a0565b603a546200099d906200096f9060ff16600a62012026565b6200097d906103e862012037565b601e546200094890600a9061010090046001600160a01b03163162012067565b90505b6000620009ad826200a34e565b9050620009c663beefbabe63deadfade8460016200a3c9565b7f00000000000000000000000000000000000000000000000000000000000000001562000a1657601e5462000a169061010090046001600160a01b03163162000a1084866201207e565b6200aa43565b6036546040805163313ce56760e01b8152905162000a99926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000a63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a89919062012094565b603a5460ff91821691166200aa43565b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b03908116602483015262000c2e921690633656eec290604401602060405180830381865afa15801562000af7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b1d919062011ef9565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562000b72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b98919062012134565b60a0015162000ba990600262012037565b6036546040516363737ac960e11b8152600481018790526001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562000bf3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c19919062011ef9565b62000c2591906201207e565b603f546200aaa7565b60365460408051630c048d9160e31b8152905162000cac926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562000c7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ca2919062012247565b518260016200aaa7565b60365460408051630c048d9160e31b8152905162000e2b926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562000cfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d20919062012247565b60a00151603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562000d79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d9f919062012134565b60a00151603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562000df8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e1e919062012247565b5162000a1091906201207e565b607454603654601e5460408051630161b2cb60e71b8152905162000ed8946001600160a01b039081169481169361010090041691879166b1a2bc2ec5000091600191869163b0d96580916004808301926102609291908290030181865afa15801562000e9b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ec1919062012134565b60a0015162000ecf6200ab11565b603f546200ab5c565b505050565b6060601680548060200260200160405190810160405280929190818152602001828054801562000f3757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000f18575b5050505050905090565b604754610100900460ff1662000f55575050565b60365460408051630161b2cb60e71b815290516001600160a01b039092169163c6e6f592916200100491849163b0d96580916004808301926102609291908290030181865afa15801562000fad573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd3919062012134565b60c0015162000fe490600262012037565b60365462000ffb906001600160a01b03166200b274565b8691906200b283565b6040518263ffffffff1660e01b81526004016200102391815260200190565b602060405180830381865afa15801562001041573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001067919062011ef9565b601f54909250600090819062001088906001600160a01b031685836200b30f565b6049549193509150610100900460ff1615620010bd57620010b5836000683635c9adc5dea000006200b283565b9250620010c2565b600092505b60365460408051630161b2cb60e71b8152905162001142926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001110573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001136919062012134565b6101000151846200b436565b6000806200114f6200b4f9565b601f5491935091506000906200116e906001600160a01b03166200b627565b6036549091506000906200118b906001600160a01b03166200b627565b6047549091506000906301000000900460ff1615620013ae57601f54600090620011c1906001600160a01b03168989846200b687565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa1580156200120c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001232919062011ef9565b9150620012f5826038601f0154620012e3603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001298573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012be919062012134565b6101e0015160200151620012db90670de0b6b3a76400006201207e565b8b906200b713565b620012ef919062012305565b6200b72a565b620013a7826200139e603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001379919062012134565b6101e00151602001516200139690670de0b6b3a76400006201207e565b8a906200b713565b6058546200aaa7565b50620014df565b601f54620013c7906001600160a01b031688886200b765565b90506200142d816038601d0154620012e3603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001353573d6000803e3d6000fd5b620014df81620014d6603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200148b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014b1919062012134565b6101e0015160200151620014ce90670de0b6b3a76400006201207e565b89906200b713565b6056546200aaa7565b601f546047546200150b916001600160a01b03169083906301000000900460ff1615888888886200b799565b505050505050505050565b601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204f856833981519152906306447d5690602401600060405180830381600087803b1580156200156b57600080fd5b505af115801562001580573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000008015620015b4575060475460ff165b156200177657601f54603654604080516060810182526001600160a01b03938416808252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529031949093169263cba2e58d92671bc16d674ec80000926200163192670de0b6b3a76400009291829160040162012350565b604080518083038185885af11580156200164f573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001676919062012377565b5050601f546200169e906001600160a01b03163162000a10670de0b6b3a7640000846201207e565b50601f54603654604080516060810182526001600160a01b03938416808252600060208084018290528451828152908101855283850152925163cba2e58d60e01b81529031949093169263cba2e58d926706f05b59d3b20000926200171392670de0b6b3a76400009291829160040162012350565b604080518083038185885af115801562001731573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001758919062012377565b5050601f5462001773906001600160a01b031631826200aa43565b50565b604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e090620017b190631574f9f360e01b906004016201239c565b600060405180830381600087803b158015620017cc57600080fd5b505af1158015620017e1573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d9350671bc16d674ec80000926200185992670de0b6b3a764000092909182919060040162012350565b604080518083038185885af115801562001877573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200189e919062012377565b5050604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e090620018db90631574f9f360e01b906004016201239c565b600060405180830381600087803b158015620018f657600080fd5b505af11580156200190b573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526000602083018190529316945063cba2e58d93506706f05b59d3b2000092670de0b6b3a764000092909182918101825b6040519080825280601f01601f19166020018201604052801562001985576020820181803683370190505b508152506040518663ffffffff1660e01b8152600401620019aa949392919062012350565b604080518083038185885af1158015620019c8573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620007c2919062012377565b565b6060601d805480602002602001604051908101604052809291908181526020016000905b8282101562001b3657600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101562001b1e57838290600052602060002001805462001a8a9062011e23565b80601f016020809104026020016040519081016040528092919081815260200182805462001ab89062011e23565b801562001b095780601f1062001add5761010080835404028352916020019162001b09565b820191906000526020600020905b81548152906001019060200180831162001aeb57829003601f168201915b50505050508152602001906001019062001a68565b50505050815250508152602001906001019062001a15565b50505050905090565b601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204f856833981519152906306447d5690602401600060405180830381600087803b15801562001b9457600080fd5b505af115801562001ba9573d6000803e3d6000fd5b505050507f0000000000000000000000000000000000000000000000000000000000000000801562001bdd575060475460ff165b1562001d9b57601f54603654604080516060810182526001600160a01b039384168082526001602080840191909152835160008082529181018552838501529251630dbbe80760e41b81529031949293929092169163dbbe807091671bc16d674ec800009162001c5e91670de0b6b3a7640000918291889160040162012350565b604080518083038185885af115801562001c7c573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001ca3919062012377565b601f5490925062001cc591506001600160a01b03163162000a1083856201207e565b601f54603654604080516060810182526001600160a01b039384168082526000602080840182905284518281529081018552838501529251630dbbe80760e41b815290319650939092169263dbbe8070926706f05b59d3b200009262001d3b92670de0b6b3a76400009283929160040162012350565b604080518083038185885af115801562001d59573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001d80919062012377565b5050601f54620007c2906001600160a01b031631836200aa43565b604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e09062001dd690631574f9f360e01b906004016201239c565b600060405180830381600087803b15801562001df157600080fd5b505af115801562001e06573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526001602080840191909152835160008082529181018552838501529251630dbbe80760e41b81529316945063dbbe80709350671bc16d674ec800009262001e7b92670de0b6b3a764000092839260040162012350565b604080518083038185885af115801562001e99573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001ec0919062012377565b5050604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e09062001efd90631574f9f360e01b906004016201239c565b600060405180830381600087803b15801562001f1857600080fd5b505af115801562001f2d573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526000602083018190529316945063dbbe807093506706f05b59d3b2000092670de0b6b3a7640000928392908101826200195a565b604754610100900460ff1662001f935750565b60365460408051630161b2cb60e71b815290516200210e926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001fe1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002007919062012134565b60c001516200201890600262012037565b60365460408051630a4e149360e01b81529051600a926001600160a01b031691630a4e14939160048083019260209291908290030181865afa15801562002063573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020899190620123b1565b601f546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015620020d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020f9919062011ef9565b62002105919062012067565b8391906200b283565b60495490915060ff16156200212b5762002128816200a34e565b90505b601f5460009062002147906001600160a01b031683836200ba89565b9050600080620021566200b4f9565b601f54919350915060009062002175906001600160a01b03166200b627565b60365490915060009062002192906001600160a01b03166200b627565b6047549091506000906301000000900460ff16156200227257601f546000908190620021c9906001600160a01b031689836200bb20565b60365460405163b88fed9f60e01b8152600481018490529294509092506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562002217573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200223d919062011ef9565b92506200224c8160006200aa43565b62002258828a6200b72a565b6200226a828a6038601601546200aaa7565b5050620022bf565b601f546000906200228d906001600160a01b0316886200bbaf565b90925090506200229f8160006200aa43565b620022ab82896200b72a565b620022bd82896038601501546200aaa7565b505b601f54604754620022eb916001600160a01b03169083906301000000900460ff1615888888886200b799565b50505050505050565b6040516370a0823160e01b81526001600160a01b03858116600483015260009182918616906370a0823190602401602060405180830381865afa15801562002340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002366919062011ef9565b9050808411156200238a5760405163188c93a560e31b815260040160405180910390fd5b6000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620023d857600080fd5b505af1158015620023ed573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03891660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200244257600080fd5b505af115801562002457573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526000805160206204f856833981519152925063c88a5e6d915062002499908990670de0b6b3a764000090600401620123d1565b600060405180830381600087803b158015620024b457600080fd5b505af1158015620024c9573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038816925063a9059cbb9150620024fd9086908890600401620123d1565b6020604051808303816000875af11580156200251d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025439190620123fb565b509295945050505050565b6060601880548060200260200160405190810160405280929190818152602001828054801562000f37576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f18575050505050905090565b6060601780548060200260200160405190810160405280929190818152602001828054801562000f37576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f18575050505050905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002673573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620026999190620123b1565b9050620026ac6301e1338060006200b436565b6036546040516246613160e11b81526001600160a01b0391821660048201526000917f00000000000000000000000000000000000000000000000000000000000000001690628cc26290602401602060405180830381865afa15801562002717573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200273d919062011ef9565b90506200274c8160006200bbef565b603660009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200279d57600080fd5b505af1158015620027b2573d6000803e3d6000fd5b50506036546040516370a0823160e01b81526001600160a01b03918216600482015262002834935090851691506370a08231906024015b602060405180830381865afa15801562002807573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200282d919062011ef9565b826200aa43565b60365460408051630161b2cb60e71b815290516000926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562002880573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028a6919062012134565b6101a0015190506000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620028fb57600080fd5b505af115801562002910573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03841660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200296557600080fd5b505af11580156200297a573d6000803e3d6000fd5b505060365460405162b40d3160e11b81526001600160a01b03878116600483015290911692506301681a629150602401600060405180830381600087803b158015620029c557600080fd5b505af1158015620029da573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b03848116600483015262002a579350861691506370a0823190602401602060405180830381865afa15801562002a2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a50919062011ef9565b836200aa43565b6036546040516370a0823160e01b81526001600160a01b03918216600482015262000ed8918516906370a0823190602401602060405180830381865afa15801562002aa6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002acc919062011ef9565b60006200aa43565b60365460408051630a4e149360e01b815290516000926001600160a01b031691630a4e14939160048083019260209291908290030181865afa15801562002b1f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b459190620123b1565b90506001600160a01b03811662002b595750565b607354604080516310780f7360e01b815290516000805160206204f856833981519152926306447d56926001600160a01b03909116916310780f73916004808201926020929091908290030181865afa15801562002bbb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002be19190620123b1565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801562002c2357600080fd5b505af115801562002c38573d6000803e3d6000fd5b5050604051630618f58760e51b81526000805160206204f856833981519152925063c31eb0e0915062002c77906313dd85ff60e31b906004016201239c565b600060405180830381600087803b15801562002c9257600080fd5b505af115801562002ca7573d6000803e3d6000fd5b505060365460405162b40d3160e11b81526001600160a01b03858116600483015290911692506301681a629150602401600060405180830381600087803b15801562002cf257600080fd5b505af115801562002d07573d6000803e3d6000fd5b5050505050565b604754610100900460ff1662002d215750565b60365460408051630161b2cb60e71b8152905162002dbd926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562002d6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d95919062012134565b60c0015162002da690600262012037565b60365462002105906001600160a01b03166200bc2a565b601f54909150600090819062002dde906001600160a01b031684836200bc39565b9150915060008062002def6200b4f9565b601f54919350915060009062002e0e906001600160a01b03166200b627565b60365490915060009062002e2b906001600160a01b03166200b627565b6047549091506000906301000000900460ff161562002f9457601f5460009062002e61906001600160a01b0316898b846200bde1565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562002eac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ed2919062011ef9565b915062002ef2816038602301548962002eec919062012305565b6200be64565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562002f47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f6d919062012134565b6101e001515160000362002f8d5762002f8d81886038602401546200aaa7565b506200313f565b601f5462002fad906001600160a01b0316888a6200be9f565b60595460365460405163b88fed9f60e01b8152600481018a905292935062003036928492916001600160a01b03169063b88fed9f906024015b602060405180830381865afa15801562003004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200302a919062011ef9565b62002eec919062012305565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200308b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620030b1919062012134565b6101e00151516000036200313f5760365460405163b88fed9f60e01b8152600481018890526200313f9183916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562003110573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003136919062011ef9565b605a546200aaa7565b601f546047546200316b916001600160a01b03169083906301000000900460ff1615888888886200b799565b5050505050505050565b600080620031826200b4f9565b601f549193509150600090620031a1906001600160a01b03166200b627565b603654909150600090620031be906001600160a01b03166200b627565b905062003270603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562003219573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200323f919062012134565b60c001516200325090600262012037565b60365462003267906001600160a01b03166200b274565b8791906200b283565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529095506000805160206204f856833981519152906306447d5690602401600060405180830381600087803b158015620032c857600080fd5b505af1158015620032dd573d6000803e3d6000fd5b505060475460ff1691506200351c905057604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e0906200332990631574f9f360e01b906004016201239c565b600060405180830381600087803b1580156200334457600080fd5b505af115801562003359573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d93508992620033c1928492909182919060040162012350565b604080518083038185885af1158015620033df573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062003406919062012377565b5050604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e090620034439063350b944160e11b906004016201239c565b600060405180830381600087803b1580156200345e57600080fd5b505af115801562003473573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d9350620034d7928a9291829160040162012350565b60408051808303816000875af1158015620034f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022eb919062012377565b7f00000000000000000000000000000000000000000000000000000000000000006200363957603660009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003596573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035bc9190620123b1565b60365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620035f1929116908990600401620123d1565b6020604051808303816000875af115801562003611573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620036379190620123fb565b505b60365460009081906001600160a01b031663cba2e58d7f00000000000000000000000000000000000000000000000000000000000000006200367d5760006200367f565b885b60408051606081018252601f546001600160a01b0316815260016020808301919091528251600080825291810184528284015291516001600160e01b031960e086901b168152620036da928d92909182919060040162012350565b604080518083038185885af1158015620036f8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200371f919062012377565b60365491935091506200377d906001600160a01b0316633656eec2620037476001866200bed3565b601f5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401620027e9565b601f54620022eb906001600160a01b0316886001898989896200bf09565b600081604051602001620037b0919062012419565b60408051601f198184030181529082905280516020909101206318caf8e360e31b825291506000805160206204f8568339815191529063c657c71890620037fe90849086906004016201242e565b600060405180830381600087803b1580156200381957600080fd5b505af11580156200382e573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526000805160206204f856833981519152925063c88a5e6d91506200387290849069021e19e0c9bab240000090600401620123d1565b600060405180830381600087803b1580156200388d57600080fd5b505af1158015620038a2573d6000803e3d6000fd5b50505050919050565b604754610100900460ff16620038be5750565b60365460408051630161b2cb60e71b815290516001600160a01b039092169163c6e6f592916200396d91849163b0d96580916004808301926102609291908290030181865afa15801562003916573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200393c919062012134565b60c001516200394d90600262012037565b60365462003964906001600160a01b03166200b274565b8591906200b283565b6040518263ffffffff1660e01b81526004016200398c91815260200190565b602060405180830381865afa158015620039aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620039d0919062011ef9565b601f549091506000908190620039f1906001600160a01b031684836200b30f565b9150915060008062003a026200b4f9565b601f54919350915060009062003a21906001600160a01b03166200b627565b60365490915060009062003a3e906001600160a01b03166200b627565b6047549091506000906301000000900460ff161562003b9a57601f5460009062003a74906001600160a01b03168989846200b687565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562003abf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003ae5919062011ef9565b915062003aff816038601b01548b62002eec919062012305565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562003b54573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b7a919062012134565b6101e001515160000362002f8d5762002f8d818a6038601c01546200aaa7565b601f5462003bb3906001600160a01b031688886200b765565b60515460365460405163b88fed9f60e01b8152600481018c905292935062003bf1928492916001600160a01b03169063b88fed9f9060240162002fe6565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562003c46573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003c6c919062012134565b6101e00151516000036200313f5760365460405163b88fed9f60e01b8152600481018a90526200313f9183916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562003ccb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003cf1919062011ef9565b6052546200aaa7565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101562001b365760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562003dcb57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162003d8c5790505b5050505050815250508152602001906001019062003d1e565b604754610100900460ff1662003df75750565b60008062003e046200b4f9565b601f54919350915060009062003e23906001600160a01b03166200b627565b60365490915060009062003e40906001600160a01b03166200b627565b60365490915060009062003e5d906001600160a01b03166200b274565b835160365460408051630161b2cb60e71b81529051939450919262003f05926001600160a01b039092169163b0d96580916004808301926102609291908290030181865afa15801562003eb4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003eda919062012134565b60c0015162003eeb90600262012037565b82841162003efa578362003efc565b825b8991906200b283565b9650600062003f14886200a34e565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529091506000805160206204f856833981519152906306447d5690602401600060405180830381600087803b15801562003f6c57600080fd5b505af115801562003f81573d6000803e3d6000fd5b5050604754610100900460ff16915062004007905057604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e09062003fd29063350b944160e11b906004016201239c565b600060405180830381600087803b15801562003fed57600080fd5b505af115801562004002573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b039081168252600060208084018290528451828152908101855283850152925163cba2e58d60e01b81529293849391169163cba2e58d91620040699187918691829160040162012350565b60408051808303816000875af115801562004088573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620040ae919062012377565b6036549193509150620040d6906001600160a01b0316633656eec2620037476001866200bed3565b601f54620040f4906001600160a01b03168b60008c8c8c8c6200bf09565b50505050505050505050565b6047546301000000900460ff1662004116575050565b601f5460009062004130906001600160a01b03166200b627565b604954909150610100900460ff1615620041d15760365460408051630161b2cb60e71b81529051620041cb926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562004192573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620041b8919062012134565b610100015166b1a2bc2ec500006200b436565b62004252565b60365460408051630161b2cb60e71b8152905162004252926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200421f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004245919062012134565b610100015160006200b436565b6036546000906200426c906001600160a01b03166200b274565b825160365460408051630161b2cb60e71b81529051939450919262004312926001600160a01b039092169163b0d96580916004808301926102609291908290030181865afa158015620042c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620042e9919062012134565b60c00151620042fa90600262012037565b82841162004309578362003267565b8690836200b283565b601f5490955060009081906200433e906001600160a01b031662004336896200a34e565b60006200b30f565b6049549193509150610100900460ff161562004372576200436a8660006722b1c8c1227a00006200c288565b955062004377565b600095505b60365460408051630161b2cb60e71b81529051620043f7926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620043c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620043eb919062012134565b6101000151876200b436565b600080620044046200b4f9565b601f54919350915062004420906001600160a01b03166200b627565b6036549097506000906200443d906001600160a01b03166200b627565b601f549091506000906200445d906001600160a01b03168787846200b687565b905060006200446c826200c31f565b9050620044cc81620012ef603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200148b573d6000803e3d6000fd5b62004533816200452a603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200148b573d6000803e3d6000fd5b604a546200aaa7565b601f5462004551906001600160a01b031682600088888f896200b799565b505050505050505050505050565b604754610100900460ff1662004573575050565b60365460408051630161b2cb60e71b81529051620046ee926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620045c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620045e7919062012134565b60c00151620045f890600262012037565b60365460408051630a4e149360e01b81529051600a926001600160a01b031691630a4e14939160048083019260209291908290030181865afa15801562004643573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620046699190620123b1565b601f546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015620046b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620046d9919062011ef9565b620046e5919062012067565b8491906200b283565b60495490925060ff16156200470b5762004708826200a34e565b91505b601f5460009062004727906001600160a01b031684836200ba89565b90506000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200477757600080fd5b505af11580156200478c573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b158015620047e957600080fd5b505af1158015620047fe573d6000803e3d6000fd5b5050603654600092506200481c91506001600160a01b03166200bc2a565b601e549091506200483e9061010090046001600160a01b03168260006200bc39565b50506047546301000000900460ff161562004aed57601f54600090819062004871906001600160a01b031685836200bb20565b6049549193509150610100900460ff1615620048a5576200489d8560006722b1c8c1227a00006200b283565b9450620048aa565b600094505b60365460408051630161b2cb60e71b815290516200492a926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200491e919062012134565b6101000151866200b436565b6036546001600160a01b031663414f826d62004946826200c35b565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b1580156200498757600080fd5b505af11580156200499c573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620049f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004a1d919062012247565b6101a00151601f5490915060009062004a41906001600160a01b031684836200c3e0565b60365460405163b88fed9f60e01b8152600481018490529296509092506000916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562004a94573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004aba919062011ef9565b905062004ac882856200aa43565b62004ae28162004ad986866200b713565b6050546200aaa7565b505050505062004cd2565b601f54600090819062004b0a906001600160a01b0316856200bbaf565b6049549193509150610100900460ff161562004b3e5762004b368560006722b1c8c1227a00006200b283565b945062004b43565b600094505b60365460408051630161b2cb60e71b8152905162004b91926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048f8573d6000803e3d6000fd5b6036546001600160a01b031663414f826d62004bad826200c35b565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b15801562004bee57600080fd5b505af115801562004c03573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562004c5e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004c84919062012247565b6101a00151601f5490915060009062004ca7906001600160a01b0316846200c463565b909450905062004cb881846200aa43565b6200316b8462004cc985856200b713565b604f546200aaa7565b50505050565b603654604080516306fdde0360e01b8152905162004de8926001600160a01b0316916306fdde039160048083019260009291908290030181865afa15801562004d25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262004d4f9190810190620124a0565b6038805462004d5e9062011e23565b80601f016020809104026020016040519081016040528092919081815260200182805462004d8c9062011e23565b801562004ddd5780601f1062004db15761010080835404028352916020019162004ddd565b820191906000526020600020905b81548152906001019060200180831162004dbf57829003601f168201915b50505050506200c497565b607454604080516306fdde0360e01b81529051620019ef926001600160a01b0316916306fdde039160048083019260009291908290030181865afa15801562004e35573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262004e5f9190810190620124a0565b60405162004e7390603890602001620124d8565b6040516020818303038152906040526200c497565b60475460ff1662004e97575050565b60365460408051630161b2cb60e71b8152905162004f33926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562004ee5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004f0b919062012134565b60c0015162004f1c90600262012037565b603654620046e5906001600160a01b03166200b274565b601f54909250600090819062004f53906001600160a01b0316856200c4cd565b6049549193509150610100900460ff161562004f885762004f80836000683635c9adc5dea000006200b283565b925062004f8d565b600092505b62004f9d6301e13380846200b436565b60008062004faa6200b4f9565b601f54919350915060009062004fc9906001600160a01b03166200b627565b60365490915060009062004fe6906001600160a01b03166200b627565b60475490915060009062010000900460ff1615620050e157601f5462005017906001600160a01b031688886200b765565b90506200507d816038601d0154620012e3603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001353573d6000803e3d6000fd5b620050db81620014d6603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200148b573d6000803e3d6000fd5b62005235565b601f54600090620050fe906001600160a01b03168989846200b687565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562005149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200516f919062011ef9565b9150620051d5826038601f0154620012e3603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001298573d6000803e3d6000fd5b62005233826200139e603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001353573d6000803e3d6000fd5b505b601f546047546200150b916001600160a01b031690839062010000900460ff16888888886200b799565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101562001b36578382906000526020600020018054620052a59062011e23565b80601f0160208091040260200160405190810160405280929190818152602001828054620052d39062011e23565b8015620053245780601f10620052f85761010080835404028352916020019162005324565b820191906000526020600020905b8154815290600101906020018083116200530657829003601f168201915b50505050508152602001906001019062005283565b600080620053466200b4f9565b601f54919350915060009062005365906001600160a01b03166200b627565b60365490915060009062005382906001600160a01b03166200b627565b90506200542b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620053dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005403919062012134565b60c001516200541490600262012037565b60365462003267906001600160a01b03166200bc2a565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529095506000805160206204f856833981519152906306447d5690602401600060405180830381600087803b1580156200548357600080fd5b505af115801562005498573d6000803e3d6000fd5b505060475460ff169150620055539050576000805160206204f85683398151915263c31eb0e07f0000000000000000000000000000000000000000000000000000000000000000620054f25763350b944160e11b620054fb565b631574f9f360e01b5b6040518263ffffffff1660e01b81526004016200551991906201239c565b600060405180830381600087803b1580156200553457600080fd5b505af115801562005549573d6000803e3d6000fd5b5050505062005670565b7f00000000000000000000000000000000000000000000000000000000000000006200567057603660009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015620055cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620055f39190620123b1565b60365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262005628929116908990600401620123d1565b6020604051808303816000875af115801562005648573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200566e9190620123fb565b505b60365460009081906001600160a01b031663dbbe80707f0000000000000000000000000000000000000000000000000000000000000000620056b4576000620056b6565b885b60408051606081018252601f546001600160a01b0316815260016020808301919091528251600080825291810184528284015291516001600160e01b031960e086901b1681526200570e928d92839260040162012350565b604080518083038185885af11580156200572c573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062005753919062012377565b604754919350915060ff166200576c5750505050505050565b6036546200580a906001600160a01b0316633656eec26200578f6002866200bed3565b601f5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015620057dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005803919062011ef9565b886200aa43565b60006200582c6200581c838a6201207e565b89670de0b6b3a76400006200c530565b90506200583b8260006200bbef565b6046546200586f90829062005869906200585a906301e133806200c5bf565b66b1a2bc2ec50000906200b713565b6200c5d6565b601f546200316b906001600160a01b03168360018a8a8a8a6200bf09565b6060601c805480602002602001604051908101604052809291908181526020016000905b8282101562001b365760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200595e57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116200591f5790505b50505050508152505081526020019060010190620058b1565b601e546047546001600160a01b036101009283900416319160ff9104166200599c5750565b600062005a77606160010160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620059f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005a1f919062012094565b62005a2c90600a62012026565b62005a3a906103e862012037565b606254601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152600a9216906370a0823190602401620008f8565b60495490915060ff161562005a945762005a91816200a34e565b90505b62005aab63beefbabe63deadfade8360006200a3c9565b601e5462005ac99061010090046001600160a01b031631836200aa43565b6036546040805163313ce56760e01b8152905162005b16926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000a63573d6000803e3d6000fd5b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b03908116602483015262005c33921690633656eec2906044015b602060405180830381865afa15801562005b75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005b9b919062011ef9565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562005bf0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005c16919062012134565b60a0015162005c2790600262012037565b62000c2590846201207e565b60365460408051630c048d9160e31b8152905162005caf926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562005c81573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005ca7919062012247565b51826200aa43565b60365460408051630c048d9160e31b8152905162005d76926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562005cfd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005d23919062012247565b60a0015160655460365460408051630c048d9160e31b815290516001600160a01b03909216916360246c88916004818101926101e0929091908290030181865afa15801562000df8573d6000803e3d6000fd5b607454603654601e54606554620007c2936001600160a01b039081169381169261010090041690859066b1a2bc2ec500009060009062000ecf6200ab11565b607354604080516310780f7360e01b815290516000805160206204f856833981519152926306447d56926001600160a01b03909116916310780f73916004808201926020929091908290030181865afa15801562005e17573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005e3d9190620123b1565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801562005e7f57600080fd5b505af115801562005e94573d6000803e3d6000fd5b505050506000601260008060001960405162005eb090620116a1565b60c080825260099082015268537765657061626c6560b81b60e08201526101006020820181905260059082015264053574545560dc1b61012082015260ff90941660408501526001600160a01b0390921660608401521515608083015260a082015261014001604051809103906000f08015801562005f33573d6000803e3d6000fd5b506036546040516340c10f1960e01b81529192506001600160a01b03808416926340c10f199262002c77921690678ac7230489e8000090600401620123d1565b60475460ff1662005f815750565b60365460408051630161b2cb60e71b8152905162005fcf926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562002d6f573d6000803e3d6000fd5b601f54909150600090819062005fef906001600160a01b0316846200c611565b91509150620064a5603660009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200604b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006071919062011ef9565b603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620060c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620060ec919062012247565b60600151603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562006145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200616b919062012247565b6101800151603660009054906101000a90046001600160a01b03166001600160a01b031663c69e16ad6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620061c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620061ea919062011ef9565b60365460408051630c048d9160e31b81529051620063f9926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562006238573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200625e919062012247565b60c0015160365460408051630161b2cb60e71b8152905162006366926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620062b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620062d6919062012134565b6101e0015160200151603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562006334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200635a919062012247565b6101200151906200b713565b603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620063bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620063e1919062012247565b6101200151620063f2919062012305565b906200c5bf565b603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200644e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006474919062012247565b5162006481919062012305565b6200648d919062012305565b62006499919062012305565b62005869919062012305565b600080620064b26200b4f9565b601f549193509150600090620064d1906001600160a01b03166200b627565b603654909150600090620064ee906001600160a01b03166200b627565b60475490915060009062010000900460ff1615620065da57601f546200651f906001600160a01b0316888a6200be9f565b905062006539816038602101548862002eec919062012305565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200658e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620065b4919062012134565b6101e0015151600003620065d457620065d481876038602201546200aaa7565b620067b1565b601f54600090620065f7906001600160a01b0316898b846200bde1565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562006642573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006668919062011ef9565b605b546036546040516363737ac960e11b8152600481018b9052929450620066a6928492916001600160a01b03169063c6e6f5929060240162002fe6565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620066fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006721919062012134565b6101e0015151600003620067af576036546040516363737ac960e11b815260048101899052620067af9183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562006780573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620067a6919062011ef9565b605c546200aaa7565b505b601f546047546200316b916001600160a01b031690839062010000900460ff16888888886200b799565b601f54600090620067f5906001600160a01b03166200b627565b604954909150610100900460ff16156200685d5760365460408051630161b2cb60e71b8152905162006857926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562004192573d6000803e3d6000fd5b620068ab565b60365460408051630161b2cb60e71b81529051620068ab926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200421f573d6000803e3d6000fd5b603654600090620068c5906001600160a01b03166200b274565b604754909150600090819060ff16156200699a57602084015160365460408051630161b2cb60e71b8152905162006972926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200692c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006952919062012134565b60c001516200696390600262012037565b82861162003efa578562003efc565b601f549097506200698d906001600160a01b0316886200c4cd565b909350915062006a559050565b835160365460408051630161b2cb60e71b8152905162006a2a926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620069ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006a10919062012134565b60c0015162006a2190600262012037565b8890866200b283565b601f5490975062006a4e906001600160a01b03166200433683620009488b6200a34e565b9093509150505b604954610100900460ff161562006a845762006a7c8560006722b1c8c1227a00006200c288565b945062006a89565b600094505b60365460408051630161b2cb60e71b8152905162006ad7926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048f8573d6000803e3d6000fd5b60008062006ae46200b4f9565b601f54919350915062006b00906001600160a01b03166200b627565b60365490965060009062006b1d906001600160a01b03166200b627565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529091506000805160206204f856833981519152906306447d5690602401600060405180830381600087803b15801562006b7557600080fd5b505af115801562006b8a573d6000803e3d6000fd5b505060475462010000900460ff16915062006c0b90505760405163f28dceb360e01b81526000805160206204f8568339815191529063f28dceb39062006bd69060489060040162011ee4565b600060405180830381600087803b15801562006bf157600080fd5b505af115801562006c06573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b03908116825260016020830152600093169163ded06231918991899186918101826040519080825280601f01601f19166020018201604052801562006c6e576020820181803683370190505b508152506040518563ffffffff1660e01b815260040162006c93949392919062012350565b6020604051808303816000875af115801562006cb3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006cd9919062011ef9565b60475490915062010000900460ff1662006cf95750505050505050505050565b62006da281620012ef603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562006d57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006d7d919062012134565b6101e001516020015162006d9a90670de0b6b3a76400006201207e565b88906200b713565b62006e098162006e00603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562006d57573d6000803e3d6000fd5b604b546200aaa7565b601f54620040f4906001600160a01b031682600187878d886200b799565b6036546040805163054fd4d560e41b8152905162006ec4926001600160a01b0316916354fd4d509160048083019260009291908290030181865afa15801562006e74573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262006e9e9190810190620124a0565b60405180604001604052806007815260200166076312e302e32360cc1b8152506200c497565b6074546040805163054fd4d560e41b81529051620019ef926001600160a01b0316916354fd4d509160048083019260009291908290030181865afa15801562006e74573d6000803e3d6000fd5b604754610100900460ff1662006f245750565b60008062006f316200b4f9565b601f54919350915060009062006f50906001600160a01b03166200b627565b60365490915060009062006f6d906001600160a01b03166200b627565b905062006fc8603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620053dd573d6000803e3d6000fd5b601f546040516303223eab60e11b81526001600160a01b0390911660048201529095506000805160206204f856833981519152906306447d5690602401600060405180830381600087803b1580156200702057600080fd5b505af115801562007035573d6000803e3d6000fd5b5050604754610100900460ff169150620070bb905057604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e090620070869063350b944160e11b906004016201239c565b600060405180830381600087803b158015620070a157600080fd5b505af1158015620070b6573d6000803e3d6000fd5b505050505b6036546040516363737ac960e11b81526004810187905260009182916001600160a01b039091169063dbbe8070908990839063c6e6f59290602401602060405180830381865afa15801562007114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200713a919062011ef9565b60408051606081018252601f546001600160a01b0316815260006020808301829052835182815290810184528284015291516001600160e01b031960e087901b1681526200718f949392919060040162012350565b60408051808303816000875af1158015620071ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620071d4919062012377565b6036549193509150620071fc906001600160a01b0316633656eec26200578f6002866200bed3565b600062007209826200c31f565b905060006200722d6200721d838b6201207e565b8a670de0b6b3a76400006200c530565b90506200723c8260006200bbef565b6046546200725b90829062005869906200585a906301e133806200c5bf565b601f546200150b906001600160a01b03168360008b8b8b8b6200bf09565b603654604080516304baa00b60e01b81529051620072ff926001600160a01b0316916304baa00b9160048083019260009291908290030181865afa158015620072c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620072f09190810190620124a0565b6039805462004d5e9062011e23565b607454604080516304baa00b60e01b81529051620019ef926001600160a01b0316916304baa00b9160048083019260009291908290030181865afa1580156200734c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620073769190810190620124a0565b60405162004e7390603990602001620124d8565b600080620073976200b4f9565b915091506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620073f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007418919062012247565b60c0015190506200742f8162000a1085856200c5bf565b60365460408051630161b2cb60e71b815290516200747d926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562000fad573d6000803e3d6000fd5b6036549094506000906200749a906001600160a01b03166200c673565b601f54909250620074b691506001600160a01b0316866200c4cd565b5050603654600090620074d2906001600160a01b03166200c673565b9150620074f3905081620074e788866200c5bf565b62000c25908562012305565b505050505050565b604954610100900460ff1615620075605760365460408051630161b2cb60e71b815290516200755a926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562004192573d6000803e3d6000fd5b620075ae565b60365460408051630161b2cb60e71b81529051620075ae926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200421f573d6000803e3d6000fd5b60365460408051630161b2cb60e71b815290516200764a926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620075fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007622919062012134565b60c001516200763390600262012037565b603654620046e5906001600160a01b03166200bc2a565b601f5460475491935060009162007670916001600160a01b031690859060ff166200bc39565b5090506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620076ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620076f0919062012247565b60c00151604954909150610100900460ff16156200772c576200772483662386f26fc100006722b1c8c1227a00006200c288565b925062007731565b600092505b60365460408051630161b2cb60e71b815290516200777f926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001110573d6000803e3d6000fd5b6000806200778c6200b4f9565b601f549193509150600090620077ab906001600160a01b03166200b627565b603654909150600090620077c8906001600160a01b03166200b627565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529091506000805160206204f856833981519152906306447d5690602401600060405180830381600087803b1580156200782057600080fd5b505af115801562007835573d6000803e3d6000fd5b505050506000620078d486603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562007895573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620078bb919062012247565b60c00151620078cb91906201207e565b8a90886200c77e565b60475490915062010000900460ff16158015620078f15750600088135b15620079615760405163f28dceb360e01b81526000805160206204f8568339815191529063f28dceb3906200792c9060489060040162011ee4565b600060405180830381600087803b1580156200794757600080fd5b505af11580156200795c573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b0390811682526001602083015260009316916329b23fc1918b918e9186918101826040519080825280601f01601f191660200182016040528015620079c4576020820181803683370190505b508152506040518563ffffffff1660e01b8152600401620079e9949392919062012350565b6020604051808303816000875af115801562007a09573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007a2f919062011ef9565b60475490915062010000900460ff1662007a4f5750505050505050505050565b62007a6181620012ef84600a62012305565b62007a6f818360646200aaa7565b601f54620040f4906001600160a01b0316826001898989896200b799565b6047546301000000900460ff1662007aa3575050565b604954610100900460ff161562007b085760365460408051630161b2cb60e71b8152905162007b02926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562004192573d6000803e3d6000fd5b62007b56565b60365460408051630161b2cb60e71b8152905162007b56926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200421f573d6000803e3d6000fd5b60365460408051630161b2cb60e71b8152905162007ba4926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620075fc573d6000803e3d6000fd5b601f5490925060009062007bc3906001600160a01b031684836200bc39565b5090506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562007c1d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007c43919062012247565b60c00151604954909150610100900460ff161562007c795762007c718360006722b1c8c1227a00006200c288565b925062007c7e565b600092505b60365460408051630161b2cb60e71b8152905162007ccc926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001110573d6000803e3d6000fd5b60008062007cd96200b4f9565b601f54919350915060009062007cf8906001600160a01b03166200b627565b60365490915060009062007d15906001600160a01b03166200b627565b9050600062007d7386603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562007895573d6000803e3d6000fd5b6047549091506301000000900460ff1662007df857604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e09062007dc39063350b944160e11b906004016201239c565b600060405180830381600087803b15801562007dde57600080fd5b505af115801562007df3573d6000803e3d6000fd5b505050505b601f5460009062007e15906001600160a01b0316898c846200bde1565b9050600062007e24826200c31f565b905062007e3881620012ef85600a62012305565b62007e4a81846038601401546200aaa7565b601f5462007e68906001600160a01b03168260008a8a8a8a6200b799565b5050505050505050505050565b60475460ff1662007e835750565b60365460408051630161b2cb60e71b8152905162007f1f926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007ed1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007ef7919062012134565b60c0015162007f0890600262012037565b60365462002105906001600160a01b03166200b274565b601f54909150600090819062007f3f906001600160a01b0316846200c4cd565b9150915060008062007f506200b4f9565b601f54919350915060009062007f6f906001600160a01b03166200b627565b60365490915060009062007f8c906001600160a01b03166200b627565b60475490915060009062010000900460ff16156200807257601f5462007fbd906001600160a01b031688886200b765565b905062007fd7816038601901548a62002eec919062012305565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200802c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008052919062012134565b6101e0015151600003620065d457620065d481896038601a01546200aaa7565b601f546000906200808f906001600160a01b03168989846200b687565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa158015620080da573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008100919062011ef9565b6053546036546040516363737ac960e11b8152600481018d90529294506200813e928492916001600160a01b03169063c6e6f5929060240162002fe6565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562008193573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620081b9919062012134565b6101e0015151600003620067af576036546040516363737ac960e11b8152600481018b9052620067af9183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562008218573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200823e919062011ef9565b6054546200aaa7565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101562001b365783829060005260206000200180546200828d9062011e23565b80601f0160208091040260200160405190810160405280929190818152602001828054620082bb9062011e23565b80156200830c5780601f10620082e0576101008083540402835291602001916200830c565b820191906000526020600020905b815481529060010190602001808311620082ee57829003601f168201915b5050505050815260200190600101906200826b565b6036546000906200833b906001600160a01b03166200c673565b91505062001773603660009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002807573d6000803e3d6000fd5b60085460009060ff1615620083af575060085460ff1690565b604051630667f9d760e41b81526000906000805160206204f8568339815191529063667f9d709062008400906000805160206204f876833981519152906519985a5b195960d21b90600401620123d1565b602060405180830381865afa1580156200841e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008444919062011ef9565b1415905090565b60475460ff16620084595750565b7f000000000000000000000000000000000000000000000000000000000000000015620085285760365460408051630161b2cb60e71b8152905162008520926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620084ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620084f4919062012134565b60c001516200850590600262012037565b601f546200210590600a906001600160a01b03163162012067565b9050620085fb565b60365460408051630161b2cb60e71b81529051620085f8926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008576573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200859c919062012134565b60c00151620085ad90600262012037565b6036546040805163c55dae6360e01b81529051600a926001600160a01b03169163c55dae639160048083019260209291908290030181865afa15801562002063573d6000803e3d6000fd5b90505b601f5460009062008616906001600160a01b0316836200c79d565b9050600080620086256200b4f9565b601f54919350915060009062008644906001600160a01b03166200b627565b60365490915060009062008661906001600160a01b03166200b627565b60475490915060009062010000900460ff1615620086cb57601f5460009062008694906001600160a01b0316886200bbaf565b9092509050620086a68160006200aa43565b620086b282896200b72a565b620086c482896038601501546200aaa7565b5062008866565b601f546000908190620086e9906001600160a01b031689836200bb20565b60365460405163b88fed9f60e01b8152600481018490529294509092506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562008737573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200875d919062011ef9565b92506200876c8160006200aa43565b6036546040516363737ac960e11b8152600481018b9052620087e39184916001600160a01b039091169063c6e6f59290602401602060405180830381865afa158015620087bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ef919062011ef9565b6036546040516363737ac960e11b8152600481018b9052620088639184916001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562008834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200885a919062011ef9565b604e546200aaa7565b50505b601f54604754620022eb916001600160a01b031690839062010000900460ff16888888886200b799565b60475460ff166200889f575050565b60365460408051630161b2cb60e71b81529051620088ed926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620075fc573d6000803e3d6000fd5b601f549092506000906200890b906001600160a01b0316846200c611565b50604954909150610100900460ff16156200893e57620089368260006722b1c8c1227a00006200b283565b915062008943565b600091505b60365460408051630161b2cb60e71b81529051620089c3926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008991573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620089b7919062012134565b6101000151836200b436565b600080620089d06200b4f9565b601f549193509150600090620089ef906001600160a01b03166200b627565b60365490915060009062008a0c906001600160a01b03166200b627565b60475490915060009062010000900460ff161562008a5957601f5462008a3d906001600160a01b0316878a6200be9f565b9050620065d48162008a508a8a6200b713565b605d546200aaa7565b601f5460009062008a76906001600160a01b0316888b846200bde1565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562008ac1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008ae7919062011ef9565b9150620067af8262008afa8b8b6200b713565b605e546200aaa7565b6060601580548060200260200160405190810160405280929190818152602001828054801562000f37576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f18575050505050905090565b60475460ff1662008b74575050565b7f00000000000000000000000000000000000000000000000000000000000000001562008c435760365460408051630161b2cb60e71b8152905162008c3b926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008be9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008c0f919062012134565b60c0015162008c2090600262012037565b601f54620046e590600a906001600160a01b03163162012067565b915062008d16565b60365460408051630161b2cb60e71b8152905162008d13926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008c91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008cb7919062012134565b60c0015162008cc890600262012037565b6036546040805163c55dae6360e01b81529051600a926001600160a01b03169163c55dae639160048083019260209291908290030181865afa15801562004643573d6000803e3d6000fd5b91505b601f5460009062008d31906001600160a01b0316846200c79d565b90506000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562008d8157600080fd5b505af115801562008d96573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b15801562008df357600080fd5b505af115801562008e08573d6000803e3d6000fd5b50506036546000925062008e2691506001600160a01b03166200bc2a565b601e5490915062008e469061010090046001600160a01b0316826200c611565b505060475462010000900460ff16156200904c57601f54600090819062008e77906001600160a01b0316856200bbaf565b9150915062008e888160006200bbef565b604954610100900460ff161562008eb75762008eaf8560006722b1c8c1227a00006200b283565b945062008ebc565b600094505b60365460408051630161b2cb60e71b8152905162008f0a926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048f8573d6000803e3d6000fd5b6036546001600160a01b031663414f826d62008f26826200c35b565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b15801562008f6757600080fd5b505af115801562008f7c573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562008fd7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008ffd919062012247565b6101a00151601f5490915060009062009020906001600160a01b0316846200c463565b90945090506200903181846200aa43565b620090428462004cc985856200b713565b5050505062004cd2565b601f5460009081906200906a906001600160a01b031685836200bb20565b915091506200907b8160006200bbef565b604954610100900460ff1615620090aa57620090a28560006722b1c8c1227a00006200b283565b9450620090af565b600094505b60365460408051630161b2cb60e71b81529051620090fd926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048f8573d6000803e3d6000fd5b6036546001600160a01b031663414f826d62009119826200c35b565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b1580156200915a57600080fd5b505af11580156200916f573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620091ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620091f0919062012247565b6101a00151601f5490915060009062009214906001600160a01b031684836200c3e0565b60365460405163b88fed9f60e01b8152600481018490529296509092506000916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562009267573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200928d919062011ef9565b90506200929b82856200aa43565b6200150b8162004ad986866200b713565b604754610100900460ff16620092c0575050565b60365460408051630161b2cb60e71b815290516200930e926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620075fc573d6000803e3d6000fd5b601f549092506000906200932d906001600160a01b031684836200bc39565b50604954909150610100900460ff16156200936057620093588260006722b1c8c1227a00006200c288565b915062009365565b600091505b60365460408051630161b2cb60e71b81529051620093b3926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008991573d6000803e3d6000fd5b600080620093c06200b4f9565b601f549193509150600090620093df906001600160a01b03166200b627565b603654909150600090620093fc906001600160a01b03166200b627565b905060008060006200949189603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200945d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009483919062012134565b61010001518c91906200c7fd565b9150506200949f816200c87a565b6047549092506301000000900460ff161590506200956057601f54600090620094d4906001600160a01b0316898c846200bde1565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa1580156200951f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009545919062011ef9565b92506200955983836038602601546200aaa7565b506200958d565b601f5462009579906001600160a01b0316888b6200be9f565b91506200958d82826038602501546200aaa7565b601f546047546200150b916001600160a01b03169084906301000000900460ff1615898989896200b799565b620095c36200c8a2565b601e5460405163c88a5e6d60e01b81526000805160206204f8568339815191529163c88a5e6d91620096139161010090046001600160a01b03169069152d02c7e14af680000090600401620123d1565b600060405180830381600087803b1580156200962e57600080fd5b505af115801562009643573d6000803e3d6000fd5b5050601f5460405163c88a5e6d60e01b81526000805160206204f856833981519152935063c88a5e6d925062009692916001600160a01b03169069152d02c7e14af680000090600401620123d1565b600060405180830381600087803b158015620096ad57600080fd5b505af1158015620096c2573d6000803e3d6000fd5b506000925060029150620096d39050565b604051908082528060200260200182016040528015620096fd578160200160208202803683370190505b509050601e60019054906101000a90046001600160a01b0316816000815181106200972c576200972c62012571565b6001600160a01b039283166020918202929092010152601f5482519116908290600190811062009760576200976062012571565b60200260200101906001600160a01b031690816001600160a01b03168152505060005b603b54811015620097e457603654603d54603b8054620097db936001600160a01b039081169316919085908110620097bf57620097bf62012571565b6000918252602090912001546001600160a01b0316856200cd90565b60010162009783565b5060005b603c548110156200982d57603654603e54603c805462009824936001600160a01b039081169316919085908110620097bf57620097bf62012571565b600101620097e8565b50620098386200cf69565b6073546200984f906001600160a01b03166200d6b3565b607480546001600160a01b0319166001600160a01b03928316908117909155607354604051630843957560e31b815260048101929092529091169063421caba890602401600060405180830381600087803b158015620098ae57600080fd5b505af1158015620098c3573d6000803e3d6000fd5b505060475460009250610100900460ff1690508015620098e6575060495460ff16155b1562009941576062546040805163313ce56760e01b8152905162009939926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015620059f9573d6000803e3d6000fd5b9050620099ce565b604754610100900460ff16156200997557603a5462009939906200996f9062005a2c9060ff16600a62012026565b6200a34e565b7f0000000000000000000000000000000000000000000000000000000000000000620099b357603a546200993990620008b29060ff16600a62012026565b603a54620099cb906200096f9060ff16600a62012026565b90505b604754620099f39063deadbeef9063deadbabe908490610100900460ff16156200a3c9565b60475460ff16801562009a2457507f0000000000000000000000000000000000000000000000000000000000000000155b1562009db8576000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562009a7857600080fd5b505af115801562009a8d573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b15801562009aea57600080fd5b505af115801562009aff573d6000803e3d6000fd5b5050603d54603654606154601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152938416955063095ea7b394509183169216906370a0823190602401602060405180830381865afa15801562009b69573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009b8f919062011ef9565b6040518363ffffffff1660e01b815260040162009bae929190620123d1565b6020604051808303816000875af115801562009bce573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009bf49190620123fb565b506000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562009c4357600080fd5b505af115801562009c58573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b15801562009cb157600080fd5b505af115801562009cc6573d6000803e3d6000fd5b5050603d54603654606154601f546040516370a0823160e01b81526001600160a01b039182166004820152938116955063095ea7b39450918216929116906370a0823190602401602060405180830381865afa15801562009d2b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009d51919062011ef9565b6040518363ffffffff1660e01b815260040162009d70929190620123d1565b6020604051808303816000875af115801562009d90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009db69190620123fb565b505b604754610100900460ff16156200a157576000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562009e1757600080fd5b505af115801562009e2c573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b15801562009e8957600080fd5b505af115801562009e9e573d6000803e3d6000fd5b5050603e54603654606254601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152938416955063095ea7b394509183169216906370a0823190602401602060405180830381865afa15801562009f08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009f2e919062011ef9565b6040518363ffffffff1660e01b815260040162009f4d929190620123d1565b6020604051808303816000875af115801562009f6d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009f939190620123fb565b506000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562009fe257600080fd5b505af115801562009ff7573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200a05057600080fd5b505af11580156200a065573d6000803e3d6000fd5b5050603e54603654606254601f546040516370a0823160e01b81526001600160a01b039182166004820152938116955063095ea7b39450918216929116906370a0823190602401602060405180830381865afa1580156200a0ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a0f0919062011ef9565b6040518363ffffffff1660e01b81526004016200a10f929190620123d1565b6020604051808303816000875af11580156200a12f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a1559190620123fb565b505b604754610100900460ff16156200a1b457603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b0390811660248301526200a1ae921690633656eec29060440162005b57565b6200a2cf565b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b0390811660248301526200a2cf921690633656eec290604401602060405180830381865afa1580156200a212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a238919062011ef9565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200a28d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a2b3919062012134565b60a001516200a2c490600262012037565b62000c19846200a34e565b6000805160206204f87683398151915260001c6001600160a01b03166341af2f526040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200a31d57600080fd5b505af1158015620074f3573d6000803e3d6000fd5b60008183116200a34357826200a345565b815b90505b92915050565b6040516363737ac960e11b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063c6e6f592906024015b602060405180830381865af41580156200a3a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a348919062011ef9565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204f856833981519152906306447d5690602401600060405180830381600087803b1580156200a42257600080fd5b505af11580156200a437573d6000803e3d6000fd5b5050505060005b607460009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200a492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a4b8919062011ef9565b8110156200a567576073546074546001600160a01b03918216916349f13de79188911660616200a4e76200ab11565b66b1a2bc2ec5000080888c6040518963ffffffff1660e01b81526004016200a51798979695949392919062012675565b6020604051808303816000875af11580156200a537573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a55d9190620123b1565b506001016200a43e565b508080156200a59457507f0000000000000000000000000000000000000000000000000000000000000000155b156200a61f57603d5460745460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200a5d2929116908690600401620123d1565b6020604051808303816000875af11580156200a5f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a6189190620123fb565b506200a700565b801580156200a631575060495460ff16155b156200a66f57603e5460745460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200a5d2929116908690600401620123d1565b806200a70057603e546074546001600160a01b039182169163095ea7b391166200a699856200c31f565b6040518363ffffffff1660e01b81526004016200a6b8929190620123d1565b6020604051808303816000875af11580156200a6d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a6fe9190620123fb565b505b60475460ff161580156200a7115750805b156200a7bc576000805160206204f85683398151915263c31eb0e07f00000000000000000000000000000000000000000000000000000000000000006200a7605763350b944160e11b6200a769565b631574f9f360e01b5b6040518263ffffffff1660e01b81526004016200a78791906201239c565b600060405180830381600087803b1580156200a7a257600080fd5b505af11580156200a7b7573d6000803e3d6000fd5b505050505b604754610100900460ff161580156200a7d3575080155b156200a84957604051630618f58760e51b81526000805160206204f8568339815191529063c31eb0e0906200a8149063350b944160e11b906004016201239c565b600060405180830381600087803b1580156200a82f57600080fd5b505af11580156200a844573d6000803e3d6000fd5b505050505b601e546073546001600160a01b036101009092048216319116632e7cd9718380156200a89257507f00000000000000000000000000000000000000000000000000000000000000005b6200a89f5760006200a8ac565b6200a8ac85600262012037565b60745488906001600160a01b0316603860616200a8c86200ab11565b60408051606081018252601e5461010090046001600160a01b031681528b151560208201528c9166b1a2bc2ec50000918291810160006040519080825280601f01601f1916602001820160405280156200a929576020820181803683370190505b508152508f6040518c63ffffffff1660e01b81526004016200a9559a99989796959493929190620126dc565b60206040518083038185885af11580156200a974573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200a99b9190620123b1565b603680546001600160a01b0319166001600160a01b039290921691909117905560475460ff1680156200a9cb5750815b80156200a9f557507f00000000000000000000000000000000000000000000000000000000000000005b156200aa29576200aa236200aa0b84836201207e565b601e5461010090046001600160a01b0316316200aa43565b62002d07565b601e5462002d0790829061010090046001600160a01b0316315b60405163260a5b1560e21b815260048101839052602481018290526000805160206204f856833981519152906398296c54906044015b60006040518083038186803b1580156200aa9257600080fd5b505afa158015620074f3573d6000803e3d6000fd5b604051630b6903e360e11b81526004810184905260248101839052604481018290526000805160206204f856833981519152906316d207c69060640160006040518083038186803b1580156200aafc57600080fd5b505afa158015620022eb573d6000803e3d6000fd5b604080516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602082015260609101604051602081830303815290604052905090565b60006000805160206204f87683398151915260001c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af11580156200abb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200abdb91908101906201279a565b905060006200ac0b827fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed2344656200d899565b90506200ac1b815160016200aa43565b6200ac85816000815181106200ac35576200ac3562012571565b6020026020010151600001516000815181106200ac56576200ac5662012571565b60200260200101517fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed2344656200d9bb565b6200acdb816000815181106200ac9f576200ac9f62012571565b6020026020010151600001516001815181106200acc0576200acc062012571565b602002602001015160001c8c6001600160a01b03166200aa43565b600080600080846000815181106200acf7576200acf762012571565b6020026020010151602001518060200190518101906200ad18919062012913565b93509350935093506200ad2c848f6200d9f6565b6200ada0838f6001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200ad70573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200ad9a9190810190620124a0565b6200c497565b60008e6001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200ade2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ae08919062012134565b835181519192506200ae1a916200d9f6565b6200ae2e836020015182602001516200d9f6565b6200ae42836040015182604001516200d9f6565b6200ae56836060015182606001516200d9bb565b6200ae6a83608001518260a001516200aa43565b6200ae7e8360a001518260c001516200aa43565b6200ae938360e001518261010001516200aa43565b6200aea98361010001518261012001516200aa43565b6200aebf8361012001518261014001516200aa43565b6200aed58361014001518261016001516200d9f6565b6200aeeb8361016001518261018001516200d9f6565b6101c0830151516101e0820151516200af0591906200aa43565b6200af23836101c0015160200151826101e00151602001516200aa43565b6200af41836101c0015160400151826101e00151604001516200aa43565b6200af5f836101c0015160600151826101e00151606001516200aa43565b6200afbb826040516020016200af76919062012419565b604051602081830303815290604052805190602001208a6040516020016200af9f919062012419565b604051602081830303815290604052805190602001206200d9bb565b50505050505060006200afef827f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af36200d899565b90506200afff815160016200aa43565b6200b069816000815181106200b019576200b01962012571565b6020026020010151600001516000815181106200b03a576200b03a62012571565b60200260200101517f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af36200d9bb565b6200b0b6816000815181106200b083576200b08362012571565b6020026020010151600001516001815181106200b0a4576200b0a462012571565b602002602001015160001c8a6200d9f6565b60008a90506000806000806000866000815181106200b0d9576200b0d962012571565b6020026020010151602001518060200190518101906200b0fa919062012aa8565b9398509196509450925090508d8c156200b1a5576200b19f866200b1208e600262012037565b6040516363737ac960e11b8152600481018590526001600160a01b038b169063c6e6f59290602401602060405180830381865afa1580156200b166573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b18c919062011ef9565b6200b19891906201207e565b8c6200aaa7565b6200b1c3565b6200b1c3866200b1b78e600262012037565b6200b19890846201207e565b6200b1cf85826200aa43565b6200b24884886001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200b214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b23a919062012134565b60800151620186a06200aaa7565b6200b254838e6200da3a565b6200b260828f6200aa43565b505050505050505050505050505050505050565b60006200a3488260076200da77565b6000818311156200b2cc5760405162461bcd60e51b815260206004820152600e60248201526d098d2c47440dad2dc407c40dac2f60931b60448201526064015b60405180910390fd5b60006200b2da84846201207e565b6200b2e790600162012305565b905060006200b2f7828762012af4565b90506200b305858262012305565b9695505050505050565b6000806000836200b3905760365460405163b88fed9f60e01b8152600481018790526001600160a01b039091169063b88fed9f90602401602060405180830381865afa1580156200b364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b38a919062011ef9565b6200b392565b845b90506200b42886866040518060e0016040528088151581526020018a6001600160a01b0316815260200160006001600160401b038111156200b3d8576200b3d862011b91565b6040519080825280601f01601f1916602001820160405280156200b403576020820181803683370190505b508152602001898152602001600081526020018581526020016000198152506200dc7a565b92509250505b935093915050565b80156200b49e5760405162461bcd60e51b815260206004820152602f60248201527f4165726f64726f6d654c7048797065726472697665546573743a20766172696160448201526e0626c65526174652069736e2774203608c1b60648201526084016200b2c3565b6000805160206204f85683398151915263e5d6bf026200b4bf844262012305565b6040518263ffffffff1660e01b81526004016200b4de91815260200190565b600060405180830381600087803b1580156200a31d57600080fd5b603d546040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009283929116906370a0823190602401602060405180830381865afa1580156200b568573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b58e919062011ef9565b603d546040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152909116906370a0823190602401602060405180830381865afa1580156200b5f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b61f919062011ef9565b915091509091565b6200b64c60405180606001604052806000815260200160008152602001600081525090565b6000806200b65a846200c673565b6040805160608101825291825260208201929092526001600160a01b039095163190850152509192915050565b60006200b70a858585604051806080016040528087151581526020018a6001600160a01b0316815260200160006001600160401b038111156200b6ce576200b6ce62011b91565b6040519080825280601f01601f1916602001820160405280156200b6f9576020820181803683370190505b50815260200160008152506200e0b3565b95945050505050565b60006200a3458383670de0b6b3a76400006200c77e565b604051638466f41560e01b815260048101839052602481018290526000805160206204f85683398151915290638466f415906044016200aa79565b60408051608081018252600181526001600160a01b038516602082015260009162000846918691869186918101866200b6ce565b84156200b95a5760475462010000900460ff166200b7ca5760405163350b944160e11b815260040160405180910390fd5b6000806200b7d76200b4f9565b90925090506200b7f5826200b7ed8a896201207e565b60016200aaa7565b6200b81a816200b8058a6200a34e565b6200b81190886201207e565b6060546200aaa7565b7f00000000000000000000000000000000000000000000000000000000000000006200b8825760365460408401516200b85e916001600160a01b031631906200aa43565b601f5460408501516200b87c916001600160a01b031631906200aa43565b6200b8c5565b60365460408401516200b8a0916001600160a01b031631906200aa43565b601f5460408501516200b8c5916001600160a01b0316319062000a10908b9062012305565b60365460009081906200b8e1906001600160a01b03166200c673565b915091506000806200b8f38d6200c673565b915091506200b9078488602001516200aa43565b6200b91e828d8a6020015162000a10919062012305565b6200b93c836200b92e8e6200a34e565b89516200b81191906201207e565b87516060546200b94e9183916200aaa7565b505050505050620022eb565b6047546301000000900460ff166200b9855760405163350b944160e11b815260040160405180910390fd5b6000806200b9926200b4f9565b915091506200b9a4828760016200aaa7565b6200b9b2818660016200aaa7565b60365460408401516200b9d0916001600160a01b031631906200aa43565b601f5460408501516200b9ee916001600160a01b031631906200aa43565b60365460009081906200ba0a906001600160a01b03166200c673565b915091506000806200ba1c8d6200c673565b915091506200ba368488602001516038602801546200aaa7565b6200ba4c8289602001516038602801546200aaa7565b6200ba5c836200b92e8e6200a34e565b6200ba7a816200ba6c8e6200a34e565b8a516200b811919062012305565b50505050505050505050505050565b60006200084684846040518060e001604052808615158152602001886001600160a01b0316815260200160006001600160401b038111156200bacf576200bacf62011b91565b6040519080825280601f01601f1916602001820160405280156200bafa576020820181803683370190505b50815260200187815260200160008152602001600081526020016000198152506200e22c565b6000806200bba3858560405180608001604052808715158152602001896001600160a01b0316815260200160006001600160401b038111156200bb67576200bb6762011b91565b6040519080825280601f01601f1916602001820160405280156200bb92576020820181803683370190505b50815260200160008152506200e606565b91509150935093915050565b60408051608081018252600181526001600160a01b038416602082015260009182916200bbe391869186918101856200bb67565b915091505b9250929050565b604051636d83fe6960e11b815260048101839052602481018290526000805160206204f8568339815191529063db07fcd2906044016200aa79565b60006200a3488260076200e77d565b6000806000836200bcba576036546040516363737ac960e11b8152600481018790526001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200bc8e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bcb4919062011ef9565b6200bcbc565b845b90506000846200bd3c576036546040516363737ac960e11b8152600481018890526001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200bd10573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bd36919062011ef9565b6200bd3e565b855b90506200bdd387876040518060e0016040528089151581526020018b6001600160a01b0316815260200160006001600160401b038111156200bd84576200bd8462011b91565b6040519080825280601f01601f1916602001820160405280156200bdaf576020820181803683370190505b5081526020018681526020016000815260200160008152602001858152506200e976565b935093505050935093915050565b60006200b70a858585604051806080016040528087151581526020018a6001600160a01b0316815260200160006001600160401b038111156200be28576200be2862011b91565b6040519080825280601f01601f1916602001820160405280156200be53576020820181803683370190505b50815260200160008152506200edf7565b60405163b12fc00560e01b815260048101839052602481018290526000805160206204f8568339815191529063b12fc005906044016200aa79565b60408051608081018252600181526001600160a01b038516602082015260009162000846918691869186918101866200be28565b60006001600160f81b038211156200befe5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b84156200c1745760475460ff166200bf345760405163350b944160e11b815260040160405180910390fd5b6000806200bf416200b4f9565b90925090506200bf60826200bf578a8962012305565b605f546200aaa7565b6036546040516363737ac960e11b8152600481018a90526200bfe39183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200bfb1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bfd7919062011ef9565b6200bf57908862012305565b7f00000000000000000000000000000000000000000000000000000000000000006200c0475760365460408401516200c027916001600160a01b031631906200aa43565b6200c041896001600160a01b03163185604001516200aa43565b6200c086565b60365460408401516200c065916001600160a01b031631906200aa43565b6200c086896001600160a01b03163189866040015162000a1091906201207e565b60365460009081906200c0a2906001600160a01b03166200c673565b915091506000806200c0b48d6200c673565b915091506200c0c88488602001516200aa43565b6200c0df828d8a6020015162000a1091906201207e565b6036546040516363737ac960e11b8152600481018e90526200c1649185916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200c130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c156919062011ef9565b89516200bf57919062012305565b6200b94e8189600001516200aa43565b604754610100900460ff166200c19d5760405163350b944160e11b815260040160405180910390fd5b6000806200c1aa6200b4f9565b915091506200c1ba82876200aa43565b6200c1cc81866038602701546200aaa7565b60365460408401516200c1ea916001600160a01b031631906200aa43565b601f5460408501516200c208916001600160a01b031631906200aa43565b60365460009081906200c224906001600160a01b03166200c673565b915091506000806200c2368d6200c673565b915091506200c24a8488602001516200aa43565b6200c25a8289602001516200aa43565b6200c26a836200c1568e6200a34e565b6200ba7a816200c27a8e6200a34e565b8a516200bf5791906201207e565b6000818313156200c2cd5760405162461bcd60e51b815260206004820152600e60248201526d098d2c47440dad2dc407c40dac2f60931b60448201526064016200b2c3565b60006200c2db848462012b0b565b6200c2e890600162012b2e565b905060006200c2f8828762012b59565b905060008112156200c313576200c310828262012b2e565b90505b6200b305858262012b2e565b60405163b88fed9f60e01b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f906024016200a385565b6000816001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200c39d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c3c3919062012134565b61012001516200c3d4904262012af4565b6200a34890426201207e565b6000806200bba3858560405180608001604052808715158152602001896001600160a01b0316815260200160006001600160401b038111156200c427576200c42762011b91565b6040519080825280601f01601f1916602001820160405280156200c452576020820181803683370190505b50815260200160008152506200ef2a565b60408051608081018252600181526001600160a01b038416602082015260009182916200bbe391869186918101856200c427565b60405163f320d96360e01b81526000805160206204f8568339815191529063f320d963906200aa79908590859060040162012b70565b6040805160e081018252600181526001600160a01b038416602080830191909152825160008082529181018452909283926200bbe3928792879291908201908152602001878152602001600081526020018781526020016000198152506200dc7a565b6000670de0b6b3a764000082111580156200c54b5750600082115b6200c5a35760405162461bcd60e51b815260206004820152602160248201527f457870656374696e67204e6f726d616c697a656454696d6552656d61696e696e6044820152606760f81b60648201526084016200b2c3565b620008466200c5b385846200b713565b620063f286866201207e565b60006200a34583670de0b6b3a7640000846200c77e565b60405163a8d4d1d960e01b815260048101839052602481018290526000805160206204f8568339815191529063a8d4d1d9906044016200aa79565b6040805160e081018252600181526001600160a01b038416602080830191909152825160008082529181018452909283926200bbe39287928792919082019081526020018781526020016000815260200160008152602001878152506200e976565b603d546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a0823190602401602060405180830381865afa1580156200c6c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c6e8919062011ef9565b6040516370a0823160e01b81526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156200c74f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c775919062011ef9565b91509150915091565b60008260001904841183021582026200c79657600080fd5b5091020490565b6040805160e081018252600181526001600160a01b03841660208083019190915282516000808252918101845290926200a3459286928692820190815260200186815260200160008152602001600081526020016000198152506200e22c565b600080806200c811846301e133806200c5bf565b905060008512156200c851576200c8406200c838826200c8318862012b99565b906200b713565b87906200b713565b6200c84b9062012b99565b6200c861565b6200c8616200c83886836200b713565b91506200c86f828762012b2e565b925050935093915050565b6000808212156200c89e5760405163071d137160e51b815260040160405180910390fd5b5090565b6200c8ac6200f05c565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204f856833981519152906306447d5690602401600060405180830381600087803b1580156200c90557600080fd5b505af11580156200c91a573d6000803e3d6000fd5b5050505060126000806000196040516200c93490620116a1565b60c08082526004908201819052634261736560e01b60e083015261010060208301819052820152634241534560e01b61012082015260ff90941660408501526001600160a01b0390921660608401521515608083015260a082015261014001604051809103906000f0801580156200c9b0573d6000803e3d6000fd5b50603380546001600160a01b0319166001600160a01b03929092169190911790556040516200c9df90620116af565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103906000f0801580156200ca23573d6000803e3d6000fd5b50603260016101000a8154816001600160a01b0302191690836001600160a01b031602179055506040516200ca5890620116bd565b604051809103906000f0801580156200ca75573d6000803e3d6000fd5b50603480546001600160a01b0319166001600160a01b0392831690811790915560295460408051637ab4339d60e01b81526004810191909152601260448201527148797065726472697665526567697374727960701b60648201529216602483015290637ab4339d90608401600060405180830381600087803b1580156200cafc57600080fd5b505af11580156200cb11573d6000803e3d6000fd5b5050505060006200cb2e66b1a2bc2ec500006301e133806200f42c565b6040805160018082528183019092529192506000919060208083019080368337505060285482519293506001600160a01b0316918391506000906200cb77576200cb7762012571565b60200260200101906001600160a01b031690816001600160a01b031681525050816101600151826101800151836101a00151846101c00151846040516200cbbe90620116cb565b6200cbce95949392919062012bb8565b604051809103906000f0801580156200cbeb573d6000803e3d6000fd5b50603780546001600160a01b0319166001600160a01b03928316179055601e546200cc1e9161010090910416836200f51e565b6000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200cc6c57600080fd5b505af11580156200cc81573d6000803e3d6000fd5b50506027546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200ccda57600080fd5b505af11580156200ccef573d6000803e3d6000fd5b50506036546028546040516338c0646560e11b81526001600160a01b0391821660048201526001602482015291169250637180c8ca9150604401600060405180830381600087803b1580156200cd4457600080fd5b505af11580156200cd59573d6000803e3d6000fd5b505060325460ff169150620007c29050576000805160206204f85683398151915263e5d6bf026200b4bf6301e13380600362012037565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908516906370a0823190602401602060405180830381865afa1580156200cddb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ce01919062011ef9565b905060005b8251811015620074f3576200ce4884868551856200ce25919062012067565b8685815181106200ce3a576200ce3a62012571565b6020026020010151620022f4565b506000805160206204f87683398151915260001c6001600160a01b03166306447d568483815181106200ce7f576200ce7f62012571565b60200260200101516040518263ffffffff1660e01b81526004016200ceb391906001600160a01b0391909116815260200190565b600060405180830381600087803b1580156200cece57600080fd5b505af11580156200cee3573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b038816925063095ea7b391506200cf1990899060001990600401620123d1565b6020604051808303816000875af11580156200cf39573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200cf5f9190620123fb565b506001016200ce06565b602480546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204f856833981519152916306447d569101600060405180830381600087803b1580156200cfbd57600080fd5b505af11580156200cfd2573d6000803e3d6000fd5b5060009250600191506200cfe39050565b6040519080825280602002602001820160405280156200d00d578160200160208202803683370190505b50601f5481519192506001600160a01b03169082906000906200d034576200d03462012571565b60200260200101906001600160a01b031690816001600160a01b0316815250506040516200d06290620116af565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103906000f0801580156200d0a6573d6000803e3d6000fd5b5060328054610100600160a81b0319166101006001600160a01b0393841681029190911791829055604080516102c081018252601e5483900485168152602080548616818301819052601f548716838501526060808401899052608080850192909252602654881660a0850152600060c08501819052610e1060e0860152617080858801526201518061012086015262093a806101408601526312cc0300610160860152670214e8348c4f0000610180860152671bc16d674ec800006101a086015266038d7ea4c680006101c08601526706f05b59d3b200006101e086018190526611c37937e08000610200870152610220860152855180840187528181528085018290528087018290528083019190915261024085015284519182018552670de0b6b3a764000080835282840181905282860181905290820152610260830152929093049093166102808301819052835163d13053bb60e01b8152935192936102a0850193919263d13053bb926004808401938290030181865afa1580156200d234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d25a919062011ef9565b90526040516200d26a90620116d9565b6200d276919062012bf6565b604051809103906000f0801580156200d293573d6000803e3d6000fd5b50607380546001600160a01b0319166001600160a01b03928316908117909155604080516101e081018252603d5484168152603e5490931660208085019190915281516399623bb160e01b8152825192850193926399623bb1926004808401939192918290030181865afa1580156200d310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d3369190620123b1565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b031663c905a4b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200d398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d3be919062011ef9565b81526040805460208084019190915260415482840152671bc16d674ec80000606084015260465460808401526201518060a0840152600060c0840152607354825163e333155560e01b8152925160e0909401936001600160a01b039091169263e33315559260048083019391928290030181865afa1580156200d445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d46b9190620123b1565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200d4cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d4f39190620123b1565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200d555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d57b9190620123b1565b6001600160a01b0390811682526000602080840191909152604080516080808201835260425482526043548285015260445482840152604554606080840191909152958301919091528551606180549186166001600160a01b031992831617905586840151606280549187169183169190911790558683015160638054918716918316919091179055868601516064559086015160655560a086015160665560c086015160675560e0860151606855610100860151606955610120860151606a55610140860151606b8054918616918316919091179055610160860151606c8054918616918316919091179055610180860151606d80549186169183169190911790556101a0860151606e8054919095169116179092556101c0909301518051606f5592830151607055820151607155015160725550565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000906000805160206204f856833981519152906306447d5690602401600060405180830381600087803b1580156200d70f57600080fd5b505af11580156200d724573d6000803e3d6000fd5b50506040516200d73c925060389150602001620124d8565b604051602081830303815290604052826040516200d75a90620116e7565b604051809103906000f0801580156200d777573d6000803e3d6000fd5b506040516200d78690620116f5565b604051809103906000f0801580156200d7a3573d6000803e3d6000fd5b506040516200d7b29062011703565b604051809103906000f0801580156200d7cf573d6000803e3d6000fd5b506040516200d7de9062011711565b604051809103906000f0801580156200d7fb573d6000803e3d6000fd5b506040516200d80a906201171f565b604051809103906000f0801580156200d827573d6000803e3d6000fd5b506040516200d836906201172d565b604051809103906000f0801580156200d853573d6000803e3d6000fd5b506040516200d862906201173b565b6200d87598979695949392919062012e00565b604051809103906000f0801580156200d892573d6000803e3d6000fd5b5092915050565b6060600083516001600160401b038111156200d8b9576200d8b962011b91565b6040519080825280602002602001820160405280156200d90857816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816200d8d85790505b50915060005b84518110156200d9b257838582815181106200d92e576200d92e62012571565b6020026020010151600001516000815181106200d94f576200d94f62012571565b6020026020010151036200d9a9578481815181106200d972576200d97262012571565b60200260200101518383806200d9889062012e60565b9450815181106200d99d576200d99d62012571565b60200260200101819052505b6001016200d90e565b50815292915050565b604051637c84c69b60e01b815260048101839052602481018290526000805160206204f85683398151915290637c84c69b906044016200aa79565b6040516328a9b0fb60e11b81526001600160a01b038084166004830152821660248201526000805160206204f8568339815191529063515361f6906044016200aa79565b60405163f7fe347760e01b8152821515600482015281151560248201526000805160206204f8568339815191529063f7fe3477906044016200aa79565b600080836001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200daba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200dae0919062012134565b90506000846001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200db24573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200db4a919062012247565b90506200dc706040518061018001604052808360000151815260200183602001518152602001836080015181526020018360e001518152602001836101c00151815260200184610140015181526020018360c001518152602001846080015181526020018460a001518152602001846101e00151600001518152602001846101e00151602001518152602001846101e0015160400151815250866001600160a01b031663cf210e656200dc06896001600160a01b03166200c35b565b6040518263ffffffff1660e01b81526004016200dc2591815260200190565b602060405180830381865afa1580156200dc43573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200dc69919062011ef9565b866200fa41565b5095945050505050565b6000806000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200dccb57600080fd5b505af11580156200dce0573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200dd3557600080fd5b505af11580156200dd4a573d6000803e3d6000fd5b50505050603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200dda3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ddc9919062012134565b5060365460408051630161b2cb60e71b8152905173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200de29573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200de4f919062012134565b516001600160a01b03161480156200de65575082515b156200df265760365460608085015160a086015160808701516040805194850181526020808a01516001600160a01b0390811687528a51151591870191909152818a015186830152905163cba2e58d60e01b815295169463cba2e58d946200ded7938b93909290919060040162012350565b604080518083038185885af11580156200def5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200df1c919062012377565b915091506200b42e565b60335460405163140e25ad60e31b8152600481018690526001600160a01b039091169063a0712d6890602401600060405180830381600087803b1580156200df6d57600080fd5b505af11580156200df82573d6000803e3d6000fd5b505060335460365460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200dfbf92909116908890600401620123d1565b6020604051808303816000875af11580156200dfdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e0059190620123fb565b5060365460a08401516080850151604080516060810182526020808901516001600160a01b03908116835289511515918301919091528289015182840152915163cba2e58d60e01b8152919094169363cba2e58d936200e06e938a939192909160040162012350565b60408051808303816000875af11580156200e08d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200df1c919062012377565b60006000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e10357600080fd5b505af11580156200e118573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200e16d57600080fd5b505af11580156200e182573d6000803e3d6000fd5b50506036546060808601516040805192830181526020808901516001600160a01b03908116855289511515918501919091528189015184830152905163ded0623160e01b81529316945063ded0623193506200e1e692899289929160040162012350565b6020604051808303816000875af11580156200e206573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b70a919062011ef9565b60006000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e27c57600080fd5b505af11580156200e291573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03871660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200e2e657600080fd5b505af11580156200e2fb573d6000803e3d6000fd5b505060365460408051630161b2cb60e71b8152905173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee94506001600160a01b03909216925063b0d96580916004808301926102609291908290030181865afa1580156200e360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e386919062012134565b516001600160a01b03161480156200e39c575081515b156200e46357603654606080840151608085015160a086015160c08701516040805195860181526020808a01516001600160a01b0390811688528a51151591880191909152818a0151878301529051634c2ac1d960e01b8152961695634c2ac1d9956200e415948b949093909290919060040162012e7c565b60206040518083038185885af11580156200e434573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200e45b919062011ef9565b905062000849565b603354606083015160405163140e25ad60e31b81526001600160a01b039092169163a0712d68916200e49b9160040190815260200190565b600060405180830381600087803b1580156200e4b657600080fd5b505af11580156200e4cb573d6000803e3d6000fd5b5050603354603654606086015160405163095ea7b360e01b81526001600160a01b03938416955063095ea7b394506200e50b9390921691600401620123d1565b6020604051808303816000875af11580156200e52b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e5519190620123fb565b50603654608083015160a084015160c0850151604080516060810182526020808901516001600160a01b039081168352895115159183019190915282890151828401529151634c2ac1d960e01b81529190951694634c2ac1d9946200e5c0948a94919390929060040162012e7c565b6020604051808303816000875af11580156200e5e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e45b919062011ef9565b6000806000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e65757600080fd5b505af11580156200e66c573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200e6c157600080fd5b505af11580156200e6d6573d6000803e3d6000fd5b50506036546060808701516040805192830181526020808a01516001600160a01b0390811685528a51151591850191909152818a01518483015290516332f04d0d60e21b81529316945063cbc1343493506200e7389289929060040162012ea9565b60408051808303816000875af11580156200e757573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bba3919062012377565b600080836001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200e7c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e7e6919062012134565b90506000846001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200e82a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e850919062012247565b90506200b70a6040518061018001604052808360000151815260200183602001518152602001836080015181526020018360e001518152602001836101c00151815260200184610140015181526020018360c001518152602001846080015181526020018460a001518152602001846101e00151600001518152602001846101e00151602001518152602001846101e0015160400151815250866001600160a01b031663cf210e656200e90c896001600160a01b03166200c35b565b6040518263ffffffff1660e01b81526004016200e92b91815260200190565b602060405180830381865afa1580156200e949573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e96f919062011ef9565b866200fc6f565b6000806000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e9c757600080fd5b505af11580156200e9dc573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200ea3157600080fd5b505af11580156200ea46573d6000803e3d6000fd5b50506036546200ea6292506001600160a01b031690506200fe39565b915073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200ead7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200eafd919062012134565b516001600160a01b03161480156200eb13575082515b156200ebd55760365460608085015160c086015160808701516040805194850181526020808a01516001600160a01b0390811687528a51151591870191909152818a0151868301529051630dbbe80760e41b815295169463dbbe8070946200eb85938b93909290919060040162012350565b604080518083038185885af11580156200eba3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200ebca919062012377565b90925090506200b42e565b603354606084015160405163140e25ad60e31b81526001600160a01b039092169163a0712d68916200ec0d9160040190815260200190565b600060405180830381600087803b1580156200ec2857600080fd5b505af11580156200ec3d573d6000803e3d6000fd5b505060335460365460c087015160405163095ea7b360e01b81526001600160a01b03938416955063095ea7b394506200ec7d9390921691600401620123d1565b6020604051808303816000875af11580156200ec9d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ecc39190620123fb565b5060365460c08401516080850151604080516060810182526020808901516001600160a01b039081168352895115159183019190915282890151828401529151630dbbe80760e41b8152919094169363dbbe8070936200ed2c938a939192909160040162012350565b60408051808303816000875af11580156200ed4b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ed71919062012377565b60335460608601519294509092506001600160a01b0316906342966c68906200ed9c9084906201207e565b6040518263ffffffff1660e01b81526004016200edbb91815260200190565b600060405180830381600087803b1580156200edd657600080fd5b505af11580156200edeb573d6000803e3d6000fd5b50505050935093915050565b60006000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200ee4757600080fd5b505af11580156200ee5c573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200eeb157600080fd5b505af11580156200eec6573d6000803e3d6000fd5b50506036546060808601516040805192830181526020808901516001600160a01b0390811685528951151591850191909152818901518483015290516329b23fc160e01b8152931694506329b23fc193506200e1e692899289929160040162012350565b6000806000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200ef7b57600080fd5b505af11580156200ef90573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200efe557600080fd5b505af11580156200effa573d6000803e3d6000fd5b50506036546060808701516040805192830181526020808a01516001600160a01b0390811685528a51151591850191909152818a015184830152905163074a6de960e01b81529316945063074a6de993506200e7389289929060040162012ea9565b6200f08460405180604001604052806005815260200164616c69636560d81b8152506200379b565b601e60016101000a8154816001600160a01b0302191690836001600160a01b031602179055506200f0d0604051806040016040528060038152602001623137b160e91b8152506200379b565b601f80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526563656c696e6560d01b60208201526200f118906200379b565b602060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200f164604051806040016040528060038152602001623230b760e91b8152506200379b565b602180546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600381526265766560e81b60208201526200f1a9906200379b565b602280546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260088152673232b83637bcb2b960c11b60208201526200f1f3906200379b565b602480546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526536b4b73a32b960d11b60208201526200f23b906200379b565b602380546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b3332b2a1b7b63632b1ba37b960a11b60208201526200f289906200379b565b602580546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600e81526d39bbb2b2b821b7b63632b1ba37b960911b60208201526200f2d9906200379b565b602680546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600a815269676f7665726e616e636560b01b60208201526200f325906200379b565b602780546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260068152653830bab9b2b960d11b60208201526200f36d906200379b565b602880546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260098152683932b3b4b9ba3930b960b91b60208201526200f3b8906200379b565b602980546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b726577617264536f7572636560a01b60208201526200f406906200379b565b602a80546001600160a01b0319166001600160a01b039290921691909117905542602b55565b6200f43662011749565b60006200f44484846200febd565b80516001600160a01b0390811684526020808301518216908501526040808301518216908501526060808301519085015260808083015160a08087019190915283015160c08087019190915283015160e08087019190915283015161010080870191909152830151610120808701919091528301516101408087019190915283015182166101608087019190915283015182166101808087019190915283015182166101a0808701919091528301519091166101c080860191909152909101516101e0840152670de0b6b3a7640000908301525092915050565b6000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200f56c57600080fd5b505af11580156200f581573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03851660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200f5d657600080fd5b505af11580156200f5eb573d6000803e3d6000fd5b50506037546040518493506001600160a01b0390911691506200f60e9062011831565b6200f61b92919062012eca565b604051809103906000f0801580156200f638573d6000803e3d6000fd5b50603680546001600160a01b0319166001600160a01b0392831617905560375461016083015160405163dd2b8fbb60e01b8152908316600482015291169063dd2b8fbb90602401600060405180830381600087803b1580156200f69a57600080fd5b505af11580156200f6af573d6000803e3d6000fd5b5050603754610180840151604051631a586b9d60e31b81526001600160a01b0391821660048201529116925063d2c35ce89150602401600060405180830381600087803b1580156200f70057600080fd5b505af11580156200f715573d6000803e3d6000fd5b50506037546101808401516040516308627a4f60e41b81526001600160a01b03918216600482015291169250638627a4f09150602401600060405180830381600087803b1580156200f76657600080fd5b505af11580156200f77b573d6000803e3d6000fd5b50506037546101c0840151604051630f8b480560e21b81526001600160a01b03918216600482015291169250633e2d20149150602401600060405180830381600087803b1580156200f7cc57600080fd5b505af11580156200f7e1573d6000803e3d6000fd5b505050506000805160206204f87683398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200f83357600080fd5b505af11580156200f848573d6000803e3d6000fd5b50506029546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204f85683398151915292506306447d569150602401600060405180830381600087803b1580156200f8a157600080fd5b505af11580156200f8b6573d6000803e3d6000fd5b5060009250600191506200f8c79050565b6040519080825280602002602001820160405280156200f8f1578160200160208202803683370190505b5060408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060365485519293506001600160a01b0316918591506000906200f95e576200f95e62012571565b60200260200101906001600160a01b031690816001600160a01b0316815250506001826000815181106200f996576200f99662012571565b60200260200101906001600160801b031690816001600160801b0316815250506000816000815181106200f9ce576200f9ce62012571565b6001600160a01b039283166020918202929092010152603454604051630ff9856960e11b8152911690631ff30ad2906200fa119086908690869060040162012ff9565b600060405180830381600087803b1580156200fa2c57600080fd5b505af11580156200150b573d6000803e3d6000fd5b60008060006200fa5a866000015187602001516201000a565b905060006200fa788288604001518960e001518a60a001516201002e565b90506000806200fa8a89858562010049565b909250905060006200faa08a8a858588620102e0565b91505080156200fab9575090945092506200b42e915050565b506200fac889838a866201043c565b95506200fad889878686620104f4565b94506000806200faec8b8b8a8a89620102e0565b91509150806200fb595760405162461bcd60e51b815260206004820152603160248201527f496e697469616c20677565737320696e206063616c63756c6174654d61784c6f6044820152703733b01034b99034b739b7b63b32b73a1760791b60648201526084016200b2c3565b60005b898110156200fc60578489106200fbd25760405162461bcd60e51b815260206004820152603360248201527f52656163686564206162736f6c757465206d617820626f6e6420616d6f756e746044820152721034b7103033b2ba2fb6b0bc2fb637b733b01760691b60648201526084016200b2c3565b60006200fbe28d8b8a8a6201054f565b93509050826200fbf357506200fc60565b60006200fc0185836200c5bf565b6200fc0d908c62012305565b905060006200fc1f8f838c8c620104f4565b90506200fc308f8f84848d620102e0565b909650945084156200fc4857819b50809a506200fc51565b5050506200fc60565b5050508060010190506200fb5c565b50505050505050935093915050565b6040805160608101825260008082526020820181905291810182905260006200fca1866000015187602001516201000a565b905060006200fcbf8288604001518960e001518a60a001516201002e565b905060006200fccf8884620105f7565b90506200fce0888285858b6201073c565b15801560408701529085526200fcfc5793506200084992505050565b60006200fd0b89848a620108bf565b90506200fd1c898286868c6201073c565b1515604087018190529086526200fd905760405162461bcd60e51b815260206004820152603160248201527f496e697469616c20677565737320696e206063616c63756c6174654d617853686044820152701bdc9d18081a5cc81a5b9cdbdb1d995b9d607a1b60648201526084016200b2c3565b60005b878110156200fe2c576200fdaa8a838688620109b1565b158015604089015260208801919091526200fe2c57602086015186516000916200fdd591906200c5bf565b6200fde1908462012305565b9050838111156200fdf357506200fe2c565b6200fe028b8288888e6201073c565b15801560408a01529088526200fe1b578092506200fe22565b506200fe2c565b506001016200fd93565b5098975050505050505050565b6000816001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200fe7b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200fea1919062012134565b61010001516200feb1836200c35b565b6200a348919062012305565b6200fec762011840565b6040805160808101825260008082526020808301829052828401829052606080840183905284516101e0810186526033546001600160a01b039081168252818401949094526032546101009004909316838601819052855163d13053bb60e01b815295519495939491850193909263d13053bb926004808401938290030181865afa1580156200ff5b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ff81919062011ef9565b8152602001670de0b6b3a7640000815260200166038d7ea4c680008152602001671bc16d674ec8000081526020018481526020016201518081526020016200ffca868662010a47565b81526027546001600160a01b039081166020830152602554811660408301526026548116606083015260355416608082015260a001919091529392505050565b60008062010019848462010afc565b9092509050806200d892576200d89262010b3e565b60006200b70a82620100428588886200c77e565b9062010b57565b600080600080620100838688604001518960a00151670de0b6b3a76400006201007391906201207e565b8a60c001518b60e0015162010bca565b9050620100dd876101400151670de0b6b3a7640000620100a491906201207e565b620100d6670de0b6b3a7640000620100bd818a62010c02565b620100c991906201207e565b6101208b01519062010c19565b9062010c19565b915062010119876101400151670de0b6b3a7640000620100fe91906201207e565b6201011284670de0b6b3a764000062012305565b9062010c02565b60a088015190925062010147906201013f90620063f281670de0b6b3a76400006201207e565b839062010b57565b9150620101668760e001518860c0015162010c0290919063ffffffff16565b62010172908362012305565b91506201018081836200c5bf565b9150620101b46201013f8860a00151670de0b6b3a7640000620101a491906201207e565b670de0b6b3a7640000906200c5bf565b9150506000620101d28760e00151836200c5bf90919063ffffffff16565b905060008062010228896101400151670de0b6b3a7640000620101f691906201207e565b6200c831670de0b6b3a76400006201020f818c6200c5bf565b6201021b91906201207e565b6101208d0151906200b713565b905062010287846200c831620102548c60a00151670de0b6b3a764000062010c0290919063ffffffff16565b620100428d6101400151670de0b6b3a76400006201027391906201207e565b620063f287670de0b6b3a764000062012305565b915050620102a18860c0015188846200c83191906201207e565b9450620102b585878a610120015162010c30565b818960400151620102c791906201207e565b620102d391906201207e565b9350505050935093915050565b6000806000620102fd86858a61012001518b610160015162010c64565b905060006201031a8960c00151836200c5bf90919063ffffffff16565b60c08a01516201032c9089906200c5bf565b8a516201033a919062012305565b6201034691906201207e565b90506000868a608001516201035c919062012305565b905060006201036c8a8262010c7d565b620103779062012b99565b90508a6101000151620103988c60c00151846200c5bf90919063ffffffff16565b620103a4919062012305565b60c08c0151620103b69083906200c5bf565b620103c2908562012305565b1062010426576101008b015160c08c0151620103e09084906200c5bf565b60c08d0151620103f29084906200c5bf565b620103fe908662012305565b6201040a91906201207e565b6201041691906201207e565b6001955095505050505062010432565b60008095509550505050505b9550959350505050565b6000806201044d8685858662010c8e565b905060006201049c670b1a2bc2ec5000006200c831620104908a60a00151670de0b6b3a76400006201048091906201207e565b670de0b6b3a76400009062010c02565b62010042868b6200c5bf565b90506000620104b4670de0b6b3a7640000836200b713565b620104cc6200c83884670de0b6b3a76400006201207e565b620104d8919062012305565b9050620104e88887878462010c8e565b98975050505050505050565b6000806201052f8487604001516201051a8960c00151896200c5bf90919063ffffffff16565b8960a001518a60c001518b60e0015162010dbf565b905062010543858488610120015162010c30565b6200b30590826201207e565b600080620105608686868662010de4565b909250905080620105755760009150620105ee565b620105a46201058d84670de0b6b3a76400006201207e565b6101208801516101608901516200c831916200b713565b620105b0908362012305565b9150620105c6670de0b6b3a7640000836201207e565b9150620105eb670de0b6b3a76400008760c00151846200c77e9092919063ffffffff16565b91505b94509492505050565b600080620106146000856020015162010f5790919063ffffffff16565b84610100015162010626919062012305565b905060006201065e8486604001518760a00151670de0b6b3a76400006201064e91906201207e565b8860c001518960e0015162010bca565b90506000620106b6620106a48760a00151670de0b6b3a76400006201068491906201207e565b6201004262010698878b602001516201000a565b60e08b01519062010c19565b60e088015160c0890151919062010f6f565b620106c290836201207e565b9050670de0b6b3a764000081106201070657620106fe620106f68760a00151670de0b6b3a7640000620101a491906201207e565b829062010b57565b90506201072b565b62010728620106f68760a00151670de0b6b3a76400006201048091906201207e565b90505b60408601516200b30590826201207e565b60008060008062010777878a604001518a8c60a00151670de0b6b3a76400006201076791906201207e565b8d60c001518e60e0015162010f96565b9150915080620107905760008093509350505062010432565b6000620107d18a60c00151620107b38b8a8e61012001518f61016001516201106e565b620107c58c8b8f61012001516201107d565b6201011291906201207e565b905080831015620107ec576000809450945050505062010432565b6000620107fa82856201207e565b9050808b6000015110156201081a57600080955095505050505062010432565b8a516000906201082c9083906201207e565b90506000620108608d60c001516201084f60008c62010f5790919063ffffffff16565b8f60800151620063f291906201207e565b90508c61010001518162010875919062012305565b8210620108ac576101008d01516201088e82846201207e565b6201089a91906201207e565b60019750975050505050505062010432565b6000809750975050505050505062010432565b600080839050600062010937866101000151620108ee8860c0015189608001516200c5bf90919063ffffffff16565b60c08901516201090590620063f289600062010f57565b895162010913919062012305565b6201091f91906201207e565b6201092b91906201207e565b60c0880151906200b713565b90506200b3056201096c6201095587670de0b6b3a76400006201207e565b6101208901516101608a01516200c831916200b713565b620109916201098488670de0b6b3a76400006201207e565b6101208a0151906200b713565b6201099d90856201207e565b620109a9919062012305565b82906200c5bf565b6000806000620109c38787866201109c565b9050600062010a148860c00151620063f28a6101600151670de0b6b3a7640000620109ef91906201207e565b6200c83162010a078b670de0b6b3a76400006201207e565b6101208e0151906200b713565b905080821062010a385762010a2a81836201207e565b6001935093505050620105ee565b600080935093505050620105ee565b60008062010a7e62010a6e62010a5f86606462012037565b66a5bbed86c5a000906200b713565b6748cd4072281e0000906200c5bf565b905062010a94670de0b6b3a7640000826200c5bf565b905062010af4816200c83162010ac762010ac162010abb89670de0b6b3a764000062012305565b6201118b565b620111b6565b620063f262010ac162010ae08a8a6301e133806200c77e565b62010abb90670de0b6b3a764000062012305565b949350505050565b60008060008362010b0d866201118b565b62010b19919062012b0b565b9050600081121562010b335760008092509250506200bbe8565b946001945092505050565b60405163bb55fd2760e01b815260040160405180910390fd5b60008160000362010b725750670de0b6b3a76400006200a348565b8260000362010b84575060006200a348565b600062010b91836201118b565b9050600062010ba462010ac1866201118b565b905081810262010bbd670de0b6b3a76400008262013066565b90506200b30581620113de565b600062010bd8858562010b57565b62010bf662010bed8662010042868b6200b713565b8590856200c77e565b6200b305919062012305565b60006200a34583670de0b6b3a76400008462010f6f565b60006200a3458383670de0b6b3a764000062010f6f565b60006200084684620100d6670de0b6b3a764000062010c50818862010c02565b62010c5c91906201207e565b859062010c19565b60006200b70a846200c831846200c83189898962010c30565b60008183136200a34357826200a345565b60008062010c9d858262010c7d565b62010ca89062012b99565b9050600062010d218760c00151671bc16d674ec8000089610100015162010ce18b60c001518c608001516200c5bf90919063ffffffff16565b60c08c015162010cf39088906200c5bf565b8c5162010d01919062012305565b62010d0d91906201207e565b62010d1991906201207e565b91906200c77e565b905062010db462010d4c670de0b6b3a764000062010d4081896200c5bf565b6201098491906201207e565b670de0b6b3a764000062010d7c62010d6589836201207e565b6101208c01516101608d01516200c831916200b713565b62010d90670de0b6b3a7640000896200c5bf565b62010d9c919062012305565b62010da891906201207e565b620109a991906201207e565b979650505050505050565b600062010db487878762010ddc88670de0b6b3a76400006201207e565b878762011577565b600080600062010e028760c00151876200c5bf90919063ffffffff16565b9050600062010e2262010e16838862012305565b60e08a0151906200b713565b9050600062010e5a878a604001518b60a00151670de0b6b3a764000062010e4a91906201207e565b8c60c001518d60e0015162010bca565b905062010e79620101a48a60a001518462010b5790919063ffffffff16565b9450600062010eac62010e9a8b60a001518562010b5790919063ffffffff16565b60e08c015160c08d015191906200c77e565b90508082101562010ec8576000809550955050505050620105ee565b62010f066200c83862010efa8c60a00151670de0b6b3a764000062010eee91906201207e565b60a08e01519062010c02565b6201004284866201207e565b955062010f3a670de0b6b3a764000062010f21818a6200c5bf565b62010f2d91906201207e565b6101208c0151906200b713565b62010f4690876201207e565b9a60019a5098505050505050505050565b600081831362010f6857816200a345565b5090919050565b600082600019048411830215820262010f8757600080fd5b50910281810615159190040190565b600080600062010faa8989888888620115aa565b905062010fbd8662010042898b62012305565b97508781101562010fd657600080925092505062011063565b87810362010fe681868862010f6f565b9050670de0b6b3a76400008110620110185762011010620106f6670de0b6b3a76400008962010c02565b905062011033565b62011030620106f6670de0b6b3a7640000896200c5bf565b90505b6201103f818662010c02565b9050808a1015620110595760008093509350505062011063565b8903925060019150505b965096945050505050565b60006200b70a826200c8318787875b60006200084684620100d662010c5c86670de0b6b3a76400006201207e565b600080620110c38386604001518760a00151670de0b6b3a76400006201064e91906201207e565b90506000620110f6620101a4620110ea8860a00151888a6040015162010042919062012305565b60c08901519062010c19565b905060006201117d620111288860a00151670de0b6b3a76400006201111c91906201207e565b60a08a01519062010c02565b620100426201115c8a60a00151670de0b6b3a76400006201114a91906201207e565b8a8c6040015162010042919062012305565b6201116890876201207e565b60c08b015160e08c01516200c831916200c5bf565b905062010db482826200b713565b60006001600160ff1b038211156200c89e5760405163396ea70160e11b815260040160405180910390fd5b6000808213620111d95760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c6001600160401b031060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906201125d9084901c6201118b565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e198213620113fa57506000919050565b680755bf798b4a1bf1e5821262011424576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906200b30574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6201118b565b6000806201158a888888888888620115d6565b9092509050806201159f576201159f62010b3e565b509695505050505050565b6000620115b8858562010b57565b62010bf6620115cd8662010042868b62010c19565b85908562010f6f565b6000806000620115ea8989888888620115aa565b90506201160186620100426200c8388a8d62012305565b985062011610858a866200c77e565b9850888110156201162957600080925092505062011063565b888103670de0b6b3a764000081106201165c5762011654620106f6670de0b6b3a76400008962010c02565b905062011677565b62011674620106f6670de0b6b3a7640000896200c5bf565b90505b808910156201168f5760008093509350505062011063565b90970398600198509650505050505050565b612035806201309b83390190565b6118f480620150d083390190565b61296380620169c483390190565b610549806201932783390190565b61412c806201987083390190565b612380806201d99c83390190565b614499806201fd1c83390190565b61465580620241b583390190565b614912806202880a83390190565b61488f806202d11c83390190565b613a5a80620319ab83390190565b61297c806203540583390190565b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016201182c6040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b62017ad58062037d8183390190565b604051806101e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016201182c6040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b03811681146200177357600080fd5b6000806000606084860312156201194857600080fd5b833562011955816201191c565b9250602084013562011967816201191c565b9150604084013562011979816201191c565b809150509250925092565b60008151808452602080850194506020840160005b83811015620119c05781516001600160a01b03168752958201959082019060010162011999565b509495945050505050565b6020815260006200a345602083018462011984565b60008060408385031215620119f457600080fd5b50508035926020909101359150565b60005b8381101562011a2057818101518382015260200162011a06565b50506000910152565b6000815180845262011a4381602086016020860162011a03565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101562011b0d57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101562011af657605f1989850301835262011ae384865162011a29565b948e01949350918d019160010162011ac4565b505050978a01979450509188019160010162011a7e565b50919a9950505050505050505050565b60006020828403121562011b3057600080fd5b5035919050565b6000806000806080858703121562011b4e57600080fd5b843562011b5b816201191c565b9350602085013562011b6d816201191c565b925060408501359150606085013562011b86816201191c565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b038111828210171562011bcd5762011bcd62011b91565b60405290565b6040516101e081016001600160401b038111828210171562011bcd5762011bcd62011b91565b604051606081016001600160401b038111828210171562011bcd5762011bcd62011b91565b604051601f8201601f191681016001600160401b038111828210171562011c495762011c4962011b91565b604052919050565b60006001600160401b0382111562011c6d5762011c6d62011b91565b50601f01601f191660200190565b60006020828403121562011c8e57600080fd5b81356001600160401b0381111562011ca557600080fd5b8201601f8101841362011cb757600080fd5b803562011cce62011cc88262011c51565b62011c1e565b81815285602083850101111562011ce457600080fd5b81602084016020830137600091810160200191909152949350505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b8481101562011dac57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101562011d965783516001600160e01b0319168252928b019260019290920191908b019062011d6a565b50978a0197955050509187019160010162011d2c565b50919998505050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101562011e1657603f1988860301845262011e0385835162011a29565b9450928501929085019060010162011de4565b5092979650505050505050565b600181811c9082168062011e3857607f821691505b60208210810362011e5957634e487b7160e01b600052602260045260246000fd5b50919050565b6000815462011e6e8162011e23565b80855260206001838116801562011e8e576001811462011ea95762011ed9565b60ff1985168884015283151560051b88018301955062011ed9565b866000528260002060005b8581101562011ed15781548a820186015290830190840162011eb4565b890184019650505b505050505092915050565b6020815260006200a345602083018462011e5f565b60006020828403121562011f0c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562011f6a57816000190482111562011f4e5762011f4e62011f13565b8085161562011f5c57918102915b93841c939080029062011f2e565b509250929050565b60008262011f83575060016200a348565b8162011f92575060006200a348565b816001811462011fab576002811462011fb65762011fd6565b60019150506200a348565b60ff84111562011fca5762011fca62011f13565b50506001821b6200a348565b5060208310610133831016604e8410600b841016171562011ffb575081810a6200a348565b62012007838362011f29565b80600019048211156201201e576201201e62011f13565b029392505050565b60006200a34560ff84168362011f72565b80820281158282048414176200a348576200a34862011f13565b634e487b7160e01b600052601260045260246000fd5b60008262012079576201207962012051565b500490565b818103818111156200a348576200a34862011f13565b600060208284031215620120a757600080fd5b815160ff811681146200084957600080fd5b8051620120c6816201191c565b919050565b600060808284031215620120de57600080fd5b604051608081018181106001600160401b038211171562012103576201210362011b91565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600061026082840312156201214857600080fd5b6201215262011ba7565b6201215d83620120b9565b81526201216d60208401620120b9565b60208201526201218060408401620120b9565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518183015250610160620121eb818501620120b9565b90820152610180620121ff848201620120b9565b908201526101a062012213848201620120b9565b908201526101c062012227848201620120b9565b908201526101e06201223c85858301620120cb565b908201529392505050565b60006101e082840312156201225b57600080fd5b6201226562011bd3565b825181526020808401519082015260408084015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c0928301519281019290925250919050565b808201808211156200a348576200a34862011f13565b60018060a01b038151168252602081015115156020830152600060408201516060604085015262010af4606085018262011a29565b8481528360208201528260408201526080606082015260006200b30560808301846201231b565b600080604083850312156201238b57600080fd5b505080516020909101519092909150565b6001600160e01b031991909116815260200190565b600060208284031215620123c457600080fd5b815162000849816201191c565b6001600160a01b03929092168252602082015260400190565b80518015158114620120c657600080fd5b6000602082840312156201240e57600080fd5b6200a34582620123ea565b6020815260006200a345602083018462011a29565b6001600160a01b0383168152604060208201819052600090620008469083018462011a29565b600082601f8301126201246657600080fd5b81516201247762011cc88262011c51565b8181528460208386010111156201248d57600080fd5b62010af482602083016020870162011a03565b600060208284031215620124b357600080fd5b81516001600160401b03811115620124ca57600080fd5b62010af48482850162012454565b6000808354620124e88162011e23565b6001828116801562012503576001811462012519576201254a565b60ff19841687528215158302870194506201254a565b8760005260208060002060005b85811015620125415781548a82015290840190820162012526565b50505082870194505b5050722232b83637bcb2b921b7b7b93234b730ba37b960691b835250506013019392505050565b634e487b7160e01b600052603260045260246000fd5b620125ab826201259e83546001600160a01b031690565b6001600160a01b03169052565b60018101546001600160a01b0390811660208401526002820154811660408401526003820154606084015260048201546080840152600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a8201548116610140840152600b8201548116610160840152600c8201548116610180840152600d820154166101a0830152600e8101546101c0830152600f8101546101e083015260108101546102008301526011015461022090910152565b8881526001600160a01b038816602082015260006103206201269b604084018a62012587565b80610280840152620126b08184018962011a29565b915050856102a0830152846102c0830152836102e0830152826103008301529998505050505050505050565b8a81526001600160a01b038a16602082015261036060408201819052600090620127098382018c62011e5f565b90506201271a606084018b62012587565b8281036102a08401526201272f818a62011a29565b9050876102c0840152866102e0840152856103008401528281036103208401526201275b81866201231b565b915050826103408301529b9a5050505050505050505050565b60006001600160401b0382111562012790576201279062011b91565b5060051b60200190565b60006020808385031215620127ae57600080fd5b82516001600160401b0380821115620127c657600080fd5b818501915085601f830112620127db57600080fd5b8151620127ec62011cc88262012774565b81815260059190911b830184019084810190888311156201280c57600080fd5b8585015b838110156200fe2c578051858111156201282957600080fd5b86016060818c03601f190112156201284057600080fd5b6201284a62011bf9565b88820151878111156201285c57600080fd5b8201603f81018d136201286e57600080fd5b898101516201288162011cc88262012774565b81815260059190911b8201604001908b8101908f831115620128a257600080fd5b6040840193505b82841015620128c45783518252928c0192908c0190620128a9565b8452505050604082015187811115620128dc57600080fd5b620128ec8d8b8386010162012454565b8a83015250620128ff60608301620120b9565b604082015284525091860191860162012810565b6000806000808486036102a08112156201292c57600080fd5b855162012939816201191c565b60208701519095506001600160401b03808211156201295757600080fd5b6201296589838a0162012454565b9550610240603f19840112156201297b57600080fd5b6201298562011bd3565b92506201299560408901620120b9565b8352620129a560608901620120b9565b6020840152620129b860808901620120b9565b604084015260a0880151606084015260c0880151608084015260e088015160a084015261010091508188015160c08401526101208089015160e0850152610140808a0151848601526101609350838a015182860152610180915062012a1f828b01620120b9565b908501526101a062012a338a8201620120b9565b848601526101c0935062012a49848b01620120b9565b8286015262012a5c6101e08b01620120b9565b908501525062012a71896102008a01620120cb565b838301526102808801519294508083111562012a8c57600080fd5b505062012a9c8782880162012454565b91505092959194509250565b600080600080600060a0868803121562012ac157600080fd5b85519450602086015193506040860151925062012ae160608701620123ea565b9150608086015190509295509295909350565b60008262012b065762012b0662012051565b500690565b81810360008312801583831316838312821617156200d892576200d89262011f13565b808201828112600083128015821682158216171562012b515762012b5162011f13565b505092915050565b60008262012b6b5762012b6b62012051565b500790565b60408152600062012b85604083018562011a29565b82810360208401526200b70a818562011a29565b6000600160ff1b820162012bb15762012bb162011f13565b5060000390565b6001600160a01b038681168252858116602083015284811660408301528316606082015260a06080820181905260009062010db49083018462011984565b6040815262012c116040820183516001600160a01b03169052565b6000602083015162012c2e60608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161038060a0840181905262012c616103c085018362011984565b9150608085015162012c7e60c08601826001600160a01b03169052565b5060a08501516001600160a01b03811660e08601525060c085015161010062012cb1818701836001600160a01b03169052565b60e087015161012087810191909152908701516101408088019190915290870151610160808801919091529087015161018080880191909152908701516101a080880191909152908701516101c080880191909152908701516101e08088019190915290870151610200808801919091529087015161022080880191909152908701516102408088019190915290870151610260808801919091529087015191506102809062012d8482880184805182526020810151602083015260408101516040830152606081015160608301525050565b87015180516103008801526020808201516103208901526040808301516103408a0152606090920151610360890152918801516001600160a01b0316938701939093526102a08701516103a087015285840381870152601184527048797065726472697665466163746f727960781b9084015250810162010af4565b600061010080835262012e168184018c62011a29565b6001600160a01b039a8b166020850152988a16604084015250509487166060860152928616608085015290851660a0840152841660c083015290921660e090920191909152919050565b60006001820162012e755762012e7562011f13565b5060010190565b85815284602082015283604082015282606082015260a06080820152600062010db460a08301846201231b565b8381528260208201526060604082015260006200b70a60608301846201231b565b82516001600160a01b031681526102808101602084015162012ef760208401826001600160a01b03169052565b50604084015162012f1360408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015162012f86828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0808601518051918501919091526020810151610200850152604081015161022085015260600151610240840152831661026083015262000849565b6060815260006201300e606083018662011984565b82810360208481019190915285518083528682019282019060005b81811015620130505784516001600160801b03168352938301939183019160010162013029565b50508481036040860152620104e8818762011984565b60008262013078576201307862012051565b600160ff1b82146000198414161562013095576201309562011f13565b50059056fe6101006040523480156200001257600080fd5b506040516200203538038062002035833981016040819052620000359162000298565b8230818189898960006200004a8482620003e8565b506001620000598382620003e8565b5060ff81166080524660a0526200006f6200011e565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505090151560e052600c55506200053292505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001529190620004b4565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001e257600080fd5b81516001600160401b0380821115620001ff57620001ff620001ba565b604051601f8301601f19908116603f011681019082821181831017156200022a576200022a620001ba565b81604052838152602092508660208588010111156200024857600080fd5b600091505b838210156200026c57858201830151818301840152908201906200024d565b6000602085830101528094505050505092915050565b805180151581146200029357600080fd5b919050565b60008060008060008060c08789031215620002b257600080fd5b86516001600160401b0380821115620002ca57600080fd5b620002d88a838b01620001d0565b97506020890151915080821115620002ef57600080fd5b50620002fe89828a01620001d0565b955050604087015160ff811681146200031657600080fd5b60608801519094506001600160a01b03811681146200033457600080fd5b9250620003446080880162000282565b915060a087015190509295509295509295565b600181811c908216806200036c57607f821691505b6020821081036200038d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e3576000816000526020600020601f850160051c81016020861015620003be5750805b601f850160051c820191505b81811015620003df57828155600101620003ca565b5050505b505050565b81516001600160401b03811115620004045762000404620001ba565b6200041c8162000415845462000357565b8462000393565b602080601f8311600181146200045457600084156200043b5750858301515b600019600386901b1c1916600185901b178555620003df565b600085815260208120601f198616915b82811015620004855788860151825594840194600190910190840162000464565b5085821015620004a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620004c48162000357565b60018281168015620004df5760018114620004f55762000526565b60ff198416875282151583028701945062000526565b8760005260208060002060005b858110156200051d5781548a82015290840190820162000502565b50505082870194505b50929695505050505050565b60805160a05160c05160e051611a9f62000596600039600081816103d4015281816105e701528181610701015281816109e001528181610a7f01528181610dbe0152610e20015260006109bc01526000610987015260006103140152611a9f6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80637a8c63b511610125578063b7009613116100ad578063dd62ed3e1161007c578063dd62ed3e1461051a578063e688747b14610545578063ea7ca2761461057b578063ed0d0efb146105b2578063f2fde38b146105d257600080fd5b8063b7009613146104b8578063bf7e214f146104cb578063c53a3985146104de578063d505accf1461050757600080fd5b806395d89b41116100f457806395d89b41146104545780639dc29fac1461045c578063a0712d681461046f578063a9059cbb14610482578063aed307771461049557600080fd5b80637a8c63b5146103cf5780637a9e5e4b146103f65780637ecebe00146104095780638da5cb5b1461042957600080fd5b806323b872dd116101a857806342966c681161017757806342966c68146103635780634b5159da1461037657806367aff4841461038957806370a082311461039c578063728b952b146103bc57600080fd5b806323b872dd146102fc578063313ce5671461030f5780633644e5151461034857806340c10f191461035057600080fd5b8063095ea7b3116101ef578063095ea7b3146102915780630bade8a4146102b45780630ea9b75b146102d757806318160ddd146102ea578063239c70ae146102f357600080fd5b806305f05a941461022157806306a36aee1461023657806306fdde0314610269578063088a4ed01461027e575b600080fd5b61023461022f366004611502565b6105e5565b005b61025661024436600461153b565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b610271610671565b6040516102609190611558565b61023461028c3660046115a7565b6106ff565b6102a461029f3660046115c0565b61075c565b6040519015158152602001610260565b6102a46102c2366004611609565b600a6020526000908152604090205460ff1681565b6102346102e5366004611635565b6107c9565b61025660025481565b610256600c5481565b6102a461030a36600461167c565b6108a1565b6103367f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610260565b610256610983565b61023461035e3660046115c0565b6109de565b6102346103713660046115a7565b610a7d565b6102346103843660046116bd565b610ae2565b6102346103973660046116d9565b610b74565b6102566103aa36600461153b565b60036020526000908152604090205481565b6102346103ca366004611707565b610c3c565b6102a47f000000000000000000000000000000000000000000000000000000000000000081565b61023461040436600461153b565b610cc5565b61025661041736600461153b565b60056020526000908152604090205481565b60065461043c906001600160a01b031681565b6040516001600160a01b039091168152602001610260565b610271610daf565b61023461046a3660046115c0565b610dbc565b61023461047d3660046115a7565b610e1e565b6102a46104903660046115c0565b610eb9565b6102a46104a336600461153b565b600d6020526000908152604090205460ff1681565b6102a46104c6366004611735565b610f1f565b60075461043c906001600160a01b031681565b61043c6104ec36600461153b565b6008602052600090815260409020546001600160a01b031681565b61023461051536600461177c565b61101d565b610256610528366004611707565b600460209081526000928352604080842090915290825290205481565b6102a46105533660046117ea565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b6102a461058936600461181d565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b6102566105c0366004611609565b600b6020526000908152604090205481565b6102346105e036600461153b565b611261565b7f00000000000000000000000000000000000000000000000000000000000000001561064657610621336000356001600160e01b0319166112df565b6106465760405162461bcd60e51b815260040161063d90611849565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6000805461067e90611880565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa90611880565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b7f0000000000000000000000000000000000000000000000000000000000000000156107575761073b336000356001600160e01b0319166112df565b6107575760405162461bcd60e51b815260040161063d90611849565b600c55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107b79086815260200190565b60405180910390a35060015b92915050565b6107df336000356001600160e01b0319166112df565b6107fb5760405162461bcd60e51b815260040161063d906118ba565b801561082b576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610852565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610894911515815260200190565b60405180910390a3505050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146108fd576108d883826118f6565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906109259084906118f6565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020611a4a8339815191529061096e9087815260200190565b60405180910390a360019150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146109b9576109b4611389565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610a3657610a1a336000356001600160e01b0319166112df565b610a365760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610a6f57600c54811115610a6f5760405162461bcd60e51b815260040161063d90611909565b610a798282611423565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610ad557610ab9336000356001600160e01b0319166112df565b610ad55760405162461bcd60e51b815260040161063d90611849565b610adf338261147d565b50565b610af8336000356001600160e01b0319166112df565b610b145760405162461bcd60e51b815260040161063d906118ba565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610b8a336000356001600160e01b0319166112df565b610ba65760405162461bcd60e51b815260040161063d906118ba565b8015610bd5576001600160a01b03831660009081526009602052604090208054600160ff85161b179055610bfb565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610894911515815260200190565b610c52336000356001600160e01b0319166112df565b610c6e5760405162461bcd60e51b815260040161063d906118ba565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480610d5a575060075460405163b700961360e01b81526001600160a01b039091169063b700961390610d1990339030906001600160e01b0319600035169060040161194b565b602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611978565b610d6357600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b6001805461067e90611880565b7f000000000000000000000000000000000000000000000000000000000000000015610e1457610df8336000356001600160e01b0319166112df565b610e145760405162461bcd60e51b815260040161063d90611849565b610a79828261147d565b7f000000000000000000000000000000000000000000000000000000000000000015610e7657610e5a336000356001600160e01b0319166112df565b610e765760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610eaf57600c54811115610eaf5760405162461bcd60e51b815260040161063d90611909565b610adf3382611423565b33600090815260036020526040812080548391908390610eda9084906118f6565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020611a4a833981519152906107b79086815260200190565b6001600160a01b038083166000908152600860205260408120549091168015610fbb5760405163b700961360e01b81526001600160a01b0382169063b700961390610f729088908890889060040161194b565b602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190611978565b91505061097c565b6001600160e01b031983166000908152600a602052604090205460ff168061101457506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b4284101561106d5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161063d565b60006001611079610983565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611185573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111bb5750876001600160a01b0316816001600160a01b0316145b6111f85760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161063d565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b611277336000356001600160e01b0319166112df565b6112935760405162461bcd60e51b815260040161063d906118ba565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6007546000906001600160a01b03168015801590611369575060405163b700961360e01b81526001600160a01b0382169063b7009613906113289087903090889060040161194b565b602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190611978565b8061138157506006546001600160a01b038581169116145b949350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516113bb9190611995565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b80600260008282546114359190611a36565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020611a4a83398151915291015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906114a59084906118f6565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020611a4a83398151915290602001611471565b6001600160a01b0381168114610adf57600080fd5b8015158114610adf57600080fd5b6000806040838503121561151557600080fd5b8235611520816114df565b91506020830135611530816114f4565b809150509250929050565b60006020828403121561154d57600080fd5b813561097c816114df565b60006020808352835180602085015260005b818110156115865785810183015185820160400152820161156a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156115b957600080fd5b5035919050565b600080604083850312156115d357600080fd5b82356115de816114df565b946020939093013593505050565b80356001600160e01b03198116811461160457600080fd5b919050565b60006020828403121561161b57600080fd5b61097c826115ec565b803560ff8116811461160457600080fd5b60008060006060848603121561164a57600080fd5b61165384611624565b9250611661602085016115ec565b91506040840135611671816114f4565b809150509250925092565b60008060006060848603121561169157600080fd5b833561169c816114df565b925060208401356116ac816114df565b929592945050506040919091013590565b600080604083850312156116d057600080fd5b611520836115ec565b6000806000606084860312156116ee57600080fd5b83356116f9816114df565b925061166160208501611624565b6000806040838503121561171a57600080fd5b8235611725816114df565b91506020830135611530816114df565b60008060006060848603121561174a57600080fd5b8335611755816114df565b92506020840135611765816114df565b9150611773604085016115ec565b90509250925092565b600080600080600080600060e0888a03121561179757600080fd5b87356117a2816114df565b965060208801356117b2816114df565b955060408801359450606088013593506117ce60808901611624565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156117fd57600080fd5b61180683611624565b9150611814602084016115ec565b90509250929050565b6000806040838503121561183057600080fd5b823561183b816114df565b915061181460208401611624565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c9082168061189457607f821691505b6020821081036118b457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107c3576107c36118e0565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561198a57600080fd5b815161097c816114f4565b60008083548160018260011c915060018316806119b357607f831692505b602080841082036119d257634e487b7160e01b86526022600452602486fd5b8180156119e657600181146119fb57611a28565b60ff1986168952841515850289019650611a28565b60008a81526020902060005b86811015611a205781548b820152908501908301611a07565b505084890196505b509498975050505050505050565b808201808211156107c3576107c36118e056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bfa5831106ce09a23ad7aac9a09e02a9809dd79b0e0446958dd2bdec6da95de664736f6c634300081600336080604052600180546001600160a01b0319168117815560025534801561002557600080fd5b506040516118f43803806118f48339810160408190526100449161006d565b600061005082826101c1565b5050610280565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561008057600080fd5b82516001600160401b038082111561009757600080fd5b818501915085601f8301126100ab57600080fd5b8151818111156100bd576100bd610057565b604051601f8201601f19908116603f011681019083821181831017156100e5576100e5610057565b8160405282815288868487010111156100fd57600080fd5b600093505b8284101561011f5784840186015181850187015292850192610102565b600086848301015280965050505050505092915050565b600181811c9082168061014a57607f821691505b60208210810361016a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101bc576000816000526020600020601f850160051c810160208610156101995750805b601f850160051c820191505b818110156101b8578281556001016101a5565b5050505b505050565b81516001600160401b038111156101da576101da610057565b6101ee816101e88454610136565b84610170565b602080601f831160018114610223576000841561020b5750858301515b600019600386901b1c1916600185901b1785556101b8565b600085815260208120601f198616915b8281101561025257888601518255948401946001909101908401610233565b50858210156102705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6116658061028f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80630ecaea731161005b5780630ecaea73146100ff57806354fd4d5014610112578063600eb4ba14610138578063d13053bb1461016e57600080fd5b806304baa00b1461008257806306fdde03146100cc5780630710fd58146100d4575b600080fd5b6100b6604051806040016040528060158152602001744552433230466f72776172646572466163746f727960581b81525081565b6040516100c391906103fe565b60405180910390f35b6100b6610184565b6100e76100e236600461044d565b610212565b6040516001600160a01b0390911681526020016100c3565b6100e761010d36600461044d565b6102e7565b6100b660405180604001604052806007815260200166076312e302e32360cc1b81525081565b61014f6001546002546001600160a01b0390911691565b604080516001600160a01b0390931683526020830191909152016100c3565b6101766103c4565b6040519081526020016100c3565b6000805461019190610485565b80601f01602080910402602001604051908101604052809291908181526020018280546101bd90610485565b801561020a5780601f106101df5761010080835404028352916020019161020a565b820191906000526020600020905b8154815290600101906020018083116101ed57829003601f168201915b505050505081565b604080516001600160a01b03841660208201529081018290526000908190606001604051602081830303815290604052805190602001209050600060ff60f81b308360405180602001610264906103f1565b6020820181038252601f19601f82011660405250805190602001206040516020016102c694939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f19018152919052805160209091012095945050505050565b6002819055600180546001600160a01b0319166001600160a01b0384169081179091556040805160208101929092528101829052600090819060600160405160208183030381529060405280519060200120905060008160405161034a906103f1565b8190604051809103906000f590508015801561036a573d6000803e3d6000fd5b5090506103778585610212565b6001600160a01b0316816001600160a01b0316146103a75760405162e0775560e61b815260040160405180910390fd5b600180546001600160a01b03191681178155600255949350505050565b6040516103d3602082016103f1565b6020820181038252601f19601f820116604052508051906020012081565b611170806104c083390190565b60006020808352835180602085015260005b8181101561042c57858101830151858201604001528201610410565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561046057600080fd5b82356001600160a01b038116811461047757600080fd5b946020939093013593505050565b600181811c9082168061049957607f821691505b6020821081036104b957634e487b7160e01b600052602260045260246000fd5b5091905056fe60c060405234801561001057600080fd5b50604080516330075a5d60e11b815281513392839263600eb4ba92600480830193928290030181865afa15801561004b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061006f9190610084565b60a0526001600160a01b0316608052506100be565b6000806040838503121561009757600080fd5b82516001600160a01b03811681146100ae57600080fd5b6020939093015192949293505050565b60805160a05161100861016860003960008181610183015281816102f5015281816103a9015281816104a70152818161055201528181610664015281816107190152818161078801528181610a4d0152610bf50152600081816102ad0152818161031e015281816103ef015281816104d0015281816105a00152818161069d01528181610742015281816107d801528181610a8a01528181610b6b0152610c3301526110086000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806354fd4d50116100a2578063a9059cbb11610071578063a9059cbb14610265578063d505accf14610278578063dd62ed3e1461028d578063f698da25146102a0578063fc0c546a146102a857600080fd5b806354fd4d501461020457806370a082311461022a5780637ecebe001461023d57806395d89b411461025d57600080fd5b806318160ddd116100de57806318160ddd146101b357806323b872dd146101bb57806330adf81f146101ce578063313ce567146101f557600080fd5b806304baa00b1461011057806306fdde0314610153578063095ea7b31461015b57806317d70f7c1461017e575b600080fd5b61013d6040518060400160405280600e81526020016d22a92199182337b93bb0b93232b960911b81525081565b60405161014a9190610d57565b60405180910390f35b61013d6102e7565b61016e610169366004610da6565b61039a565b604051901515815260200161014a565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014a565b6101a5610498565b61016e6101c9366004610dd0565b610543565b6101a57f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6040516012815260200161014a565b61013d60405180604001604052806007815260200166076312e302e32360cc1b81525081565b6101a5610238366004610e0c565b610655565b6101a561024b366004610e0c565b60006020819052908152604090205481565b61013d61070a565b61016e610273366004610da6565b610779565b61028b610286366004610e2e565b610873565b005b6101a561029b366004610ea1565b610b41565b6101a5610ca5565b6102cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014a565b604051622b600360e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169062ad800c906024015b600060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103959190810190610eea565b905090565b6040516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060015b92915050565b60405163bd85b03960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd85b03990602401602060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610f97565b604051633912022f60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0384811660248301528381166044830152606482018390523360848301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161064391815260200190565b60405180910390a35060019392505050565b604051631b2b776160e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0382811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690633656eec290604401602060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610f97565b604051634e41a1fb60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e41a1fb90602401610350565b604051633912022f60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015233602482018190526001600160a01b0384811660448401526064830184905260848301919091526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b15801561081e57600080fd5b505af1158015610832573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610486565b834211156108945760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b0387166108bb5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038716600090815260208190526040812054906108dd610ca5565b604080517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960208201526001600160a01b03808d1692820192909252908a1660608201526080810189905260a0810184905260c0810188905260e0016040516020818303038152906040528051906020012060405160200161097692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa1580156109e1573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b031614610a1f57604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b03808b1660008181526020819052604090819020600187019055516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201528b83166024820152604481018b905260648101919091527f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258a604051610b2d91815260200190565b60405180910390a350505050505050505050565b60405163e985e9c560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e985e9c590604401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd89190610fb0565b15610be65750600019610492565b6040516321ff32a960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b03848116602483015283811660448301527f000000000000000000000000000000000000000000000000000000000000000016906321ff32a990606401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190610f97565b9050610492565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b60005b83811015610d4e578181015183820152602001610d36565b50506000910152565b6020815260008251806020840152610d76816040850160208701610d33565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610da157600080fd5b919050565b60008060408385031215610db957600080fd5b610dc283610d8a565b946020939093013593505050565b600080600060608486031215610de557600080fd5b610dee84610d8a565b9250610dfc60208501610d8a565b9150604084013590509250925092565b600060208284031215610e1e57600080fd5b610e2782610d8a565b9392505050565b600080600080600080600060e0888a031215610e4957600080fd5b610e5288610d8a565b9650610e6060208901610d8a565b95506040880135945060608801359350608088013560ff81168114610e8457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610eb457600080fd5b610ebd83610d8a565b9150610ecb60208401610d8a565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610efc57600080fd5b815167ffffffffffffffff80821115610f1457600080fd5b818401915084601f830112610f2857600080fd5b815181811115610f3a57610f3a610ed4565b604051601f8201601f19908116603f01168101908382118183101715610f6257610f62610ed4565b81604052828152876020848701011115610f7b57600080fd5b610f8c836020830160208801610d33565b979650505050505050565b600060208284031215610fa957600080fd5b5051919050565b600060208284031215610fc257600080fd5b81518015158114610e2757600080fdfea26469706673582212205ddffb7185efa4ec21205bb0497433d912fd9b24012a25e068d4e5cb71e7445f64736f6c63430008160033a26469706673582212203a7b5c316de3f745eb0758a94da553ab24fc4711c84882126c48ca1eccdbae1464736f6c63430008160033608060405234801561001057600080fd5b50612943806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639b724ad4116100c3578063e2f273bd1161007c578063e2f273bd146103f8578063e967e3881461040b578063ea3503211461041e578063f32c9e341461043e578063f59d00b91461045e578063f851a4401461046657600080fd5b80639b724ad414610310578063a587bbe114610367578063b73e3fab14610392578063bc30e7a1146103b2578063d2f72d52146103c5578063daac24da146103e557600080fd5b80634db6c0e0116101155780634db6c0e01461027257806354fd4d50146102925780636e95d67c146102b8578063716ba5f6146102ca5780637ab4339d146102ea57806384da92a7146102fd57600080fd5b806304baa00b1461015d57806306fdde03146101a457806318bb3b54146101ac5780631ff30ad2146102205780632ad19de814610235578063392e53cd14610255575b600080fd5b61018e6040518060400160405280601281526020017148797065726472697665526567697374727960701b81525081565b60405161019b9190611fa5565b60405180910390f35b61018e610479565b6102136101ba366004611fdb565b6040805180820190915260008082526020820152506040805180820182526001600160a01b0392831660008181526006602081815294822080546001600160801b03168552929091528352600101549092169082015290565b60405161019b9190611ff6565b61023361022e366004612061565b610507565b005b610248610243366004611fdb565b6108d2565b60405161019b9190612167565b6000546102629060ff1681565b604051901515815260200161019b565b61028561028036600461217a565b610a61565b60405161019b91906121bb565b61018e60405180604001604052806007815260200166076312e302e32360cc1b81525081565b6005545b60405190815260200161019b565b6102dd6102d836600461221b565b610baa565b60405161019b919061223d565b6102336102f836600461228a565b610ca9565b61023361030b366004612377565b610d4c565b61035861031e366004611fdb565b6040805160208082018352600091829052825180820184526001600160a01b039490941682526004905220546001600160801b0316815290565b6040519051815260200161019b565b61037a6103753660046123f6565b610dc4565b6040516001600160a01b03909116815260200161019b565b6103a56103a036600461217a565b610df4565b60405161019b9190612461565b6102dd6103c036600461221b565b611083565b6103d86103d336600461217a565b611182565b60405161019b91906124c5565b61037a6103f33660046123f6565b611443565b610233610406366004611fdb565b611458565b61023361041936600461251c565b6114cc565b61043161042c36600461217a565b611878565b60405161019b9190612587565b61045161044c366004611fdb565b611962565b60405161019b91906125c0565b6003546102bc565b60025461037a906001600160a01b031681565b60018054610486906125d3565b80601f01602080910402602001604051908101604052809291908181526020018280546104b2906125d3565b80156104ff5780601f106104d4576101008083540402835291602001916104ff565b820191906000526020600020905b8154815290600101906020018083116104e257829003601f168201915b505050505081565b6002546001600160a01b03163314610531576040516282b42960e81b815260040160405180910390fd5b84831415806105405750848114155b1561055e5760405163aaad13f760e01b815260040160405180910390fd5b60005b858110156108c9576000600660008989858181106105815761058161260d565b90506020020160208101906105969190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b031690508585838181106105cd576105cd61260d565b90506020020160208101906105e29190612623565b6001600160801b03161580156105f757508015155b156106805760008484848181106106105761061061260d565b90506020020160208101906106259190611fdb565b6001600160a01b03161461064c57604051637a44db9560e01b815260040160405180910390fd5b61067b8888848181106106615761066161260d565b90506020020160208101906106769190611fdb565b6119f7565b610803565b8585838181106106925761069261260d565b90506020020160208101906106a79190612623565b6001600160801b0316158015906106bd57508015155b1561073f5761067b8888848181106106d7576106d761260d565b90506020020160208101906106ec9190611fdb565b8787858181106106fe576106fe61260d565b90506020020160208101906107139190612623565b8686868181106107255761072561260d565b905060200201602081019061073a9190611fdb565b611b4d565b8585838181106107515761075161260d565b90506020020160208101906107669190612623565b6001600160801b03161580159061077b575080155b156107fd5761067b8888848181106107955761079561260d565b90506020020160208101906107aa9190611fdb565b8787858181106107bc576107bc61260d565b90506020020160208101906107d19190612623565b8686868181106107e3576107e361260d565b90506020020160208101906107f89190611fdb565b611c94565b506108c1565b8383838181106108155761081561260d565b905060200201602081019061082a9190611fdb565b6001600160a01b03168686848181106108455761084561260d565b905060200201602081019061085a9190612623565b6001600160801b03168989858181106108755761087561260d565b905060200201602081019061088a9190611fdb565b6001600160a01b03167fdcdda2b8267b8fe0ebfeb2cc8f266807b412bec096d16cbbe576d46d122553e060405160405180910390a4505b600101610561565b50505050505050565b6108da611f1d565b6040805160a0810182526001600160a01b0380851660008181526006602081815286832080546001600160801b031687528484529181526001909101549093169284019290925283516306fdde0360e01b8152845187958501936306fdde0392600480820193918290030181865afa15801561095a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610982919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ed919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a58919081019061264c565b90529392505050565b6060816001600160401b03811115610a7b57610a7b61230a565b604051908082528060200260200182016040528015610ac057816020015b6040805180820190915260008082526020820152815260200190600190039081610a995790505b50905060005b82811015610ba257604051806040016040528060066000878786818110610aef57610aef61260d565b9050602002016020810190610b049190611fdb565b6001600160a01b031681526020808201929092526040016000908120546001600160801b03168352910190600690878786818110610b4457610b4461260d565b9050602002016020810190610b599190611fdb565b6001600160a01b0390811682526020820192909252604001600020600101541690528251839083908110610b8f57610b8f61260d565b6020908102919091010152600101610ac6565b505b92915050565b6060818310610bcc57604051633b2735ab60e11b815260040160405180910390fd5b600354821115610bef5760405163e0f7becb60e01b815260040160405180910390fd5b610bf983836126b9565b6001600160401b03811115610c1057610c1061230a565b604051908082528060200260200182016040528015610c39578160200160208202803683370190505b509050825b82811015610ba25760038181548110610c5957610c5961260d565b6000918252602090912001546001600160a01b031682610c7986846126b9565b81518110610c8957610c8961260d565b6001600160a01b0390921660209283029190910190910152600101610c3e565b60005460ff1615610ccd5760405163722c395b60e11b815260040160405180910390fd5b6000805460ff19166001908117909155610ce883858361272b565b50600280546001600160a01b0319166001600160a01b038316908117909155604051610d1790859085906127ea565b604051908190038120907fe57439d837715589a751e391f73a95929ecc96ae6aa09a16be8ae312d614715790600090a3505050565b6002546001600160a01b03163314610d76576040516282b42960e81b815260040160405180910390fd5b6001610d8282826127fa565b5080604051610d9191906128b9565b604051908190038120907f9f7688a97f1ac51fe03bac18af18d6810f9f11f0db08c59b1938a9ac825ef74490600090a250565b600060038281548110610dd957610dd961260d565b6000918252602090912001546001600160a01b031692915050565b6060816001600160401b03811115610e0e57610e0e61230a565b604051908082528060200260200182016040528015610e6a57816020015b610e576040518060800160405280600081526020016060815260200160608152602001606081525090565b815260200190600190039081610e2c5790505b50905060005b82811015610ba2576000848483818110610e8c57610e8c61260d565b9050602002016020810190610ea19190611fdb565b9050604051806080016040528060046000888887818110610ec457610ec461260d565b9050602002016020810190610ed99190611fdb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060000160009054906101000a90046001600160801b03166001600160801b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f5c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f84919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fef919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105a919081019061264c565b81525083838151811061106f5761106f61260d565b602090810291909101015250600101610e70565b60608183106110a557604051633b2735ab60e11b815260040160405180910390fd5b6005548211156110c85760405163e0f7becb60e01b815260040160405180910390fd5b6110d283836126b9565b6001600160401b038111156110e9576110e961230a565b604051908082528060200260200182016040528015611112578160200160208202803683370190505b509050825b82811015610ba257600581815481106111325761113261260d565b6000918252602090912001546001600160a01b03168261115286846126b9565b815181106111625761116261260d565b6001600160a01b0390921660209283029190910190910152600101611117565b6060816001600160401b0381111561119c5761119c61230a565b6040519080825280602002602001820160405280156111d557816020015b6111c2611f1d565b8152602001906001900390816111ba5790505b50905060005b82811015610ba25760008484838181106111f7576111f761260d565b905060200201602081019061120c9190611fdb565b90506040518060a001604052806006600088888781811061122f5761122f61260d565b90506020020160208101906112449190611fdb565b6001600160a01b031681526020808201929092526040016000908120546001600160801b031683529101906006908888878181106112845761128461260d565b90506020020160208101906112999190611fdb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009054906101000a90046001600160a01b03166001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561131c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611344919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611387573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113af919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261141a919081019061264c565b81525083838151811061142f5761142f61260d565b6020908102919091010152506001016111db565b600060058281548110610dd957610dd961260d565b6002546001600160a01b03163314611482576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d90600090a250565b6002546001600160a01b031633146114f6576040516282b42960e81b815260040160405180910390fd5b8281146115165760405163aaad13f760e01b815260040160405180910390fd5b60005b83811015611871576000600460008787858181106115395761153961260d565b905060200201602081019061154e9190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b031690508383838181106115855761158561260d565b905060200201602081019061159a9190612623565b6001600160801b03161580156115af57508015155b156115e8576115e38686848181106115c9576115c961260d565b90506020020160208101906115de9190611fdb565b611dd9565b6117db565b8383838181106115fa576115fa61260d565b905060200201602081019061160f9190612623565b6001600160801b03161580159061162557508015155b156116b4576115e386868481811061163f5761163f61260d565b90506020020160208101906116549190611fdb565b8585858181106116665761166661260d565b905060200201602081019061167b9190612623565b6001600160a01b0391909116600090815260046020526040902080546001600160801b0319166001600160801b03909216919091179055565b8383838181106116c6576116c661260d565b90506020020160208101906116db9190612623565b6001600160801b0316158015906116f0575080155b156117d5576115e386868481811061170a5761170a61260d565b905060200201602081019061171f9190611fdb565b8585858181106117315761173161260d565b90506020020160208101906117469190612623565b60038054600181019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039094166001600160a01b0319909416841790556040805180820182526001600160801b03938416815291831660208381019182526000958652600490529320905192518216600160801b0292909116919091179055565b50611869565b8383838181106117ed576117ed61260d565b90506020020160208101906118029190612623565b6001600160801b031686868481811061181d5761181d61260d565b90506020020160208101906118329190611fdb565b6001600160a01b03167fd840ea8cb042bc840d3e55a04618ab268434d3d0a218638360a30fdb80de63f660405160405180910390a3505b600101611519565b5050505050565b6060816001600160401b038111156118925761189261230a565b6040519080825280602002602001820160405280156118d257816020015b6040805160208101909152600081528152602001906001900390816118b05790505b50905060005b82811015610ba2576040518060200160405280600460008787868181106119015761190161260d565b90506020020160208101906119169190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b03169052825183908390811061194f5761194f61260d565b60209081029190910101526001016118d8565b61198d6040518060800160405280600081526020016060815260200160608152602001606081525090565b604080516080810182526001600160a01b038416600081815260046020818152858320546001600160801b0316855285516306fdde0360e01b81529551889691860194936306fdde0393838101939192918290030181865afa15801561095a573d6000803e3d6000fd5b6001600160a01b038116600090815260066020526040902054600554600160801b9091046001600160801b031690611a306001826126b9565b826001600160801b031614611ae85760006005611a4e6001846126b9565b81548110611a5e57611a5e61260d565b60009182526020808320909101546001600160a01b03168083526006909152604090912080546001600160801b03808716600160801b810291909216179091556005805492935083929091908110611ab857611ab861260d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6005805480611af957611af96128d5565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b0395909516855260069091526040842093845560019390930180549093169092555050565b6001600160a01b03808416600090815260066020526040902060010154168015801590611b8c5750816001600160a01b0316816001600160a01b031614155b80611c2457506001600160a01b038116158015611bb157506001600160a01b03821615155b8015611c2457506040516335a2735f60e11b81526001600160a01b038581166004830152831690636b44e6be90602401602060405180830381865afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2291906128eb565b155b15611c4257604051637a44db9560e01b815260040160405180910390fd5b506001600160a01b03928316600090815260066020526040902080546001600160801b0319166001600160801b0393909316929092178255600190910180546001600160a01b03191691909216179055565b6001600160a01b03811615801590611d1357506040516335a2735f60e11b81526001600160a01b038481166004830152821690636b44e6be90602401602060405180830381865afa158015611ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1191906128eb565b155b15611d3157604051637a44db9560e01b815260040160405180910390fd5b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0810180546001600160a01b039687166001600160a01b03199182168117909255604080516060810182526001600160801b0397881681529387166020858101918252968916858301908152600094855260069097529220925191518616600160801b0291909516178155915191018054919093169116179055565b6001600160a01b038116600090815260046020526040902054600354600160801b9091046001600160801b031690611e126001826126b9565b826001600160801b031614611eca5760006003611e306001846126b9565b81548110611e4057611e4061260d565b60009182526020808320909101546001600160a01b03168083526004909152604090912080546001600160801b03808716600160801b810291909216179091556003805492935083929091908110611e9a57611e9a61260d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6003805480611edb57611edb6128d5565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152600490935250506040812055565b6040518060a001604052806000815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b60005b83811015611f70578181015183820152602001611f58565b50506000910152565b60008151808452611f91816020860160208601611f55565b601f01601f19169290920160200192915050565b602081526000611fb86020830184611f79565b9392505050565b80356001600160a01b0381168114611fd657600080fd5b919050565b600060208284031215611fed57600080fd5b611fb882611fbf565b815181526020808301516001600160a01b03169082015260408101610ba4565b60008083601f84011261202857600080fd5b5081356001600160401b0381111561203f57600080fd5b6020830191508360208260051b850101111561205a57600080fd5b9250929050565b6000806000806000806060878903121561207a57600080fd5b86356001600160401b038082111561209157600080fd5b61209d8a838b01612016565b909850965060208901359150808211156120b657600080fd5b6120c28a838b01612016565b909650945060408901359150808211156120db57600080fd5b506120e889828a01612016565b979a9699509497509295939492505050565b8051825260018060a01b0360208201511660208301526000604082015160a0604085015261212b60a0850182611f79565b9050606083015184820360608601526121448282611f79565b9150506080830151848203608086015261215e8282611f79565b95945050505050565b602081526000611fb860208301846120fa565b6000806020838503121561218d57600080fd5b82356001600160401b038111156121a357600080fd5b6121af85828601612016565b90969095509350505050565b602080825282518282018190526000919060409081850190868401855b8281101561220e576121fe848351805182526020908101516001600160a01b0316910152565b92840192908501906001016121d8565b5091979650505050505050565b6000806040838503121561222e57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561227e5783516001600160a01b031683529284019291840191600101612259565b50909695505050505050565b60008060006040848603121561229f57600080fd5b83356001600160401b03808211156122b657600080fd5b818601915086601f8301126122ca57600080fd5b8135818111156122d957600080fd5b8760208285010111156122eb57600080fd5b6020928301955093506123019186019050611fbf565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156123485761234861230a565b604052919050565b60006001600160401b038211156123695761236961230a565b50601f01601f191660200190565b60006020828403121561238957600080fd5b81356001600160401b0381111561239f57600080fd5b8201601f810184136123b057600080fd5b80356123c36123be82612350565b612320565b8181528560208385010111156123d857600080fd5b81602084016020830137600091810160200191909152949350505050565b60006020828403121561240857600080fd5b5035919050565b80518252600060208201516080602085015261242e6080850182611f79565b9050604083015184820360408601526124478282611f79565b9150506060830151848203606086015261215e8282611f79565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156124b857603f198886030184526124a685835161240f565b9450928501929085019060010161248a565b5092979650505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156124b857603f1988860301845261250a8583516120fa565b945092850192908501906001016124ee565b6000806000806040858703121561253257600080fd5b84356001600160401b038082111561254957600080fd5b61255588838901612016565b9096509450602087013591508082111561256e57600080fd5b5061257b87828801612016565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b8181101561227e57835151835292840192918401916001016125a3565b602081526000611fb8602083018461240f565b600181811c908216806125e757607f821691505b60208210810361260757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561263557600080fd5b81356001600160801b0381168114611fb857600080fd5b60006020828403121561265e57600080fd5b81516001600160401b0381111561267457600080fd5b8201601f8101841361268557600080fd5b80516126936123be82612350565b8181528560208385010111156126a857600080fd5b61215e826020830160208601611f55565b81810381811115610ba457634e487b7160e01b600052601160045260246000fd5b601f821115612726576000816000526020600020601f850160051c810160208610156127035750805b601f850160051c820191505b818110156127225782815560010161270f565b5050505b505050565b6001600160401b038311156127425761274261230a565b6127568361275083546125d3565b836126da565b6000601f84116001811461278a57600085156127725750838201355b600019600387901b1c1916600186901b178355611871565b600083815260209020601f19861690835b828110156127bb578685013582556020948501946001909201910161279b565b50868210156127d85760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b81516001600160401b038111156128135761281361230a565b6128278161282184546125d3565b846126da565b602080601f83116001811461285c57600084156128445750858301515b600019600386901b1c1916600185901b178555612722565b600085815260208120601f198616915b8281101561288b5788860151825594840194600190910190840161286c565b50858210156128a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516128cb818460208701611f55565b9190910192915050565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156128fd57600080fd5b81518015158114611fb857600080fdfea2646970667358221220c11057a383fa5371752db51a5d5db656ffe1f1b62ccebf2f42271dd36eddbd7664736f6c63430008160033608060405234801561001057600080fd5b5060405161054938038061054983398101604081905261002f91610143565b600080546001600160a01b038088166001600160a01b03199283161790925560018054878416908316179055600280548684169083161790556003805492851692909116919091179055805161008c906004906020840190610097565b50505050505061024d565b8280548282559060005260206000209081019282156100ec579160200282015b828111156100ec57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906100b7565b506100f89291506100fc565b5090565b5b808211156100f857600081556001016100fd565b80516001600160a01b038116811461012857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561015b57600080fd5b61016486610111565b94506020610173818801610111565b945061018160408801610111565b935061018f60608801610111565b60808801519093506001600160401b03808211156101ac57600080fd5b818901915089601f8301126101c057600080fd5b8151818111156101d2576101d261012d565b8060051b604051601f19603f830116810181811085821117156101f7576101f761012d565b60405291825284820192508381018501918c83111561021557600080fd5b938501935b8285101561023a5761022b85610111565b8452938501939285019261021a565b8096505050505050509295509295909350565b6102ed8061025c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063c415b95c11610066578063c415b95c1461013f578063d2c35ce814610152578063dd2b8fbb14610182578063e3331555146101b2578063f2596458146101c557600080fd5b806310780f73146100985780633e2d2014146100c85780638627a4f0146100fa578063a64c90bf1461012a575b600080fd5b6002546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f86100d636600461023a565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100f861010836600461023a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6101326101d8565b6040516100bf919061026a565b6001546100ab906001600160a01b031681565b6100f861016036600461023a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6100f861019036600461023a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546100ab906001600160a01b031681565b6003546100ab906001600160a01b031681565b6060600480548060200260200160405190810160405280929190818152602001828054801561023057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610212575b5050505050905090565b60006020828403121561024c57600080fd5b81356001600160a01b038116811461026357600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156102ab5783516001600160a01b031683529284019291840191600101610286565b5090969550505050505056fea2646970667358221220ab96712e826406cc06c9e7af2950b27b2813cb638d1321f2efc68188e4cd721364736f6c63430008160033608060405260026001553480156200001657600080fd5b506040516200412c3803806200412c833981016040819052620000399162000708565b60006200004782826200096d565b508160e0015182610100015110806200007557508160e0015182610100015162000072919062000a39565b15155b156200009457604051630219d66360e11b815260040160405180910390fd5b610100820151600b8190556101208301511080620000c757508160e00151826101200151620000c4919062000a39565b15155b15620000e65760405163f9c0959d60e01b815260040160405180910390fd5b610120820151600c81905561014083015110806200011957508160e0015182610140015162000116919062000a39565b15155b156200013857604051633007ad0160e11b815260040160405180910390fd5b610140820151600d81905561016083015110806200016b57508160e0015182610160015162000168919062000a39565b15155b156200018a5760405163cfb699cb60e01b815260040160405180910390fd5b610160820151600e556101a08201516101808301511115620001bf5760405163ef9bc65f60e01b815260040160405180910390fd5b610180820151600f556101a08201516010556101e08201516101c08301511115620001fd576040516330554de160e01b815260040160405180910390fd5b6101c08201516011556101e082015160125561022082015161020083015111156200023b576040516383ebdfb760e01b815260040160405180910390fd5b61020082015160135561022082015160145561026082015151670de0b6b3a764000010806200027a5750670de0b6b3a764000082610260015160200151115b80620002965750670de0b6b3a764000082610260015160400151115b80620002b25750670de0b6b3a764000082610260015160600151115b15620002d15760405163161071fb60e11b815260040160405180910390fd5b610260820151805160198190556020820151601a556040820151601b55606090910151601c556102408301515111806200031c57508161026001516020015182610240015160200151115b806200033957508161026001516040015182610240015160400151115b806200035657508161026001516060015182610240015160600151115b1562000375576040516315b05a8f60e01b815260040160405180910390fd5b61024082015180516015556020808201516016556040808301516017556060928301516018558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a086015160088054841691831691909117905560c08601516009805490931691161790559083015180516200043192601d9201906200046e565b5050610280810151600580546001600160a01b0319166001600160a01b039092169190911790556102a081015160065560e00151600a5562000a5c565b828054828255906000526020600020908101928215620004c6579160200282015b82811115620004c657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200048f565b50620004d4929150620004d8565b5090565b5b80821115620004d45760008155600101620004d9565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b03811182821017156200052b576200052b620004ef565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200055c576200055c620004ef565b604052919050565b80516001600160a01b03811681146200057c57600080fd5b919050565b600082601f8301126200059357600080fd5b815160206001600160401b03821115620005b157620005b1620004ef565b8160051b620005c282820162000531565b9283528481018201928281019087851115620005dd57600080fd5b83870192505b848310156200060757620005f78362000564565b82529183019190830190620005e3565b979650505050505050565b6000608082840312156200062557600080fd5b604051608081016001600160401b03811182821017156200064a576200064a620004ef565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600082601f8301126200068d57600080fd5b81516001600160401b03811115620006a957620006a9620004ef565b6020620006bf601f8301601f1916820162000531565b8281528582848701011115620006d457600080fd5b60005b83811015620006f4578581018301518282018401528201620006d7565b506000928101909101919091529392505050565b600080604083850312156200071c57600080fd5b82516001600160401b03808211156200073457600080fd5b9084019061038082870312156200074a57600080fd5b6200075462000505565b6200075f8362000564565b81526200076f6020840162000564565b6020820152620007826040840162000564565b60408201526060830151828111156200079a57600080fd5b620007a88882860162000581565b606083015250620007bc6080840162000564565b6080820152620007cf60a0840162000564565b60a0820152620007e260c0840162000564565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240620008708882860162000612565b9082015262000884876102c0850162000612565b61026082015262000899610340840162000564565b61028082015261036092909201516102a0830152602085015191935080821115620008c357600080fd5b50620008d2858286016200067b565b9150509250929050565b600181811c90821680620008f157607f821691505b6020821081036200091257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000968576000816000526020600020601f850160051c81016020861015620009435750805b601f850160051c820191505b8181101562000964578281556001016200094f565b5050505b505050565b81516001600160401b03811115620009895762000989620004ef565b620009a1816200099a8454620008dc565b8462000918565b602080601f831160018114620009d95760008415620009c05750858301515b600019600386901b1c1916600185901b17855562000964565b600085815260208120601f198616915b8281101562000a0a57888601518255948401946001909101908401620009e9565b508582101562000a295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008262000a5757634e487b7160e01b600052601260045260246000fd5b500690565b6136c08062000a6c6000396000f3fe6080604052600436106103a65760003560e01c80638e127cf5116101e7578063d2c35ce81161010d578063e4e7148f116100a0578063ec895f111161006f578063ec895f1114610ae9578063f259645814610b09578063f8c09e5914610b29578063fe3d5aeb14610b5957600080fd5b8063e4e7148f14610a74578063e71f34b314610a94578063e83e34b114610ab4578063eb71f66c14610ac957600080fd5b8063dd2b8fbb116100dc578063dd2b8fbb14610a09578063e0e2daaa14610a29578063e1b39c8014610a3f578063e333155514610a5457600080fd5b8063d2c35ce81461099d578063d6f50169146109bd578063daac24da146109d3578063daf012e6146109f357600080fd5b8063b256126311610185578063c415b95c11610154578063c415b95c1461093b578063c905a4b51461095b578063d0f96b9214610971578063d23d7ea31461098757600080fd5b8063b2561263146108c3578063bc30e7a1146108e3578063bf9bd5cd14610903578063c17225631461091957600080fd5b806399623bb1116101c157806399623bb11461084e5780639af252621461086e578063a64c90bf1461088e578063a98a46db146108a357600080fd5b80638e127cf5146107f85780638efc09861461081857806397b0e8ce1461082e57600080fd5b80634554f9a9116102cc578063628027a31161026a57806383b361e81161023957806383b361e81461077857806384c19aab1461079857806385229785146107b85780638627a4f0146107d857600080fd5b8063628027a3146106e35780636b44e6be146107035780636e95d67c146107435780636f6d5c4a1461075857600080fd5b80634fbfee77116102a65780634fbfee771461065a57806354fd4d501461067a5780635720c9d5146106ad5780635aa6e675146106c357600080fd5b80634554f9a91461060e578063488007601461062457806349f13de71461063a57600080fd5b80631ecda0fe116103445780632e7cd971116103135780632e7cd9711461059b5780633e2d2014146105ae578063411c3035146105ce578063421caba8146105ee57600080fd5b80631ecda0fe146105025780632885e3ac146105265780632907d3dd146105465780632b58f4181461056657600080fd5b806310d1dc3e1161038057806310d1dc3e1461047557806311e77bfe146104955780631978ebcf146104b55780631b59be0c146104d557600080fd5b806304baa00b146103d557806306fdde031461042857806310780f731461043d57600080fd5b366103d0576002600154036103ce57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156103e157600080fd5b506104126040518060400160405280601181526020017048797065726472697665466163746f727960781b81525081565b60405161041f9190612cec565b60405180910390f35b34801561043457600080fd5b50610412610b79565b34801561044957600080fd5b5060085461045d906001600160a01b031681565b6040516001600160a01b03909116815260200161041f565b34801561048157600080fd5b506103ce610490366004612cff565b610c07565b3480156104a157600080fd5b506103ce6104b0366004612d11565b610d20565b3480156104c157600080fd5b506103ce6104d0366004612d11565b610df9565b3480156104e157600080fd5b506104f56104f0366004612d2a565b610e7b565b60405161041f9190612d9f565b34801561050e57600080fd5b50610518600f5481565b60405190815260200161041f565b34801561053257600080fd5b506103ce610541366004612cff565b610f56565b34801561055257600080fd5b506103ce610561366004612d11565b6110bc565b34801561057257600080fd5b5061045d610581366004612e14565b60208052600090815260409020546001600160a01b031681565b61045d6105a93660046130ee565b61113e565b3480156105ba57600080fd5b506103ce6105c9366004612e14565b611580565b3480156105da57600080fd5b506103ce6105e93660046131cf565b6115f4565b3480156105fa57600080fd5b506103ce610609366004612e14565b6117c5565b34801561061a57600080fd5b5061051860105481565b34801561063057600080fd5b5061051860145481565b34801561064657600080fd5b5061045d6106553660046131fb565b6118ce565b34801561066657600080fd5b506103ce610675366004612d11565b6119c0565b34801561068657600080fd5b5061041260405180604001604052806007815260200166076312e302e32360cc1b81525081565b3480156106b957600080fd5b50610518600b5481565b3480156106cf57600080fd5b5060025461045d906001600160a01b031681565b3480156106ef57600080fd5b506103ce6106fe366004612d11565b611a1d565b34801561070f57600080fd5b5061073361071e366004612e14565b60226020526000908152604090205460ff1681565b604051901515815260200161041f565b34801561074f57600080fd5b50602154610518565b34801561076457600080fd5b506103ce610773366004612d11565b611a9f565b34801561078457600080fd5b506103ce610793366004612d11565b611b43565b3480156107a457600080fd5b506103ce6107b3366004612d11565b611bc5565b3480156107c457600080fd5b506103ce6107d3366004612e14565b611c47565b3480156107e457600080fd5b506103ce6107f3366004612e14565b611cbb565b34801561080457600080fd5b506103ce610813366004612d11565b611d2f565b34801561082457600080fd5b50610518600e5481565b34801561083a57600080fd5b506103ce610849366004612d11565b611dd3565b34801561085a57600080fd5b5060055461045d906001600160a01b031681565b34801561087a57600080fd5b506103ce610889366004612d2a565b611e55565b34801561089a57600080fd5b506104f5611ebd565b3480156108af57600080fd5b506103ce6108be366004612e14565b611f1f565b3480156108cf57600080fd5b506103ce6108de366004612e14565b611f93565b3480156108ef57600080fd5b506104f56108fe36600461328f565b612007565b34801561090f57600080fd5b5061051860125481565b34801561092557600080fd5b5061092e612109565b60405161041f91906132b1565b34801561094757600080fd5b5060075461045d906001600160a01b031681565b34801561096757600080fd5b5061051860065481565b34801561097d57600080fd5b50610518600a5481565b34801561099357600080fd5b5061051860115481565b3480156109a957600080fd5b506103ce6109b8366004612e14565b612161565b3480156109c957600080fd5b5061051860135481565b3480156109df57600080fd5b5061045d6109ee366004612d11565b6121d5565b3480156109ff57600080fd5b50610518600d5481565b348015610a1557600080fd5b506103ce610a24366004612e14565b612205565b348015610a3557600080fd5b50610518600c5481565b348015610a4b57600080fd5b50601e54610518565b348015610a6057600080fd5b5060045461045d906001600160a01b031681565b348015610a8057600080fd5b5060035461045d906001600160a01b031681565b348015610aa057600080fd5b506103ce610aaf366004612d11565b612279565b348015610ac057600080fd5b5061092e61231d565b348015610ad557600080fd5b506103ce610ae4366004612d11565b612375565b348015610af557600080fd5b506104f5610b0436600461328f565b61240d565b348015610b1557600080fd5b5060095461045d906001600160a01b031681565b348015610b3557600080fd5b50610733610b44366004612e14565b601f6020526000908152604090205460ff1681565b348015610b6557600080fd5b5061045d610b74366004612d11565b61250f565b60008054610b86906132dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb2906132dc565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b505050505081565b6002546001600160a01b03163314610c31576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601954808252601a546020830152601b5492820192909252601c5460608201529082351180610c71575080602001518260200135115b80610c83575080604001518260400135115b80610c95575080606001518260600135115b15610cb3576040516315b05a8f60e01b815260040160405180910390fd5b81356015819055602080840135601681905560408086013560178190556060808801356018819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610d4a576040516282b42960e81b815260040160405180910390fd5b80600b54610d589190613310565b151580610d71575080600c54610d6e9190613310565b15155b80610d88575080600d54610d859190613310565b15155b80610d9f575080600e54610d9c9190613310565b15155b15610dbd576040516311b75c1560e31b815260040160405180910390fd5b600a8190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610e23576040516282b42960e81b815260040160405180910390fd5b601254811115610e4657604051631670f79760e01b815260040160405180910390fd5b60118190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610dee565b60215460609067ffffffffffffffff811115610e9957610e99612e31565b604051908082528060200260200182016040528015610ec2578160200160208202803683370190505b50905060005b82811015610f4e5760206000858584818110610ee657610ee6613332565b9050602002016020810190610efb9190612e14565b6001600160a01b0390811682526020820192909252604001600020548351911690839083908110610f2e57610f2e613332565b6001600160a01b0390921660209283029190910190910152600101610ec8565b505b92915050565b6002546001600160a01b03163314610f80576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260155481526016546020820152601754918101919091526018546060820152670de0b6b3a764000082351180610fcb5750670de0b6b3a76400008260200135115b80610fe15750670de0b6b3a76400008260400135115b80610ff75750670de0b6b3a76400008260600135115b80611003575080518235105b80611015575080602001518260200135105b80611027575080604001518260400135105b80611039575080606001518260600135105b156110575760405163161071fb60e11b815260040160405180910390fd5b81356019819055602080840135601a819055604080860135601b819055606080880135601c819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610d14565b6002546001600160a01b031633146110e6576040516282b42960e81b815260040160405180910390fd5b601054811115611109576040516328a2d9a960e01b815260040160405180910390fd5b600f8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610dee565b6001600160a01b0389166000908152601f602052604081205460ff1661117757604051636e623f0f60e01b815260040160405180910390fd5b611182888686612524565b60408051336020808301919091528183018e905282518083038401815260608301938490528051910120631d321d7560e31b9092526000916001600160a01b038d169163e990eba8916111df918e908e908e908a90606401613459565b6020604051808303816000875af11580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906134a9565b90508a60206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03168961014001906001600160a01b031690816001600160a01b0316815250508a6001600160a01b03167fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed234465828c8c8c6040516112e194939291906134c6565b60405180910390a26021805460018082019092557f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5700180546001600160a01b0319166001600160a01b03848116918217909255600090815260226020908152604091829020805460ff1916851790559280558051339381019390935282018e90528c16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b81526004016113aa959493929190613518565b60206040518083038185885af11580156113c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ed919061357b565b50600260015560005b601d5481101561149a57816001600160a01b0316637180c8ca601d838154811061142257611422613332565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050600190920191506113f69050565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea990602401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50479250508115905061157057604051600090339083908381818185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b505090508061156e576040516312171d8360e31b815260040160405180910390fd5b505b509b9a5050505050505050505050565b6002546001600160a01b031633146115aa576040516282b42960e81b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517fae062fb82c932c653cd44617343ecda1d13e375e0d6f20d969c944fbda1963d390600090a250565b6002546001600160a01b0316331480159061161a57506003546001600160a01b03163314155b15611637576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152601f602052604090205460ff1661167057604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601e828154811061168d5761168d613332565b6000918252602090912001546001600160a01b0316146116c057604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601f60205260409020805460ff19169055601e80546116f0906001906135aa565b8154811061170057611700613332565b600091825260209091200154601e80546001600160a01b03909216918390811061172c5761172c613332565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601e80548061176b5761176b6135bd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b031633148015906117eb57506003546001600160a01b03163314155b15611808576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16156118425760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020526040808220805460ff19166001908117909155601e8054918201815583527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6001600160a01b0387166000908152601f602052604081205460ff1661190757604051636e623f0f60e01b815260040160405180910390fd5b611912878686612524565b60408051336020808301919091528183018c90528251808303840181526060830193849052805191012063182a20c360e31b9092526000916001600160a01b038b169163c15106189161196f918c908c908a908a906064016135d3565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906134a9565b9a9950505050505050505050565b6002546001600160a01b031633146119ea576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6002546001600160a01b03163314611a47576040516282b42960e81b815260040160405180910390fd5b601354811015611a6a57604051630a35539d60e41b815260040160405180910390fd5b60148190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610dee565b6002546001600160a01b03163314611ac9576040516282b42960e81b815260040160405180910390fd5b600b54811080611ae45750600a54611ae19082613310565b15155b80611af05750600d5481115b15611b0e5760405163f9c0959d60e01b815260040160405180910390fd5b600c8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610dee565b6002546001600160a01b03163314611b6d576040516282b42960e81b815260040160405180910390fd5b601454811115611b9057604051635a8f655760e01b815260040160405180910390fd5b60138190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610dee565b6002546001600160a01b03163314611bef576040516282b42960e81b815260040160405180910390fd5b600f54811015611c1257604051637edc061360e11b815260040160405180910390fd5b60108190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610dee565b6002546001600160a01b03163314611c71576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6002546001600160a01b03163314611ce5576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b6002546001600160a01b03163314611d59576040516282b42960e81b815260040160405180910390fd5b600a54811080611d745750600a54611d719082613310565b15155b80611d805750600c5481115b15611d9e57604051630219d66360e11b815260040160405180910390fd5b600b8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610dee565b6002546001600160a01b03163314611dfd576040516282b42960e81b815260040160405180910390fd5b601154811015611e205760405163019cfb7b60e61b815260040160405180910390fd5b60128190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610dee565b6002546001600160a01b03163314611e7f576040516282b42960e81b815260040160405180910390fd5b611e8b601d8383612c37565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610d14929190613612565b6060601d805480602002602001604051908101604052809291908181526020018280548015611f1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ef7575b5050505050905090565b6002546001600160a01b03163314611f49576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a90600090a250565b6002546001600160a01b03163314611fbd576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90600090a250565b606081831061202957604051633b2735ab60e11b815260040160405180910390fd5b60215482111561204c5760405163e0f7becb60e01b815260040160405180910390fd5b61205683836135aa565b67ffffffffffffffff81111561206e5761206e612e31565b604051908082528060200260200182016040528015612097578160200160208202803683370190505b509050825b82811015610f4e57602181815481106120b7576120b7613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106120e9576120e9613332565b6001600160a01b039092166020928302919091019091015260010161209c565b6121346040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526015548152601654602082015260175491810191909152601854606082015290565b6002546001600160a01b0316331461218b576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000602182815481106121ea576121ea613332565b6000918252602090912001546001600160a01b031692915050565b6002546001600160a01b0316331461222f576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6002546001600160a01b031633146122a3576040516282b42960e81b815260040160405180910390fd5b600c548110806122be5750600a546122bb9082613310565b15155b806122ca5750600e5481115b156122e857604051633007ad0160e11b815260040160405180910390fd5b600d8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610dee565b6123486040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526019548152601a546020820152601b5491810191909152601c54606082015290565b6002546001600160a01b0316331461239f576040516282b42960e81b815260040160405180910390fd5b600d548110806123ba5750600a546123b79082613310565b15155b156123d85760405163cfb699cb60e01b815260040160405180910390fd5b600e8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610dee565b606081831061242f57604051633b2735ab60e11b815260040160405180910390fd5b601e548211156124525760405163e0f7becb60e01b815260040160405180910390fd5b61245c83836135aa565b67ffffffffffffffff81111561247457612474612e31565b60405190808252806020026020018201604052801561249d578160200160208202803683370190505b509050825b82811015610f4e57601e81815481106124bd576124bd613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106124ef576124ef613332565b6001600160a01b03909216602092830291909101909101526001016124a2565b6000601e82815481106121ea576121ea613332565b600b54836101000151108061253f5750600c54836101000151115b8061255b5750600a548361010001516125589190613310565b15155b1561257957604051635428734d60e01b815260040160405180910390fd5b600d548360e0015110806125925750600e548360e00151115b806125b057508261010001518360e001516125ad9190613310565b15155b156125ce5760405163253fffcf60e11b815260040160405180910390fd5b600f548360c0015110806125e757506010548360c00151115b156126055760405163ef9bc65f60e01b815260040160405180910390fd5b6019546101c08401515111806126395750601a5460e08401516101c085015160200151612637916301e1338090612895565b115b8061264e5750601b546101c084015160400151115b806126635750601c546101c084015160600151115b8061267557506015546101c084015151105b8061269e575060165460e08401516101c08501516020015161269c916301e13380906128bb565b105b806126b357506017546101c084015160400151105b806126c857506018546101c084015160600151105b156126e657604051632d8768f960e01b815260040160405180910390fd5b6011548210806126f7575060125482115b15612715576040516330554de160e01b815260040160405180910390fd5b600061273a6611c37937e0800061273485671bc16d674ec800006128d9565b906128f5565b60135490915061274a90826128f5565b82108061277d575061277a612771671bc16d674ec8000061276b86856128f5565b9061290b565b60145490612920565b82115b1561279b576040516383ebdfb760e01b815260040160405180910390fd5b60006127ab838660e00151612935565b60055460408701519192506001600160a01b0391821691161415806127d65750600654856060015114155b806127f557506007546101608601516001600160a01b03908116911614155b8061281457506008546101808601516001600160a01b03908116911614155b8061283357506009546101a08601516001600160a01b03908116911614155b8061285257506004546101408601516001600160a01b03908116911614155b80612861575061012085015115155b1561287f5760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b60008260001904841183021582026128ac57600080fd5b50910281810615159190040190565b60008260001904841183021582026128d257600080fd5b5091020490565b60006128ee83670de0b6b3a7640000846128bb565b9392505050565b600081831161290457816128ee565b5090919050565b60006128ee8383670de0b6b3a76400006128bb565b600081831161292f57826128ee565b50919050565b600080612966612957612949866064613660565b66a5bbed86c5a0009061290b565b6748cd4072281e0000906128d9565b905061297a670de0b6b3a7640000826128d9565b90506129d28161276b6129a56129a061299b89670de0b6b3a7640000613677565b6129da565b612a08565b6129cc6129a06129ba8a8a6301e133806128bb565b61299b90670de0b6b3a7640000613677565b906128d9565b949350505050565b60006001600160ff1b03821115612a045760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213612a2a5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ab69084901c6129da565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255906000526020600020908101928215612c8a579160200282015b82811115612c8a5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612c57565b50612a049291505b80821115612a045760008155600101612c92565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006128ee6020830184612ca6565b60006080828403121561292f57600080fd5b600060208284031215612d2357600080fd5b5035919050565b60008060208385031215612d3d57600080fd5b823567ffffffffffffffff80821115612d5557600080fd5b818501915085601f830112612d6957600080fd5b813581811115612d7857600080fd5b8660208260051b8501011115612d8d57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612de05783516001600160a01b031683529284019291840191600101612dbb565b50909695505050505050565b6001600160a01b0381168114612e0157600080fd5b50565b8035612e0f81612dec565b919050565b600060208284031215612e2657600080fd5b81356128ee81612dec565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715612e6b57612e6b612e31565b60405290565b600082601f830112612e8257600080fd5b813567ffffffffffffffff80821115612e9d57612e9d612e31565b604051601f8301601f19908116603f01168101908282118183101715612ec557612ec5612e31565b81604052838152866020858801011115612ede57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215612f1057600080fd5b6040516080810181811067ffffffffffffffff82111715612f3357612f33612e31565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102408284031215612f7757600080fd5b612f7f612e47565b9050612f8a82612e04565b8152612f9860208301612e04565b6020820152612fa960408301612e04565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140613006818401612e04565b90820152610160613018838201612e04565b9082015261018061302a838201612e04565b908201526101a061303c838201612e04565b908201526101c061304f84848301612efe565b9082015292915050565b60006060828403121561306b57600080fd5b6040516060810167ffffffffffffffff828210818311171561308f5761308f612e31565b81604052829350843591506130a382612dec565b90825260208401359081151582146130ba57600080fd5b81602084015260408501359150808211156130d457600080fd5b506130e185828601612e71565b6040830152505092915050565b6000806000806000806000806000806103608b8d03121561310e57600080fd5b8a35995061311e60208c01612e04565b985060408b013567ffffffffffffffff8082111561313b57600080fd5b6131478e838f01612e71565b99506131568e60608f01612f64565b98506102a08d013591508082111561316d57600080fd5b6131798e838f01612e71565b97506102c08d013596506102e08d013595506103008d013594506103208d01359150808211156131a857600080fd5b506131b58d828e01613059565b9250506103408b013590509295989b9194979a5092959850565b600080604083850312156131e257600080fd5b82356131ed81612dec565b946020939093013593505050565b600080600080600080600080610320898b03121561321857600080fd5b88359750602089013561322a81612dec565b96506132398a60408b01612f64565b955061028089013567ffffffffffffffff81111561325657600080fd5b6132628b828c01612e71565b989b979a5095986102a0810135976102c082013597506102e0820135965061030090910135945092505050565b600080604083850312156132a257600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610f50565b600181811c908216806132f057607f821691505b60208210810361292f57634e487b7160e01b600052602260045260246000fd5b60008261332d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b80516001600160a01b03168252602081015161336f60208401826001600160a01b03169052565b50604081015161338a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516133f0828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b60006102c087835280602084015261347381840188612ca6565b90506134826040840187613348565b8281036102808401526134958186612ca6565b915050826102a08301529695505050505050565b6000602082840312156134bb57600080fd5b81516128ee81612dec565b6001600160a01b03851681526102a0602082018190526000906134eb83820187612ca6565b90506134fa6040840186613348565b82810361028084015261350d8185612ca6565b979650505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e084015261356f610100840182612ca6565b98975050505050505050565b60006020828403121561358d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f5057610f50613594565b634e487b7160e01b600052603160045260246000fd5b60006102c08783526135e86020840188613348565b806102608401526135fb81840187612ca6565b61028084019590955250506102a001529392505050565b60208082528181018390526000908460408401835b8681101561365557823561363a81612dec565b6001600160a01b031682529183019190830190600101613627565b509695505050505050565b8082028115828204841417610f5057610f50613594565b80820180821115610f5057610f5061359456fea2646970667358221220be80dea5cc16b1535b83c7c3c215ffa84c788a86a6fd7a5c3e5b8bed638cb13e64736f6c63430008160033608060405234801561001057600080fd5b50612360806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638cc23ce01462000033575b600080fd5b6200004a62000044366004620003f1565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b6000601488511015620000bf5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964205f657874726144617461206c656e67746800000000000000604482015260640160405180910390fd5b600088806020019051810190620000d79190620004f1565b60408051336020820152908101859052909150606001604051602081830303815290604052805190602001208c8c8c8b8b8b8b8b896040516200011a9062000162565b6200012e9998979695949392919062000638565b8190604051809103906000f59050801580156200014f573d6000803e3d6000fd5b509150505b9a9950505050505050505050565b611c18806200071383390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715620001ad57620001ad62000170565b60405290565b600082601f830112620001c557600080fd5b813567ffffffffffffffff80821115620001e357620001e362000170565b604051601f8301601f19908116603f011681019082821181831017156200020e576200020e62000170565b816040528381528660208588010111156200022857600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b03811681146200025e57600080fd5b50565b80356200026e8162000248565b919050565b6000608082840312156200028657600080fd5b6040516080810181811067ffffffffffffffff82111715620002ac57620002ac62000170565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102608284031215620002f157600080fd5b620002fb62000186565b9050620003088262000261565b8152620003186020830162000261565b60208201526200032b6040830162000261565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101606200039681840162000261565b90820152610180620003aa83820162000261565b908201526101a0620003be83820162000261565b908201526101c0620003d283820162000261565b908201526101e0620003e78484830162000273565b9082015292915050565b6000806000806000806000806000806103808b8d0312156200041257600080fd5b8a3567ffffffffffffffff808211156200042b57600080fd5b620004398e838f01620001b3565b9b506200044a8e60208f01620002dd565b9a506200045b6102808e0162000261565b99506102a08d01359150808211156200047357600080fd5b50620004828d828e01620001b3565b975050620004946102c08c0162000261565b9550620004a56102e08c0162000261565b9450620004b66103008c0162000261565b9350620004c76103208c0162000261565b9250620004d86103408c0162000261565b91506103608b013590509295989b9194979a5092959850565b6000602082840312156200050457600080fd5b8151620005118162000248565b9392505050565b80516001600160a01b0316825260208101516200054060208401826001600160a01b03169052565b5060408101516200055c60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151818401525061014080820151818401525061016080820151620005cf828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b60006103608083528b518082850152600091505b8082101562000670576020828e01015161038083860101526020820191506200064c565b6103809150600082828601015281601f19601f830116850101925050506200069c602083018b62000518565b6001600160a01b0389166102808301526001600160a01b0388166102a08301526001600160a01b0387166102c08301526001600160a01b0386166102e08301526001600160a01b0385166103008301526001600160a01b0384166103208301526001600160a01b0383166103408301526200015456fe6103406040523480156200001257600080fd5b5060405162001c1838038062001c188339810160408190526200003591620006c3565b6001600081905588516001600160a01b0390811660809081526020808c0151831660a0908152918c01516101a052908b01516101c05260c0808c01516101e090815260e0808e015161020052610120808f0151909352610100808f0151909152610140808f0151909152908d01805151909252815190920151909152805160409081015161016052905160609081015161018052908b01518216610240528a01516102605288166102205281908a908a908a908a908a908a908a908a90620000fe89826200088f565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e0528116610300529384166103205250508951620001449216905030600162000153565b5050505050505050506200099d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001ad90859083906200021f16565b6200021957604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200020d918691620002d016565b620002198482620002d0565b50505050565b6000806000846001600160a01b0316846040516200023e91906200095b565b6000604051808303816000865af19150503d80600081146200027d576040519150601f19603f3d011682016040523d82523d6000602084013e62000282565b606091505b5091509150818015620002b0575080511580620002b0575080806020019051810190620002b0919062000979565b8015620002c757506000856001600160a01b03163b115b95945050505050565b6000620002e76001600160a01b0384168362000343565b905080516000141580156200030f5750808060200190518101906200030d919062000979565b155b156200033e57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b606062000353838360006200035a565b9392505050565b606081471015620003815760405163cd78605960e01b815230600482015260240162000335565b600080856001600160a01b031684866040516200039f91906200095b565b60006040518083038185875af1925050503d8060008114620003de576040519150601f19603f3d011682016040523d82523d6000602084013e620003e3565b606091505b509092509050620003f686838362000400565b9695505050505050565b6060826200041957620004138262000464565b62000353565b81511580156200043157506001600160a01b0384163b155b156200045c57604051639996b31560e01b81526001600160a01b038516600482015260240162000335565b508062000353565b805115620004755780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b0381118282101715620004ca57620004ca6200048e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004fb57620004fb6200048e565b604052919050565b60005b838110156200052057818101518382015260200162000506565b50506000910152565b80516001600160a01b03811681146200054157600080fd5b919050565b6000608082840312156200055957600080fd5b604051608081016001600160401b03811182821017156200057e576200057e6200048e565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006102608284031215620005c357600080fd5b620005cd620004a4565b9050620005da8262000529565b8152620005ea6020830162000529565b6020820152620005fd6040830162000529565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101606200066881840162000529565b908201526101806200067c83820162000529565b908201526101a06200069083820162000529565b908201526101c0620006a483820162000529565b908201526101e0620006b98484830162000546565b9082015292915050565b60008060008060008060008060006103608a8c031215620006e357600080fd5b89516001600160401b0380821115620006fb57600080fd5b818c0191508c601f8301126200071057600080fd5b8151818111156200072557620007256200048e565b6200073a601f8201601f1916602001620004d0565b91508082528d60208285010111156200075257600080fd5b6200076581602084016020860162000503565b5099506200077990508b60208c01620005af565b97506200078a6102808b0162000529565b96506200079b6102a08b0162000529565b9550620007ac6102c08b0162000529565b9450620007bd6102e08b0162000529565b9350620007ce6103008b0162000529565b9250620007df6103208b0162000529565b9150620007f06103408b0162000529565b90509295985092959850929598565b600181811c908216806200081457607f821691505b6020821081036200083557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033e576000816000526020600020601f850160051c81016020861015620008665750805b601f850160051c820191505b81811015620008875782815560010162000872565b505050505050565b81516001600160401b03811115620008ab57620008ab6200048e565b620008c381620008bc8454620007ff565b846200083b565b602080601f831160018114620008fb5760008415620008e25750858301515b600019600386901b1c1916600185901b17855562000887565b600085815260208120601f198616915b828110156200092c578886015182559484019460019091019084016200090b565b50858210156200094b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516200096f81846020870162000503565b9190910192915050565b6000602082840312156200098c57600080fd5b815180151581146200035357600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516103205161114262000ad6600039600061075201526000818161060e0152818161067a01526107ee0152600081816105860152818161081e015261087c01526000818161053f0152610a110152600081816105da01526107100152600081816101d90152818161039b0152818161064a015281816106ac015281816106de015281816107bf01528181610851015281816108ad015281816109e50152610a440152600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506111426000f3fe6080604052600436106101c25760003560e01c806377d05ff4116100f7578063cbc1343411610095578063e44808bc11610064578063e44808bc146105a8578063eac3e799146105c8578063f3f70707146105fc578063f698da2514610630576101c2565b8063cbc134341461030f578063d899e11214610574578063dbbe807014610561578063ded06231146103d5576101c2565b8063a22cb465116100d1578063a22cb465146104ba578063a6e8a8591461052d578063ab033ea9146102d2578063cba2e58d14610561576101c2565b806377d05ff4146104da5780639032c726146104ed5780639cd241af1461050d576101c2565b806330adf81f11610164578063414f826d1161013e578063414f826d1461046c5780634c2ac1d91461048c5780634ed2d6ac1461049f5780637180c8ca146104ba576101c2565b806330adf81f146104035780633d18b912146104375780633e691db91461044c576101c2565b806317fad7fc116101a057806317fad7fc146103495780631c0f12b61461036957806321b57d531461038957806329b23fc1146103d5576101c2565b806301681a62146102d257806302329a29146102f4578063074a6de91461030f575b3480156101ce57600080fd5b5060003660606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051610211929190610b1a565b600060405180830381855af49150503d806000811461024c576040519150601f19603f3d011682016040523d82523d6000602084013e610251565b606091505b5091509150811561027557604051638bb0a34b60e01b815260040160405180910390fd5b600061028082610b2a565b90506001600160e01b03198116636e64089360e11b146102a257815160208301fd5b8151600319810160048401908152926102c391810160200190602401610b9b565b80519650602001945050505050f35b3480156102de57600080fd5b506102f26102ed366004610c60565b610645565b005b34801561030057600080fd5b506102f26102ed366004610c99565b34801561031b57600080fd5b5061032f61032a366004610cc6565b610672565b604080519283526020830191909152015b60405180910390f35b34801561035557600080fd5b506102f2610364366004610d62565b6106a7565b34801561037557600080fd5b506102f2610384366004610df7565b6106d9565b34801561039557600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610340565b3480156103e157600080fd5b506103f56103f0366004610e3f565b610709565b604051908152602001610340565b34801561040f57600080fd5b506103f57f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b34801561044357600080fd5b506102f261073d565b34801561045857600080fd5b506103f5610467366004610e99565b6107b8565b34801561047857600080fd5b506102f2610487366004610ed6565b6107e9565b6103f561049a366004610ef8565b610817565b3480156104ab57600080fd5b506102f2610384366004610f5c565b3480156104c657600080fd5b506102f26104d5366004610fa6565b61084c565b6103f56104e8366004610cc6565b610875565b3480156104f957600080fd5b506102f2610508366004610fdb565b6108a8565b34801561051957600080fd5b506102f2610528366004611059565b6109e0565b34801561053957600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b61032f61056f366004610e3f565b610a09565b34801561058057600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b457600080fd5b506102f26105c3366004611091565b610a3f565b3480156105d457600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561060857600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561063c57600080fd5b506103f5610a70565b61066e7f0000000000000000000000000000000000000000000000000000000000000000610afe565b5050565b60008061069e7f0000000000000000000000000000000000000000000000000000000000000000610afe565b50935093915050565b6106d07f0000000000000000000000000000000000000000000000000000000000000000610afe565b50505050505050565b6107027f0000000000000000000000000000000000000000000000000000000000000000610afe565b5050505050565b60006107347f0000000000000000000000000000000000000000000000000000000000000000610afe565b50949350505050565b604051630c00007b60e41b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c00007b090602401600060405180830381600087803b15801561079e57600080fd5b505af11580156107b2573d6000803e3d6000fd5b50505050565b60006107e37f0000000000000000000000000000000000000000000000000000000000000000610afe565b50919050565b6108127f0000000000000000000000000000000000000000000000000000000000000000610afe565b505050565b60006108427f0000000000000000000000000000000000000000000000000000000000000000610afe565b5095945050505050565b6108127f0000000000000000000000000000000000000000000000000000000000000000610afe565b60006108a07f0000000000000000000000000000000000000000000000000000000000000000610afe565b509392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108dd610a70565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b1790525161098691906110f0565b600060405180830381855af49150503d80600081146109c1576040519150601f19603f3d011682016040523d82523d6000602084013e6109c6565b606091505b5091509150816109d857805160208201fd5b805160208201f35b6107b27f0000000000000000000000000000000000000000000000000000000000000000610afe565b600080610a357f0000000000000000000000000000000000000000000000000000000000000000610afe565b5094509492505050565b610a687f0000000000000000000000000000000000000000000000000000000000000000610afe565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6060600080836001600160a01b03166000366040516109869291905b8183823760009101908152919050565b805160208201516001600160e01b03198082169291906004831015610b595780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610b92578181015183820152602001610b7a565b50506000910152565b600060208284031215610bad57600080fd5b815167ffffffffffffffff80821115610bc557600080fd5b818401915084601f830112610bd957600080fd5b815181811115610beb57610beb610b61565b604051601f8201601f19908116603f01168101908382118183101715610c1357610c13610b61565b81604052828152876020848701011115610c2c57600080fd5b610c3d836020830160208801610b77565b979650505050505050565b6001600160a01b0381168114610c5d57600080fd5b50565b600060208284031215610c7257600080fd5b8135610c7d81610c48565b9392505050565b80358015158114610c9457600080fd5b919050565b600060208284031215610cab57600080fd5b610c7d82610c84565b6000606082840312156107e357600080fd5b600080600060608486031215610cdb57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610d0057600080fd5b610d0c86828701610cb4565b9150509250925092565b60008083601f840112610d2857600080fd5b50813567ffffffffffffffff811115610d4057600080fd5b6020830191508360208260051b8501011115610d5b57600080fd5b9250929050565b60008060008060008060808789031215610d7b57600080fd5b8635610d8681610c48565b95506020870135610d9681610c48565b9450604087013567ffffffffffffffff80821115610db357600080fd5b610dbf8a838b01610d16565b90965094506060890135915080821115610dd857600080fd5b50610de589828a01610d16565b979a9699509497509295939492505050565b60008060008060808587031215610e0d57600080fd5b843593506020850135610e1f81610c48565b92506040850135610e2f81610c48565b9396929550929360600135925050565b60008060008060808587031215610e5557600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115610e8157600080fd5b610e8d87828801610cb4565b91505092959194509250565b600060208284031215610eab57600080fd5b813567ffffffffffffffff811115610ec257600080fd5b610ece84828501610cb4565b949350505050565b60008060408385031215610ee957600080fd5b50508035926020909101359150565b600080600080600060a08688031215610f1057600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610f4357600080fd5b610f4f88828901610cb4565b9150509295509295909350565b60008060008060808587031215610f7257600080fd5b843593506020850135610f8481610c48565b9250604085013591506060850135610f9b81610c48565b939692955090935050565b60008060408385031215610fb957600080fd5b8235610fc481610c48565b9150610fd260208401610c84565b90509250929050565b600080600080600080600060e0888a031215610ff657600080fd5b873561100181610c48565b9650602088013561101181610c48565b955061101f60408901610c84565b945060608801359350608088013560ff8116811461103c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060006060848603121561106e57600080fd5b83359250602084013561108081610c48565b929592945050506040919091013590565b600080600080600060a086880312156110a957600080fd5b8535945060208601356110bb81610c48565b935060408601356110cb81610c48565b92506060860135915060808601356110e281610c48565b809150509295509295909350565b60008251611102818460208701610b77565b919091019291505056fea2646970667358221220d80b015eba01e30f344e47c52573b5103d9e5298f652a324e20b41ad1f8e36e864736f6c63430008160033a264697066735822122090ffaf1a612eaba44a04dbee270070e816e4122d743eb9484e50d166e856899c64736f6c63430008160033608060405234801561001057600080fd5b50614479806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e3660046102aa565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60006014835110156100b75760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964205f657874726144617461206c656e67746800000000000000604482015260640160405180910390fd5b6000838060200190518101906100cd9190610406565b604080513360208201529081018590529091506060016040516020818303038152906040528051906020012086868360405161010890610141565b6101149392919061042a565b8190604051809103906000f5905080158015610134573d6000803e3d6000fd5b509150505b949350505050565b613ee5806200055f83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156101895761018961014f565b60405290565b6001600160a01b03811681146101a457600080fd5b50565b80356101b28161018f565b919050565b6000608082840312156101c957600080fd5b6040516080810181811067ffffffffffffffff821117156101ec576101ec61014f565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f83011261022e57600080fd5b813567ffffffffffffffff808211156102495761024961014f565b604051601f8301601f19908116603f011681019082821181831017156102715761027161014f565b8160405283815286602085880101111561028a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156102c257600080fd5b610260808212156102d257600080fd5b6102da610165565b91506102e5876101a7565b82526102f3602088016101a7565b6020830152610304604088016101a7565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e083015261010080880135818401525061012080880135818401525061014080880135818401525061016061036d8189016101a7565b9083015261018061037f8882016101a7565b908301526101a06103918882016101a7565b908301526101c06103a38882016101a7565b908301526101e06103b6898983016101b7565b81840152508195506103c98188016101a7565b9450505061028085013567ffffffffffffffff8111156103e857600080fd5b6103f48782880161021d565b949793965093946102a0013593505050565b60006020828403121561041857600080fd5b81516104238161018f565b9392505050565b83516001600160a01b031681526102a08101602085015161045660208401826001600160a01b03169052565b50604085015161047160408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e0830152610100808601518184015250610120808601518184015250610140808601518184015250610160808601516104e3828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e0808701518051918501919091526020810151610200850152604081015161022085015260600151610240840152848116610260840152831661028083015261013956fe6102a06040523480156200001257600080fd5b5060405162003ee538038062003ee58339810160408190526200003591620001b5565b600160005582516001600160a01b039081166080908152602080860151831660a0908152918601516101a052908501516101c05260c0808601516101e090815260e0808801516102005261012080890151909352610100808901519091526101408089015190915290870180515190925281519092015190915280516040908101516101605290516060908101516101805290850151821661024052909301516102605290821661022052166102805262000305565b60405161020081016001600160401b03811182821017156200011d57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013b57600080fd5b919050565b6000608082840312156200015357600080fd5b604051608081016001600160401b03811182821017156200018457634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008060008385036102a0811215620001cd57600080fd5b61026080821215620001de57600080fd5b620001e8620000eb565b9150620001f58662000123565b8252620002056020870162000123565b6020830152620002186040870162000123565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e08301526101008087015181840152506101208087015181840152506101408087015181840152506101606200028381880162000123565b908301526101806200029787820162000123565b908301526101a0620002ab87820162000123565b908301526101c0620002bf87820162000123565b908301526101e0620002d48888830162000140565b8184015250819450620002e981870162000123565b93505050620002fc610280850162000123565b90509250925092565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613a686200047d60003960008181610d0801528181611ed80152612ad9015260008181610de001526123ed015260008181610db101526123b0015260008181610c4b01528181610f1001528181610fa001528181611030015281816110c0015281816116db015281816117730152818161193c01528181611f670152818161203d015261219401526000610e78015260008181610e5201526125a0015260008181610e2c015261257a015260008181610e060152612554015260006111cd015260006111a7015260006111810152600061115b015260008181610eea01526125c6015260008181610e9e0152818161136201526129b1015260008181610ec40152612b9d01526000818161062a0152610d8201526000818161075a01528181610d53015281816112fb0152612b4a0152613a686000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c806360246c881161013b578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104f9578063d81657431461050c578063e44808bc14610521578063e985e9c514610534578063fba560081461054757600080fd5b8063bd85b039146104a3578063becee9c3146104b6578063c55dae63146104d6578063c69e16ad146104de578063c6e6f592146104e657600080fd5b8063a22cb465116100ff578063a22cb4651461044f578063a6f19c8414610462578063ab033ea91461046a578063b0d965801461047b578063b88fed9f1461049057600080fd5b806360246c88146103fa5780637180c8ca1461040f5780637ecebe0014610421578063950c5d03146104345780639cd241af1461043c57600080fd5b806320fc4881116101c95780633e691db91161018d5780633e691db91461039657806346fbf68e146103a95780634e41a1fb146103cc5780634ed2d6ac146103df57806354fd4d50146103f257600080fd5b806320fc4881146102fb57806321ff32a914610340578063313ce567146103615780633656eec21461037b5780633a98ef391461038e57600080fd5b806306fdde031161021057806306fdde031461029a5780630a4e1493146102a257806314e5f07b146102c257806317fad7fc146102d55780631c0f12b6146102e857600080fd5b8062ad800c1461024157806301681a621461026a57806302329a291461027f57806304baa00b14610292575b600080fd5b61025461024f366004612dee565b610576565b6040516102619190612e57565b60405180910390f35b61027d610278366004612e7f565b6105ad565b005b61027d61028d366004612eaa565b6105b6565b6102546105bf565b610254610605565b6102aa61061c565b6040516001600160a01b039091168152602001610261565b61027d6102d0366004612ed6565b61065c565b61027d6102e3366004612fb1565b610678565b61027d6102f6366004613046565b61068e565b61030e610309366004612dee565b6106a1565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610261565b61035361034e36600461308e565b61070d565b604051908152602001610261565b610369610753565b60405160ff9091168152602001610261565b6103536103893660046130d0565b6107ee565b610353610827565b6103536103a4366004613100565b610846565b6103bc6103b7366004612e7f565b610851565b6040519015158152602001610261565b6102546103da366004612dee565b610871565b61027d6103ed36600461313b565b61087f565b6102546108cd565b610402610902565b6040516102619190613185565b61027d61041d366004613226565b5050565b61035361042f366004612e7f565b610c11565b6102aa610c3d565b61027d61044a366004613254565b610c7d565b61027d61045d366004613226565b610c8e565b6102aa610cfa565b61027d610478366004612e7f565b50565b610483610d3a565b604051610261919061328c565b61035361049e366004612dee565b611202565b6103536104b1366004612dee565b611210565b6104c96104c43660046133b2565b611232565b60405161026191906133f4565b6102aa6112ed565b61035361132d565b6103536104f4366004612dee565b611347565b610353610507366004612dee565b611355565b61051461138c565b6040516102619190613438565b61027d61052f366004613549565b611498565b6103bc6105423660046135a8565b6114e0565b61054f611524565b6040805182516001600160801b039081168252602093840151169281019290925201610261565b60606105a861058483611583565b6040516020016105949190612e57565b6040516020818303038152906040526116ab565b919050565b610478816116cf565b6104788161193a565b6060610602604051806040016040528060158152602001744165726f64726f6d654c704879706572647269766560581b8152506040516020016105949190612e57565b90565b6060610602600160405160200161059491906135d6565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916106029101610594565b61066d898989898989898989611a54565b505050505050505050565b610686868686868686611c4b565b505050505050565b61069b8484848433611cff565b50505050565b60408051606081018252600080825260208201819052918101919091526105a860086000848152602001908152602001600020604051602001610594919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b038681168552908352818420908516845282528083205481519283015261074c9101610594565b9392505050565b60006106027f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190613687565b6040805160ff909216602083015201610594565b6000828152600a602090815260408083206001600160a01b03851684528252808320548151928301526108219101610594565b92915050565b6000610602610834611ec0565b60405160200161059491815260200190565b600061082182611f50565b60006105a861085f8361218f565b60408051911515602083015201610594565b60606105a861058483612274565b8361088981612372565b6001600160a01b0316336001600160a01b0316146108ba57604051632aab8bd360e01b815260040160405180910390fd5b6108c68585858561242f565b5050505050565b606061060260405180604001604052806007815260200166076312e302e32360cc1b8152506040516020016105949190612e57565b61097b604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061098561249c565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109f091906136d0565b6109fa91906136e3565b905060008215610b0c5773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a27856124af565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc91906136f6565b509050610b098184612645565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bdd57610bd8848661265a565b610be0565b60005b81526003546001600160801b0316602091820152604051919250610c0a9161059491849101613185565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105a89101610594565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916106029101610594565b610c898383833361242f565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916106029101610594565b610d42612d07565b6106026040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190613726565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110209190613726565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b09190613726565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa15801561111c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111409190613726565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f0000000000000000000000000000000000000000000000000000000000000000815250815250604051602001610594919061328c565b60006105a86108348361266f565b6000818152600b60209081526040808320548151928301526105a89101610594565b606060008267ffffffffffffffff81111561124f5761124f613743565b604051908082528060200260200182016040528015611278578160200160208202803683370190505b50905060005b838110156112d157600085858381811061129a5761129a613759565b905060200201359050600081549050808484815181106112bc576112bc613759565b6020908102919091010152505060010161127e565b506112e68160405160200161059491906133f4565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916106029101610594565b600061060260095460405160200161059491815260200190565b60006105a8610834836126e7565b60006105a86108346113877f0000000000000000000000000000000000000000000000000000000000000000856136d0565b612722565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526106026002604051602001610594919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b846114a281612372565b6001600160a01b0316336001600160a01b0316146114d357604051632aab8bd360e01b815260040160405180910390fd5b6106868686868686611cff565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff90911615159181019190915290916108219101610594565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b909204811660209384019081528451938401929092529051169181019190915261060290606001610594565b606060f882901c6001600160f81b038316600061159f82612766565b905060008360038111156115b5576115b56136a4565b036115e7576040518060400160405280600d81526020016c048797065726472697665204c5609c1b81525093506116a3565b60018360038111156115fb576115fb6136a4565b036116275780604051602001611611919061376f565b60405160208183030381529060405293506116a3565b600283600381111561163b5761163b6136a4565b03611651578060405160200161161191906137a8565b6003836003811115611665576116656136a4565b036116a3576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b81526004016116c69190612e57565b60405180910390fd5b6116d761281b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b9190613726565b9050336001600160a01b0382161480159061180957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f39190613726565b6001600160a01b0316336001600160a01b031614155b801561181b57506118193361218f565b155b15611838576040516282b42960e81b815260040160405180910390fd5b6000611842611ec0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561188c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b091906137e2565b90506118c66001600160a01b0385168483612845565b816118cf611ec0565b146118ed576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104786001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190613726565b6001600160a01b0316336001600160a01b0316141580156119e357506119e13361218f565b155b15611a00576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a590611a4990831515815260200190565b60405180910390a150565b83421115611a755760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a9c5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b8a573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611bc857604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c6857506001600160a01b038516155b15611c865760405163f0dd15fd60e01b815260040160405180910390fd5b828114611ca65760405163174861a760e31b815260040160405180910390fd5b60005b83811015611cf657611cee858583818110611cc657611cc6613759565b905060200201358888868686818110611ce157611ce1613759565b9050602002013533611cff565b600101611ca9565b50505050505050565b6001600160a01b0384161580611d1c57506001600160a01b038316155b15611d3a5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611dfe576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611dfe576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611dfc576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611df69084906136e3565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611e309084906136e3565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e679084906136d0565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4b91906137e2565b905090565b6000611f5a61281b565b611f6382612897565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe79190613726565b90506001600160a01b0381166120006020850185612e7f565b6001600160a01b03161461202757604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b038216148015906120d357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bd9190613726565b6001600160a01b0316336001600160a01b031614155b80156120e557506120e33361218f565b155b15612102576040516282b42960e81b815260040160405180910390fd5b600061210c61249c565b6009805460009091559091506121238183876128cd565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461216260408a0160208b01612eaa565b60408051938452602084019290925215159082015260600160405180910390a25050506105a86001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261221891908101906137fb565b905060005b815181101561226a57836001600160a01b031682828151811061224257612242613759565b60200260200101516001600160a01b031603612262575060019392505050565b60010161221d565b5060009392505050565b606060f882901c6001600160f81b038316600061229082612766565b905060008360038111156122a6576122a66136a4565b036122d8576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b81525093506116a3565b60018360038111156122ec576122ec6136a4565b03612302578060405160200161161191906138c0565b6002836003811115612316576123166136a4565b0361232c578060405160200161161191906138f8565b6003836003811115612340576123406136a4565b036116a357505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611f4b670de0b6b3a764000061266f565b6125136040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161260b9116612966565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261263d92900416612966565b905292915050565b600061074c8383670de0b6b3a76400006129dc565b600061074c83670de0b6b3a7640000846129dc565b60405163b88fed9f60e01b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f906024015b602060405180830381865af41580156126c3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906137e2565b6040516363737ac960e11b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f906024015b602060405180830381865af4158015611a2a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190613940565b6000611a5a828461396f565b6115de908461386c565b6002546004546000916105c5916001600160801b0390911690600f0b612754565b600061008182611a968588886125db565b9061277a565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611ad557826115de565b50919050565b6006546000908190611afe908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611c7a576000611b28838361386c565b9050611b3761114782866127ef565b60068054601090611b59908490600160801b90046001600160801b03166138f3565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611b92858361280490919063ffffffff16565b90506000611bc0827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611bd491906136bb565b90915550611be49050818361386c565b9150611bef82611a9c565b60028054600090611c0a9084906001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c3782612819565b60048054600090611c4c908490600f0b613913565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611c8c8785612804565b91506000611cba837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611ce6817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611d0957611cf8828261386c565b611d02908461386c565b9250611d20565b611d13828261386c565b611d1d90846136bb565b92505b86861015611d4357611d338387896125db565b9250611d408287896125db565b91505b509550959350505050565b600080611d6684611d608a888a6125db565b90612804565b9050611d738884866125db565b611d7d90826136bb565b905086811115611d8d5786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611e0d916001600160801b03169061386c565b905080600003611e21576001915050611371565b6000611e2c85612843565b905080600003611e4157600192505050611371565b600080611e4f8385896128df565b9150915080611e65576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611ea1929190613a01565b6040805180830381865af4158015611ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee19190613a77565b91509150611eff611ef182611377565b611efa90613a9b565b612a5a565b925082611f155760009650505050505050611371565b611f1e82611a9c565b60078054600090611f399084906001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f6681611a9c565b60078054601090611f88908490600160801b90046001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611fe587612bf2565b6040518263ffffffff1660e01b81526004016120019190613ab7565b6040805180830381865af415801561201d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120419190613ac6565b9150915080612057575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916120bd916136bb565b6120c7919061386c565b9050806000036120df57506000958695509350505050565b60008087116120ef5760006120fa565b6120fa8488846125db565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561212e5761212e613af6565b6040519080825280601f01601f191660200182016040528015612158576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612179578692505b828152826000602083013e90999098509650505050505050565b60008061219e6105ca565b90508083116121ae5760006121b8565b6121b8818461386c565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612804565b600080806122056121fd88670de0b6b3a764000061386c565b899087612d2c565b905086156122475761221788886125c6565b91506122388a8a846122318a670de0b6b3a764000061386c565b8989612d52565b925061224483826136bb565b90505b9750975097945050505050565b600061227261226b84670de0b6b3a764000061386c565b83906125c6565b6115de90670de0b6b3a764000061386c565b6000806122bb85612293611a64565b61229d91906136bb565b600254610ff2908790600160801b90046001600160801b031661386c565b909210949350505050565b600080808061231d87866123168b6123106122e98c670de0b6b3a764000061386c565b7f0000000000000000000000000000000000000000000000000000000000000000906125c6565b906125c6565b9190612d2c565b9350612349847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061236a61236289670de0b6b3a764000061386c565b8a9088612d2c565b9050612396817f00000000000000000000000000000000000000000000000000000000000000006125c6565b93506123c2847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123cc90846136bb565b915050945094509450949050565b600080600080600080888810156124495786156123ff576123fc8d898b6125db565b9c505b61240a8c898b6125db565b9b506124158b611377565b61241e8d611377565b61242891906136ce565b90506124358b898b6125db565b9a506124428a898b6125db565b9950612468565b6124528b611377565b61245b8d611377565b61246591906136ce565b90505b9b9c9a9b999a975050505050505050565b60008260000361248a57508461251a565b81156124dd576124bb61249d84876136bb565b6124a785876115e5565b6124b1888a6115e5565b611d6091906136bb565b905060006124c98588611ac6565b9050808210156124d7578091505b5061251a565b8285036124ec5750600061251a565b6125176124f9848761386c565b61250385876125c6565b61250d888a6115e5565b611d60919061386c565b90505b95945050505050565b600060016001607f1b0319821280612541575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b60008061256d846000612d75565b612578846000612d75565b61258291906136ce565b9050600081131561259e5761259781866136bb565b94506125bd565b60008112156125bd576125b081613a9b565b6125ba908661386c565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612d2c565b60008260001904841183021582026125f257600080fd5b5091020490565b6040516363737ac960e11b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063c6e6f59290602401611a0d565b604051632e1a7d4d60e01b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561269957600080fd5b505af11580156126ad573d6000803e3d6000fd5b506125bd9250506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690508587612d8b565b60405163350b944160e11b815260040160405180910390fd5b6000808061272161271988670de0b6b3a764000061386c565b8990876125db565b905086156122475761273388886115e5565b91506122388a8a8461274d8a670de0b6b3a764000061386c565b8989612de2565b6000806127618484612df3565b90925090508061277357612773611444565b5092915050565b6000816000036127935750670de0b6b3a7640000611371565b826000036127a357506000611371565b60006127ae83611377565b905060006127c36127be86611377565b612e32565b90508181026127da670de0b6b3a764000082613b0c565b90506127e581613058565b9695505050505050565b60006115de83670de0b6b3a764000084612d2c565b60006115de83670de0b6b3a7640000846125db565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b600354600090819061285e906001600160801b0316846127ef565b905061288a7f0000000000000000000000000000000000000000000000000000000000000000826136bb565b6002546001600160801b03161115611ad5576002547f0000000000000000000000000000000000000000000000000000000000000000906128d59083906001600160801b031661386c565b6115de919061386c565b6128e7613593565b6000806128f384612bf2565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b815260040161292e9190613ab7565b6040805180830381865af415801561294a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296e9190613ac6565b9350905082612983575060009150612a529050565b60006129aa6129a58461016001518561014001516115e590919063ffffffff16565b611377565b6129ca6129a58561012001518661010001516125c690919063ffffffff16565b6129d491906136ce565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b379190613b3a565b935093509350935080612b535750600098975050505050505050565b868414612b8457612b6384611a9c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bb557612b9483612523565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612be357612bc582611a9c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612bfa6135e5565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612cf291166131ed565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612d24929004166131ed565b905292915050565b6000826000190484118302158202612d4357600080fd5b50910281810615159190040190565b600080612d63888888888888613263565b909250905080611d8d57611d8d611444565b6000818313612d8457816115de565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612ddd908490613344565b505050565b600080612d638888888888886133ac565b600080600083612e0286611377565b612e0c91906136ce565b90506000811215612e24576000809250925050612e2b565b9150600190505b9250929050565b6000808213612e545760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ed79084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361307357506000919050565b680755bf798b4a1bf1e5821261309c576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906127e574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a76400006132016105ca565b61320b91906138dc565b905080831161321b576000613225565b613225818461386c565b91506115de61325c670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006138dc565b8390612804565b6000806000613275898988888861346c565b90508688101561328c576000809250925050613339565b968690039661329b888761277a565b9750878110156132b2576000809250925050613339565b8781036132c0818688612d2c565b9050670de0b6b3a764000081106132f4576132ed6132e6670de0b6b3a7640000896127ef565b829061277a565b905061330c565b6133096132e6670de0b6b3a764000089612804565b90505b61331681866127ef565b90508981101561332e57600080935093505050613339565b899003925060019150505b965096945050505050565b60006133596001600160a01b0384168361349b565b9050805160001415801561337e57508080602001905181019061337c9190613b70565b155b15612ddd57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b60008060006133be898988888861346c565b90506133ce86611a96898b6136bb565b9750878110156133e5576000809250925050613339565b8781036133f3818688612d2c565b9050670de0b6b3a76400008110613420576134196132e6670de0b6b3a7640000896127ef565b9050613438565b6134356132e6670de0b6b3a764000089612804565b90505b61344281866127ef565b9050808a101561345a57600080935093505050613339565b90980398600198509650505050505050565b6000613478858561277a565b61349161348986611a96868b6125c6565b859085612d2c565b61251791906136bb565b60606115de8383600084600080856001600160a01b031684866040516134c19190613b8d565b60006040518083038185875af1925050503d80600081146134fe576040519150601f19603f3d011682016040523d82523d6000602084013e613503565b606091505b50915091506127e58683836060826135235761351e8261356a565b6115de565b815115801561353a57506001600160a01b0384163b155b1561356357604051639996b31560e01b81526001600160a01b03851660048201526024016133a3565b50806115de565b80511561357a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806135a76135e5565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561365c57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561368857600080fd5b85016060818803121561369a57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611371576113716136a5565b8181036000831280158383131683831282161715612773576127736136a5565b6001600160a01b03811681146105af57600080fd5b60006020828403121561371557600080fd5b81356115de816136ee565b80151581146105af57600080fd5b60006020828403121561374057600080fd5b81356115de81613720565b6000808335601e1984360301811261376257600080fd5b83018035915067ffffffffffffffff82111561377d57600080fd5b602001915036819003821315612e2b57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c082015260006137f560e083018486613792565b9a9950505050505050505050565b8082018281126000831280158216821582161715613823576138236136a5565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a0820152600061385f60c083018486613792565b9998505050505050505050565b81810381811115611371576113716136a5565b6001600160701b03818116838216019080821115612773576127736136a5565b6001600160801b03818116838216019080821115612773576127736136a5565b6000602082840312156138d157600080fd5b81516115de816136ee565b8082028115828204841417611371576113716136a5565b6001600160801b03828116828216039080821115612773576127736136a5565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715611371576113716136a5565b60006020828403121561395257600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261397e5761397e613959565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613a15828551613983565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613a8a57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ab057613ab06136a5565b5060000390565b61018081016113718284613983565b60008060408385031215613ad957600080fd5b825191506020830151613aeb81613720565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613b1b57613b1b613959565b600160ff1b821460001984141615613b3557613b356136a5565b500590565b60008060008060808587031215613b5057600080fd5b845193506020850151925060408501519150606085015161369a81613720565b600060208284031215613b8257600080fd5b81516115de81613720565b6000825160005b81811015613bae5760208186018101518583015201613b94565b50600092019182525091905056fea2646970667358221220c86946172e36b8c6584efb2caaae8fe1c6a0e951f1c99017adde9a1cd9eb449964736f6c63430008160033a26469706673582212205a6450dee1601f963808449f012729c7829b3dbac079a939cb1b55ed895159e664736f6c63430008160033608060405234801561001057600080fd5b506148f2806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e3660046102aa565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60006014835110156100b75760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964205f657874726144617461206c656e67746800000000000000604482015260640160405180910390fd5b6000838060200190518101906100cd9190610406565b604080513360208201529081018590529091506060016040516020818303038152906040528051906020012086868360405161010890610141565b6101149392919061042a565b8190604051809103906000f5905080158015610134573d6000803e3d6000fd5b509150505b949350505050565b61435e806200055f83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156101895761018961014f565b60405290565b6001600160a01b03811681146101a457600080fd5b50565b80356101b28161018f565b919050565b6000608082840312156101c957600080fd5b6040516080810181811067ffffffffffffffff821117156101ec576101ec61014f565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f83011261022e57600080fd5b813567ffffffffffffffff808211156102495761024961014f565b604051601f8301601f19908116603f011681019082821181831017156102715761027161014f565b8160405283815286602085880101111561028a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156102c257600080fd5b610260808212156102d257600080fd5b6102da610165565b91506102e5876101a7565b82526102f3602088016101a7565b6020830152610304604088016101a7565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e083015261010080880135818401525061012080880135818401525061014080880135818401525061016061036d8189016101a7565b9083015261018061037f8882016101a7565b908301526101a06103918882016101a7565b908301526101c06103a38882016101a7565b908301526101e06103b6898983016101b7565b81840152508195506103c98188016101a7565b9450505061028085013567ffffffffffffffff8111156103e857600080fd5b6103f48782880161021d565b949793965093946102a0013593505050565b60006020828403121561041857600080fd5b81516104238161018f565b9392505050565b83516001600160a01b031681526102a08101602085015161045660208401826001600160a01b03169052565b50604085015161047160408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e0830152610100808601518184015250610120808601518184015250610140808601518184015250610160808601516104e3828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e0808701518051918501919091526020810151610200850152604081015161022085015260600151610240840152848116610260840152831661028083015261013956fe6102a06040523480156200001257600080fd5b506040516200435e3803806200435e8339810160408190526200003591620001b5565b600160005582516001600160a01b039081166080908152602080860151831660a0908152918601516101a052908501516101c05260c0808601516101e090815260e0808801516102005261012080890151909352610100808901519091526101408089015190915290870180515190925281519092015190915280516040908101516101605290516060908101516101805290850151821661024052909301516102605290821661022052166102805262000305565b60405161020081016001600160401b03811182821017156200011d57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013b57600080fd5b919050565b6000608082840312156200015357600080fd5b604051608081016001600160401b03811182821017156200018457634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008060008385036102a0811215620001cd57600080fd5b61026080821215620001de57600080fd5b620001e8620000eb565b9150620001f58662000123565b8252620002056020870162000123565b6020830152620002186040870162000123565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e08301526101008087015181840152506101208087015181840152506101408087015181840152506101606200028381880162000123565b908301526101806200029787820162000123565b908301526101a0620002ab87820162000123565b908301526101c0620002bf87820162000123565b908301526101e0620002d48888830162000140565b8184015250819450620002e981870162000123565b93505050620002fc610280850162000123565b90509250925092565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613e8b620004d36000396000818161174e01526117bf015260005050600050506000610c6001526000505060008181610100015281816103100152612e6f01526000818161158301528181611da601528181611e09015281816125bb01528181612a5401528181612a9001528181612c880152612e4901526000818161080e01528181610dc001528181610e0201528181610ef40152818161136a015281816113c90152612e23015260006119c5015260008181611aeb015281816126b0015281816127290152612f890152600081816109d201528181610e750152818161146401528181611abf01526126fd015260008181610e540152818161267c0152612f4501526000818161082f01528181610d9e01528181610e2301528181610f1501528181611348015281816113ea0152612e950152600081816101de015281816103a80152818161090a01526135290152600081816106c801528181610748015281816107be0152818161088a01526108c20152600050506000818161172101526117820152613e8b6000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c3660046138df565b61006d565b6040805192835260208301919091520160405180910390f35b6100416100683660046138df565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a4610549565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610573565b6100de83610594565b6000806100eb88866105cd565b909250905060006100fc83836106a2565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a6106c0565b905061017a8184600460016106f1565b50600080600061018a8787610d6f565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c89190613954565b909155506101d99050844283610f51565b6102037f000000000000000000000000000000000000000000000000000000000000000085613954565b98506102118389888c61108f565b600061021e60018b611229565b90506102378161023160208e018e61397c565b8b61125e565b8d8a8a898e8561024a602083018361397c565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a86888661028760408801602089016139a7565b8961029560408a018a6139c4565b6040516102a89796959493929190613a34565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d4610549565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610573565b61030e83610594565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b6000610359611306565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b60006103866106c0565b9050600061039f6103956106c0565b84600460016106f1565b905060006103cd7f000000000000000000000000000000000000000000000000000000000000000084613954565b90506000806000806103e08e8988611319565b60098054949850929650909450925083916000906103ff908490613954565b909155506104109050874283610f51565b61042261041d858a61149f565b6114b4565b61042d906001613954565b935050600061043d84898d61152b565b9050808d10156104605760405163c972651760e01b815260040160405180910390fd5b61046a818c6105cd565b508e905061047a81858b8961155d565b6000610487600288611229565b90508c6104a18261049b602084018461397c565b8561125e565b858b86846104b2602086018661397c565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104ef60408b0160208c016139a7565b610503896104fd8a8d613a75565b906106a2565b8d61051160408e018e6139c4565b604051610525989796959493929190613a88565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361056c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b341561059257604051631574f9f360e01b815260040160405180910390fd5b565b60006105a3602083018361397c565b6001600160a01b0316036105ca5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b816000806105e160408501602086016139a7565b15610606576105fc856105f760408701876139c4565b611711565b909350905061061e565b503461061e8561061960408701876139c4565b611833565b610626611306565b9150801561069957604051600090339083908381818185875af1925050503d8060008114610670576040519150601f19603f3d011682016040523d82523d6000602084013e610675565b606091505b5050905080610697576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006106b78383670de0b6b3a764000061184c565b90505b92915050565b60006106ec427f000000000000000000000000000000000000000000000000000000000000000061186a565b905090565b600084815260086020526040812060018101546001600160801b031615158061071957504286115b1561073257600101546001600160801b03169050610d67565b600080600061073f6106c0565b9050600061076d7f00000000000000000000000000000000000000000000000000000000000000008b613954565b90505b818110156107e3576000818152600860205260409020600101546001600160801b031680156107bb576000828152600860205260409020549094506001600160801b031692506107e3565b507f000000000000000000000000000000000000000000000000000000000000000001610770565b83600003610856578893506108536107f9611880565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118a1565b92505b50610860836118c1565b6001850180546001600160801b0319166001600160801b03929092169190911790556108b66108af7f00000000000000000000000000000000000000000000000000000000000000008b613a75565b8a84610f51565b6108f4896108ee6108e77f000000000000000000000000000000000000000000000000000000000000000083613954565b42906118ef565b84610f51565b6108fd88611904565b506000905060088161092f7f00000000000000000000000000000000000000000000000000000000000000008d613a75565b815260208101919091526040016000908120600101546001600160801b0316915061095b60028c611229565b6000818152600b60205260408120549192508c8c8315610aa1576001925060008061098a86898d866000611aa8565b9150915080600960008282546109a09190613954565b909155506109bc9050866000846109b681611b77565b88611ba1565b6109c68183613954565b91506109f686838a8e877f0000000000000000000000000000000000000000000000000000000000000000611d1b565b9150610a0a610a0583856106a2565b611d65565b60068054600290610a2b9084906201000090046001600160701b0316613ad0565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a58826118c1565b60068054601090610a7a908490600160801b90046001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610aae600184611229565b6000818152600b60205260409020549091508015610bbd5760019450600080610adb838b8f886001611aa8565b915091508060096000828254610af19190613954565b90915550610b0d905083600084610b0781611b77565b8a611d8f565b610b178183613a75565b9150610b26610a0583876106a2565b60068054600290610b479084906201000090046001600160701b0316613ad0565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b74826118c1565b60068054601090610b96908490600160801b90046001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610bf757610be9610bcf87611b77565b610bd883611b77565b610be29190613b10565b6000611f80565b8e610bf48482611fbf565b50505b6000610c02846121b9565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce09190613b30565b90506001600160a01b03811615610d5557610d525a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612305565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610d7f611880565b600254909150610de4908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f0000000000000000000000000000000000000000000000000000000000000000612390565b600254909450610e47908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118a1565b9150610e9e8785610e99857f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006123bc565b612421565b15610eab57610eab612463565b610eb78785888561247c565b91965094509250670de0b6b3a7640000610f39610ed48784613954565b600254610ef2908890600160801b90046001600160801b0316613a75565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118a1565b1115610f4757610f47612463565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610f7d5750505050565b6000848152600860205260408120546001600160801b031690819003610fd757610fa6836118c1565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611055565b611028611023670de0b6b3a7640000610ff08886613a75565b610ffa9190613b4d565b85670de0b6b3a764000061100e878a613a75565b6110189190613b4d565b8592919060016124c8565b6118c1565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61105e846118c1565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b03166110d1611023826110bb670de0b6b3a764000086613b4d565b6005546001600160801b031691908860016124c8565b600580546001600160801b0319166001600160801b03929092169190911790556110fa856118c1565b600280546000906111159084906001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611142846118c1565b60028054601090611164908490600160801b90046001600160801b0316613b64565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611191846118c1565b61119b9082613af0565b600380546001600160801b03808416600160801b029116179055905060006111c283612570565b90506111e0816111d187611b77565b6111db9084613b84565b611f80565b6111e9846125b4565b6111f5576111f5612463565b600061120085612614565b90508061122057604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b038211156112535760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290611290908490613954565b90915550506000838152600b6020526040812080548392906112b3908490613954565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b60006106ec670de0b6b3a76400006114b4565b6000806000806000611329611880565b60025490915061138e908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f0000000000000000000000000000000000000000000000000000000000000000612621565b93508761139b8589612642565b11156113a9576113a9612463565b600254600090819061140e908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118a1565b93506114248a670de0b6b3a7640000868c612657565b5091935090915061143790508183613a75565b6114419087613a75565b95508861148e816114888d611456868c613a75565b8d6114618782612765565b877f000000000000000000000000000000000000000000000000000000000000000061277b565b90612642565b975090945050505093509350935093565b60006106b783670de0b6b3a76400008461279c565b60405163b88fed9f60e01b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f90602401602060405180830381865af4158015611507573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190613bac565b600061153d60408301602084016139a7565b15611549575082611556565b61155384846127c2565b90505b9392505050565b6002546001600160801b03168381101561157957611579612463565b60045490849003907f0000000000000000000000000000000000000000000000000000000000000000906115b1908390600f0b6127d7565b10156115bf576115bf612463565b6004546116099061102390600160801b90046001600160801b03166115ec670de0b6b3a764000086613b4d565b600554600160801b90046001600160801b031691908960016124c8565b600580546001600160801b03928316600160801b02921691909117905561162f816118c1565b600280546001600160801b0319166001600160801b0392909216919091179055611658856118c1565b6002805460109061167a908490600160801b90046001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116a7856118c1565b600480546010906116c9908490600160801b90046001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006116f883612570565b90506111e08161170788611b77565b6111db9084613b10565b6000806117496001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330886127fd565b6117a97f0000000000000000000000000000000000000000000000000000000000000000611778876001613954565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061286a565b60405163b6b55f2560e01b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561180b57600080fd5b505af115801561181f573d6000803e3d6000fd5b50505050846000915091505b935093915050565b60405163350b944160e11b815260040160405180910390fd5b600082600019048411830215820261186357600080fd5b5091020490565b60006118768284613bdb565b6106b79084613a75565b6002546004546000916106ec916001600160801b0390911690600f0b6127d7565b60006118b8826118b285888861184c565b906128fa565b95945050505050565b60006001600160801b038211156118eb57604051630f0af95160e11b815260040160405180910390fd5b5090565b60008183116118fe57826106b7565b50919050565b6006546000908190611927908490600160801b90046001600160801b03166106a2565b6006546201000090046001600160701b03169250905081811115611aa35760006119518383613a75565b9050611960611023828661149f565b60068054601090611982908490600160801b90046001600160801b0316613b64565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006119bb85836127c290919063ffffffff16565b905060006119e9827f00000000000000000000000000000000000000000000000000000000000000006106a2565b905080600960008282546119fd9190613954565b90915550611a0d90508183613a75565b9150611a18826118c1565b60028054600090611a339084906001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611a6082612965565b60048054600090611a75908490600f0b613bef565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611ab587856127c2565b91506000611ae3837f00000000000000000000000000000000000000000000000000000000000000006106a2565b9050611b0f817f00000000000000000000000000000000000000000000000000000000000000006106a2565b91508315611b3257611b218282613a75565b611b2b9084613a75565b9250611b49565b611b3c8282613a75565b611b469084613954565b92505b86861015611b6c57611b5c83878961184c565b9250611b6982878961184c565b91505b509550959350505050565b60006001600160ff1b038211156118eb5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611bea61102382611bcd670de0b6b3a764000086613b4d565b600554600160801b90046001600160801b031691908a60006124c8565b600580546001600160801b03928316600160801b029216919091179055611c10866118c1565b611c1a9082613b64565b600480546001600160801b03928316600160801b029216919091179055611c40846118c1565b60028054600090611c5b9084906001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c888361298f565b60048054600090611c9d908490600f0b613bef565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611ccd856118c1565b60028054601090611cef908490600160801b90046001600160801b0316613b64565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080611d3384611d2d8a888a61184c565b906127c2565b9050611d4088848661184c565b611d4a9082613954565b905086811115611d5a5786810391505b509695505050505050565b60006001600160701b038211156118eb5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b031683811080611dd157507f0000000000000000000000000000000000000000000000000000000000000000611dcf8583613a75565b105b15611dde57611dde612463565b6004549084900390600f0b611df38482613b10565b905083611dff86611b77565b138015611e3457507f0000000000000000000000000000000000000000000000000000000000000000611e3283836127d7565b105b15611e4157611e41612463565b600354600160801b90046001600160801b0316611e8361102382611e6d670de0b6b3a764000088613b4d565b6005546001600160801b031691908c60006124c8565b600580546001600160801b0319166001600160801b0392909216919091179055611ead8882613a75565b9050611eb8816118c1565b600380546001600160801b03928316600160801b029216919091179055611ede836118c1565b600280546001600160801b0319166001600160801b0392909216919091179055611f078261298f565b600480546001600160801b0319166001600160801b0392909216919091179055611f30876118c1565b60028054601090611f52908490600160801b90046001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611f9b90611023906001600160801b031684846129cb565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543549091829161200a916001600160801b031690613a75565b90508060000361201e5760019150506106ba565b600061202985612a32565b90508060000361203e576001925050506106ba565b60008061204c838589612ace565b91509150806120625760009450505050506106ba565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161209e929190613c9a565b6040805180830381865af41580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de9190613d10565b915091506120fc6120ee82611b77565b6120f790613d34565b612c42565b92508261211257600096505050505050506106ba565b61211b826118c1565b600780546000906121369084906001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612163816118c1565b60078054601090612185908490600160801b90046001600160801b0316613af0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6121e287612dda565b6040518263ffffffff1660e01b81526004016121fe9190613d50565b6040805180830381865af415801561221a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223e9190613d5f565b9150915080612254575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916122ba91613954565b6122c49190613a75565b9050806000036122dc57506000958695509350505050565b60008087116122ec5760006122f7565b6122f784888461184c565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561232b5761232b613d8f565b6040519080825280601f01601f191660200182016040528015612355576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612376578692505b828152826000602083013e90999098509650505050505050565b60006123b18787876123aa88670de0b6b3a7640000613a75565b8787612f14565b979650505050505050565b60006115536123fd6123d684670de0b6b3a7640000613a75565b611488670de0b6b3a76400006123ec818a61149f565b6123f69190613a75565b8790612642565b61240f90670de0b6b3a7640000613954565b611d2d84670de0b6b3a7640000613a75565b60008061245885612430611880565b61243a9190613954565b600254610ef2908790600160801b90046001600160801b0316613a75565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061248f898789612f37565b909250905061249e8289613a75565b975060006124ad82888a61184c565b90506124b9818b613a75565b9a989950979650505050505050565b6000826000036124d95750846118b8565b811561252c5761250a6124ec8487613954565b6124f685876106a2565b612500888a6106a2565b611d2d9190613954565b9050600061251885886118ef565b905080821015612526578091505b506118b8565b82850361253b575060006118b8565b6125666125488487613a75565b6125528587612642565b61255c888a6106a2565b611d2d9190613a75565b9695505050505050565b6000612598600b6000612584600286611229565b815260200190815260200160002054611b77565b6125aa600b6000612584600187611229565b6106ba9190613b10565b60006125e07f000000000000000000000000000000000000000000000000000000000000000083612642565b6003546125f691906001600160801b0316613954565b60025461260c906001600160801b0316846106a2565b101592915050565b60006106ba826004611fbf565b60006123b187878761263b88670de0b6b3a7640000613a75565b8787612fb7565b60006106b78383670de0b6b3a764000061279c565b60008080806126a887866126a18b61148861267a8c670de0b6b3a7640000613a75565b7f000000000000000000000000000000000000000000000000000000000000000090612642565b919061279c565b93506126d4847f00000000000000000000000000000000000000000000000000000000000000006106a2565b915060006126f56126ed89670de0b6b3a7640000613a75565b8a908861279c565b9050612721817f0000000000000000000000000000000000000000000000000000000000000000612642565b935061274d847f00000000000000000000000000000000000000000000000000000000000000006106a2565b6127579084613954565b915050945094509450949050565b600081831161277457816106b7565b5090919050565b6000806127938461278d8a888a61279c565b9061149f565b9050611d408884865b60008260001904841183021582026127b357600080fd5b50910281810615159190040190565b60006106b783670de0b6b3a76400008461184c565b6000806127e48484612fc8565b9092509050806127f6576127f6612463565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526128649186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613004565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526128bb8482613071565b612864576040516001600160a01b038481166024830152600060448301526128f091869182169063095ea7b390606401612832565b6128648482613004565b6000816000036129135750670de0b6b3a76400006106ba565b82600003612923575060006106ba565b600061292e83611b77565b9050600061294361293e86611b77565b613114565b905081810261295a670de0b6b3a764000082613da5565b90506125668161333a565b600060016001607f1b038211156118eb5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b03198212806129ad575060016001607f1b0382135b156118eb5760405163a5353be560e01b815260040160405180910390fd5b6000806129d98460006134cf565b6129e48460006134cf565b6129ee9190613b10565b90506000811315612a0a57612a038186613954565b9450612a29565b6000811215612a2957612a1c81613d34565b612a269086613a75565b94505b50929392505050565b6003546000908190612a4d906001600160801b03168461149f565b9050612a797f000000000000000000000000000000000000000000000000000000000000000082613954565b6002546001600160801b031611156118fe576002547f000000000000000000000000000000000000000000000000000000000000000090612ac49083906001600160801b0316613a75565b6115569190613a75565b612ad661382c565b600080612ae284612dda565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612b1d9190613d50565b6040805180830381865af4158015612b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5d9190613d5f565b9350905082612b7257506000915061182b9050565b6000612b99612b948461016001518561014001516106a290919063ffffffff16565b611b77565b612bb9612b9485610120015186610100015161264290919063ffffffff16565b612bc39190613b10565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa1569061047690849060040161398a565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190613999565b91506104ca6104c58c6117c5565b6117f3565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b9185910161398a565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190613999565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e81876138f9565b9190611819565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611837565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b91906139c7565b8e61184c565b61063a896118f4565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d91906138e6565b9b5090508a158061073757506107348c6000611901565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611819565b610770565b60005b905061077f60208501856139c7565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b016139f2565b866107ca60408c018c613a0f565b6040516107dd9796959493929190613a56565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c04565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610c89565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613aaa565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161241e929190613c0b565b6040805180830381865af415801561243a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245e9190613c81565b9150915061247c61246e826117c5565b61247790613ca5565b612a22565b925082612492576000965050505050505061144c565b61249b8261193c565b600780546000906124b69084906001600160801b0316613b0f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506124e38161193c565b60078054601090612505908490600160801b90046001600160801b0316613b0f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125628761168b565b6040518263ffffffff1660e01b815260040161257e919061398a565b6040805180830381865af415801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125be9190613cc1565b91509150806125d4575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161263a916138e6565b61264491906138f9565b90508060000361265c57506000958695509350505050565b600080871161266c576000612677565b612677848884611819565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126ab576126ab613cf1565b6040519080825280601f01601f1916602001820160405280156126d5576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156126f6578692505b828152826000602083013e9093509150505b9550959350505050565b600080600083612721866117c5565b61272b9190613b2f565b90506000811215612743576000809250925050610d57565b946001945092505050565b600080600061276088888888886130a4565b9050600061278b670de0b6b3a764000061277a8888612e5a565b61278491906138e6565b8390611837565b9050670de0b6b3a764000081106127bf576127b86127b1670de0b6b3a764000089611837565b8290612bd3565b90506127d7565b6127d46127b1670de0b6b3a764000089612e5a565b90505b6127e18186611837565b9050888110156127f957600080935093505050612708565b97909703976001975095505050505050565b600080600061281d89898888886130d3565b9050612837866119b36128308a8d6138e6565b87906120d0565b9850612844858a86611819565b98508881101561285b576000809250925050611654565b888103670de0b6b3a76400008110612889576128826127b1670de0b6b3a764000089612e5a565b90506128a1565b61289e6127b1670de0b6b3a764000089611837565b90505b808910156128b757600080935093505050611654565b90970398600198509650505050505050565b60008060008060006128dc8987896130f8565b90925090506128eb82896138f9565b975060006128fa82888a611819565b9050612906818b6138f9565b9a989950979650505050505050565b60008061292384600061317e565b61292e84600061317e565b6129389190613b2f565b905060008113156129545761294d81866138e6565b9450612973565b60008112156129735761296681613ca5565b61297090866138f9565b94505b50929392505050565b60006100918383670de0b6b3a76400005b60008260001904841183021582026129a457600080fd5b50910281810615159190040190565b600080670de0b6b3a76400006129c7610d5e565b6129d19190613aaa565b90508083116129e15760006129eb565b6129eb81846138f9565b9150610091612784670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613aaa565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aff9190613d07565b935093509350935080612b1b5750600098975050505050505050565b868414612b4c57612b2b8461193c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612b7d57612b5c83611966565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612bab57612b8d8261193c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612bec5750670de0b6b3a764000061144c565b82600003612bfc5750600061144c565b6000612c07836117c5565b90506000612c1c612c17866117c5565b613194565b9050818102612c33670de0b6b3a764000082613d48565b9050612c3e816133ba565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052612caf9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061354f565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612d0684826135bc565b612caf576040516001600160a01b03848116602483015260006044830152612d3b91869182169063095ea7b390606401612c7d565b612caf848261354f565b60405163b88fed9f60e01b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f90602401602060405180830381865af4158015612d98573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190613999565b600082600003612dcd575084610078565b8115612e2057612dfe612de084876138e6565b612dea85876120d0565b612df4888a6120d0565b61168591906138e6565b90506000612e0c8588611c5b565b905080821015612e1a578091505b50610078565b828503612e2f57506000610078565b610075612e3c84876138f9565b612e46858761297c565b612e50888a6120d0565b61168591906138f9565b600061009183670de0b6b3a76400008461298d565b600060016001607f1b038211156117ef5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612eb4906001600160801b031684612e5a565b9050612ee07f0000000000000000000000000000000000000000000000000000000000000000826138e6565b6002546001600160801b03161115611910576002547f000000000000000000000000000000000000000000000000000000000000000090612f2b9083906001600160801b03166138f9565b61009191906138f9565b612f3d6137b8565b600080612f498461168b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612f84919061398a565b6040805180830381865af4158015612fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc49190613cc1565b9350905082612fd9575060009150611ad39050565b6000612ffb6116168461016001518561014001516120d090919063ffffffff16565b61301b61161685610120015186610100015161297c90919063ffffffff16565b6130259190613b2f565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b60006130b08585612bd3565b6130c96130c1866119b3868b6120d0565b859085611819565b61007591906138e6565b60006130df8585612bd3565b6130c96130f0866119b3868b61297c565b85908561298d565b6000806131488561314285817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613138818c612e5a565b61314291906138f9565b9061297c565b9150613174827f00000000000000000000000000000000000000000000000000000000000000006120d0565b9050935093915050565b600081831361318d5781610091565b5090919050565b60008082136131b65760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132399084901c6117c5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133d557506000919050565b680755bf798b4a1bf1e582126133fe576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612c3e74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117c5565b60006135646001600160a01b0384168361365f565b905080516000141580156135895750808060200190518101906135879190613d76565b155b156135b757604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6000806000846001600160a01b0316846040516135d99190613d93565b6000604051808303816000865af19150503d8060008114613616576040519150601f19603f3d011682016040523d82523d6000602084013e61361b565b606091505b50915091508180156136455750805115806136455750808060200190518101906136459190613d76565b80156100785750505050506001600160a01b03163b151590565b60606100918383600084600080856001600160a01b031684866040516136859190613d93565b60006040518083038185875af1925050503d80600081146136c2576040519150601f19603f3d011682016040523d82523d6000602084013e6136c7565b606091505b5091509150612c3e8683836060826136e7576136e28261372e565b610091565b81511580156136fe57506001600160a01b0384163b155b1561372757604051639996b31560e01b81526001600160a01b03851660048201526024016135ae565b5080610091565b80511561373e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061012001604052806137cc613757565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561191057600080fd5b600080600080600060a0868803121561383457600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561386757600080fd5b6138738882890161380a565b9150509295509295909350565b60008060006060848603121561389557600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156138ba57600080fd5b6138c68682870161380a565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561144c5761144c6138d0565b8181038181111561144c5761144c6138d0565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144c828461390c565b6000602082840312156139ab57600080fd5b5051919050565b6001600160a01b0381168114610c3a57600080fd5b6000602082840312156139d957600080fd5b8135610091816139b2565b8015158114610c3a57600080fd5b600060208284031215613a0457600080fd5b8135610091816139e4565b6000808335601e19843603018112613a2657600080fd5b83018035915067ffffffffffffffff821115613a4157600080fd5b602001915036819003821315610d5757600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144c5761144c6138d0565b600080600060608486031215613ad657600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b03818116838216019080821115611935576119356138d0565b6001600160801b03818116838216019080821115611935576119356138d0565b8181036000831280158383131683831282161715611935576119356138d0565b600060208284031215613b6157600080fd5b8151610091816139b2565b8082018281126000831280158216821582161715613b8c57613b8c6138d0565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613bb957613bb9613b94565b500690565b6001600160801b03828116828216039080821115611935576119356138d0565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144c5761144c6138d0565b60006102a082019050613c1f82855161390c565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613c9457600080fd5b505080516020909101519092909150565b6000600160ff1b8201613cba57613cba6138d0565b5060000390565b60008060408385031215613cd457600080fd5b825191506020830151613ce6816139e4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613d1d57600080fd5b8451935060208501519250604085015191506060850151613d3d816139e4565b939692955090935050565b600082613d5757613d57613b94565b600160ff1b821460001984141615613d7157613d716138d0565b500590565b600060208284031215613d8857600080fd5b8151610091816139e4565b6000825160005b81811015613db45760208186018101518583015201613d9a565b50600092019182525091905056fea26469706673582212200cc742ebaa82d96bbeda121faa8b77952151d6b443787f7f8a99c39580ed56a364736f6c63430008160033a26469706673582212206f1128d6cdf02480b95b3b37f92637b125dadd82cf896257c9b22c0e35958e5a64736f6c63430008160033608060405234801561001057600080fd5b50613a3a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e3660046102aa565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60006014835110156100b75760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964205f657874726144617461206c656e67746800000000000000604482015260640160405180910390fd5b6000838060200190518101906100cd9190610406565b604080513360208201529081018590529091506060016040516020818303038152906040528051906020012086868360405161010890610141565b6101149392919061042a565b8190604051809103906000f5905080158015610134573d6000803e3d6000fd5b509150505b949350505050565b6134a6806200055f83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156101895761018961014f565b60405290565b6001600160a01b03811681146101a457600080fd5b50565b80356101b28161018f565b919050565b6000608082840312156101c957600080fd5b6040516080810181811067ffffffffffffffff821117156101ec576101ec61014f565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f83011261022e57600080fd5b813567ffffffffffffffff808211156102495761024961014f565b604051601f8301601f19908116603f011681019082821181831017156102715761027161014f565b8160405283815286602085880101111561028a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156102c257600080fd5b610260808212156102d257600080fd5b6102da610165565b91506102e5876101a7565b82526102f3602088016101a7565b6020830152610304604088016101a7565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e083015261010080880135818401525061012080880135818401525061014080880135818401525061016061036d8189016101a7565b9083015261018061037f8882016101a7565b908301526101a06103918882016101a7565b908301526101c06103a38882016101a7565b908301526101e06103b6898983016101b7565b81840152508195506103c98188016101a7565b9450505061028085013567ffffffffffffffff8111156103e857600080fd5b6103f48782880161021d565b949793965093946102a0013593505050565b60006020828403121561041857600080fd5b81516104238161018f565b9392505050565b83516001600160a01b031681526102a08101602085015161045660208401826001600160a01b03169052565b50604085015161047160408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e0830152610100808601518184015250610120808601518184015250610140808601518184015250610160808601516104e3828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e0808701518051918501919091526020810151610200850152604081015161022085015260600151610240840152848116610260840152831661028083015261013956fe6102a06040523480156200001257600080fd5b50604051620034a6380380620034a68339810160408190526200003591620001b5565b600160005582516001600160a01b039081166080908152602080860151831660a0908152918601516101a052908501516101c05260c0808601516101e090815260e0808801516102005261012080890151909352610100808901519091526101408089015190915290870180515190925281519092015190915280516040908101516101605290516060908101516101805290850151821661024052909301516102605290821661022052166102805262000305565b60405161020081016001600160401b03811182821017156200011d57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013b57600080fd5b919050565b6000608082840312156200015357600080fd5b604051608081016001600160401b03811182821017156200018457634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008060008385036102a0811215620001cd57600080fd5b61026080821215620001de57600080fd5b620001e8620000eb565b9150620001f58662000123565b8252620002056020870162000123565b6020830152620002186040870162000123565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e08301526101008087015181840152506101208087015181840152506101408087015181840152506101606200028381880162000123565b908301526101806200029787820162000123565b908301526101a0620002ab87820162000123565b908301526101c0620002bf87820162000123565b908301526101e0620002d48888830162000140565b8184015250819450620002e981870162000123565b93505050620002fc610280850162000123565b90509250925092565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205161024051610260516102805161307e6200042860003960006123130152600050506000505060006109c10152600050506000818161026d0152611fd10152600081816118170152818161187a01528181611bb601528181611bf201528181611dea0152611fab01526000818161056f0152611f85015260006113ec01526000611547015260008181610733015261151b015260005050600081816105900152611ff701526000818161066b01526124370152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb01526106230152600050506000612384015261307e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612adc565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612b33565b6100b5565b005b610059610095366004612adc565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612b6a565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612b95565b61017160408c018c612bb2565b60405161018396959493929190612c22565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612c72565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612b6a565b88610ee8565b60006103066102fd6020870187612b6a565b88848989610ad0565b90945090506103158188612c9c565b9250600061032283610f88565b5090506103326020870187612b6a565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612b95565b8a888e80604001906103829190612bb2565b604051610396989796959493929190612caf565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612b6a565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f000000000000000000000000000000000000000000000000000000000000000061114c565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612cf7565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a611169565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061118a565b92505b506105c1836111aa565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612c9c565b8a846111d8565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612cf7565b4290611316565b846111d8565b61065e8861132b565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612c9c565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c6114cf565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d866000611504565b9150915080600960008282546107019190612cf7565b9091555061071d905086600084610717816115d3565b886115fd565b6107278183612cf7565b915061075786838a8e877f0000000000000000000000000000000000000000000000000000000000000000611777565b915061076b61076683856117c1565b6117d6565b6006805460029061078c9084906201000090046001600160701b0316612d0a565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b9826111aa565b600680546010906107db908490600160801b90046001600160801b0316612d2a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f6001846114cf565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f886001611504565b9150915080600960008282546108529190612cf7565b9091555061086e905083600084610868816115d3565b8a611800565b6108788183612c9c565b915061088761076683876117c1565b600680546002906108a89084906201000090046001600160701b0316612d0a565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d5826111aa565b600680546010906108f7908490600160801b90046001600160801b0316612d2a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a610930876115d3565b610939836115d3565b6109439190612d4a565b60006119f1565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612d6a565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611a30565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611abb565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611ac8565b9050610b56836111aa565b610b609083612d87565b600780546001600160801b0319166001600160801b0392909216919091179055610b89816111aa565b60078054601090610bab908490600160801b90046001600160801b0316612d87565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611ae6565b9350610be68684611b7f565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612c9c565b905080600003610c72576001915050610e08565b6000610c7d85611b94565b905080600003610c9257600192505050610e08565b600080610ca0838589611c30565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612e25565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190612e9b565b91509150610d50610d42826115d3565b610d4b90612ebf565b611da4565b925082610d665760009650505050505050610e08565b610d6f826111aa565b60078054600090610d8a9084906001600160801b0316612d2a565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db7816111aa565b60078054601090610dd9908490600160801b90046001600160801b0316612d2a565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612c9c565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612cf7565b90915550506000838152600b602052604081208054839290610f3d908490612cf7565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611f3c565b6040518263ffffffff1660e01b8152600401610fcd9190612edb565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612eea565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612cf7565b6110939190612c9c565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611ac8565b976001975095505050505050565b60405163b88fed9f60e01b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f906024015b602060405180830381865af4158015611128573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190612f1a565b60006111588284612c72565b6111629084612c9c565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b612076565b60006111a18261119b858888611ac8565b9061209c565b95945050505050565b60006001600160801b038211156111d457604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036112045750505050565b6000848152600860205260408120546001600160801b03169081900361125e5761122d836111aa565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790556112dc565b6112af6112aa670de0b6b3a76400006112778886612c9c565b6112819190612f33565b85670de0b6b3a7640000611295878a612c9c565b61129f9190612f33565b859291906001612111565b6111aa565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112e5846111aa565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116113255782611162565b50919050565b600654600090819061134e908490600160801b90046001600160801b03166117c1565b6006546201000090046001600160701b031692509050818111156114ca5760006113788383612c9c565b90506113876112aa82866121af565b600680546010906113a9908490600160801b90046001600160801b0316612d87565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006113e285836121c490919063ffffffff16565b90506000611410827f00000000000000000000000000000000000000000000000000000000000000006117c1565b905080600960008282546114249190612cf7565b9091555061143490508183612c9c565b915061143f826111aa565b6002805460009061145a9084906001600160801b0316612d2a565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611487826121d9565b6004805460009061149c908490600f0b612f4a565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156114f95760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60008061151187856121c4565b9150600061153f837f00000000000000000000000000000000000000000000000000000000000000006117c1565b905061156b817f00000000000000000000000000000000000000000000000000000000000000006117c1565b9150831561158e5761157d8282612c9c565b6115879084612c9c565b92506115a5565b6115988282612c9c565b6115a29084612cf7565b92505b868610156115c8576115b8838789611ac8565b92506115c5828789611ac8565b91505b509550959350505050565b60006001600160ff1b038211156111d45760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166116466112aa82611629670de0b6b3a764000086612f33565b600554600160801b90046001600160801b031691908a6000612111565b600580546001600160801b03928316600160801b02921691909117905561166c866111aa565b6116769082612d87565b600480546001600160801b03928316600160801b02921691909117905561169c846111aa565b600280546000906116b79084906001600160801b0316612d2a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116e483612203565b600480546000906116f9908490600f0b612f4a565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611729856111aa565b6002805460109061174b908490600160801b90046001600160801b0316612d87565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b60008061178f846117898a888a611ac8565b906121c4565b905061179c888486611ac8565b6117a69082612cf7565b9050868111156117b65786810391505b509695505050505050565b60006111628383670de0b6b3a7640000611ac8565b60006001600160701b038211156111d45760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061184257507f00000000000000000000000000000000000000000000000000000000000000006118408583612c9c565b105b1561184f5761184f61223f565b6004549084900390600f0b6118648482612d4a565b905083611870866115d3565b1380156118a557507f00000000000000000000000000000000000000000000000000000000000000006118a38383612076565b105b156118b2576118b261223f565b600354600160801b90046001600160801b03166118f46112aa826118de670de0b6b3a764000088612f33565b6005546001600160801b031691908c6000612111565b600580546001600160801b0319166001600160801b039290921691909117905561191e8882612c9c565b9050611929816111aa565b600380546001600160801b03928316600160801b02921691909117905561194f836111aa565b600280546001600160801b0319166001600160801b039290921691909117905561197882612203565b600480546001600160801b0319166001600160801b03929092169190911790556119a1876111aa565b600280546010906119c3908490600160801b90046001600160801b0316612d2a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a0c906112aa906001600160801b03168484612258565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a5657611a56612f77565b6040519080825280601f01601f191660200182016040528015611a80576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611aa1578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611adf57600080fd5b5091020490565b600080611af385856117c1565b9050611afe816122bf565b945084600003611b12576000915050611162565b849150611b256040840160208501612b95565b15611b5457611b4d85611b3b6020860186612b6a565b611b486040870187612bb2565b6122fa565b9150611b77565b611b7785611b656020860186612b6a565b611b726040870187612bb2565b6123ad565b509392505050565b60006111628383670de0b6b3a76400006123c6565b6003546000908190611baf906001600160801b0316846121af565b9050611bdb7f000000000000000000000000000000000000000000000000000000000000000082612cf7565b6002546001600160801b03161115611325576002547f000000000000000000000000000000000000000000000000000000000000000090611c269083906001600160801b0316612c9c565b6111629190612c9c565b611c38612a29565b600080611c4484611f3c565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c7f9190612edb565b6040805180830381865af4158015611c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbf9190612eea565b9350905082611cd45750600091506100ad9050565b6000611cfb611cf68461016001518561014001516117c190919063ffffffff16565b6115d3565b611d1b611cf6856101200151866101000151611b7f90919063ffffffff16565b611d259190612d4a565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e819190612f8d565b935093509350935080611e9d5750600098975050505050505050565b868414611ece57611ead846111aa565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611eff57611ede83612203565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611f2d57611f0f826111aa565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b611f44612a7b565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161203c91166123ec565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261206e929004166123ec565b905292915050565b6000806120838484612462565b9092509050806120955761209561223f565b5092915050565b6000816000036120b55750670de0b6b3a7640000610e08565b826000036120c557506000610e08565b60006120d0836115d3565b905060006120e56120e0866115d3565b6124a1565b90508181026120fc670de0b6b3a764000082612fce565b9050612107816126c7565b9695505050505050565b6000826000036121225750846111a1565b8115612175576121536121358487612cf7565b61213f85876117c1565b612149888a6117c1565b6117899190612cf7565b905060006121618588611316565b90508082101561216f578091505b506111a1565b828503612184575060006111a1565b6121076121918487612c9c565b61219b8587611b7f565b6121a5888a6117c1565b6117899190612c9c565b600061116283670de0b6b3a7640000846123c6565b600061116283670de0b6b3a764000084611ac8565b600060016001607f1b038211156111d45760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612221575060016001607f1b0382135b156111d45760405163a5353be560e01b815260040160405180910390fd5b60405163bb55fd2760e01b815260040160405180910390fd5b60008061226684600061285c565b61227184600061285c565b61227b9190612d4a565b90506000811315612297576122908186612cf7565b94506122b6565b60008112156122b6576122a981612ebf565b6122b39086612c9c565b94505b50929392505050565b6040516363737ac960e11b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063c6e6f5929060240161110b565b604051632e1a7d4d60e01b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561235f57600080fd5b505af1158015612373573d6000803e3d6000fd5b506122b69250506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690508587612872565b60405163350b944160e11b815260040160405180910390fd5b60008260001904841183021582026123dd57600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612400610426565b61240a9190612f33565b905080831161241a576000612424565b6124248184612c9c565b915061116261245b670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000612f33565b83906121c4565b600080600083612471866115d3565b61247b9190612d4a565b9050600081121561249357600080925092505061249a565b9150600190505b9250929050565b60008082136124c35760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906125469084901c6115d3565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136126e257506000919050565b680755bf798b4a1bf1e5821261270b576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061210774029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6115d3565b600081831361286b5781611162565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526128c49084906128c9565b505050565b60006128de6001600160a01b03841683612931565b905080516000141580156129035750808060200190518101906129019190612ffc565b155b156128c457604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b60606111628383600084600080856001600160a01b031684866040516129579190613019565b60006040518083038185875af1925050503d8060008114612994576040519150601f19603f3d011682016040523d82523d6000602084013e612999565b606091505b50915091506121078683836060826129b9576129b482612a00565b611162565b81511580156129d057506001600160a01b0384163b155b156129f957604051639996b31560e01b81526001600160a01b0385166004820152602401612928565b5080611162565b805115612a105780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806101200160405280612a3d612a7b565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215612af157600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612b1657600080fd5b840160608187031215612b2857600080fd5b809150509250925092565b60008060408385031215612b4657600080fd5b50508035926020909101359150565b6001600160a01b038116811461040b57600080fd5b600060208284031215612b7c57600080fd5b813561116281612b55565b801515811461040b57600080fd5b600060208284031215612ba757600080fd5b813561116281612b87565b6000808335601e19843603018112612bc957600080fd5b83018035915067ffffffffffffffff821115612be457600080fd5b60200191503681900382131561249a57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b868152856020820152846040820152831515606082015260a060808201526000612c5060a083018486612bf9565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b600082612c8157612c81612c5c565b500690565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e0857610e08612c86565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000612ce960e083018486612bf9565b9a9950505050505050505050565b80820180821115610e0857610e08612c86565b6001600160701b0381811683821601908082111561209557612095612c86565b6001600160801b0381811683821601908082111561209557612095612c86565b818103600083128015838313168383128216171561209557612095612c86565b600060208284031215612d7c57600080fd5b815161116281612b55565b6001600160801b0382811682821603908082111561209557612095612c86565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050612e39828551612da7565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215612eae57600080fd5b505080516020909101519092909150565b6000600160ff1b8201612ed457612ed4612c86565b5060000390565b6101808101610e088284612da7565b60008060408385031215612efd57600080fd5b825191506020830151612f0f81612b87565b809150509250929050565b600060208284031215612f2c57600080fd5b5051919050565b8082028115828204841417610e0857610e08612c86565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715610e0857610e08612c86565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612fa357600080fd5b8451935060208501519250604085015191506060850151612fc381612b87565b939692955090935050565b600082612fdd57612fdd612c5c565b600160ff1b821460001984141615612ff757612ff7612c86565b500590565b60006020828403121561300e57600080fd5b815161116281612b87565b6000825160005b8181101561303a5760208186018101518583015201613020565b50600092019182525091905056fea2646970667358221220a9c6f949e4bdb34d6c5e4048ab6c87a896deecc8dc7213da16f7ae109dd8801e64736f6c63430008160033a2646970667358221220e56ed0e3ad5a39a99fab9894aa8c3b4c63f2e82d9ed0562e5cc8a0ee8611b91d64736f6c634300081600336101606040523480156200001257600080fd5b506040516200297c3803806200297c8339810160408190526200003591620000c0565b878787878787878760006200004b8982620002a9565b506001600160a01b0396871660805294861660a05292851660c05290841660e05283166101005282166101205216610140525062000375975050505050505050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000bb57600080fd5b919050565b600080600080600080600080610100898b031215620000de57600080fd5b88516001600160401b0380821115620000f657600080fd5b818b0191508b601f8301126200010b57600080fd5b8151818111156200012057620001206200008d565b604051601f8201601f19908116603f011681019083821181831017156200014b576200014b6200008d565b81604052828152602093508e848487010111156200016857600080fd5b600091505b828210156200018c57848201840151818301850152908301906200016d565b6000848483010152809c50505050620001a7818c01620000a3565b98505050620001b960408a01620000a3565b9550620001c960608a01620000a3565b9450620001d960808a01620000a3565b9350620001e960a08a01620000a3565b9250620001f960c08a01620000a3565b91506200020960e08a01620000a3565b90509295985092959890939650565b600181811c908216806200022d57607f821691505b6020821081036200024e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a4576000816000526020600020601f850160051c810160208610156200027f5750805b601f850160051c820191505b81811015620002a0578281556001016200028b565b5050505b505050565b81516001600160401b03811115620002c557620002c56200008d565b620002dd81620002d6845462000218565b8462000254565b602080601f831160018114620003155760008415620002fc5750858301515b600019600386901b1c1916600185901b178555620002a0565b600085815260208120601f198616915b82811015620003465788860151825594840194600190910190840162000325565b5085821015620003655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161254362000439600039600081816102a50152610e0a0152600081816103250152610cd401526000818161038d0152610b9e0152600081816102f10152610a68015260008181610359015261085a015260008181610455015261119d015260008181610401015281816105620152818161077e0152818161088a01528181610a9801528181610bce01528181610d0401528181610e3a01528181610f6c01526111ce01526125436000f3fe6080604052600436106100fe5760003560e01c8063ab71905f11610095578063c45a015511610064578063c45a0155146103ef578063c6e6f59214610423578063c83e1f5114610443578063e990eba814610477578063e99be3961461049757600080fd5b8063ab71905f14610347578063b6cb11181461037b578063b88fed9f146103af578063c1510618146103cf57600080fd5b806354fd4d50116100d157806354fd4d5014610263578063966ecd1c14610293578063a085fa30146102df578063aa8cd6c41461031357600080fd5b806304baa00b1461010357806306fdde031461012e57806316abfc70146101435780633740401714610164575b600080fd5b34801561010f57600080fd5b506101186104ab565b6040516101259190611b92565b60405180910390f35b34801561013a57600080fd5b506101186104c7565b610156610151366004611cd1565b610555565b604051908152602001610125565b34801561017057600080fd5b5061025661017f366004611d96565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091525060009081526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004830154811660808301526005830154811660a08301526006830154811660c08301526007830154811660e083015260089092015490911661010082015290565b6040516101259190611daf565b34801561026f57600080fd5b50604080518082019091526007815266076312e302e32360cc1b6020820152610118565b34801561029f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610125565b3480156102eb57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561031f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561035357600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561038757600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103bb57600080fd5b506101566103ca366004611d96565b6106f3565b3480156103db57600080fd5b506102c76103ea366004611f87565b610771565b3480156103fb57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561042f57600080fd5b5061015661043e366004611d96565b610f24565b34801561044f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561048357600080fd5b506102c7610492366004611ff5565b610f5f565b3480156104a357600080fd5b506005610156565b6040518060600160405280602881526020016124e66028913981565b600080546104d490612096565b80601f016020809104026020016040519081016040528092919081815260200182805461050090612096565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b505050505081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105a057604051634084351160e01b815260040160405180910390fd5b6105a86112dc565b6000868152600160205260409020600301546001600160a01b0316806105e15760405163952b05cb60e01b815260040160405180910390fd5b60006105ef828888876112fd565b9050816001600160a01b03166377d05ff4828888886040518563ffffffff1660e01b8152600401610622939291906120d0565b60206040518083038185885af1158015610640573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106659190612116565b92506000610673823461212f565b905080156106e657604051600090339083908381818185875af1925050503d80600081146106bd576040519150601f19603f3d011682016040523d82523d6000602084013e6106c2565b606091505b50509050806106e4576040516312171d8360e31b815260040160405180910390fd5b505b5050505b95945050505050565b60405163b88fed9f60e01b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f906024015b602060405180830381865af4158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190612116565b92915050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107bc57604051634084351160e01b815260040160405180910390fd5b600086815260016020526040812090849003610974578054156107f257604051633be1b34d60e11b815260040160405180910390fd5b6107fc86866113bc565b6000610808878761154d565b905060008760405160200161081d9190612150565b604051602081830303815290604052805190602001209050600087805190602001209050600061084c8a611567565b9050838160800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008c8f8c6040516020016108c6929190918252602082015260400190565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b81526004016108fb9493929190612383565b6020604051808303816000875af115801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e91906123c9565b9285555060018401556002830191909155600490910180546001600160a01b0319166001600160a01b03831617905590506106ea565b600087815260016020526040902054806109a15760405163398b1c0960e21b815260040160405180910390fd5b80876040516020016109b39190612150565b60405160208183030381529060405280519060200120146109e75760405163332ee11f60e01b815260040160405180910390fd5b60018201548651602088012014610a1157604051631a3272d160e31b815260040160405180910390fd5b610a1b87876113bc565b6000610a2688611567565b6002840154608082015290506001869003610b695760058301546001600160a01b031615610a665760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610acd939291906123e6565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610b029493929190612383565b6020604051808303816000875af1158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4591906123c9565b6005840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600203610c9f5760068301546001600160a01b031615610b9c5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610c03939291906123e6565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610c389493929190612383565b6020604051808303816000875af1158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b91906123c9565b6006840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600303610dd55760078301546001600160a01b031615610cd25760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610d39939291906123e6565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610d6e9493929190612383565b6020604051808303816000875af1158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db191906123c9565b6007840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600403610f0b5760088301546001600160a01b031615610e085760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610e6f939291906123e6565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610ea49493929190612383565b6020604051808303816000875af1158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee791906123c9565b6008840180546001600160a01b0319166001600160a01b03831617905593506106e6565b604051631d9f815960e11b815260040160405180910390fd5b6040516363737ac960e11b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190612ced565b935093509350935080611d1a5750600098975050505050505050565b868414611d4b57611d2a84611fa2565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611d7c57611d5b83611fcc565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611daa57611d8c82611fa2565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b6000611dc58284612d23565b6114c59084612c7a565b600254600454600091610f75916001600160801b0390911690600f0b61201a565b6000611e11878787611e0a88670de0b6b3a7640000612c7a565b8787612040565b979650505050505050565b6000611e3382611e2d858888611f56565b9061206e565b95945050505050565b6000611ea7611e7d611e5684670de0b6b3a7640000612c7a565b611149670de0b6b3a7640000611e6c818a611c0c565b611e769190612c7a565b8790611a0c565b611e8f90670de0b6b3a7640000612c8d565b611ea184670de0b6b3a7640000612c7a565b90611a58565b949350505050565b600080611ee685611ebe611dcf565b611ec89190612c8d565b6002546117ca908790600160801b90046001600160801b0316612c7a565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000806000806000611f1d8987896114cc565b9092509050611f2c8289612c7a565b97506000611f3b82888a611f56565b9050611f47818b612c7a565b9a989950979650505050505050565b6000826000190484118302158202611f6d57600080fd5b5091020490565b60006001600160ff1b03821115611f9e5760405163396ea70160e11b815260040160405180910390fd5b5090565b60006001600160801b03821115611f9e57604051630f0af95160e11b815260040160405180910390fd5b60006f7fffffffffffffffffffffffffffffff19821280611ffc57506f7fffffffffffffffffffffffffffffff82135b15611f9e5760405163a5353be560e01b815260040160405180910390fd5b60008061202784846120d9565b90925090508061203957612039611ef1565b5092915050565b600080612051888888888888612118565b90925090508061206357612063611ef1565b509695505050505050565b6000816000036120875750670de0b6b3a7640000610d9e565b8260000361209757506000610d9e565b60006120a283611f74565b905060006120b76120b286611f74565b6121e0565b90508181026120ce670de0b6b3a764000082612d37565b9050611c0281611a6d565b6000806000836120e886611f74565b6120f29190612ca0565b9050600081121561210a576000809250925050612111565b9150600190505b9250929050565b600080600061212a8989888888612406565b905061214486611e2d61213d8a8d612c8d565b8790611a43565b9850612151858a86611f56565b9850888110156121685760008092509250506121d5565b888103670de0b6b3a7640000811061219d5761219661218f670de0b6b3a764000089611c0c565b829061206e565b90506121b5565b6121b261218f670de0b6b3a764000089611a58565b90505b808910156121cb576000809350935050506121d5565b8803925060019150505b965096945050505050565b60008082136122025760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906122859084901c611f74565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000612412858561206e565b61242b61242386611e2d868b611a0c565b859085611a1d565b611c029190612c8d565b8183823760009101908152919050565b805160208201516001600160e01b031980821692919060048310156124745780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156124b6576124b661247c565b60405290565b60005b838110156124d75781810151838201526020016124bf565b50506000910152565b6000602082840312156124f257600080fd5b815167ffffffffffffffff8082111561250a57600080fd5b818401915084601f83011261251e57600080fd5b8151818111156125305761253061247c565b604051601f8201601f19908116603f011681019083821181831017156125585761255861247c565b8160405282815287602084870101111561257157600080fd5b611e118360208301602088016124bc565b6001600160a01b0381168114610e2557600080fd5b6000602082840312156125a957600080fd5b81356114c581612582565b8015158114610e2557600080fd5b80356125cd816125b4565b919050565b6000602082840312156125e457600080fd5b81356114c5816125b4565b600060608284031215610b8b57600080fd5b60008060006060848603121561261657600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561263b57600080fd5b612647868287016125ef565b9150509250925092565b60008083601f84011261266357600080fd5b50813567ffffffffffffffff81111561267b57600080fd5b6020830191508360208260051b850101111561211157600080fd5b600080600080600080608087890312156126af57600080fd5b86356126ba81612582565b955060208701356126ca81612582565b9450604087013567ffffffffffffffff808211156126e757600080fd5b6126f38a838b01612651565b9096509450606089013591508082111561270c57600080fd5b5061271989828a01612651565b979a9699509497509295939492505050565b6000806000806080858703121561274157600080fd5b84359350602085013561275381612582565b9250604085013561276381612582565b9396929550929360600135925050565b6000806000806080858703121561278957600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080608085870312156127bb57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156127e757600080fd5b6127f3878288016125ef565b91505092959194509250565b60006020828403121561281157600080fd5b813567ffffffffffffffff81111561282857600080fd5b611ea7848285016125ef565b6000806040838503121561284757600080fd5b50508035926020909101359150565b600080600080600060a0868803121561286e57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156128a157600080fd5b6128ad888289016125ef565b9150509295509295909350565b600080600080608085870312156128d057600080fd5b8435935060208501356128e281612582565b92506040850135915060608501356128f981612582565b939692955090935050565b600080600080600060a0868803121561291c57600080fd5b85359450602086013561292e81612582565b9350604086013561293e81612582565b925060608601359150608086013561295581612582565b809150509295509295909350565b60006020828403121561297557600080fd5b5035919050565b80356001600160801b03811681146125cd57600080fd5b600080604083850312156129a657600080fd5b6129af8361297c565b91506129bd6020840161297c565b90509250929050565b600080604083850312156129d957600080fd5b82356129e481612582565b915060208301356129f4816125b4565b809150509250929050565b600080600060608486031215612a1457600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215612a4057600080fd5b833592506020840135612a5281612582565b929592945050506040919091013590565b600080600080600080600060e0888a031215612a7e57600080fd5b8735612a8981612582565b96506020880135612a9981612582565b95506040880135612aa9816125b4565b945060608801359350608088013560ff81168114612ac657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215612af557600080fd5b6114c58261297c565b8035600f81900b81146125cd57600080fd5b80356001600160701b03811681146125cd57600080fd5b60006101808284031215612b3a57600080fd5b612b42612492565b612b4b8361297c565b8152612b596020840161297c565b6020820152612b6a6040840161297c565b6040820152612b7b6060840161297c565b6060820152612b8c60808401612afe565b6080820152612b9d60a0840161297c565b60a0820152612bae60c0840161297c565b60c0820152612bbf60e0840161297c565b60e0820152610100612bd28185016125c2565b90820152610120612be48482016125c2565b90820152610140612bf6848201612b10565b90820152610160612c0884820161297c565b908201529392505050565b600060208284031215612c2557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201612c5757612c57612c2c565b5060000390565b60008251612c708184602087016124bc565b9190910192915050565b81810381811115610d9e57610d9e612c2c565b80820180821115610d9e57610d9e612c2c565b818103600083128015838313168383128216171561203957612039612c2c565b8082028115828204841417610d9e57610d9e612c2c565b634e487b7160e01b600052601260045260246000fd5b60008060008060808587031215612d0357600080fd5b84519350602085015192506040850151915060608501516128f9816125b4565b600082612d3257612d32612cd7565b500690565b600082612d4657612d46612cd7565b600160ff1b821460001984141615612d6057612d60612c2c565b50059056fea264697066735822122018ff508a4cd8b9994c34af7ff126070c3507fcc8db7db00f456e3a2728dbe0bd64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004228380380620042288339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613da66200048260003960008181610dab01526123a7015260008181610d7c015261236a015260008181610c5601528181610edb01528181610f6b01528181610ffb0152818161108b0152818161168c01528181611724015281816118ed01528181611f2101528181611ff7015261214e01526000610e43015260008181610e1d015261255a015260008181610df70152612534015260008181610dd1015261250e01526000611198015260006111720152600061114c01526000611126015260008181610eb50152612580015260008181610e69015281816113130152612a9c015260008181610e8f0152612edb01526000818161061b0152610d4d01526000818161074b01528181610d1e015281816112c601528181611e95015281816126440152818161268d0152818161273f0152818161278801528181612c0101528181612cad01528181612d990152612e450152613da66000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c806360246c881161013b578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104f1578063d816574314610504578063e44808bc14610519578063e985e9c51461052c578063fba560081461053f57600080fd5b8063bd85b039146104a3578063becee9c3146104b6578063c55dae63146104d6578063c69e16ad14610434578063c6e6f592146104de57600080fd5b80639cd241af116100ff5780639cd241af14610444578063a22cb46514610457578063ab033ea91461046a578063b0d965801461047b578063b88fed9f1461049057600080fd5b806360246c88146103fa5780637180c8ca1461040f5780637ecebe00146104215780638e67f87e14610434578063950c5d031461043c57600080fd5b806320fc4881116101c95780633e691db91161018d5780633e691db91461039657806346fbf68e146103a95780634e41a1fb146103cc5780634ed2d6ac146103df57806354fd4d50146103f257600080fd5b806320fc4881146102fb57806321ff32a914610340578063313ce567146103615780633656eec21461037b5780633a98ef391461038e57600080fd5b806306fdde031161021057806306fdde031461029a5780630a4e1493146102a257806314e5f07b146102c257806317fad7fc146102d55780631c0f12b6146102e857600080fd5b8062ad800c1461024157806301681a621461026a57806302329a291461027f57806304baa00b14610292575b600080fd5b61025461024f36600461312c565b61056e565b6040516102619190613195565b60405180910390f35b61027d6102783660046131bd565b6105a5565b005b61027d61028d3660046131e8565b6105ae565b6102546105b7565b6102546105f6565b6102aa61060d565b6040516001600160a01b039091168152602001610261565b61027d6102d0366004613214565b61064d565b61027d6102e33660046132ef565b610669565b61027d6102f6366004613384565b61067f565b61030e61030936600461312c565b610692565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610261565b61035361034e3660046133cc565b6106fe565b604051908152602001610261565b610369610744565b60405160ff9091168152602001610261565b61035361038936600461340e565b6107df565b610353610818565b6103536103a436600461343e565b610837565b6103bc6103b73660046131bd565b610842565b6040519015158152602001610261565b6102546103da36600461312c565b610862565b61027d6103ed366004613479565b610870565b6102546108be565b6104026108f3565b60405161026191906134c3565b61027d61041d366004613564565b5050565b61035361042f3660046131bd565b610c02565b610353610c2e565b6102aa610c48565b61027d610452366004613592565b610c88565b61027d610465366004613564565b610c99565b61027d6104783660046131bd565b50565b610483610d05565b60405161026191906135ca565b61035361049e36600461312c565b6111cd565b6103536104b136600461312c565b6111db565b6104c96104c43660046136f0565b6111fd565b6040516102619190613732565b6102aa6112b8565b6103536104ec36600461312c565b6112f8565b6103536104ff36600461312c565b611306565b61050c61133d565b6040516102619190613776565b61027d610527366004613887565b611449565b6103bc61053a3660046138e6565b611491565b6105476114d5565b6040805182516001600160801b039081168252602093840151169281019290925201610261565b60606105a061057c83611534565b60405160200161058c9190613195565b60405160208183030381529060405261165c565b919050565b61047881611680565b610478816118eb565b60606105f36040518060400160405280600e81526020016d4d6f636b4879706572647269766560901b81525060405160200161058c9190613195565b90565b60606105f3600160405160200161058c9190613914565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b61065e898989898989898989611a05565b505050505050505050565b610677868686868686611bfc565b505050505050565b61068c8484848433611cb0565b50505050565b60408051606081018252600080825260208201819052918101919091526105a06008600084815260200190815260200160002060405160200161058c919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b038681168552908352818420908516845282528083205481519283015261073d910161058c565b9392505050565b60006105f37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb91906139c5565b6040805160ff90921660208301520161058c565b6000828152600a602090815260408083206001600160a01b0385168452825280832054815192830152610812910161058c565b92915050565b60006105f3610825611e71565b60405160200161058c91815260200190565b600061081282611f0a565b60006105a061085083612149565b6040805191151560208301520161058c565b60606105a061057c8361222e565b8361087a8161232c565b6001600160a01b0316336001600160a01b0316146108ab57604051632aab8bd360e01b815260040160405180910390fd5b6108b7858585856123e9565b5050505050565b60606105f360405180604001604052806007815260200166076312e302e32360cc1b81525060405160200161058c9190613195565b61096c604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000610976612456565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109e19190613a0e565b6109eb9190613a21565b905060008215610afd5773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a1885612469565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190613a34565b509050610afa81846125ff565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bce57610bc98486612614565b610bd1565b60005b81526003546001600160801b0316602091820152604051919250610bfb9161058c918491016134c3565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105a0910161058c565b60006105f360095460405160200161058c91815260200190565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b610c94838383336123e9565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d0d613045565b6105f36040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107b9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190613a64565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161058c91906135ca565b60006105a061082583612629565b6000818152600b60209081526040808320548151928301526105a0910161058c565b606060008267ffffffffffffffff81111561121a5761121a613a81565b604051908082528060200260200182016040528015611243578160200160208202803683370190505b50905060005b8381101561129c57600085858381811061126557611265613a97565b9050602002013590506000815490508084848151811061128757611287613a97565b60209081029190910101525050600101611249565b506112b18160405160200161058c9190613732565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b60006105a061082583612724565b60006105a06108256113387f000000000000000000000000000000000000000000000000000000000000000085613a0e565b61280d565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105f3600260405160200161058c919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b846114538161232c565b6001600160a01b0316336001600160a01b03161461148457604051632aab8bd360e01b815260040160405180910390fd5b6106778686868686611cb0565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff9091161515918101919091529091610812910161058c565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105f39060600161058c565b606060f882901c6001600160f81b038316600061155082612851565b90506000836003811115611566576115666139e2565b03611598576040518060400160405280600d81526020016c048797065726472697665204c5609c1b8152509350611654565b60018360038111156115ac576115ac6139e2565b036115d857806040516020016115c29190613aad565b6040516020818303038152906040529350611654565b60028360038111156115ec576115ec6139e2565b0361160257806040516020016115c29190613ae6565b6003836003811115611616576116166139e2565b03611654576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b81526004016116779190613195565b60405180910390fd5b611688612906565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190613a64565b9050336001600160a01b038216148015906117ba57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190613a64565b6001600160a01b0316336001600160a01b031614155b80156117cc57506117ca33612149565b155b156117e9576040516282b42960e81b815260040160405180910390fd5b60006117f3611e71565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561183d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118619190613b20565b90506118776001600160a01b0385168483612930565b81611880611e71565b1461189e576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104786001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190613a64565b6001600160a01b0316336001600160a01b031614158015611994575061199233612149565b155b156119b1576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119fa90831515815260200190565b60405180910390a150565b83421115611a265760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a4d5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b3b573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b7957604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c1957506001600160a01b038516155b15611c375760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c575760405163174861a760e31b815260040160405180910390fd5b60005b83811015611ca757611c9f858583818110611c7757611c77613a97565b905060200201358888868686818110611c9257611c92613a97565b9050602002013533611cb0565b600101611c5a565b50505050505050565b6001600160a01b0384161580611ccd57506001600160a01b038316155b15611ceb5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611daf576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611daf576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611dad576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611da7908490613a21565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611de1908490613a21565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e18908490613a0e565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b8152306004820152600090611f05906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f009190613b20565b612724565b905090565b6000611f14612906565b611f1d82612982565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa19190613a64565b90506001600160a01b038116611fba60208501856131bd565b6001600160a01b031614611fe157604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061208d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120779190613a64565b6001600160a01b0316336001600160a01b031614155b801561209f575061209d33612149565b155b156120bc576040516282b42960e81b815260040160405180910390fd5b60006120c6612456565b6009805460009091559091506120dd8183876129b8565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461211c60408a0160208b016131e8565b60408051938452602084019290925215159082015260600160405180910390a25050506105a06001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121d29190810190613b39565b905060005b815181101561222457836001600160a01b03168282815181106121fc576121fc613a97565b60200260200101516001600160a01b03160361221c575060019392505050565b6001016121d7565b5060009392505050565b606060f882901c6001600160f81b038316600061224a82612851565b90506000836003811115612260576122606139e2565b03612292576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b8152509350611654565b60018360038111156122a6576122a66139e2565b036122bc57806040516020016115c29190613bfe565b60028360038111156122d0576122d06139e2565b036122e657806040516020016115c29190613c36565b60038360038111156122fa576122fa6139e2565b0361165457505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611f05670de0b6b3a7640000612629565b6124cd6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125c59116612a51565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125f792900416612a51565b905292915050565b600061073d8383670de0b6b3a7640000612ac7565b600061073d83670de0b6b3a764000084612ac7565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612678575047612703565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190613b20565b90505b600f5460000361271457600061073d565b600f5461073d9084908390612ac7565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016127735750476127fe565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fb9190613b20565b90505b600f5461073d90849083612ac7565b6000612835600b6000612821600286612ae5565b815260200190815260200160002054612b1a565b612847600b6000612821600187612ae5565b6108129190613c62565b60408051604e80825260808201909252606091906000908260208201818036833701905050905060005b84156128f85761288c600a86613c98565b612897906030613a0e565b60f81b8260016128a78487613a21565b6128b19190613a21565b815181106128c1576128c1613a97565b60200101906001600160f81b031916908160001a905350806128e281613cac565b91506128f19050600a86613cc5565b945061287b565b918290030190815292915050565b60026000540361292957604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c94908490612b48565b600061299160208301836131bd565b6001600160a01b0316036104785760405163f0dd15fd60e01b815260040160405180910390fd5b6000806129c585856125ff565b90506129d081612724565b9450846000036129e457600091505061073d565b8491506129f760408401602085016131e8565b15612a2657612a1f85612a0d60208601866131bd565b612a1a6040870187613cd9565b612bab565b9150612a49565b612a4985612a3760208601866131bd565b612a446040870187613cd9565b612d45565b509392505050565b600080670de0b6b3a7640000612a65612ed3565b612a6f9190613d20565b9050808311612a7f576000612a89565b612a898184613a21565b915061073d612ac0670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613d20565b8390612614565b6000826000190484118302158202612ade57600080fd5b5091020490565b60006001600160f81b03821115612b0f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60006001600160ff1b03821115612b445760405163396ea70160e11b815260040160405180910390fd5b5090565b6000612b5d6001600160a01b03841683612eff565b90508051600014158015612b82575080806020019051810190612b809190613d37565b155b15610c9457604051635274afe760e01b81526001600160a01b0384166004820152602401611677565b6000600f548511612bbc5784612bc0565b600f545b94506000612bcd86612629565b905085600f6000828254612be19190613a21565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612c87576040516001600160a01b038716908390600081818185875af1925050503d8060008114612c77576040519150601f19603f3d011682016040523d82523d6000602084013e612c7c565b606091505b505080915050612d1d565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a9190613d37565b90505b80612d3b576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f548411612d545783612d58565b600f545b93506000612d6585612629565b905084600f6000828254612d799190613a21565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612e1f576040516001600160a01b038616908390600081818185875af1925050503d8060008114612e0f576040519150601f19603f3d011682016040523d82523d6000602084013e612e14565b606091505b505080915050612eb5565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb29190613d37565b90505b80610677576040516312171d8360e31b815260040160405180910390fd5b6000611f05427f0000000000000000000000000000000000000000000000000000000000000000612f0d565b606061073d83836000612f23565b6000612f198284613c98565b61073d9084613a21565b606081471015612f485760405163cd78605960e01b8152306004820152602401611677565b600080856001600160a01b03168486604051612f649190613d54565b60006040518083038185875af1925050503d8060008114612fa1576040519150601f19603f3d011682016040523d82523d6000602084013e612fa6565b606091505b5091509150612fb6868383612fc0565b9695505050505050565b606082612fd557612fd08261301c565b61073d565b8151158015612fec57506001600160a01b0384163b155b1561301557604051639996b31560e01b81526001600160a01b0385166004820152602401611677565b508061073d565b80511561302c5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016131276040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b60006020828403121561313e57600080fd5b5035919050565b60005b83811015613160578181015183820152602001613148565b50506000910152565b60008151808452613181816020860160208601613145565b601f01601f19169290920160200192915050565b60208152600061073d6020830184613169565b6001600160a01b038116811461047857600080fd5b6000602082840312156131cf57600080fd5b813561073d816131a8565b801515811461047857600080fd5b6000602082840312156131fa57600080fd5b813561073d816131da565b60ff8116811461047857600080fd5b60008060008060008060008060006101208a8c03121561323357600080fd5b8935985060208a0135975060408a013561324c816131a8565b965060608a013561325c816131a8565b955060808a013561326c816131da565b945060a08a0135935060c08a013561328381613205565b8093505060e08a013591506101008a013590509295985092959850929598565b60008083601f8401126132b557600080fd5b50813567ffffffffffffffff8111156132cd57600080fd5b6020830191508360208260051b85010111156132e857600080fd5b9250929050565b6000806000806000806080878903121561330857600080fd5b8635613313816131a8565b95506020870135613323816131a8565b9450604087013567ffffffffffffffff8082111561334057600080fd5b61334c8a838b016132a3565b9096509450606089013591508082111561336557600080fd5b5061337289828a016132a3565b979a9699509497509295939492505050565b6000806000806080858703121561339a57600080fd5b8435935060208501356133ac816131a8565b925060408501356133bc816131a8565b9396929550929360600135925050565b6000806000606084860312156133e157600080fd5b8335925060208401356133f3816131a8565b91506040840135613403816131a8565b809150509250925092565b6000806040838503121561342157600080fd5b823591506020830135613433816131a8565b809150509250929050565b60006020828403121561345057600080fd5b813567ffffffffffffffff81111561346757600080fd5b82016060818503121561073d57600080fd5b6000806000806080858703121561348f57600080fd5b8435935060208501356134a1816131a8565b92506040850135915060608501356134b8816131a8565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b6000806040838503121561357757600080fd5b8235613582816131a8565b91506020830135613433816131da565b6000806000606084860312156135a757600080fd5b8335925060208401356135b9816131a8565b929592945050506040919091013590565b81516001600160a01b03168152610260810160208301516135f660208401826001600160a01b03169052565b50604083015161361160408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151613683828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b6000806020838503121561370357600080fd5b823567ffffffffffffffff81111561371a57600080fd5b613726858286016132a3565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561376a5783518352928401929184019160010161374e565b50909695505050505050565b81516001600160801b03168152610180810160208301516137a260208401826001600160801b03169052565b5060408301516137bd60408401826001600160801b03169052565b5060608301516137d860608401826001600160801b03169052565b5060808301516137ed6080840182600f0b9052565b5060a083015161380860a08401826001600160801b03169052565b5060c083015161382360c08401826001600160801b03169052565b5060e083015161383e60e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b038116828501526136e8565b600080600080600060a0868803121561389f57600080fd5b8535945060208601356138b1816131a8565b935060408601356138c1816131a8565b92506060860135915060808601356138d8816131a8565b809150509295509295909350565b600080604083850312156138f957600080fd5b8235613904816131a8565b91506020830135613433816131a8565b60006020808352600084548160018260011c9150600183168061393857607f831692505b60208310810361395657634e487b7160e01b85526022600452602485fd5b6020880183905260408801818015613975576001811461398b576139b6565b60ff198616825284151560051b820196506139b6565b60008b81526020902060005b868110156139b057815484820152908501908901613997565b83019750505b50949998505050505050505050565b6000602082840312156139d757600080fd5b815161073d81613205565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610812576108126139f8565b81810381811115610812576108126139f8565b60008060408385031215613a4757600080fd5b825191506020830151613433816131da565b80516105a0816131a8565b600060208284031215613a7657600080fd5b815161073d816131a8565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b700243cb832b9323934bb32902637b7339d1607d1b815260008251613ad9816011850160208701613145565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b815260008251613b13816012850160208701613145565b9190910160120192915050565b600060208284031215613b3257600080fd5b5051919050565b60006020808385031215613b4c57600080fd5b825167ffffffffffffffff80821115613b6457600080fd5b818501915085601f830112613b7857600080fd5b815181811115613b8a57613b8a613a81565b8060051b604051601f19603f83011681018181108582111715613baf57613baf613a81565b604052918252848201925083810185019188831115613bcd57600080fd5b938501935b82851015613bf257613be385613a59565b84529385019392850192613bd2565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b815260008251613c29816010850160208701613145565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b815260008251613ad9816011850160208701613145565b81810360008312801583831316838312821617156112b1576112b16139f8565b634e487b7160e01b600052601260045260246000fd5b600082613ca757613ca7613c82565b500690565b600060018201613cbe57613cbe6139f8565b5060010190565b600082613cd457613cd4613c82565b500490565b6000808335601e19843603018112613cf057600080fd5b83018035915067ffffffffffffffff821115613d0b57600080fd5b6020019150368190038213156132e857600080fd5b8082028115828204841417610812576108126139f8565b600060208284031215613d4957600080fd5b815161073d816131da565b60008251613d66818460208701613145565b919091019291505056fea2646970667358221220fc48960ebfc2d4107101b2838d672c46d78b8028720f78fd5c6c25fae03caf1064736f6c634300081600336102806040523480156200001257600080fd5b506040516200425c3803806200425c8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613da1620004bb60003960005050600050506000610b650152600050506000818160af01528181610325015261301c0152600081816113eb015281816117fc0152818161185f01528181612bfa01528181612c3601528181612e350152612ff601526000818161071301528181610de801528181610e2f01528181610ff401528181611661015281816116af0152612fd001526000611c1f015260008181611d45015281816123a801526124210152600081816108d701528181610f8c01528181611d1901526123f5015260008181610e81015261236e01526000818161073401528181610dc601528181610e50015281816110150152818161163f015281816116d0015261304201526000818161080f01528181610f0b015281816117580152818161224301526135760152600081816105d20152818161064d015281816106c30152818161078f01526107c7015260005050600081816119f101528181611a3a01528181612697015281816126e0015281816127bb015281816128670152818161295301526129ff0152613da16000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806329b23fc11461003b578063ded0623114610060575b600080fd5b61004e610049366004613824565b610073565b60405190815260200160405180910390f35b61004e61006e366004613824565b61008c565b60006100818585858561009a565b90505b949350505050565b600061008185858585610310565b60006100a461054f565b6100ad82610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156100ee5760405163211ddda360e11b815260040160405180910390fd5b60006100f86105b2565b90508542101561011d5761011761010d6105ca565b82600460016105f6565b5061012d565b61012b8682600460016105f6565b505b61014261013b600288610c73565b3387610ca8565b6000806000806000806101568b888e610d81565b95509550955095509550955060008c90508c4210156102165782600960008282546101819190613899565b9091555061019990506101926105ca565b4284611075565b6101a68c888787856111b3565b60006101b18e61132d565b90506101cf6101bf8e611377565b6101c990836138ac565b826113a5565b6101d8896113e4565b6101e4576101e4611444565b60006101ef8a61145d565b90508061020f57604051638bdf918d60e01b815260040160405180910390fd5b505061022d565b610220868961146a565b955061022b8861145d565b505b600061023a878a8d61154b565b90508b81101561025d5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61026d600288610c73565b61027a60208301836138e1565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102b86040890160208a0161390c565b6102cc8a6102c68d8f613899565b906115e5565b8d6102da60408c018c613929565b6040516102ee989796959493929190613999565b60405180910390a450939c505050505050505050505050506100846001600055565b600061031a61054f565b61032382610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156103645760405163211ddda360e11b815260040160405180910390fd5b600061036e6105b2565b9050854210156103895761038361010d6105ca565b50610399565b6103978682600460016105f6565b505b6103a761013b600188610c73565b6000806000806000806103bb8b888e6115fa565b95509550955095509550955060008c90508c42101561046e5782600960008282546103e69190613899565b909155506103f790506101926105ca565b6104048c888787856117e5565b600061040f8261132d565b905061042761041d8e611377565b6101c990836139e1565b610430896113e4565b61043c5761043c611444565b60006104478a61145d565b90508061046757604051638bdf918d60e01b815260040160405180910390fd5b5050610485565b610478868961146a565b95506104838861145d565b505b6000610492878a8d61154b565b90508b8110156104b55760405163c972651760e01b815260040160405180910390fd5b8c898c6104c3600186610c73565b6104d060208301836138e1565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee526788888761050e6040890160208a0161390c565b8a61051c60408b018b613929565b60405161052f9796959493929190613a09565b60405180910390a450919a50505050505050505050506100846001600055565b60026000540361057257604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600061058860208301836138e1565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b60006105c5670de0b6b3a76400006119d6565b905090565b60006105c5427f0000000000000000000000000000000000000000000000000000000000000000611ad1565b600084815260086020526040812060018101546001600160801b031615158061061e57504286115b1561063757600101546001600160801b03169050610084565b60008060006106446105ca565b905060006106727f00000000000000000000000000000000000000000000000000000000000000008b613899565b90505b818110156106e8576000818152600860205260409020600101546001600160801b031680156106c0576000828152600860205260409020549094506001600160801b031692506106e8565b507f000000000000000000000000000000000000000000000000000000000000000001610675565b8360000361075b578893506107586106fe611ae7565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b92505b5061076583611b1f565b6001850180546001600160801b0319166001600160801b03929092169190911790556107bb6107b47f00000000000000000000000000000000000000000000000000000000000000008b613a4a565b8a84611075565b6107f9896107f36107ec7f000000000000000000000000000000000000000000000000000000000000000083613899565b4290611b49565b84611075565b61080288611b5e565b50600090506008816108347f00000000000000000000000000000000000000000000000000000000000000008d613a4a565b815260208101919091526040016000908120600101546001600160801b0316915061086060028c610c73565b6000818152600b60205260408120549192508c8c83156109a6576001925060008061088f86898d866000611d02565b9150915080600960008282546108a59190613899565b909155506108c19050866000846108bb81611377565b886111b3565b6108cb8183613899565b91506108fb86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611dd1565b915061090f61090a83856115e5565b611e1b565b600680546002906109309084906201000090046001600160701b0316613a5d565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061095d82611b1f565b6006805460109061097f908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b60006109b3600184610c73565b6000818152600b60205260409020549091508015610ac257600194506000806109e0838b8f886001611d02565b9150915080600960008282546109f69190613899565b90915550610a12905083600084610a0c81611377565b8a6117e5565b610a1c8183613a4a565b9150610a2b61090a83876115e5565b60068054600290610a4c9084906201000090046001600160701b0316613a5d565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7982611b1f565b60068054601090610a9b908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610afc57610aee610ad487611377565b610add83611377565b610ae791906138ac565b60006113a5565b8e610af98482611e45565b50505b6000610b078461203f565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190613a9d565b90506001600160a01b03811615610c5a57610c575a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061218b565b50505b509b9d5050505050505050505050505050949350505050565b60006001600160f81b03821115610c9d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610ceb57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610d2e908490613a4a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600080600080600080600080610d95611ae7565b90506000610da28a612216565b6002549091508c908c90610e0c908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f0000000000000000000000000000000000000000000000000000000000000000612267565b600254919d509a50909550610e74908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b9550610eaa858c610ea5897f00000000000000000000000000000000000000000000000000000000000000006122d7565b612307565b15610eb757610eb7611444565b6000806000610ec885878b87612349565b9c5091945092509050610edb8184613a4a565b610ee59089613899565b9750610ef18284613899565b610efb908d613899565b9b505050505050506000600860007f00000000000000000000000000000000000000000000000000000000000000008c610f359190613a4a565b815260208101919091526040016000908120600101546001600160801b03169150428b11610f7d5760008b8152600860205260409020600101546001600160801b0316610f7f565b8b5b90508b610fb08e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611dd1565b9950610fbc878a613a4a565b9850670de0b6b3a7640000611039610fd48787613899565b600254610ff2908f90600160801b90046001600160801b0316613a4a565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b111561104757611047611444565b6110578a8a878a8787600061245d565b939d50919b5090995090975050505050505093975093979195509350565b600083815260086020526040902054600160801b90046001600160801b03168083036110a15750505050565b6000848152600860205260408120546001600160801b0316908190036110fb576110ca83611b1f565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611179565b61114c611147670de0b6b3a76400006111148886613a4a565b61111e9190613aba565b85670de0b6b3a7640000611132878a613a4a565b61113c9190613aba565b8592919060016124fc565b611b1f565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61118284611b1f565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111fc611147826111df670de0b6b3a764000086613aba565b600554600160801b90046001600160801b031691908a60006124fc565b600580546001600160801b03928316600160801b02921691909117905561122286611b1f565b61122c9082613ad1565b600480546001600160801b03928316600160801b02921691909117905561125284611b1f565b6002805460009061126d9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061129a836125a6565b600480546000906112af908490600f0b613af1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506112df85611b1f565b60028054601090611301908490600160801b90046001600160801b0316613ad1565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000611355600b6000611341600286610c73565b815260200190815260200160002054611377565b611367600b6000611341600187610c73565b61137191906138ac565b92915050565b60006001600160ff1b038211156113a15760405163396ea70160e11b815260040160405180910390fd5b5090565b6003546113c090611147906001600160801b031684846125e2565b600380546001600160801b0319166001600160801b03929092169190911790555050565b60006114107f000000000000000000000000000000000000000000000000000000000000000083612649565b60035461142691906001600160801b0316613899565b60025461143c906001600160801b0316846115e5565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000611371826004611e45565b600080600061147884611b5e565b9092509050600061148986866115e5565b9050818311156114a15761149e86838561265e565b95505b828110156114b35780830392506114b8565b600092505b6114c183611e1b565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b909104168087101561151457869003611518565b5060005b61152181611b1f565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b60008061155885856115e5565b90506115638161267c565b9450846000036115775760009150506115de565b84915061158a604084016020850161390c565b156115b9576115b2856115a060208601866138e1565b6115ad6040870187613929565b612765565b91506115dc565b6115dc856115ca60208601866138e1565b6115d76040870187613929565b6128ff565b505b9392505050565b60006115de8383670de0b6b3a764000061265e565b60008060008060008060008061160e611ae7565b9050600061161b8a612216565b6002549091508b908d90611685908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f0000000000000000000000000000000000000000000000000000000000000000612a95565b600254919d509b50909550600090819081906116f4908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b985061170284878b88612349565b9c5091945090925090506117168284613a4a565b6117209089613a4a565b975061172c8184613899565b611736908e613a4a565b9c506117428a8e613899565b9b50505050505050506117cf86868386600860007f00000000000000000000000000000000000000000000000000000000000000008f6117829190613a4a565b81526020810191909152604001600020600101546001600160801b0316428e116117c65760008e8152600860205260409020600101546001600160801b03166117c8565b8e5b600161245d565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b03168381108061182757507f00000000000000000000000000000000000000000000000000000000000000006118258583613a4a565b105b1561183457611834611444565b6004549084900390600f0b61184984826138ac565b90508361185586611377565b13801561188a57507f00000000000000000000000000000000000000000000000000000000000000006118888383612ae9565b105b1561189757611897611444565b600354600160801b90046001600160801b03166118d9611147826118c3670de0b6b3a764000088613aba565b6005546001600160801b031691908c60006124fc565b600580546001600160801b0319166001600160801b03929092169190911790556119038882613a4a565b905061190e81611b1f565b600380546001600160801b03928316600160801b02921691909117905561193483611b1f565b600280546001600160801b0319166001600160801b039290921691909117905561195d826125a6565b600480546001600160801b0319166001600160801b039290921691909117905561198687611b1f565b600280546010906119a8908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a25575047611ab0565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad9190613b1e565b90505b600f54600003611ac15760006115de565b600f546115de908490839061265e565b6000611add8284613b4d565b6115de9084613a4a565b6002546004546000916105c5916001600160801b0390911690600f0b612ae9565b600061008182611b1985888861265e565b90612b0f565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611b5857826115de565b50919050565b6006546000908190611b81908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611cfd576000611bab8383613a4a565b9050611bba6111478286612b84565b60068054601090611bdc908490600160801b90046001600160801b0316613ad1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611c158583612b9990919063ffffffff16565b90506000611c43827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611c579190613899565b90915550611c6790508183613a4a565b9150611c7282611b1f565b60028054600090611c8d9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611cba82612bae565b60048054600090611ccf908490600f0b613af1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611d0f8785612b99565b91506000611d3d837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611d69817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611d8c57611d7b8282613a4a565b611d859084613a4a565b9250611da3565b611d968282613a4a565b611da09084613899565b92505b86861015611dc657611db683878961265e565b9250611dc382878961265e565b91505b509550959350505050565b600080611de984611de38a888a61265e565b90612b99565b9050611df688848661265e565b611e009082613899565b905086811115611e105786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611e90916001600160801b031690613a4a565b905080600003611ea4576001915050611371565b6000611eaf85612bd8565b905080600003611ec457600192505050611371565b600080611ed2838589612c74565b9150915080611ee8576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611f24929190613bdf565b6040805180830381865af4158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190613c55565b91509150611f82611f7482611377565b611f7d90613c79565b612def565b925082611f985760009650505050505050611371565b611fa182611b1f565b60078054600090611fbc9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611fe981611b1f565b6007805460109061200b908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61206887612f87565b6040518263ffffffff1660e01b81526004016120849190613c95565b6040805180830381865af41580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190613ca4565b91509150806120da575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161214091613899565b61214a9190613a4a565b90508060000361216257506000958695509350505050565b600080871161217257600061217d565b61217d84888461265e565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156121b1576121b1613cd4565b6040519080825280601f01601f1916602001820160405280156121db576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156121fc578692505b828152826000602083013e90999098509650505050505050565b6000806122216105ca565b905080831161223157600061223b565b61223b8184613a4a565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612b99565b6000808061228861228088670de0b6b3a7640000613a4a565b8990876130c1565b905086156122ca5761229a8888612649565b91506122bb8a8a846122b48a670de0b6b3a7640000613a4a565b89896130e7565b92506122c78382613899565b90505b9750975097945050505050565b60006122f56122ee84670de0b6b3a7640000613a4a565b8390612649565b6115de90670de0b6b3a7640000613a4a565b60008061233e85612316611ae7565b6123209190613899565b600254610ff2908790600160801b90046001600160801b0316613a4a565b909210949350505050565b60008080806123a087866123998b61239361236c8c670de0b6b3a7640000613a4a565b7f000000000000000000000000000000000000000000000000000000000000000090612649565b90612649565b91906130c1565b93506123cc847f00000000000000000000000000000000000000000000000000000000000000006115e5565b915060006123ed6123e589670de0b6b3a7640000613a4a565b8a90886130c1565b9050612419817f0000000000000000000000000000000000000000000000000000000000000000612649565b9350612445847f00000000000000000000000000000000000000000000000000000000000000006115e5565b61244f9084613899565b915050945094509450949050565b600080600080600080888810156124cc5786156124825761247f8d898b61265e565b9c505b61248d8c898b61265e565b9b506124988b611377565b6124a18d611377565b6124ab91906138ac565b90506124b88b898b61265e565b9a506124c58a898b61265e565b99506124eb565b6124d58b611377565b6124de8d611377565b6124e891906138ac565b90505b9b9c9a9b999a975050505050505050565b60008260000361250d57508461259d565b81156125605761253e6125208487613899565b61252a85876115e5565b612534888a6115e5565b611de39190613899565b9050600061254c8588611b49565b90508082101561255a578091505b5061259d565b82850361256f5750600061259d565b61259a61257c8487613a4a565b6125868587612649565b612590888a6115e5565b611de39190613a4a565b90505b95945050505050565b600060016001607f1b03198212806125c4575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b6000806125f084600061310a565b6125fb84600061310a565b61260591906138ac565b905060008113156126215761261a8186613899565b9450612640565b60008112156126405761263381613c79565b61263d9086613a4a565b94505b50929392505050565b60006115de8383670de0b6b3a76400006130c1565b600082600019048411830215820261267557600080fd5b5091020490565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016126cb575047612756565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561272f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127539190613b1e565b90505b600f546115de9084908361265e565b6000600f548511612776578461277a565b600f545b94506000612787866119d6565b905085600f600082825461279b9190613a4a565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612841576040516001600160a01b038716908390600081818185875af1925050503d8060008114612831576040519150601f19603f3d011682016040523d82523d6000602084013e612836565b606091505b5050809150506128d7565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190613cea565b90505b806128f5576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f54841161290e5783612912565b600f545b9350600061291f856119d6565b905084600f60008282546129339190613a4a565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016129d9576040516001600160a01b038616908390600081818185875af1925050503d80600081146129c9576040519150601f19603f3d011682016040523d82523d6000602084013e6129ce565b606091505b505080915050612a6f565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190613cea565b90505b80612a8d576040516312171d8360e31b815260040160405180910390fd5b505050505050565b60008080612ab6612aae88670de0b6b3a7640000613a4a565b89908761265e565b905086156122ca57612ac888886115e5565b91506122bb8a8a84612ae28a670de0b6b3a7640000613a4a565b8989613120565b600080612af68484613131565b909250905080612b0857612b08611444565b5092915050565b600081600003612b285750670de0b6b3a7640000611371565b82600003612b3857506000611371565b6000612b4383611377565b90506000612b58612b5386611377565b613170565b9050818102612b6f670de0b6b3a764000082613d07565b9050612b7a81613396565b9695505050505050565b60006115de83670de0b6b3a7640000846130c1565b60006115de83670de0b6b3a76400008461265e565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612bf3906001600160801b031684612b84565b9050612c1f7f000000000000000000000000000000000000000000000000000000000000000082613899565b6002546001600160801b03161115611b58576002547f000000000000000000000000000000000000000000000000000000000000000090612c6a9083906001600160801b0316613a4a565b6115de9190613a4a565b612c7c613771565b600080612c8884612f87565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612cc39190613c95565b6040805180830381865af4158015612cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d039190613ca4565b9350905082612d18575060009150612de79050565b6000612d3f612d3a8461016001518561014001516115e590919063ffffffff16565b611377565b612d5f612d3a85610120015186610100015161264990919063ffffffff16565b612d6991906138ac565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecc9190613d35565b935093509350935080612ee85750600098975050505050505050565b868414612f1957612ef884611b1f565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612f4a57612f29836125a6565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612f7857612f5a82611b1f565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612f8f6137c3565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191613087911661352b565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926130b99290041661352b565b905292915050565b60008260001904841183021582026130d857600080fd5b50910281810615159190040190565b6000806130f88888888888886135a1565b909250905080611e1057611e10611444565b600081831361311957816115de565b5090919050565b6000806130f8888888888888613682565b60008060008361314086611377565b61314a91906138ac565b90506000811215613162576000809250925050613169565b9150600190505b9250929050565b60008082136131925760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132159084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133b157506000919050565b680755bf798b4a1bf1e582126133da576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612b7a74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a764000061353f6105ca565b6135499190613aba565b9050808311613559576000613563565b6135638184613a4a565b91506115de61359a670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613aba565b8390612b99565b60008060006135b38989888888613742565b9050868810156135ca576000809250925050613677565b96869003966135d98887612b0f565b9750878110156135f0576000809250925050613677565b8781036135fe8186886130c1565b9050670de0b6b3a764000081106136325761362b613624670de0b6b3a764000089612b84565b8290612b0f565b905061364a565b613647613624670de0b6b3a764000089612b99565b90505b6136548186612b84565b90508981101561366c57600080935093505050613677565b899003925060019150505b965096945050505050565b60008060006136948989888888613742565b90506136a486611b19898b613899565b9750878110156136bb576000809250925050613677565b8781036136c98186886130c1565b9050670de0b6b3a764000081106136f6576136ef613624670de0b6b3a764000089612b84565b905061370e565b61370b613624670de0b6b3a764000089612b99565b90505b6137188186612b84565b9050808a101561373057600080935093505050613677565b90980398600198509650505050505050565b600061374e8585612b0f565b61376761375f86611b19868b612649565b8590856130c1565b61259a9190613899565b6040518061012001604052806137856137c3565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561383a57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561386657600080fd5b85016060818803121561387857600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561137157611371613883565b8181036000831280158383131683831282161715612b0857612b08613883565b6001600160a01b03811681146105af57600080fd5b6000602082840312156138f357600080fd5b81356115de816138cc565b80151581146105af57600080fd5b60006020828403121561391e57600080fd5b81356115de816138fe565b6000808335601e1984360301811261394057600080fd5b83018035915067ffffffffffffffff82111561395b57600080fd5b60200191503681900382131561316957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c082015260006139d360e083018486613970565b9a9950505050505050505050565b8082018281126000831280158216821582161715613a0157613a01613883565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613a3d60c083018486613970565b9998505050505050505050565b8181038181111561137157611371613883565b6001600160701b03818116838216019080821115612b0857612b08613883565b6001600160801b03818116838216019080821115612b0857612b08613883565b600060208284031215613aaf57600080fd5b81516115de816138cc565b808202811582820484141761137157611371613883565b6001600160801b03828116828216039080821115612b0857612b08613883565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561137157611371613883565b600060208284031215613b3057600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613b5c57613b5c613b37565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613bf3828551613b61565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613c6857600080fd5b505080516020909101519092909150565b6000600160ff1b8201613c8e57613c8e613883565b5060000390565b61018081016113718284613b61565b60008060408385031215613cb757600080fd5b825191506020830151613cc9816138fe565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613cfc57600080fd5b81516115de816138fe565b600082613d1657613d16613b37565b600160ff1b821460001984141615613d3057613d30613883565b500590565b60008060008060808587031215613d4b57600080fd5b8451935060208501519250604085015191506060850151613878816138fe56fea2646970667358221220f9ef548db7c21532cc739261166f101bdecf1359ce98920f224ede3dbee2f56464736f6c634300081600336102806040523480156200001257600080fd5b50604051620044da380380620044da8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613fe6620004f460003960005050600050506000610cab0152600050506000818161010001528181610310015261322a01526000818161164f01528181612175015281816121d80152818161298a01528181612e0f01528181612e4b01528181613043015261320401526000818161085901528181610e0b01528181610e4d01528181610f3f015281816113b501528181611414015281816119fb01528181611a8e01526131de01526000611d94015260008181611eba01528181612a7f01528181612af80152613344015260008181610a1d01528181610ec0015281816114af01528181611e8e0152612acc015260008181610e9f01528181612a4b015261330001526000818161087a01528181610de901528181610e6e01528181610f60015281816113930152818161143501526132500152600081816101de015281816103a80152818161095501526137d40152600081816107130152818161079301528181610809015281816108d5015261090d015260005050600081816105750152818161151a01528181611563015281816117f901528181611842015281816118d40152818161195501528181611afc01528181611b7d01528181612be70152612c300152613fe66000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c366004613a69565b61006d565b6040805192835260208301919091520160405180910390f35b610041610068366004613a69565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a4610549565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610573565b6100de836105df565b6000806100eb8886610618565b909250905060006100fc83836106ed565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a61070b565b905061017a81846004600161073c565b50600080600061018a8787610dba565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c89190613ade565b909155506101d99050844283610f9c565b6102037f000000000000000000000000000000000000000000000000000000000000000085613ade565b98506102118389888c6110da565b600061021e60018b611274565b90506102378161023160208e018e613b06565b8b6112a9565b8d8a8a898e8561024a6020830183613b06565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a8688866102876040880160208901613b31565b8961029560408a018a613b4e565b6040516102a89796959493929190613bbe565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d4610549565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610573565b61030e836105df565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b6000610359611351565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b600061038661070b565b9050600061039f61039561070b565b846004600161073c565b905060006103cd7f000000000000000000000000000000000000000000000000000000000000000084613ade565b90506000806000806103e08e8988611364565b60098054949850929650909450925083916000906103ff908490613ade565b909155506104109050874283610f9c565b61042261041d858a6114ea565b6114ff565b61042d906001613ade565b935050600061043d84898d611601565b9050808d10156104605760405163c972651760e01b815260040160405180910390fd5b61046a818c610618565b508e905061047a81858b89611629565b6000610487600288611274565b90508c6104a18261049b6020840184613b06565b856112a9565b858b86846104b26020860186613b06565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104ef60408b0160208c01613b31565b610503896104fd8a8d613bff565b906106ed565b8d61051160408e018e613b4e565b604051610525989796959493929190613c12565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361056c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015906105bf57503415155b156105dd57604051631574f9f360e01b815260040160405180910390fd5b565b60006105ee6020830183613b06565b6001600160a01b0316036106155760405163f0dd15fd60e01b815260040160405180910390fd5b50565b8160008061062c6040850160208601613b31565b1561065157610647856106426040870187613b4e565b6117dd565b9093509050610669565b5034610669856106646040870187613b4e565b611a71565b610671611351565b915080156106e457604051600090339083908381818185875af1925050503d80600081146106bb576040519150601f19603f3d011682016040523d82523d6000602084013e6106c0565b606091505b50509050806106e2576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006107028383670de0b6b3a7640000611c1b565b90505b92915050565b6000610737427f0000000000000000000000000000000000000000000000000000000000000000611c39565b905090565b600084815260086020526040812060018101546001600160801b031615158061076457504286115b1561077d57600101546001600160801b03169050610db2565b600080600061078a61070b565b905060006107b87f00000000000000000000000000000000000000000000000000000000000000008b613ade565b90505b8181101561082e576000818152600860205260409020600101546001600160801b03168015610806576000828152600860205260409020549094506001600160801b0316925061082e565b507f0000000000000000000000000000000000000000000000000000000000000000016107bb565b836000036108a15788935061089e610844611c4f565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b92505b506108ab83611c90565b6001850180546001600160801b0319166001600160801b03929092169190911790556109016108fa7f00000000000000000000000000000000000000000000000000000000000000008b613bff565b8a84610f9c565b61093f896109396109327f000000000000000000000000000000000000000000000000000000000000000083613ade565b4290611cbe565b84610f9c565b61094888611cd3565b506000905060088161097a7f00000000000000000000000000000000000000000000000000000000000000008d613bff565b815260208101919091526040016000908120600101546001600160801b031691506109a660028c611274565b6000818152600b60205260408120549192508c8c8315610aec57600192506000806109d586898d866000611e77565b9150915080600960008282546109eb9190613ade565b90915550610a07905086600084610a0181611f46565b88611f70565b610a118183613ade565b9150610a4186838a8e877f00000000000000000000000000000000000000000000000000000000000000006120ea565b9150610a55610a5083856106ed565b612134565b60068054600290610a769084906201000090046001600160701b0316613c5a565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610aa382611c90565b60068054601090610ac5908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610af9600184611274565b6000818152600b60205260409020549091508015610c085760019450600080610b26838b8f886001611e77565b915091508060096000828254610b3c9190613ade565b90915550610b58905083600084610b5281611f46565b8a61215e565b610b628183613bff565b9150610b71610a5083876106ed565b60068054600290610b929084906201000090046001600160701b0316613c5a565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610bbf82611c90565b60068054601090610be1908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610c4257610c34610c1a87611f46565b610c2383611f46565b610c2d9190613c9a565b600061234f565b8e610c3f848261238e565b50505b6000610c4d84612588565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190613cba565b90506001600160a01b03811615610da057610d9d5a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906126d4565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610dca611c4f565b600254909150610e2f908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f000000000000000000000000000000000000000000000000000000000000000061275f565b600254909450610e92908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b9150610ee98785610ee4857f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061278b565b6127f0565b15610ef657610ef6612832565b610f028785888561284b565b91965094509250670de0b6b3a7640000610f84610f1f8784613ade565b600254610f3d908890600160801b90046001600160801b0316613bff565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b1115610f9257610f92612832565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610fc85750505050565b6000848152600860205260408120546001600160801b03169081900361102257610ff183611c90565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790556110a0565b61107361106e670de0b6b3a764000061103b8886613bff565b6110459190613cd7565b85670de0b6b3a7640000611059878a613bff565b6110639190613cd7565b859291906001612897565b611c90565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6110a984611c90565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b031661111c61106e82611106670de0b6b3a764000086613cd7565b6005546001600160801b03169190886001612897565b600580546001600160801b0319166001600160801b039290921691909117905561114585611c90565b600280546000906111609084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061118d84611c90565b600280546010906111af908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506111dc84611c90565b6111e69082613c7a565b600380546001600160801b03808416600160801b0291161790559050600061120d8361293f565b905061122b8161121c87611f46565b6112269084613d0e565b61234f565b61123484612983565b61124057611240612832565b600061124b856129e3565b90508061126b57604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b0382111561129e5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906112db908490613ade565b90915550506000838152600b6020526040812080548392906112fe908490613ade565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b6000610737670de0b6b3a76400006114ff565b6000806000806000611374611c4f565b6002549091506113d9908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f00000000000000000000000000000000000000000000000000000000000000006129f0565b9350876113e68589612a11565b11156113f4576113f4612832565b6002546000908190611459908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b935061146f8a670de0b6b3a7640000868c612a26565b5091935090915061148290508183613bff565b61148c9087613bff565b9550886114d9816114d38d6114a1868c613bff565b8d6114ac8782612b34565b877f0000000000000000000000000000000000000000000000000000000000000000612b4a565b90612a11565b975090945050505093509350935093565b600061070283670de0b6b3a764000084612b6b565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161154e5750476115d9565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156115b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d69190613d36565b90505b600f546000036115ea5760006115fa565b600f546115fa9084908390611c1b565b9392505050565b60006116136040830160208401613b31565b1561161f5750826115fa565b610db28484612b91565b6002546001600160801b03168381101561164557611645612832565b60045490849003907f00000000000000000000000000000000000000000000000000000000000000009061167d908390600f0b612ba6565b101561168b5761168b612832565b6004546116d59061106e90600160801b90046001600160801b03166116b8670de0b6b3a764000086613cd7565b600554600160801b90046001600160801b03169190896001612897565b600580546001600160801b03928316600160801b0292169190911790556116fb81611c90565b600280546001600160801b0319166001600160801b039290921691909117905561172485611c90565b60028054601090611746908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061177385611c90565b60048054601090611795908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006117c48361293f565b905061122b816117d388611f46565b6112269084613c9a565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161182d5750476118b8565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b59190613d36565b90505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016119335787341015611922576040516312171d8360e31b815260040160405180910390fd5b61192c8834613bff565b90506119cd565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190613d4f565b91505b816119eb576040516312171d8360e31b815260040160405180910390fd5b600f54600003611a3057611a1f887f0000000000000000000000000000000000000000000000000000000000000000612b91565b600f81905594509250611a69915050565b600f54600090611a42908a9086611c1b565b905080600f6000828254611a569190613ade565b90915550909550909350611a6992505050565b935093915050565b6000611a7c846114ff565b9050600f54600003611aba57611ab2817f0000000000000000000000000000000000000000000000000000000000000000612b91565b600f55611ae0565b6000611ac582612bcc565b905080600f6000828254611ad99190613ade565b9091555050505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611b5b5782341015611b4a576040516312171d8360e31b815260040160405180910390fd5b611b548334613bff565b9050611bf5565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf29190613d4f565b91505b81611c13576040516312171d8360e31b815260040160405180910390fd5b505050505050565b6000826000190484118302158202611c3257600080fd5b5091020490565b6000611c458284613d82565b6107029084613bff565b600254600454600091610737916001600160801b0390911690600f0b612ba6565b6000611c8782611c81858888611c1b565b90612cb5565b95945050505050565b60006001600160801b03821115611cba57604051630f0af95160e11b815260040160405180910390fd5b5090565b6000818311611ccd5782610702565b50919050565b6006546000908190611cf6908490600160801b90046001600160801b03166106ed565b6006546201000090046001600160701b03169250905081811115611e72576000611d208383613bff565b9050611d2f61106e82866114ea565b60068054601090611d51908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611d8a8583612b9190919063ffffffff16565b90506000611db8827f00000000000000000000000000000000000000000000000000000000000000006106ed565b90508060096000828254611dcc9190613ade565b90915550611ddc90508183613bff565b9150611de782611c90565b60028054600090611e029084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611e2f82612d20565b60048054600090611e44908490600f0b613d96565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611e848785612b91565b91506000611eb2837f00000000000000000000000000000000000000000000000000000000000000006106ed565b9050611ede817f00000000000000000000000000000000000000000000000000000000000000006106ed565b91508315611f0157611ef08282613bff565b611efa9084613bff565b9250611f18565b611f0b8282613bff565b611f159084613ade565b92505b86861015611f3b57611f2b838789611c1b565b9250611f38828789611c1b565b91505b509550959350505050565b60006001600160ff1b03821115611cba5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611fb961106e82611f9c670de0b6b3a764000086613cd7565b600554600160801b90046001600160801b031691908a6000612897565b600580546001600160801b03928316600160801b029216919091179055611fdf86611c90565b611fe99082613cee565b600480546001600160801b03928316600160801b02921691909117905561200f84611c90565b6002805460009061202a9084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061205783612d4a565b6004805460009061206c908490600f0b613d96565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061209c85611c90565b600280546010906120be908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080612102846120fc8a888a611c1b565b90612b91565b905061210f888486611c1b565b6121199082613ade565b9050868111156121295786810391505b509695505050505050565b60006001600160701b03821115611cba5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806121a057507f000000000000000000000000000000000000000000000000000000000000000061219e8583613bff565b105b156121ad576121ad612832565b6004549084900390600f0b6121c28482613c9a565b9050836121ce86611f46565b13801561220357507f00000000000000000000000000000000000000000000000000000000000000006122018383612ba6565b105b1561221057612210612832565b600354600160801b90046001600160801b031661225261106e8261223c670de0b6b3a764000088613cd7565b6005546001600160801b031691908c6000612897565b600580546001600160801b0319166001600160801b039290921691909117905561227c8882613bff565b905061228781611c90565b600380546001600160801b03928316600160801b0292169190911790556122ad83611c90565b600280546001600160801b0319166001600160801b03929092169190911790556122d682612d4a565b600480546001600160801b0319166001600160801b03929092169190911790556122ff87611c90565b60028054601090612321908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461236a9061106e906001600160801b03168484612d86565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e754354909182916123d9916001600160801b031690613bff565b9050806000036123ed576001915050610705565b60006123f885612ded565b90508060000361240d57600192505050610705565b60008061241b838589612e89565b9150915080612431576000945050505050610705565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161246d929190613e41565b6040805180830381865af4158015612489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ad9190613eb7565b915091506124cb6124bd82611f46565b6124c690613edb565b612ffd565b9250826124e15760009650505050505050610705565b6124ea82611c90565b600780546000906125059084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061253281611c90565b60078054601090612554908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125b187613195565b6040518263ffffffff1660e01b81526004016125cd9190613ef7565b6040805180830381865af41580156125e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260d9190613f06565b9150915080612623575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161268991613ade565b6126939190613bff565b9050806000036126ab57506000958695509350505050565b60008087116126bb5760006126c6565b6126c6848884611c1b565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126fa576126fa613f36565b6040519080825280601f01601f191660200182016040528015612724576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612745578692505b828152826000602083013e90999098509650505050505050565b600061278087878761277988670de0b6b3a7640000613bff565b87876132cf565b979650505050505050565b6000610db26127cc6127a584670de0b6b3a7640000613bff565b6114d3670de0b6b3a76400006127bb818a6114ea565b6127c59190613bff565b8790612a11565b6127de90670de0b6b3a7640000613ade565b6120fc84670de0b6b3a7640000613bff565b600080612827856127ff611c4f565b6128099190613ade565b600254610f3d908790600160801b90046001600160801b0316613bff565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061285e8987896132f2565b909250905061286d8289613bff565b9750600061287c82888a611c1b565b9050612888818b613bff565b9a989950979650505050505050565b6000826000036128a8575084611c87565b81156128fb576128d96128bb8487613ade565b6128c585876106ed565b6128cf888a6106ed565b6120fc9190613ade565b905060006128e78588611cbe565b9050808210156128f5578091505b50611c87565b82850361290a57506000611c87565b6129356129178487613bff565b6129218587612a11565b61292b888a6106ed565b6120fc9190613bff565b9695505050505050565b6000612967600b6000612953600286611274565b815260200190815260200160002054611f46565b612979600b6000612953600187611274565b6107059190613c9a565b60006129af7f000000000000000000000000000000000000000000000000000000000000000083612a11565b6003546129c591906001600160801b0316613ade565b6002546129db906001600160801b0316846106ed565b101592915050565b600061070582600461238e565b6000612780878787612a0a88670de0b6b3a7640000613bff565b8787613372565b60006107028383670de0b6b3a7640000612b6b565b6000808080612a778786612a708b6114d3612a498c670de0b6b3a7640000613bff565b7f000000000000000000000000000000000000000000000000000000000000000090612a11565b9190612b6b565b9350612aa3847f00000000000000000000000000000000000000000000000000000000000000006106ed565b91506000612ac4612abc89670de0b6b3a7640000613bff565b8a9088612b6b565b9050612af0817f0000000000000000000000000000000000000000000000000000000000000000612a11565b9350612b1c847f00000000000000000000000000000000000000000000000000000000000000006106ed565b612b269084613ade565b915050945094509450949050565b6000818311612b435781610702565b5090919050565b600080612b6284612b5c8a888a612b6b565b906114ea565b905061210f8884865b6000826000190484118302158202612b8257600080fd5b50910281810615159190040190565b600061070283670de0b6b3a764000084611c1b565b600080612bb38484613383565b909250905080612bc557612bc5612832565b5092915050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612c1b575047612ca6565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca39190613d36565b90505b600f546115fa90849083611c1b565b600081600003612cce5750670de0b6b3a7640000610705565b82600003612cde57506000610705565b6000612ce983611f46565b90506000612cfe612cf986611f46565b6133bf565b9050818102612d15670de0b6b3a764000082613f4c565b9050612935816135e5565b600060016001607f1b03821115611cba5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612d68575060016001607f1b0382135b15611cba5760405163a5353be560e01b815260040160405180910390fd5b600080612d9484600061377a565b612d9f84600061377a565b612da99190613c9a565b90506000811315612dc557612dbe8186613ade565b9450612de4565b6000811215612de457612dd781613edb565b612de19086613bff565b94505b50929392505050565b6003546000908190612e08906001600160801b0316846114ea565b9050612e347f000000000000000000000000000000000000000000000000000000000000000082613ade565b6002546001600160801b03161115611ccd576002547f000000000000000000000000000000000000000000000000000000000000000090612e7f9083906001600160801b0316613bff565b6115fa9190613bff565b612e916139b6565b600080612e9d84613195565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612ed89190613ef7565b6040805180830381865af4158015612ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f189190613f06565b9350905082612f2d575060009150611a699050565b6000612f54612f4f8461016001518561014001516106ed90919063ffffffff16565b611f46565b612f74612f4f856101200151866101000151612a1190919063ffffffff16565b612f7e9190613c9a565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af41580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190613f7a565b9350935093509350806130f65750600098975050505050505050565b8684146131275761310684611c90565b600280546001600160801b0319166001600160801b03929092169190911790555b8583146131585761313783612d4a565b600480546001600160801b0319166001600160801b03929092169190911790555b8482146131865761316882611c90565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b61319d613a08565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916132959116613789565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926132c792900416613789565b905292915050565b6000806132e08888888888886137ff565b90925090508061212957612129612832565b60008061333c856114d385817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613332818c6114ea565b6114d39190613bff565b9150613368827f00000000000000000000000000000000000000000000000000000000000000006106ed565b9050935093915050565b6000806132e08888888888886138c7565b60008060008361339286611f46565b61339c9190613c9a565b905060008112156133b45760008092509250506106e6565b946001945092505050565b60008082136133e15760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906134649084901c611f46565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361360057506000919050565b680755bf798b4a1bf1e58212613629576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061293574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611f46565b6000818313612b435781610702565b600080670de0b6b3a764000061379d61070b565b6137a79190613cd7565b90508083116137b75760006137c1565b6137c18184613bff565b91506115fa6137f8670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613cd7565b8390612b91565b60008060006138118989888888613987565b905061382b86611c816138248a8d613ade565b87906106ed565b9850613838858a86611c1b565b98508881101561384f5760008092509250506138bc565b888103670de0b6b3a764000081106138845761387d613876670de0b6b3a7640000896114ea565b8290612cb5565b905061389c565b613899613876670de0b6b3a764000089612b91565b90505b808910156138b2576000809350935050506138bc565b8803925060019150505b965096945050505050565b60008060006138d98989888888613987565b90506138e986611c81898b613ade565b9750878110156139005760008092509250506138bc565b87810361390e818688612b6b565b9050670de0b6b3a7640000811061393b57613934613876670de0b6b3a7640000896114ea565b9050613953565b613950613876670de0b6b3a764000089612b91565b90505b61395d81866114ea565b9050808a1015613975576000809350935050506138bc565b90980398600198509650505050505050565b60006139938585612cb5565b6139ac6139a486611c81868b612a11565b859085612b6b565b6129359190613ade565b6040518061012001604052806139ca613a08565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060008060808587031215613a7f57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613aab57600080fd5b850160608188031215613abd57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561070557610705613ac8565b6001600160a01b038116811461061557600080fd5b600060208284031215613b1857600080fd5b81356115fa81613af1565b801515811461061557600080fd5b600060208284031215613b4357600080fd5b81356115fa81613b23565b6000808335601e19843603018112613b6557600080fd5b83018035915067ffffffffffffffff821115613b8057600080fd5b6020019150368190038213156106e657600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613bf260c083018486613b95565b9998505050505050505050565b8181038181111561070557610705613ac8565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613c4c60e083018486613b95565b9a9950505050505050505050565b6001600160701b03818116838216019080821115612bc557612bc5613ac8565b6001600160801b03818116838216019080821115612bc557612bc5613ac8565b8181036000831280158383131683831282161715612bc557612bc5613ac8565b600060208284031215613ccc57600080fd5b81516115fa81613af1565b808202811582820484141761070557610705613ac8565b6001600160801b03828116828216039080821115612bc557612bc5613ac8565b8082018281126000831280158216821582161715613d2e57613d2e613ac8565b505092915050565b600060208284031215613d4857600080fd5b5051919050565b600060208284031215613d6157600080fd5b81516115fa81613b23565b634e487b7160e01b600052601260045260246000fd5b600082613d9157613d91613d6c565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561070557610705613ac8565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613e55828551613dc3565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613eca57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ef057613ef0613ac8565b5060000390565b61018081016107058284613dc3565b60008060408385031215613f1957600080fd5b825191506020830151613f2b81613b23565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613f5b57613f5b613d6c565b600160ff1b821460001984141615613f7557613f75613ac8565b500590565b60008060008060808587031215613f9057600080fd5b8451935060208501519250604085015191506060850151613abd81613b2356fea2646970667358221220fb7a66d46205e232b0da254da366eea72f07f76b944c3a356b67d4d40b49401f64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004483380380620044838339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613f7f620005046000396000505060005050600061134401526000818161030301528181610332015261035f01526000818160de015281816105a9015261176b01526000818161085601528181610941015281816109d401528181610add0152818161163c0152818161174501528181612474015281816124d701528181612db60152818161327901526132b501526000818161013f015281816108c601528181610ef20152818161150001528181611564015281816115ab0152818161171f01528181611c220152611cb5015260006120790152600081816121d4015261350e0152600081816110b601526121a8015260006134c40152600081816101810152818161091901528181610f13015281816114d001528181611534015281816115cc015261179101526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fee0152612d4c01526000818161029701528181610db101528181610e2c01528181610ea201528181610f6e0152610fa601526000505060008181610be501528181611a2001528181611a6901528181611afb01528181611b7c01528181611d2301528181611da401528181612fb101528181612ffa015281816130ac01526130f50152613f7f6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c3660046139d2565b610066565b60405190815260200160405180910390f35b610041610061366004613a36565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c4f565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c88565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610cae565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610cd4565b9150915060006101ed610da9565b90506101fd818360046001610dd5565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b613a9c565b611453565b61149d565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f000000000000000000000000000000000000000000000000000000000000000089613aaf565b81526020810191909152604001600020546001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006116aa565b90506103287f000000000000000000000000000000000000000000000000000000000000000082613a9c565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f000000000000000000000000000000000000000000000000000000000000000082613aaf565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b0390911690613aaf565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c908390613a9c565b9050600080600061043c8a6116d6565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa15690610476908490600401613b40565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190613b4f565b91506104ca6104c58c611810565b61183e565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b91859101613b40565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190613b4f565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613aaf565b9190611864565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611882565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613b7d565b8e611897565b61063a8961193f565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d9190613a9c565b9b5090508a158061073757506107348c600061194c565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611864565b610770565b60005b905061077f6020850185613b7d565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613ba8565b866107ca60408c018c613bc5565b6040516107dd9796959493929190613c0c565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c4f565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610cd4565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613c60565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063b29e1d1e9060c401606060405180830381865af41580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190613c77565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006109fd8484611961565b1015610a1c5760405163216f4ab160e21b815260040160405180910390fd5b600080610a2e8585858960008061149d565b91509150801580610a3f5750600082125b15610a5d57604051630552b01360e31b815260040160405180910390fd5b610a6685611987565b600280546001600160801b0319166001600160801b0392909216919091179055610a8f846119b1565b600480546001600160801b0319166001600160801b0392909216919091179055610ab883611987565b600280546001600160801b03928316600160801b029216919091179055610b016000807f0000000000000000000000000000000000000000000000000000000000000000611897565b610b196000610b1360208c018c613b7d565b8a611897565b610b2e610b24610da9565b8760046001610dd5565b508a8a8a610b3f6020820182613b7d565b6001600160a01b03167f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af38c858c610b7c6040870160208801613ba8565b87610b8a6040890189613bc5565b604051610b9d9796959493929190613c0c565b60405180910390a2505050505050505050506100916001600055565b600260005403610bdc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14801590610c2f57503415155b15610c4d57604051631574f9f360e01b815260040160405180910390fd5b565b6000610c5e6020830183613b7d565b6001600160a01b031603610c855760405163f0dd15fd60e01b815260040160405180910390fd5b50565b600254600454600091610ca9916001600160801b0390911690600f0b611961565b905090565b600080610cbd878787866119ed565b9050610cc981856116aa565b979650505050505050565b81600080610ce86040850160208601613ba8565b15610d0d57610d0385610cfe6040870187613bc5565b611a04565b9093509050610d25565b5034610d2585610d206040870187613bc5565b611c98565b610d2d611e42565b91508015610da057604051600090339083908381818185875af1925050503d8060008114610d77576040519150601f19603f3d011682016040523d82523d6000602084013e610d7c565b606091505b5050905080610d9e576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b6000610ca9427f0000000000000000000000000000000000000000000000000000000000000000611e55565b600084815260086020526040812060018101546001600160801b0316151580610dfd57504286115b15610e1657600101546001600160801b0316905061144b565b6000806000610e23610da9565b90506000610e517f00000000000000000000000000000000000000000000000000000000000000008b613a9c565b90505b81811015610ec7576000818152600860205260409020600101546001600160801b03168015610e9f576000828152600860205260409020549094506001600160801b03169250610ec7565b507f000000000000000000000000000000000000000000000000000000000000000001610e54565b83600003610f3a57889350610f37610edd610c88565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ed565b92505b50610f4483611987565b6001850180546001600160801b0319166001600160801b0392909216919091179055610f9a610f937f00000000000000000000000000000000000000000000000000000000000000008b613aaf565b8a84611e6b565b610fd889610fd2610fcb7f000000000000000000000000000000000000000000000000000000000000000083613a9c565b4290611fa9565b84611e6b565b610fe188611fb8565b50600090506008816110137f00000000000000000000000000000000000000000000000000000000000000008d613aaf565b815260208101919091526040016000908120600101546001600160801b0316915061103f60028c61215c565b6000818152600b60205260408120549192508c8c8315611185576001925060008061106e86898d866000612191565b9150915080600960008282546110849190613a9c565b909155506110a090508660008461109a81611810565b88612260565b6110aa8183613a9c565b91506110da86838a8e877f00000000000000000000000000000000000000000000000000000000000000006123da565b91506110ee6110e9838561241e565b612433565b6006805460029061110f9084906201000090046001600160701b0316613ca5565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061113c82611987565b6006805460109061115e908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061119260018461215c565b6000818152600b602052604090205490915080156112a157600194506000806111bf838b8f886001612191565b9150915080600960008282546111d59190613a9c565b909155506111f19050836000846111eb81611810565b8a61245d565b6111fb8183613aaf565b915061120a6110e9838761241e565b6006805460029061122b9084906201000090046001600160701b0316613ca5565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061125882611987565b6006805460109061127a908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156112db576112cd6112b387611810565b6112bc83611810565b6112c69190613ce5565b600061264e565b8e6112d8848261268d565b50505b60006112e684612887565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c49190613d05565b90506001600160a01b03811615611439576114365a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906129d3565b50505b509b9d50505050505050505050505050505b949350505050565b600061147b600b600061146760028661215c565b815260200190815260200160002054611810565b61148d600b600061146760018761215c565b6114979190613ce5565b92915050565b6000806000806114ad8a8a612a60565b91509150806114c45760008093509350505061169f565b6000611524838a6114fd7f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613aaf565b8b7f0000000000000000000000000000000000000000000000000000000000000000612a9c565b5090506000611588848b846115617f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613aaf565b8d7f0000000000000000000000000000000000000000000000000000000000000000612b59565b509050811580611596575080155b156115a2575060009050805b60006115f0858c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ed565b90506115fe83838c84612c17565b5090935060009050611610848f613a9c565b905060006116318b8b61162287611810565b61162c908e613d22565b612c63565b90508b6116666116617f000000000000000000000000000000000000000000000000000000000000000083612cca565b611810565b61166f83611810565b61167c611661868561241e565b6116869190613ce5565b6116909190613ce5565b60019950995050505050505050505b965096945050505050565b60006100916116be84846301e13380612cdb565b6116d085670de0b6b3a7640000613aaf565b90611882565b6116de61390d565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916117d69116612d01565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261180892900416612d01565b905292915050565b60006001600160ff1b0382111561183a5760405163396ea70160e11b815260040160405180910390fd5b5090565b61184781612d70565b610c8557604051635044b7f560e01b815260040160405180910390fd5b600082600019048411830215820261187b57600080fd5b5091020490565b600061009183670de0b6b3a764000084611864565b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906118c9908490613a9c565b90915550506000838152600b6020526040812080548392906118ec908490613a9c565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600061149782600461268d565b600081831361195b5782610091565b50919050565b60008061196e8484612a60565b90925090508061198057611980612f08565b5092915050565b60006001600160801b0382111561183a57604051630f0af95160e11b815260040160405180910390fd5b600060016001607f1b03198212806119cf575060016001607f1b0382135b1561183a5760405163a5353be560e01b815260040160405180910390fd5b6000610078826119fe858888611864565b90612f21565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a54575047611adf565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190613b4f565b90505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611b5a5787341015611b49576040516312171d8360e31b815260040160405180910390fd5b611b538834613aaf565b9050611bf4565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190613d4a565b91505b81611c12576040516312171d8360e31b815260040160405180910390fd5b600f54600003611c5757611c46887f0000000000000000000000000000000000000000000000000000000000000000611882565b600f81905594509250611c90915050565b600f54600090611c69908a9086611864565b905080600f6000828254611c7d9190613a9c565b90915550909550909350611c9092505050565b935093915050565b6000611ca384612f96565b9050600f54600003611ce157611cd9817f0000000000000000000000000000000000000000000000000000000000000000611882565b600f55611d07565b6000611cec82613091565b905080600f6000828254611d009190613a9c565b9091555050505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611d825782341015611d71576040516312171d8360e31b815260040160405180910390fd5b611d7b8334613aaf565b9050611e1c565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613d4a565b91505b81611e3a576040516312171d8360e31b815260040160405180910390fd5b505050505050565b6000610ca9670de0b6b3a7640000612f96565b6000611e618284613d7d565b6100919084613aaf565b600083815260086020526040902054600160801b90046001600160801b0316808303611e975750505050565b6000848152600860205260408120546001600160801b031690819003611ef157611ec083611987565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611f6f565b611f42611f3d670de0b6b3a7640000611f0a8886613aaf565b611f149190613c60565b85670de0b6b3a7640000611f28878a613aaf565b611f329190613c60565b85929190600161317a565b611987565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b611f7884611987565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600081831161195b5782610091565b6006546000908190611fdb908490600160801b90046001600160801b031661241e565b6006546201000090046001600160701b031692509050818111156121575760006120058383613aaf565b9050612014611f3d8286613218565b60068054601090612036908490600160801b90046001600160801b0316613d91565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061206f858361188290919063ffffffff16565b9050600061209d827f000000000000000000000000000000000000000000000000000000000000000061241e565b905080600960008282546120b19190613a9c565b909155506120c190508183613aaf565b91506120cc82611987565b600280546000906120e79084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506121148261322d565b60048054600090612129908490600f0b613db1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156121865760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60008061219e8785611882565b915060006121cc837f000000000000000000000000000000000000000000000000000000000000000061241e565b90506121f8817f000000000000000000000000000000000000000000000000000000000000000061241e565b9150831561221b5761220a8282613aaf565b6122149084613aaf565b9250612232565b6122258282613aaf565b61222f9084613a9c565b92505b8686101561225557612245838789611864565b9250612252828789611864565b91505b509550959350505050565b600454600160801b90046001600160801b03166122a9611f3d8261228c670de0b6b3a764000086613c60565b600554600160801b90046001600160801b031691908a600061317a565b600580546001600160801b03928316600160801b0292169190911790556122cf86611987565b6122d99082613d91565b600480546001600160801b03928316600160801b0292169190911790556122ff84611987565b6002805460009061231a9084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612347836119b1565b6004805460009061235c908490600f0b613db1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061238c85611987565b600280546010906123ae908490600160801b90046001600160801b0316613d91565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806123ec846116d08a888a611864565b90506123f9888486611864565b6124039082613a9c565b9050868111156124135786810391505b509695505050505050565b60006100918383670de0b6b3a7640000611864565b60006001600160701b0382111561183a5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061249f57507f000000000000000000000000000000000000000000000000000000000000000061249d8583613aaf565b105b156124ac576124ac612f08565b6004549084900390600f0b6124c18482613ce5565b9050836124cd86611810565b13801561250257507f00000000000000000000000000000000000000000000000000000000000000006125008383611961565b105b1561250f5761250f612f08565b600354600160801b90046001600160801b0316612551611f3d8261253b670de0b6b3a764000088613c60565b6005546001600160801b031691908c600061317a565b600580546001600160801b0319166001600160801b039290921691909117905561257b8882613aaf565b905061258681611987565b600380546001600160801b03928316600160801b0292169190911790556125ac83611987565b600280546001600160801b0319166001600160801b03929092169190911790556125d5826119b1565b600480546001600160801b0319166001600160801b03929092169190911790556125fe87611987565b60028054601090612620908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461266990611f3d906001600160801b03168484612c63565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e754354909182916126d8916001600160801b031690613aaf565b9050806000036126ec576001915050611497565b60006126f785613257565b90508060000361270c57600192505050611497565b60008061271a8385896132f3565b9150915080612730576000945050505050611497565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161276c929190613dde565b6040805180830381865af4158015612788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ac9190613e54565b915091506127ca6127bc82611810565b6127c590613e78565b612d70565b9250826127e05760009650505050505050611497565b6127e982611987565b600780546000906128049084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061283181611987565b60078054601090612853908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6128b0876116d6565b6040518263ffffffff1660e01b81526004016128cc9190613b40565b6040805180830381865af41580156128e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290c9190613e94565b9150915080612922575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161298891613a9c565b6129929190613aaf565b9050806000036129aa57506000958695509350505050565b60008087116129ba5760006129c5565b6129c5848884611864565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156129f9576129f9613ec4565b6040519080825280601f01601f191660200182016040528015612a23576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612a44578692505b828152826000602083013e9093509150505b9550959350505050565b600080600083612a6f86611810565b612a799190613ce5565b90506000811215612a91576000809250925050610da2565b946001945092505050565b6000806000612aae8888888888613462565b90506000612ad9670de0b6b3a7640000612ac88888613218565b612ad29190613a9c565b8390611882565b9050670de0b6b3a76400008110612b0d57612b06612aff670de0b6b3a764000089611882565b8290612f21565b9050612b25565b612b22612aff670de0b6b3a764000089613218565b90505b612b2f8186611882565b905088811015612b4757600080935093505050612a56565b97909703976001975095505050505050565b6000806000612b6b8989888888613491565b9050612b85866119fe612b7e8a8d613a9c565b879061241e565b9850612b92858a86611864565b985088811015612ba957600080925092505061169f565b888103670de0b6b3a76400008110612bd757612bd0612aff670de0b6b3a764000089613218565b9050612bef565b612bec612aff670de0b6b3a764000089611882565b90505b80891015612c055760008093509350505061169f565b90970398600198509650505050505050565b6000806000806000612c2a8987896134b6565b9092509050612c398289613aaf565b97506000612c4882888a611864565b9050612c54818b613aaf565b9a989950979650505050505050565b600080612c7184600061353c565b612c7c84600061353c565b612c869190613ce5565b90506000811315612ca257612c9b8186613a9c565b9450612cc1565b6000811215612cc157612cb481613e78565b612cbe9086613aaf565b94505b50929392505050565b60006100918383670de0b6b3a76400005b6000826000190484118302158202612cf257600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612d15610da9565b612d1f9190613c60565b9050808311612d2f576000612d39565b612d398184613aaf565b9150610091612ad2670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613c60565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4d9190613eda565b935093509350935080612e695750600098975050505050505050565b868414612e9a57612e7984611987565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612ecb57612eaa836119b1565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612ef957612edb82611987565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612f3a5750670de0b6b3a7640000611497565b82600003612f4a57506000611497565b6000612f5583611810565b90506000612f6a612f6586611810565b613552565b9050818102612f81670de0b6b3a764000082613f1b565b9050612f8c81613778565b9695505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612fe5575047613070565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306d9190613b4f565b90505b600f54600003613081576000610091565b600f546100919084908390611864565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016130e057504761316b565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131689190613b4f565b90505b600f5461009190849083611864565b60008260000361318b575084610078565b81156131de576131bc61319e8487613a9c565b6131a8858761241e565b6131b2888a61241e565b6116d09190613a9c565b905060006131ca8588611fa9565b9050808210156131d8578091505b50610078565b8285036131ed57506000610078565b6100756131fa8487613aaf565b6132048587612cca565b61320e888a61241e565b6116d09190613aaf565b600061009183670de0b6b3a764000084612cdb565b600060016001607f1b0382111561183a5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190613272906001600160801b031684613218565b905061329e7f000000000000000000000000000000000000000000000000000000000000000082613a9c565b6002546001600160801b0316111561195b576002547f0000000000000000000000000000000000000000000000000000000000000000906132e99083906001600160801b0316613aaf565b6100919190613aaf565b6132fb61396e565b600080613307846116d6565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016133429190613b40565b6040805180830381865af415801561335e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133829190613e94565b9350905082613397575060009150611c909050565b60006133b961166184610160015185610140015161241e90919063ffffffff16565b6133d9611661856101200151866101000151612cca90919063ffffffff16565b6133e39190613ce5565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b600061346e8585612f21565b61348761347f866119fe868b61241e565b859085611864565b6100759190613a9c565b600061349d8585612f21565b6134876134ae866119fe868b612cca565b859085612cdb565b6000806135068561350085817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006134f6818c613218565b6135009190613aaf565b90612cca565b9150613532827f000000000000000000000000000000000000000000000000000000000000000061241e565b9050935093915050565b600081831361354b5781610091565b5090919050565b60008082136135745760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906135f79084901c611810565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361379357506000919050565b680755bf798b4a1bf1e582126137bc576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612f8c74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611810565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610120016040528061398261390d565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561195b57600080fd5b600080600080600060a086880312156139ea57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115613a1d57600080fd5b613a29888289016139c0565b9150509295509295909350565b600080600060608486031215613a4b57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613a7057600080fd5b613a7c868287016139c0565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561149757611497613a86565b8181038181111561149757611497613a86565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b61018081016114978284613ac2565b600060208284031215613b6157600080fd5b5051919050565b6001600160a01b0381168114610c8557600080fd5b600060208284031215613b8f57600080fd5b813561009181613b68565b8015158114610c8557600080fd5b600060208284031215613bba57600080fd5b813561009181613b9a565b6000808335601e19843603018112613bdc57600080fd5b83018035915067ffffffffffffffff821115613bf757600080fd5b602001915036819003821315610da257600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761149757611497613a86565b600080600060608486031215613c8c57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561198057611980613a86565b6001600160801b0381811683821601908082111561198057611980613a86565b818103600083128015838313168383128216171561198057611980613a86565b600060208284031215613d1757600080fd5b815161009181613b68565b8082018281126000831280158216821582161715613d4257613d42613a86565b505092915050565b600060208284031215613d5c57600080fd5b815161009181613b9a565b634e487b7160e01b600052601260045260246000fd5b600082613d8c57613d8c613d67565b500690565b6001600160801b0382811682821603908082111561198057611980613a86565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561149757611497613a86565b60006102a082019050613df2828551613ac2565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613e6757600080fd5b505080516020909101519092909150565b6000600160ff1b8201613e8d57613e8d613a86565b5060000390565b60008060408385031215613ea757600080fd5b825191506020830151613eb981613b9a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613ef057600080fd5b8451935060208501519250604085015191506060850151613f1081613b9a565b939692955090935050565b600082613f2a57613f2a613d67565b600160ff1b821460001984141615613f4457613f44613a86565b50059056fea2646970667358221220541f9e554db40562ff6b861912e73df93593ecf212647e656b5b9f9472f1664364736f6c634300081600336102806040523480156200001257600080fd5b5060405162003661380380620036618339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161322d62000434600039600050506000505060006109c10152600050506000818161026d015261205401526000818161189a015281816118fd01528181611c3901528181611c7501528181611e6d015261202e01526000818161056f01526120080152600061146f015260006115ca015260008181610733015261159e01526000505060008181610590015261207a01526000818161066b01526127cc0152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb0152610623015260005050600081816110ef015281816111380152818161235d015281816123a6015281816124810152818161252d0152818161261901526126c5015261322d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612cba565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612d11565b6100b5565b005b610059610095366004612cba565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612d48565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612d73565b61017160408c018c612d90565b60405161018396959493929190612e00565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612e50565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612d48565b88610ee8565b60006103066102fd6020870187612d48565b88848989610ad0565b90945090506103158188612e7a565b9250600061032283610f88565b5090506103326020870187612d48565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612d73565b8a888e80604001906103829190612d90565b604051610396989796959493929190612e8d565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612d48565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f00000000000000000000000000000000000000000000000000000000000000006111d6565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612ed5565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a6111ec565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061120d565b92505b506105c18361122d565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612e7a565b8a8461125b565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612ed5565b4290611399565b8461125b565b61065e886113ae565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612e7a565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c611552565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d866000611587565b9150915080600960008282546107019190612ed5565b9091555061071d90508660008461071781611656565b88611680565b6107278183612ed5565b915061075786838a8e877f00000000000000000000000000000000000000000000000000000000000000006117fa565b915061076b6107668385611844565b611859565b6006805460029061078c9084906201000090046001600160701b0316612ee8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261122d565b600680546010906107db908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f600184611552565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f886001611587565b9150915080600960008282546108529190612ed5565b9091555061086e90508360008461086881611656565b8a611883565b6108788183612e7a565b91506108876107668387611844565b600680546002906108a89084906201000090046001600160701b0316612ee8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261122d565b600680546010906108f7908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a61093087611656565b61093983611656565b6109439190612f28565b6000611a74565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612f48565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611ab3565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611b3e565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611b4b565b9050610b568361122d565b610b609083612f65565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161122d565b60078054601090610bab908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611b69565b9350610be68684611c02565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612e7a565b905080600003610c72576001915050610e08565b6000610c7d85611c17565b905080600003610c9257600192505050610e08565b600080610ca0838589611cb3565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190613003565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190613079565b91509150610d50610d4282611656565b610d4b9061309d565b611e27565b925082610d665760009650505050505050610e08565b610d6f8261122d565b60078054600090610d8a9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161122d565b60078054601090610dd9908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612e7a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612ed5565b90915550506000838152600b602052604081208054839290610f3d908490612ed5565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611fbf565b6040518263ffffffff1660e01b8152600401610fcd91906130b9565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d91906130c8565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612ed5565b6110939190612e7a565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611b4b565b976001975095505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016111235750476111ae565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab91906130f8565b90505b600f546000036111bf5760006111cf565b600f546111cf9084908390611b4b565b9392505050565b60006111e28284612e50565b6111cf9084612e7a565b600254600454600091610421916001600160801b0390911690600f0b6120f9565b60006112248261121e858888611b4b565b9061211f565b95945050505050565b60006001600160801b0382111561125757604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036112875750505050565b6000848152600860205260408120546001600160801b0316908190036112e1576112b08361122d565b600086815260086020526040902080546001600160801b0319166001600160801b039290921691909117905561135f565b61133261132d670de0b6b3a76400006112fa8886612e7a565b6113049190613111565b85670de0b6b3a7640000611318878a612e7a565b6113229190613111565b859291906001612194565b61122d565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6113688461122d565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116113a857826111cf565b50919050565b60065460009081906113d1908490600160801b90046001600160801b0316611844565b6006546201000090046001600160701b0316925090508181111561154d5760006113fb8383612e7a565b905061140a61132d8286612232565b6006805460109061142c908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611465858361224790919063ffffffff16565b90506000611493827f0000000000000000000000000000000000000000000000000000000000000000611844565b905080600960008282546114a79190612ed5565b909155506114b790508183612e7a565b91506114c28261122d565b600280546000906114dd9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061150a8261225c565b6004805460009061151f908490600f0b613128565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b0382111561157c5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806115948785612247565b915060006115c2837f0000000000000000000000000000000000000000000000000000000000000000611844565b90506115ee817f0000000000000000000000000000000000000000000000000000000000000000611844565b91508315611611576116008282612e7a565b61160a9084612e7a565b9250611628565b61161b8282612e7a565b6116259084612ed5565b92505b8686101561164b5761163b838789611b4b565b9250611648828789611b4b565b91505b509550959350505050565b60006001600160ff1b038211156112575760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166116c961132d826116ac670de0b6b3a764000086613111565b600554600160801b90046001600160801b031691908a6000612194565b600580546001600160801b03928316600160801b0292169190911790556116ef8661122d565b6116f99082612f65565b600480546001600160801b03928316600160801b02921691909117905561171f8461122d565b6002805460009061173a9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061176783612286565b6004805460009061177c908490600f0b613128565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506117ac8561122d565b600280546010906117ce908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806118128461180c8a888a611b4b565b90612247565b905061181f888486611b4b565b6118299082612ed5565b9050868111156118395786810391505b509695505050505050565b60006111cf8383670de0b6b3a7640000611b4b565b60006001600160701b038211156112575760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806118c557507f00000000000000000000000000000000000000000000000000000000000000006118c38583612e7a565b105b156118d2576118d26122c2565b6004549084900390600f0b6118e78482612f28565b9050836118f386611656565b13801561192857507f000000000000000000000000000000000000000000000000000000000000000061192683836120f9565b105b15611935576119356122c2565b600354600160801b90046001600160801b031661197761132d82611961670de0b6b3a764000088613111565b6005546001600160801b031691908c6000612194565b600580546001600160801b0319166001600160801b03929092169190911790556119a18882612e7a565b90506119ac8161122d565b600380546001600160801b03928316600160801b0292169190911790556119d28361122d565b600280546001600160801b0319166001600160801b03929092169190911790556119fb82612286565b600480546001600160801b0319166001600160801b0392909216919091179055611a248761122d565b60028054601090611a46908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a8f9061132d906001600160801b031684846122db565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611ad957611ad9613155565b6040519080825280601f01601f191660200182016040528015611b03576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611b24578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611b6257600080fd5b5091020490565b600080611b768585611844565b9050611b8181612342565b945084600003611b955760009150506111cf565b849150611ba86040840160208501612d73565b15611bd757611bd085611bbe6020860186612d48565b611bcb6040870187612d90565b61242b565b9150611bfa565b611bfa85611be86020860186612d48565b611bf56040870187612d90565b6125c5565b509392505050565b60006111cf8383670de0b6b3a764000061275b565b6003546000908190611c32906001600160801b031684612232565b9050611c5e7f000000000000000000000000000000000000000000000000000000000000000082612ed5565b6002546001600160801b031611156113a8576002547f000000000000000000000000000000000000000000000000000000000000000090611ca99083906001600160801b0316612e7a565b6111cf9190612e7a565b611cbb612c07565b600080611cc784611fbf565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611d0291906130b9565b6040805180830381865af4158015611d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4291906130c8565b9350905082611d575750600091506100ad9050565b6000611d7e611d7984610160015185610140015161184490919063ffffffff16565b611656565b611d9e611d79856101200151866101000151611c0290919063ffffffff16565b611da89190612f28565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = AerodromeLp_AERO_USDC_HyperdriveContractFunctions(aerodromelp_aero_usdc_hyperdrive_abi, self.w3, address)  # type: ignore
        self.events = AerodromeLp_AERO_USDC_HyperdriveContractEvents(aerodromelp_aero_usdc_hyperdrive_abi, self.w3, address)  # type: ignore
        self.errors = AerodromeLp_AERO_USDC_HyperdriveContractErrors()

    events: AerodromeLp_AERO_USDC_HyperdriveContractEvents

    errors: AerodromeLp_AERO_USDC_HyperdriveContractErrors = (
        AerodromeLp_AERO_USDC_HyperdriveContractErrors()
    )

    functions: AerodromeLp_AERO_USDC_HyperdriveContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        AerodromeLpConversions: AerodromeLpConversionsContract

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "AerodromeLpConversions": "__$2547229b0150c03f930e3c2db66c5de7b3$__",
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup[
                    "AerodromeLpConversions"
                ],
                link_references.AerodromeLpConversions.address[2:].lower(),
            )

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = AerodromeLp_AERO_USDC_HyperdriveContractFunctions(
            aerodromelp_aero_usdc_hyperdrive_abi, w3, None
        )
        contract.errors = AerodromeLp_AERO_USDC_HyperdriveContractErrors()

        return contract
