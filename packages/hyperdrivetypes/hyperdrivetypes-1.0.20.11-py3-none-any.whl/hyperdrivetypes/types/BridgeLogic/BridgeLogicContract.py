"""A web3.py Contract class for the BridgeLogic contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import PypechainBaseContractErrors, combomethod_typed
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, TxReceipt

from .BridgeLogicTypes import (
    BackUnbackedEvent,
    MintUnbackedEvent,
    ReserveDataUpdatedEvent,
    ReserveUsedAsCollateralEnabledEvent,
)

structs = {}

bridgelogic_abi: ABI = cast(
    ABI,
    [
        {
            "type": "event",
            "name": "BackUnbacked",
            "inputs": [
                {
                    "name": "reserve",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "backer",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "fee",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MintUnbacked",
            "inputs": [
                {
                    "name": "reserve",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "user",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "onBehalfOf",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "referralCode",
                    "type": "uint16",
                    "indexed": True,
                    "internalType": "uint16",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ReserveDataUpdated",
            "inputs": [
                {
                    "name": "reserve",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "liquidityRate",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "stableBorrowRate",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "variableBorrowRate",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "liquidityIndex",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "variableBorrowIndex",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ReserveUsedAsCollateralEnabled",
            "inputs": [
                {
                    "name": "reserve",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "user",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
    ],
)


class BridgeLogicContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the BridgeLogic contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class BridgeLogicContractFunctions(ContractFunctions):
    """ContractFunctions for the BridgeLogic contract."""

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)


class BridgeLogicBackUnbackedContractEvent(ContractEvent):
    """ContractEvent for BackUnbacked."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[BackUnbackedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            BackUnbackedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=BackUnbackedEvent.BackUnbackedEventArgs(
                    reserve=abi_event.args["reserve"],
                    backer=abi_event.args["backer"],
                    amount=abi_event.args["amount"],
                    fee=abi_event.args["fee"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[BackUnbackedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            BackUnbackedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=BackUnbackedEvent.BackUnbackedEventArgs(
                    reserve=abi_event.args["reserve"],
                    backer=abi_event.args["backer"],
                    amount=abi_event.args["amount"],
                    fee=abi_event.args["fee"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class BridgeLogicMintUnbackedContractEvent(ContractEvent):
    """ContractEvent for MintUnbacked."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MintUnbackedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MintUnbackedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MintUnbackedEvent.MintUnbackedEventArgs(
                    reserve=abi_event.args["reserve"],
                    user=abi_event.args["user"],
                    onBehalfOf=abi_event.args["onBehalfOf"],
                    amount=abi_event.args["amount"],
                    referralCode=abi_event.args["referralCode"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MintUnbackedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MintUnbackedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MintUnbackedEvent.MintUnbackedEventArgs(
                    reserve=abi_event.args["reserve"],
                    user=abi_event.args["user"],
                    onBehalfOf=abi_event.args["onBehalfOf"],
                    amount=abi_event.args["amount"],
                    referralCode=abi_event.args["referralCode"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class BridgeLogicReserveDataUpdatedContractEvent(ContractEvent):
    """ContractEvent for ReserveDataUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ReserveDataUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveDataUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveDataUpdatedEvent.ReserveDataUpdatedEventArgs(
                    reserve=abi_event.args["reserve"],
                    liquidityRate=abi_event.args["liquidityRate"],
                    stableBorrowRate=abi_event.args["stableBorrowRate"],
                    variableBorrowRate=abi_event.args["variableBorrowRate"],
                    liquidityIndex=abi_event.args["liquidityIndex"],
                    variableBorrowIndex=abi_event.args["variableBorrowIndex"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ReserveDataUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveDataUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveDataUpdatedEvent.ReserveDataUpdatedEventArgs(
                    reserve=abi_event.args["reserve"],
                    liquidityRate=abi_event.args["liquidityRate"],
                    stableBorrowRate=abi_event.args["stableBorrowRate"],
                    variableBorrowRate=abi_event.args["variableBorrowRate"],
                    liquidityIndex=abi_event.args["liquidityIndex"],
                    variableBorrowIndex=abi_event.args["variableBorrowIndex"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class BridgeLogicReserveUsedAsCollateralEnabledContractEvent(ContractEvent):
    """ContractEvent for ReserveUsedAsCollateralEnabled."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ReserveUsedAsCollateralEnabledEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveUsedAsCollateralEnabledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveUsedAsCollateralEnabledEvent.ReserveUsedAsCollateralEnabledEventArgs(
                    reserve=abi_event.args["reserve"],
                    user=abi_event.args["user"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ReserveUsedAsCollateralEnabledEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveUsedAsCollateralEnabledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveUsedAsCollateralEnabledEvent.ReserveUsedAsCollateralEnabledEventArgs(
                    reserve=abi_event.args["reserve"],
                    user=abi_event.args["user"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class BridgeLogicContractEvents(ContractEvents):
    """ContractEvents for the BridgeLogic contract."""

    BackUnbacked: Type[BridgeLogicBackUnbackedContractEvent]

    MintUnbacked: Type[BridgeLogicMintUnbackedContractEvent]

    ReserveDataUpdated: Type[BridgeLogicReserveDataUpdatedContractEvent]

    ReserveUsedAsCollateralEnabled: Type[
        BridgeLogicReserveUsedAsCollateralEnabledContractEvent
    ]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.BackUnbacked = cast(
            Type[BridgeLogicBackUnbackedContractEvent],
            BridgeLogicBackUnbackedContractEvent.factory(
                "BackUnbacked",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="BackUnbacked",
            ),
        )
        self.MintUnbacked = cast(
            Type[BridgeLogicMintUnbackedContractEvent],
            BridgeLogicMintUnbackedContractEvent.factory(
                "MintUnbacked",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MintUnbacked",
            ),
        )
        self.ReserveDataUpdated = cast(
            Type[BridgeLogicReserveDataUpdatedContractEvent],
            BridgeLogicReserveDataUpdatedContractEvent.factory(
                "ReserveDataUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ReserveDataUpdated",
            ),
        )
        self.ReserveUsedAsCollateralEnabled = cast(
            Type[BridgeLogicReserveUsedAsCollateralEnabledContractEvent],
            BridgeLogicReserveUsedAsCollateralEnabledContractEvent.factory(
                "ReserveUsedAsCollateralEnabled",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ReserveUsedAsCollateralEnabled",
            ),
        )


class BridgeLogicContract(Contract):
    """A web3.py Contract class for the BridgeLogic contract."""

    abi: ABI = bridgelogic_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x611d6561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630413c86f146100455780638e74324814610067575b600080fd5b81801561005157600080fd5b50610065610060366004611909565b610099565b005b81801561007357600080fd5b50610087610082366004611982565b610326565b60405190815260200160405180910390f35b6001600160a01b0384166000908152602088905260408120906100bb8261057e565b90506100c7828261074e565b6100d3818387876107a6565b6101c08101515160b081901c640fffffffff169060301c60ff1660006100f888610a6c565b60088601805460109061011c908490600160801b90046001600160801b03166119e0565b92506101000a8154816001600160801b0302191690836001600160801b0316021790556001600160801b0316905081600a6101579190611aeb565b6101619084611af7565b811115604051806040016040528060028152602001611a9960f11b815250906101a65760405162461bcd60e51b815260040161019d9190611b0e565b60405180910390fd5b506101b585858b600080610ad9565b6101e084015161010085015160405163b3f1c93d60e01b81523360048201526001600160a01b038a81166024830152604482018c90526064820192909252600092919091169063b3f1c93d906084016020604051808303816000875af1158015610223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190611b5d565b905080156102c8576102668d8d8d886101c00151896101e00151610dfa565b156102c8576003860154610288908c90600160a81b900461ffff166001610fed565b876001600160a01b03168a6001600160a01b03167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a35b60408051338152602081018b905261ffff8916916001600160a01b03808c1692908e16917ff25af37b3d3ec226063dc9bdc103ece7eb110a50f340fe854bb7bc1b0676d7d0910160405180910390a450505050505050505050505050565b6000806103328761057e565b905061033e878261074e565b6008870154600090600160801b90046001600160801b03168610610376576008880154600160801b90046001600160801b0316610378565b855b90506000610386868661104f565b905060006103948288611b7f565b905060006103a28885611b92565b61010086015160088d0154919250610442916103c9916001600160801b0390911690611075565b866101e001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104309190611ba5565b61043a9190611b92565b8c90846110b8565b610100860181905261045e9061045990859061112d565b610a6c565b60088c01805460009061047b9084906001600160801b03166119e0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506104a884610a6c565b60088c0180546010906104cc908490600160801b90046001600160801b0316611bbe565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061050a858b8360008f610ad990949392919063ffffffff16565b6101e0850151610527906001600160a01b038c169033908461116a565b60408051858152602081018a905233916001600160a01b038d16917f281596e92b2d974beb7d4f124df30a0b39067b096893e95011ce4bdad798b759910160405180910390a3509193505050505b95945050505050565b610586611844565b61058e611844565b60408051602081018252845481526101c0830181905251901c61ffff166101a082015260018301546001600160801b03808216610100840181905260e084015260028501548082166101408501819052610120850152600160801b928390048216610160850152829004166101808301526004808501546001600160a01b039081166101e085015260058601548116610200850152600686015416610220840181905260038601549290920464ffffffffff166102408401526040805163b1bf962d60e01b8152905163b1bf962d928281019260209291908290030181865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a39190611ba5565b81602001818152508160000181815250508061020001516001600160a01b031663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b9190611bde565b64ffffffffff166102608501526060840181905260808401829052604084019290925260c083015260a082015292915050565b600382015464ffffffffff428116600160801b909204160361076e575050565b610778828261120c565b61078282826112eb565b50600301805464ffffffffff60801b1916600160801b4264ffffffffff1602179055565b604080518082019091526002815261191b60f11b6020820152826107dd5760405162461bcd60e51b815260040161019d9190611b0e565b506000806000610834876101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b94505050925092508260405180604001604052806002815260200161323760f01b815250906108765760405162461bcd60e51b815260040161019d9190611b0e565b50604080518082019091526002815261323960f01b602082015281156108af5760405162461bcd60e51b815260040161019d9190611b0e565b50604080518082019091526002815261064760f31b602082015282156108e85760405162461bcd60e51b815260040161019d9190611b0e565b50866101e001516001600160a01b0316846001600160a01b03161415604051806040016040528060028152602001610e4d60f21b8152509061093d5760405162461bcd60e51b815260040161019d9190611b0e565b506101c08701515160741c640fffffffff16801580610a2857506101c08801515160301c60ff1661096f90600a611aeb565b6109799082611af7565b86610a1b8a61010001518a60080160009054906101000a90046001600160801b03166001600160801b03168c6101e001516001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190611ba5565b610a159190611b92565b90611075565b610a259190611b92565b11155b60405180604001604052806002815260200161353160f01b81525090610a615760405162461bcd60e51b815260040161019d9190611b0e565b505050505050505050565b60006001600160801b03821115610ad55760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161019d565b5090565b610b046040518060800160405280600081526020016000815260200160008152602001600081525090565b6101408501516020860151610b1891611075565b60608281019182526007880154604080516101408101825260088b01546001600160801b03600160801b918290048116835260208084018b90528385018a905260c08d810151978501979097529651608084015260a0808d0151908401526101a08c0151958301959095526001600160a01b038a811660e0840152835196870184528c5496879052600160fc1b909616151561010083015260098c01540490931661012084015251637b424dcf60e11b815292169163f6849b9e91610bdf91600401611c29565b606060405180830381865afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611cac565b60408401526020830152808252610c3690610a6c565b6001870180546001600160801b03928316600160801b0292169190911790556020810151610c6390610a6c565b6003870180546001600160801b0319166001600160801b03929092169190911790556040810151610c9390610a6c565b6002870180546001600160801b03928316600160801b029216919091179055604080516020810190915286548152610cd19051600160fc1b16151590565b15610d86578215610d2e57610ce583610a6c565b600987018054601090610d09908490600160801b90046001600160801b03166119e0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b8115610d8657610d3d82610a6c565b600987018054601090610d61908490600160801b90046001600160801b0316611bbe565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b80516020808301516040808501516101008a01516101408b015183519687529486019390935290840152606083015260808201526001600160a01b038516907f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a9060a00160405180910390a2505050505050565b815160009060d41c64ffffffffff1615610fd7576000826001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e729190611cda565b6001600160a01b0316630542975c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed39190611cda565b9050806001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190611cda565b604051632474521560e21b81527fd1d2cf869016112a9af1107bcf43c3759daf22cf734aad47d0c9c726e33bc78260048201523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190611b5d565b610fd5576000915050610575565b505b610fe386868686611453565b9695505050505050565b6040805180820190915260028152610dcd60f21b6020820152608083106110275760405162461bcd60e51b815260040161019d9190611b0e565b50600182811b81011b811561104157835481178455611049565b835481191684555b50505050565b60008115611388198390048411151761106757600080fd5b506127109102611388010490565b600081156b019d971e4fe8401e74000000198390048411151761109757600080fd5b50676765c793fa10079d601b1b91026b019d971e4fe8401e74000000010490565b600183015460009081906110f6906001600160801b0316676765c793fa10079d601b1b610a0b6110e7886114f3565b6110f0886114f3565b9061112d565b905061110181610a6c565b6001860180546001600160801b0319166001600160801b039290921691909117905590505b9392505050565b60008115676765c793fa10079d601b1b6002840419048411171561115057600080fd5b50676765c793fa10079d601b1b9190910260028204010490565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af16111af573d6000803e3d6000fd5b506111b98561150e565b6112055760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604482015260640161019d565b5050505050565b6101608101511561127b57600061122d8261016001518361024001516115b6565b90506112468260e001518261107590919063ffffffff16565b610100830181905261125790610a6c565b6001840180546001600160801b0319166001600160801b0392909216919091179055505b8051156112e75760006112988261018001518361024001516115fc565b90506112b28261012001518261107590919063ffffffff16565b61014083018190526112c390610a6c565b6002840180546001600160801b0319166001600160801b0392909216919091179055505b5050565b6113246040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b816101a0015160000361133657505050565b610120820151825161134791611075565b6020820152610140820151825161135d91611075565b6040820152606082015161026083015161024084015161138592919064ffffffffff16611605565b60608201819052604083015161139a91611075565b8082526020820151608084015160408401516113b69190611b92565b6113c09190611b7f565b6113ca9190611b7f565b608082018190526101a08301516113e1919061104f565b60a082018190521561144e5761140c6104598361010001518360a0015161112d90919063ffffffff16565b6008840180546000906114299084906001600160801b03166119e0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b505050565b6000611461825161ffff1690565b600003611470575060006114eb565b60408051602081019091528354908190527faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa166114af575060016114eb565b6040805160208101909152835481526000906114cc90878761172f565b50509050801580156114e75750825160d41c64ffffffffff16155b9150505b949350505050565b633b9aca00818102908104821461150957600080fd5b919050565b6000611533565b62461bcd60e51b600052602060045280602452508060445260646000fd5b3d801561157257602081146115a35761156d7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f611515565b6115b0565b823b61159a5761159a7311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014611515565b600191506115b0565b3d6000803e600051151591505b50919050565b6000806115ca64ffffffffff841642611b7f565b6115d49085611af7565b6301e13380900490506115f281676765c793fa10079d601b1b611b92565b9150505b92915050565b60006111268383425b60008061161964ffffffffff851684611b7f565b90508060000361163757676765c793fa10079d601b1b915050611126565b6000198101600080806002851161164f576000611654565b600285035b925066038882915c40006116688a80611075565b8161167557611675611cf7565b0491506301e13380611687838b611075565b8161169457611694611cf7565b0490506000826116a48688611af7565b6116ae9190611af7565b600290049050600082856116c2888a611af7565b6116cc9190611af7565b6116d69190611af7565b60069004905080826301e133806116ed8a8f611af7565b6116f79190611d0d565b61170c90676765c793fa10079d601b1b611b92565b6117169190611b92565b6117209190611b92565b9b9a5050505050505050505050565b600080600061173d866117da565b156117c757600061176e877faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa61181e565b600081815260208781526040808320546001600160a01b03168084528a8352818420825193840190925290549182905292935060d41c64ffffffffff16905080156117c3576001955090935091506117d19050565b5050505b5060009150819050805b93509350939050565b80516000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1680158015906111265750611816600182611b7f565b161592915050565b815160009082166000198101198116825b60029190911c9081156105755760010161182f565b60405180610280016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016118c86040518060200160405280600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b6001600160a01b038116811461190657600080fd5b50565b600080600080600080600060e0888a03121561192457600080fd5b8735965060208801359550604088013594506060880135611944816118f1565b93506080880135925060a088013561195b816118f1565b915060c088013561ffff8116811461197257600080fd5b8091505092959891949750929550565b600080600080600060a0868803121561199a57600080fd5b8535945060208601356119ac816118f1565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03818116838216019080821115611a0057611a006119ca565b5092915050565b600181815b80851115611a42578160001904821115611a2857611a286119ca565b80851615611a3557918102915b93841c9390800290611a0c565b509250929050565b600082611a59575060016115f6565b81611a66575060006115f6565b8160018114611a7c5760028114611a8657611aa2565b60019150506115f6565b60ff841115611a9757611a976119ca565b50506001821b6115f6565b5060208310610133831016604e8410600b8410161715611ac5575081810a6115f6565b611acf8383611a07565b8060001904821115611ae357611ae36119ca565b029392505050565b60006111268383611a4a565b80820281158282048414176115f6576115f66119ca565b60006020808352835180602085015260005b81811015611b3c57858101830151858201604001528201611b20565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215611b6f57600080fd5b8151801515811461112657600080fd5b818103818111156115f6576115f66119ca565b808201808211156115f6576115f66119ca565b600060208284031215611bb757600080fd5b5051919050565b6001600160801b03828116828216039080821115611a0057611a006119ca565b60008060008060808587031215611bf457600080fd5b845193506020850151925060408501519150606085015164ffffffffff81168114611c1e57600080fd5b939692955090935050565b600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151611c8c60e08401826001600160a01b03169052565b506101008381015180151584830152505061012092830151919092015290565b600080600060608486031215611cc157600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215611cec57600080fd5b8151611126816118f1565b634e487b7160e01b600052601260045260246000fd5b600082611d2a57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122070fb957083e21b2cef7448144ef5dbb022be0d57906818afc402bf0c98a1cdde64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = BridgeLogicContractFunctions(bridgelogic_abi, self.w3, address)  # type: ignore
        self.events = BridgeLogicContractEvents(bridgelogic_abi, self.w3, address)  # type: ignore

    events: BridgeLogicContractEvents

    functions: BridgeLogicContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = BridgeLogicContractFunctions(
            bridgelogic_abi, w3, None
        )

        return contract
