"""A web3.py Contract class for the AaveL2HyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..HyperdriveDeployerCoordinator import (
    HyperdriveDeployerCoordinatorTypes as HyperdriveDeployerCoordinator,
)
from ..IHyperdrive import IHyperdriveTypes as IHyperdrive

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolDeployConfig": IHyperdrive.PoolDeployConfig,
    "HyperdriveDeployerCoordinator.Deployment": HyperdriveDeployerCoordinator.Deployment,
    "IHyperdrive.Options": IHyperdrive.Options,
}

aavel2hyperdrivedeployercoordinator_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_coreDeployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target0Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target1Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target2Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target3Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target4Deployer",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {
                    "name": "_baseToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_vault",
                    "type": "address",
                    "internalType": "contract IL2Pool",
                },
                {
                    "name": "_shareAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_baseToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_vault",
                    "type": "address",
                    "internalType": "contract IL2Pool",
                },
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "coreDeployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_targetIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployments",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct HyperdriveDeployerCoordinator.Deployment",
                    "components": [
                        {
                            "name": "configHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "extraDataHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target0",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target1",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target2",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target3",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target4",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "factory",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfTargets",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "_lp", "type": "address", "internalType": "address"},
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target0Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target1Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target2Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target3Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target4Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "ApprovalFailed", "inputs": []},
        {"type": "error", "name": "DeploymentAlreadyExists", "inputs": []},
        {"type": "error", "name": "DeploymentDoesNotExist", "inputs": []},
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {"type": "error", "name": "HyperdriveAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "HyperdriveIsNotDeployed", "inputs": []},
        {"type": "error", "name": "IncompleteDeployment", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidFeeAmounts", "inputs": []},
        {"type": "error", "name": "InvalidMinimumShareReserves", "inputs": []},
        {
            "type": "error",
            "name": "InvalidMinimumTransactionAmount",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTargetIndex", "inputs": []},
        {"type": "error", "name": "InvalidVaultSharesToken", "inputs": []},
        {"type": "error", "name": "MismatchedConfig", "inputs": []},
        {"type": "error", "name": "MismatchedExtraData", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {"type": "error", "name": "SenderIsNotFactory", "inputs": []},
        {"type": "error", "name": "TargetAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)


class AaveL2HyperdriveDeployerCoordinatorAddressEmptyCodeContractError(
    PypechainBaseError
):
    """ContractError for AddressEmptyCode."""

    # Error name
    name: str = "AddressEmptyCode"
    # 4 byte error selector
    selector: str = "0x9996b315"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressEmptyCode(address)"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError(
    PypechainBaseError
):
    """ContractError for AddressInsufficientBalance."""

    # Error name
    name: str = "AddressInsufficientBalance"
    # 4 byte error selector
    selector: str = "0xcd786059"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressInsufficientBalance(address)"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorApprovalFailedContractError(
    PypechainBaseError
):
    """ContractError for ApprovalFailed."""

    # Error name
    name: str = "ApprovalFailed"
    # 4 byte error selector
    selector: str = "0x8164f842"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ApprovalFailed()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError(
    PypechainBaseError
):
    """ContractError for DeploymentAlreadyExists."""

    # Error name
    name: str = "DeploymentAlreadyExists"
    # 4 byte error selector
    selector: str = "0x77c3669a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeploymentAlreadyExists()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError(
    PypechainBaseError
):
    """ContractError for DeploymentDoesNotExist."""

    # Error name
    name: str = "DeploymentDoesNotExist"
    # 4 byte error selector
    selector: str = "0xe62c7024"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeploymentDoesNotExist()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorFailedInnerCallContractError(
    PypechainBaseError
):
    """ContractError for FailedInnerCall."""

    # Error name
    name: str = "FailedInnerCall"
    # 4 byte error selector
    selector: str = "0x1425ea42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "FailedInnerCall()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError(
    PypechainBaseError
):
    """ContractError for HyperdriveAlreadyDeployed."""

    # Error name
    name: str = "HyperdriveAlreadyDeployed"
    # 4 byte error selector
    selector: str = "0x2c95caeb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "HyperdriveAlreadyDeployed()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError(
    PypechainBaseError
):
    """ContractError for HyperdriveIsNotDeployed."""

    # Error name
    name: str = "HyperdriveIsNotDeployed"
    # 4 byte error selector
    selector: str = "0x952b05cb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "HyperdriveIsNotDeployed()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorIncompleteDeploymentContractError(
    PypechainBaseError
):
    """ContractError for IncompleteDeployment."""

    # Error name
    name: str = "IncompleteDeployment"
    # 4 byte error selector
    selector: str = "0xe97cc2bf"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "IncompleteDeployment()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInsufficientValueContractError(
    PypechainBaseError
):
    """ContractError for InsufficientValue."""

    # Error name
    name: str = "InsufficientValue"
    # 4 byte error selector
    selector: str = "0x11011294"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientValue()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInvalidBaseTokenContractError(
    PypechainBaseError
):
    """ContractError for InvalidBaseToken."""

    # Error name
    name: str = "InvalidBaseToken"
    # 4 byte error selector
    selector: str = "0x0e442a4a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidBaseToken()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidCheckpointDuration."""

    # Error name
    name: str = "InvalidCheckpointDuration"
    # 4 byte error selector
    selector: str = "0x5428734d"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidCheckpointDuration()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError(
    PypechainBaseError
):
    """ContractError for InvalidFeeAmounts."""

    # Error name
    name: str = "InvalidFeeAmounts"
    # 4 byte error selector
    selector: str = "0x45ee5986"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidFeeAmounts()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinimumShareReserves."""

    # Error name
    name: str = "InvalidMinimumShareReserves"
    # 4 byte error selector
    selector: str = "0x49db44f5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinimumShareReserves()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinimumTransactionAmount."""

    # Error name
    name: str = "InvalidMinimumTransactionAmount"
    # 4 byte error selector
    selector: str = "0x3192a446"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinimumTransactionAmount()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInvalidPositionDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidPositionDuration."""

    # Error name
    name: str = "InvalidPositionDuration"
    # 4 byte error selector
    selector: str = "0x4a7fff9e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidPositionDuration()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInvalidTargetIndexContractError(
    PypechainBaseError
):
    """ContractError for InvalidTargetIndex."""

    # Error name
    name: str = "InvalidTargetIndex"
    # 4 byte error selector
    selector: str = "0x3b3f02b2"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTargetIndex()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError(
    PypechainBaseError
):
    """ContractError for InvalidVaultSharesToken."""

    # Error name
    name: str = "InvalidVaultSharesToken"
    # 4 byte error selector
    selector: str = "0xe7ee73a0"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidVaultSharesToken()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorMismatchedConfigContractError(
    PypechainBaseError
):
    """ContractError for MismatchedConfig."""

    # Error name
    name: str = "MismatchedConfig"
    # 4 byte error selector
    selector: str = "0x332ee11f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedConfig()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorMismatchedExtraDataContractError(
    PypechainBaseError
):
    """ContractError for MismatchedExtraData."""

    # Error name
    name: str = "MismatchedExtraData"
    # 4 byte error selector
    selector: str = "0xd1939688"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedExtraData()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorNotPayableContractError(
    PypechainBaseError
):
    """ContractError for NotPayable."""

    # Error name
    name: str = "NotPayable"
    # 4 byte error selector
    selector: str = "0x1574f9f3"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "NotPayable()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError(
    PypechainBaseError
):
    """ContractError for SafeERC20FailedOperation."""

    # Error name
    name: str = "SafeERC20FailedOperation"
    # 4 byte error selector
    selector: str = "0x5274afe7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SafeERC20FailedOperation(address)"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError(
    PypechainBaseError
):
    """ContractError for SenderIsNotFactory."""

    # Error name
    name: str = "SenderIsNotFactory"
    # 4 byte error selector
    selector: str = "0x40843511"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SenderIsNotFactory()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError(
    PypechainBaseError
):
    """ContractError for TargetAlreadyDeployed."""

    # Error name
    name: str = "TargetAlreadyDeployed"
    # 4 byte error selector
    selector: str = "0x0744b578"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TargetAlreadyDeployed()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorTransferFailedContractError(
    PypechainBaseError
):
    """ContractError for TransferFailed."""

    # Error name
    name: str = "TransferFailed"
    # 4 byte error selector
    selector: str = "0x90b8ec18"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TransferFailed()"
    # Error input types
    abi: ABI = aavel2hyperdrivedeployercoordinator_abi


class AaveL2HyperdriveDeployerCoordinatorContractErrors(
    PypechainBaseContractErrors
):
    """ContractErrors for the AaveL2HyperdriveDeployerCoordinator contract."""

    AddressEmptyCode: (
        AaveL2HyperdriveDeployerCoordinatorAddressEmptyCodeContractError
    )

    AddressInsufficientBalance: AaveL2HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError

    ApprovalFailed: (
        AaveL2HyperdriveDeployerCoordinatorApprovalFailedContractError
    )

    DeploymentAlreadyExists: (
        AaveL2HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError
    )

    DeploymentDoesNotExist: (
        AaveL2HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError
    )

    FailedInnerCall: (
        AaveL2HyperdriveDeployerCoordinatorFailedInnerCallContractError
    )

    HyperdriveAlreadyDeployed: AaveL2HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError

    HyperdriveIsNotDeployed: (
        AaveL2HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError
    )

    IncompleteDeployment: (
        AaveL2HyperdriveDeployerCoordinatorIncompleteDeploymentContractError
    )

    InsufficientValue: (
        AaveL2HyperdriveDeployerCoordinatorInsufficientValueContractError
    )

    InvalidBaseToken: (
        AaveL2HyperdriveDeployerCoordinatorInvalidBaseTokenContractError
    )

    InvalidCheckpointDuration: AaveL2HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError

    InvalidFeeAmounts: (
        AaveL2HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError
    )

    InvalidMinimumShareReserves: AaveL2HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError

    InvalidMinimumTransactionAmount: AaveL2HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError

    InvalidPositionDuration: (
        AaveL2HyperdriveDeployerCoordinatorInvalidPositionDurationContractError
    )

    InvalidTargetIndex: (
        AaveL2HyperdriveDeployerCoordinatorInvalidTargetIndexContractError
    )

    InvalidVaultSharesToken: (
        AaveL2HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError
    )

    MismatchedConfig: (
        AaveL2HyperdriveDeployerCoordinatorMismatchedConfigContractError
    )

    MismatchedExtraData: (
        AaveL2HyperdriveDeployerCoordinatorMismatchedExtraDataContractError
    )

    NotPayable: AaveL2HyperdriveDeployerCoordinatorNotPayableContractError

    SafeERC20FailedOperation: (
        AaveL2HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError
    )

    SenderIsNotFactory: (
        AaveL2HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError
    )

    TargetAlreadyDeployed: (
        AaveL2HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError
    )

    TransferFailed: (
        AaveL2HyperdriveDeployerCoordinatorTransferFailedContractError
    )

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = (
            AaveL2HyperdriveDeployerCoordinatorAddressEmptyCodeContractError()
        )
        self.AddressInsufficientBalance = (
            AaveL2HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError()
        )
        self.ApprovalFailed = (
            AaveL2HyperdriveDeployerCoordinatorApprovalFailedContractError()
        )
        self.DeploymentAlreadyExists = (
            AaveL2HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError()
        )
        self.DeploymentDoesNotExist = (
            AaveL2HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError()
        )
        self.FailedInnerCall = (
            AaveL2HyperdriveDeployerCoordinatorFailedInnerCallContractError()
        )
        self.HyperdriveAlreadyDeployed = (
            AaveL2HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError()
        )
        self.HyperdriveIsNotDeployed = (
            AaveL2HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError()
        )
        self.IncompleteDeployment = (
            AaveL2HyperdriveDeployerCoordinatorIncompleteDeploymentContractError()
        )
        self.InsufficientValue = (
            AaveL2HyperdriveDeployerCoordinatorInsufficientValueContractError()
        )
        self.InvalidBaseToken = (
            AaveL2HyperdriveDeployerCoordinatorInvalidBaseTokenContractError()
        )
        self.InvalidCheckpointDuration = (
            AaveL2HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError()
        )
        self.InvalidFeeAmounts = (
            AaveL2HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError()
        )
        self.InvalidMinimumShareReserves = (
            AaveL2HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError()
        )
        self.InvalidMinimumTransactionAmount = (
            AaveL2HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError()
        )
        self.InvalidPositionDuration = (
            AaveL2HyperdriveDeployerCoordinatorInvalidPositionDurationContractError()
        )
        self.InvalidTargetIndex = (
            AaveL2HyperdriveDeployerCoordinatorInvalidTargetIndexContractError()
        )
        self.InvalidVaultSharesToken = (
            AaveL2HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError()
        )
        self.MismatchedConfig = (
            AaveL2HyperdriveDeployerCoordinatorMismatchedConfigContractError()
        )
        self.MismatchedExtraData = (
            AaveL2HyperdriveDeployerCoordinatorMismatchedExtraDataContractError()
        )
        self.NotPayable = (
            AaveL2HyperdriveDeployerCoordinatorNotPayableContractError()
        )
        self.SafeERC20FailedOperation = (
            AaveL2HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError()
        )
        self.SenderIsNotFactory = (
            AaveL2HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError()
        )
        self.TargetAlreadyDeployed = (
            AaveL2HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError()
        )
        self.TransferFailed = (
            AaveL2HyperdriveDeployerCoordinatorTransferFailedContractError()
        )

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.ApprovalFailed,
            self.DeploymentAlreadyExists,
            self.DeploymentDoesNotExist,
            self.FailedInnerCall,
            self.HyperdriveAlreadyDeployed,
            self.HyperdriveIsNotDeployed,
            self.IncompleteDeployment,
            self.InsufficientValue,
            self.InvalidBaseToken,
            self.InvalidCheckpointDuration,
            self.InvalidFeeAmounts,
            self.InvalidMinimumShareReserves,
            self.InvalidMinimumTransactionAmount,
            self.InvalidPositionDuration,
            self.InvalidTargetIndex,
            self.InvalidVaultSharesToken,
            self.MismatchedConfig,
            self.MismatchedExtraData,
            self.NotPayable,
            self.SafeERC20FailedOperation,
            self.SenderIsNotFactory,
            self.TargetAlreadyDeployed,
            self.TransferFailed,
        ]


class AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToBase(str,str,int) method."""

    _function_name = "convertToBase"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int"]), structs
    )
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the convertToBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _baseToken: str, _vault: str, _shareAmount: int) -> AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToShares(str,str,int) method."""

    _function_name = "convertToShares"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int"]), structs
    )
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the convertToShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _baseToken: str, _vault: str, _baseAmount: int) -> AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the coreDeployer() method."""

    _function_name = "coreDeployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the coreDeployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "coreDeployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployHyperdrive(bytes,str,IHyperdrive.PoolDeployConfig,bytes,bytes) method."""

    _function_name = "deployHyperdrive"
    _type_signature = expand_struct_type_str(
        tuple(
            ["bytes", "str", "IHyperdrive.PoolDeployConfig", "bytes", "bytes"]
        ),
        structs,
    )
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployHyperdrive method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployHyperdrive"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, __name: str, _deployConfig: IHyperdrive.PoolDeployConfig, _extraData: bytes, _salt: bytes) -> AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(bytes,IHyperdrive.PoolDeployConfig,bytes,int,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(
            ["bytes", "IHyperdrive.PoolDeployConfig", "bytes", "int", "bytes"]
        ),
        structs,
    )
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _deployConfig: IHyperdrive.PoolDeployConfig, _extraData: bytes, _targetIndex: int, _salt: bytes) -> AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployments(bytes) method."""

    _function_name = "deployments"
    _type_signature = expand_struct_type_str(tuple(["bytes"]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> HyperdriveDeployerCoordinator.Deployment:
        """returns HyperdriveDeployerCoordinator.Deployment."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = HyperdriveDeployerCoordinator.Deployment

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            HyperdriveDeployerCoordinator.Deployment,
            rename_returned_types(structs, return_types, raw_values),
        )


class AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployments method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployments"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes) -> AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the factory() method."""

    _function_name = "factory"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the factory method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "factory"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfTargets() method."""

    _function_name = "getNumberOfTargets"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfTargets method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getNumberOfTargets"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the initialize(bytes,str,int,int,IHyperdrive.Options) method."""

    _function_name = "initialize"
    _type_signature = expand_struct_type_str(
        tuple(["bytes", "str", "int", "int", "IHyperdrive.Options"]), structs
    )
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the initialize method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "initialize"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _lp: str, _contribution: int, _apr: int, _options: IHyperdrive.Options) -> AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorKindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorKindContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorKindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorKindContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorKindContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorKindContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorNameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorNameContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorNameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorNameContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorNameContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorNameContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target0Deployer() method."""

    _function_name = "target0Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target0Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target0Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target1Deployer() method."""

    _function_name = "target1Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target1Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target1Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target2Deployer() method."""

    _function_name = "target2Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target2Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target2Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target3Deployer() method."""

    _function_name = "target3Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target3Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target3Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target4Deployer() method."""

    _function_name = "target4Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target4Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target4Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorVersionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveDeployerCoordinatorVersionContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveDeployerCoordinatorVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveDeployerCoordinatorVersionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveDeployerCoordinatorVersionContractFunction0._type_signature: AaveL2HyperdriveDeployerCoordinatorVersionContractFunction0.factory(
                "AaveL2HyperdriveDeployerCoordinatorVersionContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveDeployerCoordinatorContractFunctions(ContractFunctions):
    """ContractFunctions for the AaveL2HyperdriveDeployerCoordinator contract."""

    convertToBase: (
        AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction
    )

    convertToShares: (
        AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction
    )

    coreDeployer: (
        AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction
    )

    deployHyperdrive: (
        AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction
    )

    deployTarget: (
        AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction
    )

    deployments: AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction

    factory: AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction

    getNumberOfTargets: (
        AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction
    )

    initialize: AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction

    kind: AaveL2HyperdriveDeployerCoordinatorKindContractFunction

    name: AaveL2HyperdriveDeployerCoordinatorNameContractFunction

    target0Deployer: (
        AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction
    )

    target1Deployer: (
        AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction
    )

    target2Deployer: (
        AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction
    )

    target3Deployer: (
        AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction
    )

    target4Deployer: (
        AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction
    )

    version: AaveL2HyperdriveDeployerCoordinatorVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = AaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction.factory(
            "convertToBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToBase",
        )
        self.convertToShares = AaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction.factory(
            "convertToShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToShares",
        )
        self.coreDeployer = AaveL2HyperdriveDeployerCoordinatorCoreDeployerContractFunction.factory(
            "coreDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="coreDeployer",
        )
        self.deployHyperdrive = AaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployHyperdrive",
        )
        self.deployTarget = AaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployTarget",
        )
        self.deployments = AaveL2HyperdriveDeployerCoordinatorDeploymentsContractFunction.factory(
            "deployments",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployments",
        )
        self.factory = (
            AaveL2HyperdriveDeployerCoordinatorFactoryContractFunction.factory(
                "factory",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="factory",
            )
        )
        self.getNumberOfTargets = AaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction.factory(
            "getNumberOfTargets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNumberOfTargets",
        )
        self.initialize = AaveL2HyperdriveDeployerCoordinatorInitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="initialize",
        )
        self.kind = (
            AaveL2HyperdriveDeployerCoordinatorKindContractFunction.factory(
                "kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="kind",
            )
        )
        self.name = (
            AaveL2HyperdriveDeployerCoordinatorNameContractFunction.factory(
                "name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="name",
            )
        )
        self.target0Deployer = AaveL2HyperdriveDeployerCoordinatorTarget0DeployerContractFunction.factory(
            "target0Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target0Deployer",
        )
        self.target1Deployer = AaveL2HyperdriveDeployerCoordinatorTarget1DeployerContractFunction.factory(
            "target1Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target1Deployer",
        )
        self.target2Deployer = AaveL2HyperdriveDeployerCoordinatorTarget2DeployerContractFunction.factory(
            "target2Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target2Deployer",
        )
        self.target3Deployer = AaveL2HyperdriveDeployerCoordinatorTarget3DeployerContractFunction.factory(
            "target3Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target3Deployer",
        )
        self.target4Deployer = AaveL2HyperdriveDeployerCoordinatorTarget4DeployerContractFunction.factory(
            "target4Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target4Deployer",
        )
        self.version = (
            AaveL2HyperdriveDeployerCoordinatorVersionContractFunction.factory(
                "version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="version",
            )
        )


class AaveL2HyperdriveDeployerCoordinatorContract(Contract):
    """A web3.py Contract class for the AaveL2HyperdriveDeployerCoordinator contract."""

    abi: ABI = aavel2hyperdrivedeployercoordinator_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x6101606040523480156200001257600080fd5b5060405162002cea38038062002cea8339810160408190526200003591620000c0565b878787878787878760006200004b8982620002a9565b506001600160a01b0396871660805294861660a05292851660c05290841660e05283166101005282166101205216610140525062000375975050505050505050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000bb57600080fd5b919050565b600080600080600080600080610100898b031215620000de57600080fd5b88516001600160401b0380821115620000f657600080fd5b818b0191508b601f8301126200010b57600080fd5b8151818111156200012057620001206200008d565b604051601f8201601f19908116603f011681019083821181831017156200014b576200014b6200008d565b81604052828152602093508e848487010111156200016857600080fd5b600091505b828210156200018c57848201840151818301850152908301906200016d565b6000848483010152809c50505050620001a7818c01620000a3565b98505050620001b960408a01620000a3565b9550620001c960608a01620000a3565b9450620001d960808a01620000a3565b9350620001e960a08a01620000a3565b9250620001f960c08a01620000a3565b91506200020960e08a01620000a3565b90509295985092959890939650565b600181811c908216806200022d57607f821691505b6020821081036200024e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a4576000816000526020600020601f850160051c810160208610156200027f5750805b601f850160051c820191505b81811015620002a0578281556001016200028b565b5050505b505050565b81516001600160401b03811115620002c557620002c56200008d565b620002dd81620002d6845462000218565b8462000254565b602080601f831160018114620003155760008415620002fc5750858301515b600019600386901b1c1916600185901b178555620002a0565b600085815260208120601f198616915b82811015620003465788860151825594840194600190910190840162000325565b5085821015620003655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e0516101005161012051610140516128b162000439600039600081816102c50152610da30152600081816103450152610c6d0152600081816103ad0152610b370152600081816103110152610a0101526000818161037901526107f3015260008181610435015261110801526000818161040101528181610579015281816107170152818161082301528181610a3101528181610b6701528181610c9d01528181610dd301528181610ed7015261113901526128b16000f3fe6080604052600436106100fe5760003560e01c8063aa8cd6c411610095578063c45a015511610064578063c45a0155146103ef578063c83e1f5114610423578063ce34a8c314610457578063e990eba814610477578063e99be3961461049757600080fd5b8063aa8cd6c414610333578063ab71905f14610367578063b6cb11181461039b578063c1510618146103cf57600080fd5b806337404017116100d1578063374040171461018457806354fd4d5014610283578063966ecd1c146102b3578063a085fa30146102ff57600080fd5b806304baa00b146101035780630550e6e41461012e57806306fdde031461015c57806316abfc7014610171575b600080fd5b34801561010f57600080fd5b506101186104ab565b6040516101259190611d8d565b60405180910390f35b34801561013a57600080fd5b5061014e610149366004611dc5565b6104c7565b604051908152602001610125565b34801561016857600080fd5b506101186104de565b61014e61017f366004611f0d565b61056c565b34801561019057600080fd5b5061027661019f366004611fd2565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091525060009081526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004830154811660808301526005830154811660a08301526006830154811660c08301526007830154811660e083015260089092015490911661010082015290565b6040516101259190611feb565b34801561028f57600080fd5b50604080518082019091526007815266076312e302e32360cc1b6020820152610118565b3480156102bf57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610125565b34801561030b57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b34801561033f57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b34801561037357600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a757600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103db57600080fd5b506102e76103ea3660046121c3565b61070a565b3480156103fb57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b34801561042f57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b34801561046357600080fd5b5061014e610472366004611dc5565b610ebd565b34801561048357600080fd5b506102e7610492366004612231565b610eca565b3480156104a357600080fd5b50600561014e565b6040518060600160405280602381526020016128596023913981565b60006104d4848484611247565b90505b9392505050565b600080546104eb906122d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610517906122d2565b80156105645780601f1061053957610100808354040283529160200191610564565b820191906000526020600020905b81548152906001019060200180831161054757829003601f168201915b505050505081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105b757604051634084351160e01b815260040160405180910390fd5b6105bf61126b565b6000868152600160205260409020600301546001600160a01b0316806105f85760405163952b05cb60e01b815260040160405180910390fd5b60006106068288888761128c565b9050816001600160a01b03166377d05ff4828888886040518563ffffffff1660e01b81526004016106399392919061230c565b60206040518083038185885af1158015610657573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061067c9190612352565b9250600061068a8234612381565b905080156106fd57604051600090339083908381818185875af1925050503d80600081146106d4576040519150601f19603f3d011682016040523d82523d6000602084013e6106d9565b606091505b50509050806106fb576040516312171d8360e31b815260040160405180910390fd5b505b5050505b95945050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461075557604051634084351160e01b815260040160405180910390fd5b60008681526001602052604081209084900361090d5780541561078b57604051633be1b34d60e11b815260040160405180910390fd5b6107958686611410565b60006107a18787611626565b90506000876040516020016107b69190612394565b60405160208183030381529060405280519060200120905060008780519060200120905060006107e58a6116ad565b9050838160800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008c8f8c60405160200161085f929190918252602082015260400190565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b815260040161089494939291906125c7565b6020604051808303816000875af11580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d7919061260d565b9285555060018401556002830191909155600490910180546001600160a01b0319166001600160a01b0383161790559050610701565b6000878152600160205260409020548061093a5760405163398b1c0960e21b815260040160405180910390fd5b808760405160200161094c9190612394565b60405160208183030381529060405280519060200120146109805760405163332ee11f60e01b815260040160405180910390fd5b600182015486516020880120146109aa57604051631a3272d160e31b815260040160405180910390fd5b6109b48787611410565b60006109bf886116ad565b6002840154608082015290506001869003610b025760058301546001600160a01b0316156109ff5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610a669392919061262a565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610a9b94939291906125c7565b6020604051808303816000875af1158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade919061260d565b6005840180546001600160a01b0319166001600160a01b03831617905593506106fd565b85600203610c385760068301546001600160a01b031615610b355760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610b9c9392919061262a565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610bd194939291906125c7565b6020604051808303816000875af1158015610bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c14919061260d565b6006840180546001600160a01b0319166001600160a01b03831617905593506106fd565b85600303610d6e5760078301546001600160a01b031615610c6b5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610cd29392919061262a565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610d0794939291906125c7565b6020604051808303816000875af1158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a919061260d565b6007840180546001600160a01b0319166001600160a01b03831617905593506106fd565b85600403610ea45760088301546001600160a01b031615610da15760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610e089392919061262a565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610e3d94939291906125c7565b6020604051808303816000875af1158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e80919061260d565b6008840180546001600160a01b0319166001600160a01b03831617905593506106fd565b604051631d9f815960e11b815260040160405180910390fd5b60006104d484848461177b565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1557604051634084351160e01b815260040160405180910390fd5b60008681526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b03908116606083018190526004840154821660808401526005840154821660a08401526006840154821660c08401526007840154821660e0840152600890930154166101008201529015610fbe57604051632c95caeb60e01b815260040160405180910390fd5b8051610fdd5760405163398b1c0960e21b815260040160405180910390fd5b60808101516001600160a01b03161580611002575060a08101516001600160a01b0316155b80611018575060c08101516001600160a01b0316155b8061102e575060e08101516001600160a01b0316155b8061104557506101008101516001600160a01b0316155b156110635760405163e97cc2bf60e01b815260040160405180910390fd5b8051604051611076908790602001612394565b60405160208183030381529060405280519060200120146110aa5760405163332ee11f60e01b815260040160405180910390fd5b80602001518480519060200120146110d557604051631a3272d160e31b815260040160405180910390fd5b6110df8585611410565b60006110ea866116ad565b905081604001518160800181815250506000889050600085905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638cc23ce08b867f00000000000000000000000000000000000000000000000000000000000000008c8a608001518b60a001518c60c001518d60e001518e61010001518d8d60405160200161118f929190918252602082015260400190565b604051602081830303815290604052805190602001206040518b63ffffffff1660e01b81526004016111ca9a9998979695949392919061264b565b6020604051808303816000875af11580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d919061260d565b60009b8c5260016020526040909b2060030180546001600160a01b0319166001600160a01b038d1617905550989998505050505050505050565b60006104d46b033b2e3c9fd0803ce8000000611263868661179e565b84919061180c565b341561128a57604051631574f9f360e01b815260040160405180910390fd5b565b6000806000866001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f3919061260d565b9050836020015115611307578091506113da565b866001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611369919061260d565b91506113d781836001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d1919061260d565b87610ebd565b94505b6113ef6001600160a01b03831687308861182a565b6114036001600160a01b0383168887611897565b5060009695505050505050565b61141a8282611927565b60208201516001600160a01b03166114455760405163073f739d60e51b815260040160405180910390fd5b81602001516001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab919061260d565b6001600160a01b031682600001516001600160a01b0316146114e057604051630722152560e11b815260040160405180910390fd5b600382600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611524573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154891906126ce565b61155291906126f1565b61155d90600a6127ee565b82608001511015611581576040516349db44f560e01b815260040160405180910390fd5b600382600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e991906126ce565b6115f391906126f1565b6115fe90600a6127ee565b8260a001511015611622576040516318c9522360e11b815260040160405180910390fd5b5050565b60006116a4836000015184602001516001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611696919061260d565b670de0b6b3a7640000610ebd565b90505b92915050565b6116b5611c56565b81516001600160a01b03908116825260208084015182169083015260408084015182169083015260608084015190830152608083015160a08084019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015181166101608084019190915283015181166101808084019190915283015181166101a080840191909152830151166101c080830191909152909101516101e082015290565b60006104d461178a858561179e565b83906b033b2e3c9fd0803ce800000061180c565b60405163d15e005360e01b81526001600160a01b0383811660048301526000919083169063d15e005390602401602060405180830381865afa1580156117e8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a49190612352565b600082600019048411830215820261182357600080fd5b5091020490565b6040516001600160a01b0384811660248301528381166044830152606482018390526118919186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611a3c565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526118e88482611aa9565b611891576040516001600160a01b0384811660248301526000604483015261191d91869182169063095ea7b39060640161185f565b6118918482611a3c565b6103e88260800151101561194e576040516349db44f560e01b815260040160405180910390fd5b81610100015160000361197457604051635428734d60e01b815260040160405180910390fd5b8161010001518260e00151108061199e57508161010001518260e0015161199b91906127fd565b15155b156119bc5760405163253fffcf60e11b815260040160405180910390fd5b6101c082015151670de0b6b3a764000010806119e85750670de0b6b3a7640000826101c0015160200151115b80611a035750670de0b6b3a7640000826101c0015160400151115b80611a1e5750670de0b6b3a7640000826101c0015160600151115b15611622576040516322f72cc360e11b815260040160405180910390fd5b6000611a516001600160a01b03841683611b4c565b90508051600014158015611a76575080806020019051810190611a74919061281f565b155b15611aa457604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6000806000846001600160a01b031684604051611ac6919061283c565b6000604051808303816000865af19150503d8060008114611b03576040519150601f19603f3d011682016040523d82523d6000602084013e611b08565b606091505b5091509150818015611b32575080511580611b32575080806020019051810190611b32919061281f565b80156107015750505050506001600160a01b03163b151590565b60606116a48383600084600080856001600160a01b03168486604051611b72919061283c565b60006040518083038185875af1925050503d8060008114611baf576040519150601f19603f3d011682016040523d82523d6000602084013e611bb4565b606091505b5091509150611bc4868383611bce565b9695505050505050565b606082611be357611bde82611c2a565b6104d7565b8151158015611bfa57506001600160a01b0384163b155b15611c2357604051639996b31560e01b81526001600160a01b0385166004820152602401611a9b565b50806104d7565b805115611c3a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001611d386040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b60005b83811015611d58578181015183820152602001611d40565b50506000910152565b60008151808452611d79816020860160208601611d3d565b601f01601f19169290920160200192915050565b6020815260006116a46020830184611d61565b6001600160a01b0381168114611c5357600080fd5b8035611dc081611da0565b919050565b600080600060608486031215611dda57600080fd5b8335611de581611da0565b92506020840135611df581611da0565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611e3f57611e3f611e06565b60405290565b6040516101e0810167ffffffffffffffff81118282101715611e3f57611e3f611e06565b8015158114611c5357600080fd5b600067ffffffffffffffff80841115611e9257611e92611e06565b604051601f8501601f19908116603f01168101908282118183101715611eba57611eba611e06565b81604052809350858152868686011115611ed357600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611efe57600080fd5b6116a483833560208501611e77565b600080600080600060a08688031215611f2557600080fd5b853594506020860135611f3781611da0565b93506040860135925060608601359150608086013567ffffffffffffffff80821115611f6257600080fd5b908701906060828a031215611f7657600080fd5b611f7e611e1c565b8235611f8981611da0565b81526020830135611f9981611e69565b6020820152604083013582811115611fb057600080fd5b611fbc8b828601611eed565b6040830152508093505050509295509295909350565b600060208284031215611fe457600080fd5b5035919050565b8151815260208083015190820152604080830151908201526060808301516001600160a01b039081169183019190915260808084015182169083015260a08084015182169083015260c08084015182169083015260e08084015182169083015261010080840151918216818401526101208301915b505092915050565b60006080828403121561207a57600080fd5b6040516080810181811067ffffffffffffffff8211171561209d5761209d611e06565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600061024082840312156120e157600080fd5b6120e9611e45565b90506120f482611db5565b815261210260208301611db5565b602082015261211360408301611db5565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140612170818401611db5565b90820152610160612182838201611db5565b90820152610180612194838201611db5565b908201526101a06121a6838201611db5565b908201526101c06121b984848301612068565b9082015292915050565b60008060008060006102c086880312156121dc57600080fd5b853594506121ed87602088016120ce565b935061026086013567ffffffffffffffff81111561220a57600080fd5b61221688828901611eed565b9598949750949561028081013595506102a001359392505050565b60008060008060006102c0868803121561224a57600080fd5b85359450602086013567ffffffffffffffff8082111561226957600080fd5b818801915088601f83011261227d57600080fd5b61228c89833560208501611e77565b955061229b8960408a016120ce565b94506102808801359150808211156122b257600080fd5b506122bf88828901611eed565b959894975092956102a001359392505050565b600181811c908216806122e657607f821691505b60208210810361230657634e487b7160e01b600052602260045260246000fd5b50919050565b8381528260208201526060604082015260018060a01b03825116606082015260208201511515608082015260006040830151606060a0840152611bc460c0840182611d61565b60006020828403121561236457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156116a7576116a761236b565b81516001600160a01b03168152610240810160208301516123c060208401826001600160a01b03169052565b5060408301516123db60408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151612441828501826001600160a01b03169052565b5050610160838101516001600160a01b0390811691840191909152610180808501518216908401526101a080850151909116908301526101c08084015180518285015260208101516101e085015260408101516102008501526060810151610220850152612060565b80516001600160a01b0316825260208101516124d160208401826001600160a01b03169052565b5060408101516124ec60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015161255e828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e080820151805182850152602081015161020085015260408101516102208501526060810151610240850152611891565b60006102c06125d683886124aa565b6001600160a01b03861661026084015261028083018190526125fa81840186611d61565b915050826102a083015295945050505050565b60006020828403121561261f57600080fd5b81516104d781611da0565b6001600160a01b039390931683526020830191909152604082015260600190565b600061038080835261265f8184018e611d61565b905061266e602084018d6124aa565b6001600160a01b038b81166102808501528382036102a0850152612692828c611d61565b9981166102c08501529788166102e084015250509385166103008501529184166103208401529092166103408201526103600152949350505050565b6000602082840312156126e057600080fd5b815160ff811681146104d757600080fd5b60ff82811682821603908111156116a7576116a761236b565b600181815b8085111561274557816000190482111561272b5761272b61236b565b8085161561273857918102915b93841c939080029061270f565b509250929050565b60008261275c575060016116a7565b81612769575060006116a7565b816001811461277f5760028114612789576127a5565b60019150506116a7565b60ff84111561279a5761279a61236b565b50506001821b6116a7565b5060208310610133831016604e8410600b84101617156127c8575081810a6116a7565b6127d2838361270a565b80600019048211156127e6576127e661236b565b029392505050565b60006116a460ff84168361274d565b60008261281a57634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561283157600080fd5b81516104d781611e69565b6000825161284e818460208701611d3d565b919091019291505056fe416176654c32487970657264726976654465706c6f796572436f6f7264696e61746f72a264697066735822122090fc61442995c38b082b2354099f1dd1f7afb72acb3893c648a30d85589fb49b64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = AaveL2HyperdriveDeployerCoordinatorContractFunctions(aavel2hyperdrivedeployercoordinator_abi, self.w3, address)  # type: ignore

        self.errors = AaveL2HyperdriveDeployerCoordinatorContractErrors()

    errors: AaveL2HyperdriveDeployerCoordinatorContractErrors = (
        AaveL2HyperdriveDeployerCoordinatorContractErrors()
    )

    functions: AaveL2HyperdriveDeployerCoordinatorContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        factory: str

        coreDeployer: str

        target0Deployer: str

        target1Deployer: str

        target2Deployer: str

        target3Deployer: str

        target4Deployer: str

    @classmethod
    def constructor(cls, name: str, factory: str, coreDeployer: str, target0Deployer: str, target1Deployer: str, target2Deployer: str, target3Deployer: str, target4Deployer: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(factory),
            dataclass_to_tuple(coreDeployer),
            dataclass_to_tuple(target0Deployer),
            dataclass_to_tuple(target1Deployer),
            dataclass_to_tuple(target2Deployer),
            dataclass_to_tuple(target3Deployer),
            dataclass_to_tuple(target4Deployer),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = (
            AaveL2HyperdriveDeployerCoordinatorContractFunctions(
                aavel2hyperdrivedeployercoordinator_abi, w3, None
            )
        )
        contract.errors = AaveL2HyperdriveDeployerCoordinatorContractErrors()

        return contract
