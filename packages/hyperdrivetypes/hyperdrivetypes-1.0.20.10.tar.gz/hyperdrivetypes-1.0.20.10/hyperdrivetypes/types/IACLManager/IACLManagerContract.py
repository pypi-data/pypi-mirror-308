"""A web3.py Contract class for the IACLManager contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

iaclmanager_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "ADDRESSES_PROVIDER",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IPoolAddressesProvider",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "ASSET_LISTING_ADMIN_ROLE",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "BRIDGE_ROLE",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "EMERGENCY_ADMIN_ROLE",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "FLASH_BORROWER_ROLE",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "POOL_ADMIN_ROLE",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "RISK_ADMIN_ROLE",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "addAssetListingAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addBridge",
            "inputs": [
                {"name": "bridge", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addEmergencyAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addFlashBorrower",
            "inputs": [
                {
                    "name": "borrower",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addPoolAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addRiskAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "isAssetListingAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isBridge",
            "inputs": [
                {"name": "bridge", "type": "address", "internalType": "address"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isEmergencyAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isFlashBorrower",
            "inputs": [
                {
                    "name": "borrower",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isPoolAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isRiskAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "removeAssetListingAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeBridge",
            "inputs": [
                {"name": "bridge", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeEmergencyAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeFlashBorrower",
            "inputs": [
                {
                    "name": "borrower",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removePoolAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeRiskAdmin",
            "inputs": [
                {"name": "admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setRoleAdmin",
            "inputs": [
                {"name": "role", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "adminRole",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class IACLManagerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the IACLManager contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class IACLManagerADDRESSES_PROVIDERContractFunction0(PypechainContractFunction):
    """ContractFunction for the ADDRESSES_PROVIDER() method."""

    _function_name = "ADDRESSES_PROVIDER"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerADDRESSES_PROVIDERContractFunction(PypechainContractFunction):
    """ContractFunction for the ADDRESSES_PROVIDER method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "ADDRESSES_PROVIDER"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IACLManagerADDRESSES_PROVIDERContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerADDRESSES_PROVIDERContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerADDRESSES_PROVIDERContractFunction0._type_signature: IACLManagerADDRESSES_PROVIDERContractFunction0.factory(
                "IACLManagerADDRESSES_PROVIDERContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the ASSET_LISTING_ADMIN_ROLE() method."""

    _function_name = "ASSET_LISTING_ADMIN_ROLE"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the ASSET_LISTING_ADMIN_ROLE method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "ASSET_LISTING_ADMIN_ROLE"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction0._type_signature: IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction0.factory(
                "IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerBRIDGE_ROLEContractFunction0(PypechainContractFunction):
    """ContractFunction for the BRIDGE_ROLE() method."""

    _function_name = "BRIDGE_ROLE"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerBRIDGE_ROLEContractFunction(PypechainContractFunction):
    """ContractFunction for the BRIDGE_ROLE method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "BRIDGE_ROLE"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IACLManagerBRIDGE_ROLEContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerBRIDGE_ROLEContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerBRIDGE_ROLEContractFunction0._type_signature: IACLManagerBRIDGE_ROLEContractFunction0.factory(
                "IACLManagerBRIDGE_ROLEContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerEMERGENCY_ADMIN_ROLEContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the EMERGENCY_ADMIN_ROLE() method."""

    _function_name = "EMERGENCY_ADMIN_ROLE"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerEMERGENCY_ADMIN_ROLEContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the EMERGENCY_ADMIN_ROLE method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "EMERGENCY_ADMIN_ROLE"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IACLManagerEMERGENCY_ADMIN_ROLEContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerEMERGENCY_ADMIN_ROLEContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerEMERGENCY_ADMIN_ROLEContractFunction0._type_signature: IACLManagerEMERGENCY_ADMIN_ROLEContractFunction0.factory(
                "IACLManagerEMERGENCY_ADMIN_ROLEContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerFLASH_BORROWER_ROLEContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the FLASH_BORROWER_ROLE() method."""

    _function_name = "FLASH_BORROWER_ROLE"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerFLASH_BORROWER_ROLEContractFunction(PypechainContractFunction):
    """ContractFunction for the FLASH_BORROWER_ROLE method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "FLASH_BORROWER_ROLE"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IACLManagerFLASH_BORROWER_ROLEContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerFLASH_BORROWER_ROLEContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerFLASH_BORROWER_ROLEContractFunction0._type_signature: IACLManagerFLASH_BORROWER_ROLEContractFunction0.factory(
                "IACLManagerFLASH_BORROWER_ROLEContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerPOOL_ADMIN_ROLEContractFunction0(PypechainContractFunction):
    """ContractFunction for the POOL_ADMIN_ROLE() method."""

    _function_name = "POOL_ADMIN_ROLE"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerPOOL_ADMIN_ROLEContractFunction(PypechainContractFunction):
    """ContractFunction for the POOL_ADMIN_ROLE method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "POOL_ADMIN_ROLE"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IACLManagerPOOL_ADMIN_ROLEContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerPOOL_ADMIN_ROLEContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerPOOL_ADMIN_ROLEContractFunction0._type_signature: IACLManagerPOOL_ADMIN_ROLEContractFunction0.factory(
                "IACLManagerPOOL_ADMIN_ROLEContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerRISK_ADMIN_ROLEContractFunction0(PypechainContractFunction):
    """ContractFunction for the RISK_ADMIN_ROLE() method."""

    _function_name = "RISK_ADMIN_ROLE"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerRISK_ADMIN_ROLEContractFunction(PypechainContractFunction):
    """ContractFunction for the RISK_ADMIN_ROLE method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "RISK_ADMIN_ROLE"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IACLManagerRISK_ADMIN_ROLEContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerRISK_ADMIN_ROLEContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerRISK_ADMIN_ROLEContractFunction0._type_signature: IACLManagerRISK_ADMIN_ROLEContractFunction0.factory(
                "IACLManagerRISK_ADMIN_ROLEContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerAddAssetListingAdminContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the addAssetListingAdmin(str) method."""

    _function_name = "addAssetListingAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerAddAssetListingAdminContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the addAssetListingAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addAssetListingAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerAddAssetListingAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerAddAssetListingAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerAddAssetListingAdminContractFunction0._type_signature: IACLManagerAddAssetListingAdminContractFunction0.factory(
                "IACLManagerAddAssetListingAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerAddBridgeContractFunction0(PypechainContractFunction):
    """ContractFunction for the addBridge(str) method."""

    _function_name = "addBridge"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerAddBridgeContractFunction(PypechainContractFunction):
    """ContractFunction for the addBridge method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addBridge"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, bridge: str) -> IACLManagerAddBridgeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerAddBridgeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerAddBridgeContractFunction0._type_signature: IACLManagerAddBridgeContractFunction0.factory(
                "IACLManagerAddBridgeContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerAddEmergencyAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the addEmergencyAdmin(str) method."""

    _function_name = "addEmergencyAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerAddEmergencyAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the addEmergencyAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addEmergencyAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerAddEmergencyAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerAddEmergencyAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerAddEmergencyAdminContractFunction0._type_signature: IACLManagerAddEmergencyAdminContractFunction0.factory(
                "IACLManagerAddEmergencyAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerAddFlashBorrowerContractFunction0(PypechainContractFunction):
    """ContractFunction for the addFlashBorrower(str) method."""

    _function_name = "addFlashBorrower"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerAddFlashBorrowerContractFunction(PypechainContractFunction):
    """ContractFunction for the addFlashBorrower method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addFlashBorrower"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, borrower: str) -> IACLManagerAddFlashBorrowerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerAddFlashBorrowerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerAddFlashBorrowerContractFunction0._type_signature: IACLManagerAddFlashBorrowerContractFunction0.factory(
                "IACLManagerAddFlashBorrowerContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerAddPoolAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the addPoolAdmin(str) method."""

    _function_name = "addPoolAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerAddPoolAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the addPoolAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addPoolAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerAddPoolAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerAddPoolAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerAddPoolAdminContractFunction0._type_signature: IACLManagerAddPoolAdminContractFunction0.factory(
                "IACLManagerAddPoolAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerAddRiskAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the addRiskAdmin(str) method."""

    _function_name = "addRiskAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerAddRiskAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the addRiskAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addRiskAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerAddRiskAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerAddRiskAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerAddRiskAdminContractFunction0._type_signature: IACLManagerAddRiskAdminContractFunction0.factory(
                "IACLManagerAddRiskAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerIsAssetListingAdminContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the isAssetListingAdmin(str) method."""

    _function_name = "isAssetListingAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerIsAssetListingAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the isAssetListingAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isAssetListingAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerIsAssetListingAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerIsAssetListingAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerIsAssetListingAdminContractFunction0._type_signature: IACLManagerIsAssetListingAdminContractFunction0.factory(
                "IACLManagerIsAssetListingAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerIsBridgeContractFunction0(PypechainContractFunction):
    """ContractFunction for the isBridge(str) method."""

    _function_name = "isBridge"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerIsBridgeContractFunction(PypechainContractFunction):
    """ContractFunction for the isBridge method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isBridge"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, bridge: str) -> IACLManagerIsBridgeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerIsBridgeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerIsBridgeContractFunction0._type_signature: IACLManagerIsBridgeContractFunction0.factory(
                "IACLManagerIsBridgeContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerIsEmergencyAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the isEmergencyAdmin(str) method."""

    _function_name = "isEmergencyAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerIsEmergencyAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the isEmergencyAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isEmergencyAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerIsEmergencyAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerIsEmergencyAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerIsEmergencyAdminContractFunction0._type_signature: IACLManagerIsEmergencyAdminContractFunction0.factory(
                "IACLManagerIsEmergencyAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerIsFlashBorrowerContractFunction0(PypechainContractFunction):
    """ContractFunction for the isFlashBorrower(str) method."""

    _function_name = "isFlashBorrower"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerIsFlashBorrowerContractFunction(PypechainContractFunction):
    """ContractFunction for the isFlashBorrower method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isFlashBorrower"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, borrower: str) -> IACLManagerIsFlashBorrowerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerIsFlashBorrowerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerIsFlashBorrowerContractFunction0._type_signature: IACLManagerIsFlashBorrowerContractFunction0.factory(
                "IACLManagerIsFlashBorrowerContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerIsPoolAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the isPoolAdmin(str) method."""

    _function_name = "isPoolAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerIsPoolAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the isPoolAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isPoolAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerIsPoolAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerIsPoolAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerIsPoolAdminContractFunction0._type_signature: IACLManagerIsPoolAdminContractFunction0.factory(
                "IACLManagerIsPoolAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerIsRiskAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the isRiskAdmin(str) method."""

    _function_name = "isRiskAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IACLManagerIsRiskAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the isRiskAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isRiskAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerIsRiskAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerIsRiskAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerIsRiskAdminContractFunction0._type_signature: IACLManagerIsRiskAdminContractFunction0.factory(
                "IACLManagerIsRiskAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerRemoveAssetListingAdminContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the removeAssetListingAdmin(str) method."""

    _function_name = "removeAssetListingAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerRemoveAssetListingAdminContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the removeAssetListingAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeAssetListingAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerRemoveAssetListingAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerRemoveAssetListingAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerRemoveAssetListingAdminContractFunction0._type_signature: IACLManagerRemoveAssetListingAdminContractFunction0.factory(
                "IACLManagerRemoveAssetListingAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerRemoveBridgeContractFunction0(PypechainContractFunction):
    """ContractFunction for the removeBridge(str) method."""

    _function_name = "removeBridge"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerRemoveBridgeContractFunction(PypechainContractFunction):
    """ContractFunction for the removeBridge method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeBridge"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, bridge: str) -> IACLManagerRemoveBridgeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerRemoveBridgeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerRemoveBridgeContractFunction0._type_signature: IACLManagerRemoveBridgeContractFunction0.factory(
                "IACLManagerRemoveBridgeContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerRemoveEmergencyAdminContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the removeEmergencyAdmin(str) method."""

    _function_name = "removeEmergencyAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerRemoveEmergencyAdminContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the removeEmergencyAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeEmergencyAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerRemoveEmergencyAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerRemoveEmergencyAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerRemoveEmergencyAdminContractFunction0._type_signature: IACLManagerRemoveEmergencyAdminContractFunction0.factory(
                "IACLManagerRemoveEmergencyAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerRemoveFlashBorrowerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the removeFlashBorrower(str) method."""

    _function_name = "removeFlashBorrower"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerRemoveFlashBorrowerContractFunction(PypechainContractFunction):
    """ContractFunction for the removeFlashBorrower method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeFlashBorrower"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, borrower: str) -> IACLManagerRemoveFlashBorrowerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerRemoveFlashBorrowerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerRemoveFlashBorrowerContractFunction0._type_signature: IACLManagerRemoveFlashBorrowerContractFunction0.factory(
                "IACLManagerRemoveFlashBorrowerContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerRemovePoolAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the removePoolAdmin(str) method."""

    _function_name = "removePoolAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerRemovePoolAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the removePoolAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removePoolAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerRemovePoolAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerRemovePoolAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerRemovePoolAdminContractFunction0._type_signature: IACLManagerRemovePoolAdminContractFunction0.factory(
                "IACLManagerRemovePoolAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerRemoveRiskAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the removeRiskAdmin(str) method."""

    _function_name = "removeRiskAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerRemoveRiskAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the removeRiskAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeRiskAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, admin: str) -> IACLManagerRemoveRiskAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerRemoveRiskAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerRemoveRiskAdminContractFunction0._type_signature: IACLManagerRemoveRiskAdminContractFunction0.factory(
                "IACLManagerRemoveRiskAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerSetRoleAdminContractFunction0(PypechainContractFunction):
    """ContractFunction for the setRoleAdmin(bytes,bytes) method."""

    _function_name = "setRoleAdmin"
    _type_signature = expand_struct_type_str(tuple(["bytes", "bytes"]), structs)
    _error_class = IACLManagerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IACLManagerSetRoleAdminContractFunction(PypechainContractFunction):
    """ContractFunction for the setRoleAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setRoleAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, role: bytes, adminRole: bytes) -> IACLManagerSetRoleAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IACLManagerSetRoleAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            IACLManagerSetRoleAdminContractFunction0._type_signature: IACLManagerSetRoleAdminContractFunction0.factory(
                "IACLManagerSetRoleAdminContractFunction0", **kwargs
            ),
        }
        return out


class IACLManagerContractFunctions(ContractFunctions):
    """ContractFunctions for the IACLManager contract."""

    ADDRESSES_PROVIDER: IACLManagerADDRESSES_PROVIDERContractFunction

    ASSET_LISTING_ADMIN_ROLE: (
        IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction
    )

    BRIDGE_ROLE: IACLManagerBRIDGE_ROLEContractFunction

    EMERGENCY_ADMIN_ROLE: IACLManagerEMERGENCY_ADMIN_ROLEContractFunction

    FLASH_BORROWER_ROLE: IACLManagerFLASH_BORROWER_ROLEContractFunction

    POOL_ADMIN_ROLE: IACLManagerPOOL_ADMIN_ROLEContractFunction

    RISK_ADMIN_ROLE: IACLManagerRISK_ADMIN_ROLEContractFunction

    addAssetListingAdmin: IACLManagerAddAssetListingAdminContractFunction

    addBridge: IACLManagerAddBridgeContractFunction

    addEmergencyAdmin: IACLManagerAddEmergencyAdminContractFunction

    addFlashBorrower: IACLManagerAddFlashBorrowerContractFunction

    addPoolAdmin: IACLManagerAddPoolAdminContractFunction

    addRiskAdmin: IACLManagerAddRiskAdminContractFunction

    isAssetListingAdmin: IACLManagerIsAssetListingAdminContractFunction

    isBridge: IACLManagerIsBridgeContractFunction

    isEmergencyAdmin: IACLManagerIsEmergencyAdminContractFunction

    isFlashBorrower: IACLManagerIsFlashBorrowerContractFunction

    isPoolAdmin: IACLManagerIsPoolAdminContractFunction

    isRiskAdmin: IACLManagerIsRiskAdminContractFunction

    removeAssetListingAdmin: IACLManagerRemoveAssetListingAdminContractFunction

    removeBridge: IACLManagerRemoveBridgeContractFunction

    removeEmergencyAdmin: IACLManagerRemoveEmergencyAdminContractFunction

    removeFlashBorrower: IACLManagerRemoveFlashBorrowerContractFunction

    removePoolAdmin: IACLManagerRemovePoolAdminContractFunction

    removeRiskAdmin: IACLManagerRemoveRiskAdminContractFunction

    setRoleAdmin: IACLManagerSetRoleAdminContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.ADDRESSES_PROVIDER = (
            IACLManagerADDRESSES_PROVIDERContractFunction.factory(
                "ADDRESSES_PROVIDER",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="ADDRESSES_PROVIDER",
            )
        )
        self.ASSET_LISTING_ADMIN_ROLE = (
            IACLManagerASSET_LISTING_ADMIN_ROLEContractFunction.factory(
                "ASSET_LISTING_ADMIN_ROLE",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="ASSET_LISTING_ADMIN_ROLE",
            )
        )
        self.BRIDGE_ROLE = IACLManagerBRIDGE_ROLEContractFunction.factory(
            "BRIDGE_ROLE",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="BRIDGE_ROLE",
        )
        self.EMERGENCY_ADMIN_ROLE = (
            IACLManagerEMERGENCY_ADMIN_ROLEContractFunction.factory(
                "EMERGENCY_ADMIN_ROLE",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="EMERGENCY_ADMIN_ROLE",
            )
        )
        self.FLASH_BORROWER_ROLE = (
            IACLManagerFLASH_BORROWER_ROLEContractFunction.factory(
                "FLASH_BORROWER_ROLE",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="FLASH_BORROWER_ROLE",
            )
        )
        self.POOL_ADMIN_ROLE = (
            IACLManagerPOOL_ADMIN_ROLEContractFunction.factory(
                "POOL_ADMIN_ROLE",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="POOL_ADMIN_ROLE",
            )
        )
        self.RISK_ADMIN_ROLE = (
            IACLManagerRISK_ADMIN_ROLEContractFunction.factory(
                "RISK_ADMIN_ROLE",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="RISK_ADMIN_ROLE",
            )
        )
        self.addAssetListingAdmin = (
            IACLManagerAddAssetListingAdminContractFunction.factory(
                "addAssetListingAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="addAssetListingAdmin",
            )
        )
        self.addBridge = IACLManagerAddBridgeContractFunction.factory(
            "addBridge",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="addBridge",
        )
        self.addEmergencyAdmin = (
            IACLManagerAddEmergencyAdminContractFunction.factory(
                "addEmergencyAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="addEmergencyAdmin",
            )
        )
        self.addFlashBorrower = (
            IACLManagerAddFlashBorrowerContractFunction.factory(
                "addFlashBorrower",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="addFlashBorrower",
            )
        )
        self.addPoolAdmin = IACLManagerAddPoolAdminContractFunction.factory(
            "addPoolAdmin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="addPoolAdmin",
        )
        self.addRiskAdmin = IACLManagerAddRiskAdminContractFunction.factory(
            "addRiskAdmin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="addRiskAdmin",
        )
        self.isAssetListingAdmin = (
            IACLManagerIsAssetListingAdminContractFunction.factory(
                "isAssetListingAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isAssetListingAdmin",
            )
        )
        self.isBridge = IACLManagerIsBridgeContractFunction.factory(
            "isBridge",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="isBridge",
        )
        self.isEmergencyAdmin = (
            IACLManagerIsEmergencyAdminContractFunction.factory(
                "isEmergencyAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isEmergencyAdmin",
            )
        )
        self.isFlashBorrower = (
            IACLManagerIsFlashBorrowerContractFunction.factory(
                "isFlashBorrower",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isFlashBorrower",
            )
        )
        self.isPoolAdmin = IACLManagerIsPoolAdminContractFunction.factory(
            "isPoolAdmin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="isPoolAdmin",
        )
        self.isRiskAdmin = IACLManagerIsRiskAdminContractFunction.factory(
            "isRiskAdmin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="isRiskAdmin",
        )
        self.removeAssetListingAdmin = (
            IACLManagerRemoveAssetListingAdminContractFunction.factory(
                "removeAssetListingAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removeAssetListingAdmin",
            )
        )
        self.removeBridge = IACLManagerRemoveBridgeContractFunction.factory(
            "removeBridge",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="removeBridge",
        )
        self.removeEmergencyAdmin = (
            IACLManagerRemoveEmergencyAdminContractFunction.factory(
                "removeEmergencyAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removeEmergencyAdmin",
            )
        )
        self.removeFlashBorrower = (
            IACLManagerRemoveFlashBorrowerContractFunction.factory(
                "removeFlashBorrower",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removeFlashBorrower",
            )
        )
        self.removePoolAdmin = (
            IACLManagerRemovePoolAdminContractFunction.factory(
                "removePoolAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removePoolAdmin",
            )
        )
        self.removeRiskAdmin = (
            IACLManagerRemoveRiskAdminContractFunction.factory(
                "removeRiskAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removeRiskAdmin",
            )
        )
        self.setRoleAdmin = IACLManagerSetRoleAdminContractFunction.factory(
            "setRoleAdmin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setRoleAdmin",
        )


class IACLManagerContract(Contract):
    """A web3.py Contract class for the IACLManager contract."""

    abi: ABI = iaclmanager_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IACLManagerContractFunctions(iaclmanager_abi, self.w3, address)  # type: ignore

    functions: IACLManagerContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IACLManagerContractFunctions(
            iaclmanager_abi, w3, None
        )

        return contract
