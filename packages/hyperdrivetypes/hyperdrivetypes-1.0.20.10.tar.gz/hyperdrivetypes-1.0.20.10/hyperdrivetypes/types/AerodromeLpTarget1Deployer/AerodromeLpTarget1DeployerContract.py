"""A web3.py Contract class for the AerodromeLpTarget1Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..AerodromeLpConversions import AerodromeLpConversionsContract
from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

aerodromelptarget1deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        }
    ],
)


class AerodromeLpTarget1DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the AerodromeLpTarget1Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class AerodromeLpTarget1DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )
    _error_class = AerodromeLpTarget1DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLpTarget1DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, _extraData: bytes, _salt: bytes) -> AerodromeLpTarget1DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLpTarget1DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLpTarget1DeployerDeployTargetContractFunction0._type_signature: AerodromeLpTarget1DeployerDeployTargetContractFunction0.factory(
                "AerodromeLpTarget1DeployerDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLpTarget1DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the AerodromeLpTarget1Deployer contract."""

    deployTarget: AerodromeLpTarget1DeployerDeployTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            AerodromeLpTarget1DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )


class AerodromeLpTarget1DeployerContract(Contract):
    """A web3.py Contract class for the AerodromeLpTarget1Deployer contract."""

    abi: ABI = aerodromelptarget1deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b50614635806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e3660046102aa565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60006014835110156100b75760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964205f657874726144617461206c656e67746800000000000000604482015260640160405180910390fd5b6000838060200190518101906100cd9190610406565b604080513360208201529081018590529091506060016040516020818303038152906040528051906020012086868360405161010890610141565b6101149392919061042a565b8190604051809103906000f5905080158015610134573d6000803e3d6000fd5b509150505b949350505050565b6140a1806200055f83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156101895761018961014f565b60405290565b6001600160a01b03811681146101a457600080fd5b50565b80356101b28161018f565b919050565b6000608082840312156101c957600080fd5b6040516080810181811067ffffffffffffffff821117156101ec576101ec61014f565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f83011261022e57600080fd5b813567ffffffffffffffff808211156102495761024961014f565b604051601f8301601f19908116603f011681019082821181831017156102715761027161014f565b8160405283815286602085880101111561028a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156102c257600080fd5b610260808212156102d257600080fd5b6102da610165565b91506102e5876101a7565b82526102f3602088016101a7565b6020830152610304604088016101a7565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e083015261010080880135818401525061012080880135818401525061014080880135818401525061016061036d8189016101a7565b9083015261018061037f8882016101a7565b908301526101a06103918882016101a7565b908301526101c06103a38882016101a7565b908301526101e06103b6898983016101b7565b81840152508195506103c98188016101a7565b9450505061028085013567ffffffffffffffff8111156103e857600080fd5b6103f48782880161021d565b949793965093946102a0013593505050565b60006020828403121561041857600080fd5b81516104238161018f565b9392505050565b83516001600160a01b031681526102a08101602085015161045660208401826001600160a01b03169052565b50604085015161047160408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e0830152610100808601518184015250610120808601518184015250610140808601518184015250610160808601516104e3828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e0808701518051918501919091526020810151610200850152604081015161022085015260600151610240840152848116610260840152831661028083015261013956fe6102a06040523480156200001257600080fd5b50604051620040a1380380620040a18339810160408190526200003591620001b5565b600160005582516001600160a01b039081166080908152602080860151831660a0908152918601516101a052908501516101c05260c0808601516101e090815260e0808801516102005261012080890151909352610100808901519091526101408089015190915290870180515190925281519092015190915280516040908101516101605290516060908101516101805290850151821661024052909301516102605290821661022052166102805262000305565b60405161020081016001600160401b03811182821017156200011d57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013b57600080fd5b919050565b6000608082840312156200015357600080fd5b604051608081016001600160401b03811182821017156200018457634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008060008385036102a0811215620001cd57600080fd5b61026080821215620001de57600080fd5b620001e8620000eb565b9150620001f58662000123565b8252620002056020870162000123565b6020830152620002186040870162000123565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e08301526101008087015181840152506101208087015181840152506101408087015181840152506101606200028381880162000123565b908301526101806200029787820162000123565b908301526101a0620002ab87820162000123565b908301526101c0620002bf87820162000123565b908301526101e0620002d48888830162000140565b8184015250819450620002e981870162000123565b93505050620002fc610280850162000123565b90509250925092565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613bf2620004af600039600061264d015260005050600050506000610b650152600050506000818160af015281816103250152612c870152600081816113eb015281816117fc0152818161185f01528181612865015281816128a101528181612aa00152612c6101526000818161071301528181610de801528181610e2f01528181610ff401528181611661015281816116af0152612c3b01526000611b9c015260008181611cc201528181612325015261239e0152600081816108d701528181610f8c01528181611c960152612372015260008181610e8101526122eb01526000818161073401528181610dc601528181610e50015281816110150152818161163f015281816116d00152612cad01526000818161080f01528181610f0b01528181611758015281816121c001526132380152600081816105d20152818161064d015281816106c30152818161078f01526107c701526000505060006126be0152613bf26000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806329b23fc11461003b578063ded0623114610060575b600080fd5b61004e610049366004613646565b610073565b60405190815260200160405180910390f35b61004e61006e366004613646565b61008c565b60006100818585858561009a565b90505b949350505050565b600061008185858585610310565b60006100a461054f565b6100ad82610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156100ee5760405163211ddda360e11b815260040160405180910390fd5b60006100f86105b2565b90508542101561011d5761011761010d6105ca565b82600460016105f6565b5061012d565b61012b8682600460016105f6565b505b61014261013b600288610c73565b3387610ca8565b6000806000806000806101568b888e610d81565b95509550955095509550955060008c90508c42101561021657826009600082825461018191906136bb565b9091555061019990506101926105ca565b4284611075565b6101a68c888787856111b3565b60006101b18e61132d565b90506101cf6101bf8e611377565b6101c990836136ce565b826113a5565b6101d8896113e4565b6101e4576101e4611444565b60006101ef8a61145d565b90508061020f57604051638bdf918d60e01b815260040160405180910390fd5b505061022d565b610220868961146a565b955061022b8861145d565b505b600061023a878a8d61154b565b90508b81101561025d5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61026d600288610c73565b61027a6020830183613703565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102b86040890160208a0161372e565b6102cc8a6102c68d8f6136bb565b906115e5565b8d6102da60408c018c61374b565b6040516102ee9897969594939291906137bb565b60405180910390a450939c505050505050505050505050506100846001600055565b600061031a61054f565b61032382610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156103645760405163211ddda360e11b815260040160405180910390fd5b600061036e6105b2565b9050854210156103895761038361010d6105ca565b50610399565b6103978682600460016105f6565b505b6103a761013b600188610c73565b6000806000806000806103bb8b888e6115fa565b95509550955095509550955060008c90508c42101561046e5782600960008282546103e691906136bb565b909155506103f790506101926105ca565b6104048c888787856117e5565b600061040f8261132d565b905061042761041d8e611377565b6101c99083613803565b610430896113e4565b61043c5761043c611444565b60006104478a61145d565b90508061046757604051638bdf918d60e01b815260040160405180910390fd5b5050610485565b610478868961146a565b95506104838861145d565b505b6000610492878a8d61154b565b90508b8110156104b55760405163c972651760e01b815260040160405180910390fd5b8c898c6104c3600186610c73565b6104d06020830183613703565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee526788888761050e6040890160208a0161372e565b8a61051c60408b018b61374b565b60405161052f979695949392919061382b565b60405180910390a450919a50505050505050505050506100846001600055565b60026000540361057257604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006105886020830183613703565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b60006105c5670de0b6b3a76400006119d6565b905090565b60006105c5427f0000000000000000000000000000000000000000000000000000000000000000611a4e565b600084815260086020526040812060018101546001600160801b031615158061061e57504286115b1561063757600101546001600160801b03169050610084565b60008060006106446105ca565b905060006106727f00000000000000000000000000000000000000000000000000000000000000008b6136bb565b90505b818110156106e8576000818152600860205260409020600101546001600160801b031680156106c0576000828152600860205260409020549094506001600160801b031692506106e8565b507f000000000000000000000000000000000000000000000000000000000000000001610675565b8360000361075b578893506107586106fe611a64565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a85565b92505b5061076583611a9c565b6001850180546001600160801b0319166001600160801b03929092169190911790556107bb6107b47f00000000000000000000000000000000000000000000000000000000000000008b61386c565b8a84611075565b6107f9896107f36107ec7f0000000000000000000000000000000000000000000000000000000000000000836136bb565b4290611ac6565b84611075565b61080288611adb565b50600090506008816108347f00000000000000000000000000000000000000000000000000000000000000008d61386c565b815260208101919091526040016000908120600101546001600160801b0316915061086060028c610c73565b6000818152600b60205260408120549192508c8c83156109a6576001925060008061088f86898d866000611c7f565b9150915080600960008282546108a591906136bb565b909155506108c19050866000846108bb81611377565b886111b3565b6108cb81836136bb565b91506108fb86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611d4e565b915061090f61090a83856115e5565b611d98565b600680546002906109309084906201000090046001600160701b031661387f565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061095d82611a9c565b6006805460109061097f908490600160801b90046001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b60006109b3600184610c73565b6000818152600b60205260409020549091508015610ac257600194506000806109e0838b8f886001611c7f565b9150915080600960008282546109f691906136bb565b90915550610a12905083600084610a0c81611377565b8a6117e5565b610a1c818361386c565b9150610a2b61090a83876115e5565b60068054600290610a4c9084906201000090046001600160701b031661387f565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7982611a9c565b60068054601090610a9b908490600160801b90046001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610afc57610aee610ad487611377565b610add83611377565b610ae791906136ce565b60006113a5565b8e610af98482611dc2565b50505b6000610b0784611fbc565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be591906138bf565b90506001600160a01b03811615610c5a57610c575a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612108565b50505b509b9d5050505050505050505050505050949350505050565b60006001600160f81b03821115610c9d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610ceb57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610d2e90849061386c565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600080600080600080600080610d95611a64565b90506000610da28a612193565b6002549091508c908c90610e0c908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f00000000000000000000000000000000000000000000000000000000000000006121e4565b600254919d509a50909550610e74908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a85565b9550610eaa858c610ea5897f0000000000000000000000000000000000000000000000000000000000000000612254565b612284565b15610eb757610eb7611444565b6000806000610ec885878b876122c6565b9c5091945092509050610edb818461386c565b610ee590896136bb565b9750610ef182846136bb565b610efb908d6136bb565b9b505050505050506000600860007f00000000000000000000000000000000000000000000000000000000000000008c610f35919061386c565b815260208101919091526040016000908120600101546001600160801b03169150428b11610f7d5760008b8152600860205260409020600101546001600160801b0316610f7f565b8b5b90508b610fb08e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611d4e565b9950610fbc878a61386c565b9850670de0b6b3a7640000611039610fd487876136bb565b600254610ff2908f90600160801b90046001600160801b031661386c565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a85565b111561104757611047611444565b6110578a8a878a878760006123da565b939d50919b5090995090975050505050505093975093979195509350565b600083815260086020526040902054600160801b90046001600160801b03168083036110a15750505050565b6000848152600860205260408120546001600160801b0316908190036110fb576110ca83611a9c565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611179565b61114c611147670de0b6b3a7640000611114888661386c565b61111e91906138dc565b85670de0b6b3a7640000611132878a61386c565b61113c91906138dc565b859291906001612479565b611a9c565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61118284611a9c565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111fc611147826111df670de0b6b3a7640000866138dc565b600554600160801b90046001600160801b031691908a6000612479565b600580546001600160801b03928316600160801b02921691909117905561122286611a9c565b61122c90826138f3565b600480546001600160801b03928316600160801b02921691909117905561125284611a9c565b6002805460009061126d9084906001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061129a83612523565b600480546000906112af908490600f0b613913565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506112df85611a9c565b60028054601090611301908490600160801b90046001600160801b03166138f3565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000611355600b6000611341600286610c73565b815260200190815260200160002054611377565b611367600b6000611341600187610c73565b61137191906136ce565b92915050565b60006001600160ff1b038211156113a15760405163396ea70160e11b815260040160405180910390fd5b5090565b6003546113c090611147906001600160801b0316848461255f565b600380546001600160801b0319166001600160801b03929092169190911790555050565b60006114107f0000000000000000000000000000000000000000000000000000000000000000836125c6565b60035461142691906001600160801b03166136bb565b60025461143c906001600160801b0316846115e5565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000611371826004611dc2565b600080600061147884611adb565b9092509050600061148986866115e5565b9050818311156114a15761149e8683856125db565b95505b828110156114b35780830392506114b8565b600092505b6114c183611d98565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b909104168087101561151457869003611518565b5060005b61152181611a9c565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b60008061155885856115e5565b9050611563816125f9565b9450846000036115775760009150506115de565b84915061158a604084016020850161372e565b156115b9576115b2856115a06020860186613703565b6115ad604087018761374b565b612634565b91506115dc565b6115dc856115ca6020860186613703565b6115d7604087018761374b565b6126e7565b505b9392505050565b60006115de8383670de0b6b3a76400006125db565b60008060008060008060008061160e611a64565b9050600061161b8a612193565b6002549091508b908d90611685908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f0000000000000000000000000000000000000000000000000000000000000000612700565b600254919d509b50909550600090819081906116f4908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a85565b985061170284878b886122c6565b9c509194509092509050611716828461386c565b611720908961386c565b975061172c81846136bb565b611736908e61386c565b9c506117428a8e6136bb565b9b50505050505050506117cf86868386600860007f00000000000000000000000000000000000000000000000000000000000000008f611782919061386c565b81526020810191909152604001600020600101546001600160801b0316428e116117c65760008e8152600860205260409020600101546001600160801b03166117c8565b8e5b60016123da565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b03168381108061182757507f0000000000000000000000000000000000000000000000000000000000000000611825858361386c565b105b1561183457611834611444565b6004549084900390600f0b61184984826136ce565b90508361185586611377565b13801561188a57507f00000000000000000000000000000000000000000000000000000000000000006118888383612754565b105b1561189757611897611444565b600354600160801b90046001600160801b03166118d9611147826118c3670de0b6b3a7640000886138dc565b6005546001600160801b031691908c6000612479565b600580546001600160801b0319166001600160801b0392909216919091179055611903888261386c565b905061190e81611a9c565b600380546001600160801b03928316600160801b02921691909117905561193483611a9c565b600280546001600160801b0319166001600160801b039290921691909117905561195d82612523565b600480546001600160801b0319166001600160801b039290921691909117905561198687611a9c565b600280546010906119a8908490600160801b90046001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60405163b88fed9f60e01b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f906024015b602060405180830381865af4158015611a2a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190613940565b6000611a5a828461396f565b6115de908461386c565b6002546004546000916105c5916001600160801b0390911690600f0b612754565b600061008182611a968588886125db565b9061277a565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611ad557826115de565b50919050565b6006546000908190611afe908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611c7a576000611b28838361386c565b9050611b3761114782866127ef565b60068054601090611b59908490600160801b90046001600160801b03166138f3565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611b92858361280490919063ffffffff16565b90506000611bc0827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611bd491906136bb565b90915550611be49050818361386c565b9150611bef82611a9c565b60028054600090611c0a9084906001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c3782612819565b60048054600090611c4c908490600f0b613913565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611c8c8785612804565b91506000611cba837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611ce6817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611d0957611cf8828261386c565b611d02908461386c565b9250611d20565b611d13828261386c565b611d1d90846136bb565b92505b86861015611d4357611d338387896125db565b9250611d408287896125db565b91505b509550959350505050565b600080611d6684611d608a888a6125db565b90612804565b9050611d738884866125db565b611d7d90826136bb565b905086811115611d8d5786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611e0d916001600160801b03169061386c565b905080600003611e21576001915050611371565b6000611e2c85612843565b905080600003611e4157600192505050611371565b600080611e4f8385896128df565b9150915080611e65576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611ea1929190613a01565b6040805180830381865af4158015611ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee19190613a77565b91509150611eff611ef182611377565b611efa90613a9b565b612a5a565b925082611f155760009650505050505050611371565b611f1e82611a9c565b60078054600090611f399084906001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f6681611a9c565b60078054601090611f88908490600160801b90046001600160801b031661389f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611fe587612bf2565b6040518263ffffffff1660e01b81526004016120019190613ab7565b6040805180830381865af415801561201d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120419190613ac6565b9150915080612057575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916120bd916136bb565b6120c7919061386c565b9050806000036120df57506000958695509350505050565b60008087116120ef5760006120fa565b6120fa8488846125db565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561212e5761212e613af6565b6040519080825280601f01601f191660200182016040528015612158576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612179578692505b828152826000602083013e90999098509650505050505050565b60008061219e6105ca565b90508083116121ae5760006121b8565b6121b8818461386c565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612804565b600080806122056121fd88670de0b6b3a764000061386c565b899087612d2c565b905086156122475761221788886125c6565b91506122388a8a846122318a670de0b6b3a764000061386c565b8989612d52565b925061224483826136bb565b90505b9750975097945050505050565b600061227261226b84670de0b6b3a764000061386c565b83906125c6565b6115de90670de0b6b3a764000061386c565b6000806122bb85612293611a64565b61229d91906136bb565b600254610ff2908790600160801b90046001600160801b031661386c565b909210949350505050565b600080808061231d87866123168b6123106122e98c670de0b6b3a764000061386c565b7f0000000000000000000000000000000000000000000000000000000000000000906125c6565b906125c6565b9190612d2c565b9350612349847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061236a61236289670de0b6b3a764000061386c565b8a9088612d2c565b9050612396817f00000000000000000000000000000000000000000000000000000000000000006125c6565b93506123c2847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123cc90846136bb565b915050945094509450949050565b600080600080600080888810156124495786156123ff576123fc8d898b6125db565b9c505b61240a8c898b6125db565b9b506124158b611377565b61241e8d611377565b61242891906136ce565b90506124358b898b6125db565b9a506124428a898b6125db565b9950612468565b6124528b611377565b61245b8d611377565b61246591906136ce565b90505b9b9c9a9b999a975050505050505050565b60008260000361248a57508461251a565b81156124dd576124bb61249d84876136bb565b6124a785876115e5565b6124b1888a6115e5565b611d6091906136bb565b905060006124c98588611ac6565b9050808210156124d7578091505b5061251a565b8285036124ec5750600061251a565b6125176124f9848761386c565b61250385876125c6565b61250d888a6115e5565b611d60919061386c565b90505b95945050505050565b600060016001607f1b0319821280612541575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b60008061256d846000612d75565b612578846000612d75565b61258291906136ce565b9050600081131561259e5761259781866136bb565b94506125bd565b60008112156125bd576125b081613a9b565b6125ba908661386c565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612d2c565b60008260001904841183021582026125f257600080fd5b5091020490565b6040516363737ac960e11b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063c6e6f59290602401611a0d565b604051632e1a7d4d60e01b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561269957600080fd5b505af11580156126ad573d6000803e3d6000fd5b506125bd9250506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690508587612d8b565b60405163350b944160e11b815260040160405180910390fd5b6000808061272161271988670de0b6b3a764000061386c565b8990876125db565b905086156122475761273388886115e5565b91506122388a8a8461274d8a670de0b6b3a764000061386c565b8989612de2565b6000806127618484612df3565b90925090508061277357612773611444565b5092915050565b6000816000036127935750670de0b6b3a7640000611371565b826000036127a357506000611371565b60006127ae83611377565b905060006127c36127be86611377565b612e32565b90508181026127da670de0b6b3a764000082613b0c565b90506127e581613058565b9695505050505050565b60006115de83670de0b6b3a764000084612d2c565b60006115de83670de0b6b3a7640000846125db565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b600354600090819061285e906001600160801b0316846127ef565b905061288a7f0000000000000000000000000000000000000000000000000000000000000000826136bb565b6002546001600160801b03161115611ad5576002547f0000000000000000000000000000000000000000000000000000000000000000906128d59083906001600160801b031661386c565b6115de919061386c565b6128e7613593565b6000806128f384612bf2565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b815260040161292e9190613ab7565b6040805180830381865af415801561294a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296e9190613ac6565b9350905082612983575060009150612a529050565b60006129aa6129a58461016001518561014001516115e590919063ffffffff16565b611377565b6129ca6129a58561012001518661010001516125c690919063ffffffff16565b6129d491906136ce565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b379190613b3a565b935093509350935080612b535750600098975050505050505050565b868414612b8457612b6384611a9c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bb557612b9483612523565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612be357612bc582611a9c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612bfa6135e5565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612cf291166131ed565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612d24929004166131ed565b905292915050565b6000826000190484118302158202612d4357600080fd5b50910281810615159190040190565b600080612d63888888888888613263565b909250905080611d8d57611d8d611444565b6000818313612d8457816115de565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612ddd908490613344565b505050565b600080612d638888888888886133ac565b600080600083612e0286611377565b612e0c91906136ce565b90506000811215612e24576000809250925050612e2b565b9150600190505b9250929050565b6000808213612e545760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ed79084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361307357506000919050565b680755bf798b4a1bf1e5821261309c576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906127e574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a76400006132016105ca565b61320b91906138dc565b905080831161321b576000613225565b613225818461386c565b91506115de61325c670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006138dc565b8390612804565b6000806000613275898988888861346c565b90508688101561328c576000809250925050613339565b968690039661329b888761277a565b9750878110156132b2576000809250925050613339565b8781036132c0818688612d2c565b9050670de0b6b3a764000081106132f4576132ed6132e6670de0b6b3a7640000896127ef565b829061277a565b905061330c565b6133096132e6670de0b6b3a764000089612804565b90505b61331681866127ef565b90508981101561332e57600080935093505050613339565b899003925060019150505b965096945050505050565b60006133596001600160a01b0384168361349b565b9050805160001415801561337e57508080602001905181019061337c9190613b70565b155b15612ddd57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b60008060006133be898988888861346c565b90506133ce86611a96898b6136bb565b9750878110156133e5576000809250925050613339565b8781036133f3818688612d2c565b9050670de0b6b3a76400008110613420576134196132e6670de0b6b3a7640000896127ef565b9050613438565b6134356132e6670de0b6b3a764000089612804565b90505b61344281866127ef565b9050808a101561345a57600080935093505050613339565b90980398600198509650505050505050565b6000613478858561277a565b61349161348986611a96868b6125c6565b859085612d2c565b61251791906136bb565b60606115de8383600084600080856001600160a01b031684866040516134c19190613b8d565b60006040518083038185875af1925050503d80600081146134fe576040519150601f19603f3d011682016040523d82523d6000602084013e613503565b606091505b50915091506127e58683836060826135235761351e8261356a565b6115de565b815115801561353a57506001600160a01b0384163b155b1561356357604051639996b31560e01b81526001600160a01b03851660048201526024016133a3565b50806115de565b80511561357a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806135a76135e5565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561365c57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561368857600080fd5b85016060818803121561369a57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611371576113716136a5565b8181036000831280158383131683831282161715612773576127736136a5565b6001600160a01b03811681146105af57600080fd5b60006020828403121561371557600080fd5b81356115de816136ee565b80151581146105af57600080fd5b60006020828403121561374057600080fd5b81356115de81613720565b6000808335601e1984360301811261376257600080fd5b83018035915067ffffffffffffffff82111561377d57600080fd5b602001915036819003821315612e2b57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c082015260006137f560e083018486613792565b9a9950505050505050505050565b8082018281126000831280158216821582161715613823576138236136a5565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a0820152600061385f60c083018486613792565b9998505050505050505050565b81810381811115611371576113716136a5565b6001600160701b03818116838216019080821115612773576127736136a5565b6001600160801b03818116838216019080821115612773576127736136a5565b6000602082840312156138d157600080fd5b81516115de816136ee565b8082028115828204841417611371576113716136a5565b6001600160801b03828116828216039080821115612773576127736136a5565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715611371576113716136a5565b60006020828403121561395257600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261397e5761397e613959565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613a15828551613983565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613a8a57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ab057613ab06136a5565b5060000390565b61018081016113718284613983565b60008060408385031215613ad957600080fd5b825191506020830151613aeb81613720565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613b1b57613b1b613959565b600160ff1b821460001984141615613b3557613b356136a5565b500590565b60008060008060808587031215613b5057600080fd5b845193506020850151925060408501519150606085015161369a81613720565b600060208284031215613b8257600080fd5b81516115de81613720565b6000825160005b81811015613bae5760208186018101518583015201613b94565b50600092019182525091905056fea2646970667358221220c86946172e36b8c6584efb2caaae8fe1c6a0e951f1c99017adde9a1cd9eb449964736f6c63430008160033a26469706673582212205a6450dee1601f963808449f012729c7829b3dbac079a939cb1b55ed895159e664736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = AerodromeLpTarget1DeployerContractFunctions(aerodromelptarget1deployer_abi, self.w3, address)  # type: ignore

    functions: AerodromeLpTarget1DeployerContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        AerodromeLpConversions: AerodromeLpConversionsContract

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "AerodromeLpConversions": "__$2547229b0150c03f930e3c2db66c5de7b3$__",
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup[
                    "AerodromeLpConversions"
                ],
                link_references.AerodromeLpConversions.address[2:].lower(),
            )

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = AerodromeLpTarget1DeployerContractFunctions(
            aerodromelptarget1deployer_abi, w3, None
        )

        return contract
