"""A web3.py Contract class for the EETHHyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..HyperdriveDeployerCoordinator import (
    HyperdriveDeployerCoordinatorTypes as HyperdriveDeployerCoordinator,
)
from ..IHyperdrive import IHyperdriveTypes as IHyperdrive

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolDeployConfig": IHyperdrive.PoolDeployConfig,
    "HyperdriveDeployerCoordinator.Deployment": HyperdriveDeployerCoordinator.Deployment,
    "IHyperdrive.Options": IHyperdrive.Options,
}

eethhyperdrivedeployercoordinator_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_coreDeployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target0Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target1Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target2Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target3Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target4Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_liquidityPool",
                    "type": "address",
                    "internalType": "contract ILiquidityPool",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {
                    "name": "_vaultSharesToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_shareAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_vaultSharesToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "coreDeployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_targetIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployments",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct HyperdriveDeployerCoordinator.Deployment",
                    "components": [
                        {
                            "name": "configHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "extraDataHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target0",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target1",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target2",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target3",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target4",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "factory",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfTargets",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "_lp", "type": "address", "internalType": "address"},
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "liquidityPool",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract ILiquidityPool",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target0Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target1Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target2Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target3Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target4Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "ApprovalFailed", "inputs": []},
        {"type": "error", "name": "DeploymentAlreadyExists", "inputs": []},
        {"type": "error", "name": "DeploymentDoesNotExist", "inputs": []},
        {"type": "error", "name": "HyperdriveAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "HyperdriveIsNotDeployed", "inputs": []},
        {"type": "error", "name": "IncompleteDeployment", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidFeeAmounts", "inputs": []},
        {"type": "error", "name": "InvalidMinimumShareReserves", "inputs": []},
        {
            "type": "error",
            "name": "InvalidMinimumTransactionAmount",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTargetIndex", "inputs": []},
        {"type": "error", "name": "InvalidVaultSharesToken", "inputs": []},
        {"type": "error", "name": "MismatchedConfig", "inputs": []},
        {"type": "error", "name": "MismatchedExtraData", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "SenderIsNotFactory", "inputs": []},
        {"type": "error", "name": "TargetAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)


class EETHHyperdriveDeployerCoordinatorApprovalFailedContractError(
    PypechainBaseError
):
    """ContractError for ApprovalFailed."""

    # Error name
    name: str = "ApprovalFailed"
    # 4 byte error selector
    selector: str = "0x8164f842"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ApprovalFailed()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError(
    PypechainBaseError
):
    """ContractError for DeploymentAlreadyExists."""

    # Error name
    name: str = "DeploymentAlreadyExists"
    # 4 byte error selector
    selector: str = "0x77c3669a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeploymentAlreadyExists()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError(
    PypechainBaseError
):
    """ContractError for DeploymentDoesNotExist."""

    # Error name
    name: str = "DeploymentDoesNotExist"
    # 4 byte error selector
    selector: str = "0xe62c7024"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeploymentDoesNotExist()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError(
    PypechainBaseError
):
    """ContractError for HyperdriveAlreadyDeployed."""

    # Error name
    name: str = "HyperdriveAlreadyDeployed"
    # 4 byte error selector
    selector: str = "0x2c95caeb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "HyperdriveAlreadyDeployed()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError(
    PypechainBaseError
):
    """ContractError for HyperdriveIsNotDeployed."""

    # Error name
    name: str = "HyperdriveIsNotDeployed"
    # 4 byte error selector
    selector: str = "0x952b05cb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "HyperdriveIsNotDeployed()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError(
    PypechainBaseError
):
    """ContractError for IncompleteDeployment."""

    # Error name
    name: str = "IncompleteDeployment"
    # 4 byte error selector
    selector: str = "0xe97cc2bf"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "IncompleteDeployment()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInsufficientValueContractError(
    PypechainBaseError
):
    """ContractError for InsufficientValue."""

    # Error name
    name: str = "InsufficientValue"
    # 4 byte error selector
    selector: str = "0x11011294"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientValue()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError(
    PypechainBaseError
):
    """ContractError for InvalidBaseToken."""

    # Error name
    name: str = "InvalidBaseToken"
    # 4 byte error selector
    selector: str = "0x0e442a4a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidBaseToken()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidCheckpointDuration."""

    # Error name
    name: str = "InvalidCheckpointDuration"
    # 4 byte error selector
    selector: str = "0x5428734d"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidCheckpointDuration()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError(
    PypechainBaseError
):
    """ContractError for InvalidFeeAmounts."""

    # Error name
    name: str = "InvalidFeeAmounts"
    # 4 byte error selector
    selector: str = "0x45ee5986"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidFeeAmounts()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinimumShareReserves."""

    # Error name
    name: str = "InvalidMinimumShareReserves"
    # 4 byte error selector
    selector: str = "0x49db44f5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinimumShareReserves()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinimumTransactionAmount."""

    # Error name
    name: str = "InvalidMinimumTransactionAmount"
    # 4 byte error selector
    selector: str = "0x3192a446"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinimumTransactionAmount()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidPositionDuration."""

    # Error name
    name: str = "InvalidPositionDuration"
    # 4 byte error selector
    selector: str = "0x4a7fff9e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidPositionDuration()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError(
    PypechainBaseError
):
    """ContractError for InvalidTargetIndex."""

    # Error name
    name: str = "InvalidTargetIndex"
    # 4 byte error selector
    selector: str = "0x3b3f02b2"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTargetIndex()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError(
    PypechainBaseError
):
    """ContractError for InvalidVaultSharesToken."""

    # Error name
    name: str = "InvalidVaultSharesToken"
    # 4 byte error selector
    selector: str = "0xe7ee73a0"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidVaultSharesToken()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorMismatchedConfigContractError(
    PypechainBaseError
):
    """ContractError for MismatchedConfig."""

    # Error name
    name: str = "MismatchedConfig"
    # 4 byte error selector
    selector: str = "0x332ee11f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedConfig()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError(
    PypechainBaseError
):
    """ContractError for MismatchedExtraData."""

    # Error name
    name: str = "MismatchedExtraData"
    # 4 byte error selector
    selector: str = "0xd1939688"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedExtraData()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorNotPayableContractError(
    PypechainBaseError
):
    """ContractError for NotPayable."""

    # Error name
    name: str = "NotPayable"
    # 4 byte error selector
    selector: str = "0x1574f9f3"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "NotPayable()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError(
    PypechainBaseError
):
    """ContractError for SenderIsNotFactory."""

    # Error name
    name: str = "SenderIsNotFactory"
    # 4 byte error selector
    selector: str = "0x40843511"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SenderIsNotFactory()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError(
    PypechainBaseError
):
    """ContractError for TargetAlreadyDeployed."""

    # Error name
    name: str = "TargetAlreadyDeployed"
    # 4 byte error selector
    selector: str = "0x0744b578"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TargetAlreadyDeployed()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorTransferFailedContractError(
    PypechainBaseError
):
    """ContractError for TransferFailed."""

    # Error name
    name: str = "TransferFailed"
    # 4 byte error selector
    selector: str = "0x90b8ec18"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TransferFailed()"
    # Error input types
    abi: ABI = eethhyperdrivedeployercoordinator_abi


class EETHHyperdriveDeployerCoordinatorContractErrors(
    PypechainBaseContractErrors
):
    """ContractErrors for the EETHHyperdriveDeployerCoordinator contract."""

    ApprovalFailed: EETHHyperdriveDeployerCoordinatorApprovalFailedContractError

    DeploymentAlreadyExists: (
        EETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError
    )

    DeploymentDoesNotExist: (
        EETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError
    )

    HyperdriveAlreadyDeployed: (
        EETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError
    )

    HyperdriveIsNotDeployed: (
        EETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError
    )

    IncompleteDeployment: (
        EETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError
    )

    InsufficientValue: (
        EETHHyperdriveDeployerCoordinatorInsufficientValueContractError
    )

    InvalidBaseToken: (
        EETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError
    )

    InvalidCheckpointDuration: (
        EETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError
    )

    InvalidFeeAmounts: (
        EETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError
    )

    InvalidMinimumShareReserves: EETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError

    InvalidMinimumTransactionAmount: EETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError

    InvalidPositionDuration: (
        EETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError
    )

    InvalidTargetIndex: (
        EETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError
    )

    InvalidVaultSharesToken: (
        EETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError
    )

    MismatchedConfig: (
        EETHHyperdriveDeployerCoordinatorMismatchedConfigContractError
    )

    MismatchedExtraData: (
        EETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError
    )

    NotPayable: EETHHyperdriveDeployerCoordinatorNotPayableContractError

    SenderIsNotFactory: (
        EETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError
    )

    TargetAlreadyDeployed: (
        EETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError
    )

    TransferFailed: EETHHyperdriveDeployerCoordinatorTransferFailedContractError

    def __init__(
        self,
    ) -> None:
        self.ApprovalFailed = (
            EETHHyperdriveDeployerCoordinatorApprovalFailedContractError()
        )
        self.DeploymentAlreadyExists = (
            EETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError()
        )
        self.DeploymentDoesNotExist = (
            EETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError()
        )
        self.HyperdriveAlreadyDeployed = (
            EETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError()
        )
        self.HyperdriveIsNotDeployed = (
            EETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError()
        )
        self.IncompleteDeployment = (
            EETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError()
        )
        self.InsufficientValue = (
            EETHHyperdriveDeployerCoordinatorInsufficientValueContractError()
        )
        self.InvalidBaseToken = (
            EETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError()
        )
        self.InvalidCheckpointDuration = (
            EETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError()
        )
        self.InvalidFeeAmounts = (
            EETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError()
        )
        self.InvalidMinimumShareReserves = (
            EETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError()
        )
        self.InvalidMinimumTransactionAmount = (
            EETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError()
        )
        self.InvalidPositionDuration = (
            EETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError()
        )
        self.InvalidTargetIndex = (
            EETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError()
        )
        self.InvalidVaultSharesToken = (
            EETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError()
        )
        self.MismatchedConfig = (
            EETHHyperdriveDeployerCoordinatorMismatchedConfigContractError()
        )
        self.MismatchedExtraData = (
            EETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError()
        )
        self.NotPayable = (
            EETHHyperdriveDeployerCoordinatorNotPayableContractError()
        )
        self.SenderIsNotFactory = (
            EETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError()
        )
        self.TargetAlreadyDeployed = (
            EETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError()
        )
        self.TransferFailed = (
            EETHHyperdriveDeployerCoordinatorTransferFailedContractError()
        )

        self._all = [
            self.ApprovalFailed,
            self.DeploymentAlreadyExists,
            self.DeploymentDoesNotExist,
            self.HyperdriveAlreadyDeployed,
            self.HyperdriveIsNotDeployed,
            self.IncompleteDeployment,
            self.InsufficientValue,
            self.InvalidBaseToken,
            self.InvalidCheckpointDuration,
            self.InvalidFeeAmounts,
            self.InvalidMinimumShareReserves,
            self.InvalidMinimumTransactionAmount,
            self.InvalidPositionDuration,
            self.InvalidTargetIndex,
            self.InvalidVaultSharesToken,
            self.MismatchedConfig,
            self.MismatchedExtraData,
            self.NotPayable,
            self.SenderIsNotFactory,
            self.TargetAlreadyDeployed,
            self.TransferFailed,
        ]


class EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToBase(str,int) method."""

    _function_name = "convertToBase"
    _type_signature = expand_struct_type_str(tuple(["str", "int"]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the convertToBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesToken: str, _shareAmount: int) -> EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToShares(str,int) method."""

    _function_name = "convertToShares"
    _type_signature = expand_struct_type_str(tuple(["str", "int"]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the convertToShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesToken: str, _baseAmount: int) -> EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the coreDeployer() method."""

    _function_name = "coreDeployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the coreDeployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "coreDeployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployHyperdrive(bytes,str,IHyperdrive.PoolDeployConfig,bytes,bytes) method."""

    _function_name = "deployHyperdrive"
    _type_signature = expand_struct_type_str(
        tuple(
            ["bytes", "str", "IHyperdrive.PoolDeployConfig", "bytes", "bytes"]
        ),
        structs,
    )
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployHyperdrive method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployHyperdrive"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, __name: str, _deployConfig: IHyperdrive.PoolDeployConfig, _extraData: bytes, _salt: bytes) -> EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(bytes,IHyperdrive.PoolDeployConfig,bytes,int,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(
            ["bytes", "IHyperdrive.PoolDeployConfig", "bytes", "int", "bytes"]
        ),
        structs,
    )
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _deployConfig: IHyperdrive.PoolDeployConfig, _extraData: bytes, _targetIndex: int, _salt: bytes) -> EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployments(bytes) method."""

    _function_name = "deployments"
    _type_signature = expand_struct_type_str(tuple(["bytes"]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> HyperdriveDeployerCoordinator.Deployment:
        """returns HyperdriveDeployerCoordinator.Deployment."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = HyperdriveDeployerCoordinator.Deployment

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            HyperdriveDeployerCoordinator.Deployment,
            rename_returned_types(structs, return_types, raw_values),
        )


class EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployments method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployments"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes) -> EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorFactoryContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the factory() method."""

    _function_name = "factory"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorFactoryContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the factory method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "factory"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorFactoryContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorFactoryContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorFactoryContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorFactoryContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorFactoryContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfTargets() method."""

    _function_name = "getNumberOfTargets"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfTargets method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getNumberOfTargets"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorInitializeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the initialize(bytes,str,int,int,IHyperdrive.Options) method."""

    _function_name = "initialize"
    _type_signature = expand_struct_type_str(
        tuple(["bytes", "str", "int", "int", "IHyperdrive.Options"]), structs
    )
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorInitializeContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the initialize method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "initialize"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _lp: str, _contribution: int, _apr: int, _options: IHyperdrive.Options) -> EETHHyperdriveDeployerCoordinatorInitializeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorInitializeContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorInitializeContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorInitializeContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorKindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorKindContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorKindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorKindContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorKindContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorKindContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the liquidityPool() method."""

    _function_name = "liquidityPool"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the liquidityPool method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "liquidityPool"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorNameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorNameContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorNameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorNameContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorNameContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorNameContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target0Deployer() method."""

    _function_name = "target0Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target0Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target0Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target1Deployer() method."""

    _function_name = "target1Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target1Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target1Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target2Deployer() method."""

    _function_name = "target2Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target2Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target2Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target3Deployer() method."""

    _function_name = "target3Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target3Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target3Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target4Deployer() method."""

    _function_name = "target4Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target4Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target4Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorVersionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EETHHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EETHHyperdriveDeployerCoordinatorVersionContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EETHHyperdriveDeployerCoordinatorVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EETHHyperdriveDeployerCoordinatorVersionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EETHHyperdriveDeployerCoordinatorVersionContractFunction0._type_signature: EETHHyperdriveDeployerCoordinatorVersionContractFunction0.factory(
                "EETHHyperdriveDeployerCoordinatorVersionContractFunction0",
                **kwargs,
            ),
        }
        return out


class EETHHyperdriveDeployerCoordinatorContractFunctions(ContractFunctions):
    """ContractFunctions for the EETHHyperdriveDeployerCoordinator contract."""

    convertToBase: (
        EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction
    )

    convertToShares: (
        EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction
    )

    coreDeployer: EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction

    deployHyperdrive: (
        EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction
    )

    deployTarget: EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction

    deployments: EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction

    factory: EETHHyperdriveDeployerCoordinatorFactoryContractFunction

    getNumberOfTargets: (
        EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction
    )

    initialize: EETHHyperdriveDeployerCoordinatorInitializeContractFunction

    kind: EETHHyperdriveDeployerCoordinatorKindContractFunction

    liquidityPool: (
        EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction
    )

    name: EETHHyperdriveDeployerCoordinatorNameContractFunction

    target0Deployer: (
        EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction
    )

    target1Deployer: (
        EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction
    )

    target2Deployer: (
        EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction
    )

    target3Deployer: (
        EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction
    )

    target4Deployer: (
        EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction
    )

    version: EETHHyperdriveDeployerCoordinatorVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = EETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction.factory(
            "convertToBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToBase",
        )
        self.convertToShares = EETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction.factory(
            "convertToShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToShares",
        )
        self.coreDeployer = EETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction.factory(
            "coreDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="coreDeployer",
        )
        self.deployHyperdrive = EETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployHyperdrive",
        )
        self.deployTarget = EETHHyperdriveDeployerCoordinatorDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployTarget",
        )
        self.deployments = EETHHyperdriveDeployerCoordinatorDeploymentsContractFunction.factory(
            "deployments",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployments",
        )
        self.factory = (
            EETHHyperdriveDeployerCoordinatorFactoryContractFunction.factory(
                "factory",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="factory",
            )
        )
        self.getNumberOfTargets = EETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction.factory(
            "getNumberOfTargets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNumberOfTargets",
        )
        self.initialize = (
            EETHHyperdriveDeployerCoordinatorInitializeContractFunction.factory(
                "initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="initialize",
            )
        )
        self.kind = (
            EETHHyperdriveDeployerCoordinatorKindContractFunction.factory(
                "kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="kind",
            )
        )
        self.liquidityPool = EETHHyperdriveDeployerCoordinatorLiquidityPoolContractFunction.factory(
            "liquidityPool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="liquidityPool",
        )
        self.name = (
            EETHHyperdriveDeployerCoordinatorNameContractFunction.factory(
                "name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="name",
            )
        )
        self.target0Deployer = EETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction.factory(
            "target0Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target0Deployer",
        )
        self.target1Deployer = EETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction.factory(
            "target1Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target1Deployer",
        )
        self.target2Deployer = EETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction.factory(
            "target2Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target2Deployer",
        )
        self.target3Deployer = EETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction.factory(
            "target3Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target3Deployer",
        )
        self.target4Deployer = EETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction.factory(
            "target4Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target4Deployer",
        )
        self.version = (
            EETHHyperdriveDeployerCoordinatorVersionContractFunction.factory(
                "version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="version",
            )
        )


class EETHHyperdriveDeployerCoordinatorContract(Contract):
    """A web3.py Contract class for the EETHHyperdriveDeployerCoordinator contract."""

    abi: ABI = eethhyperdrivedeployercoordinator_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        ""
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = EETHHyperdriveDeployerCoordinatorContractFunctions(eethhyperdrivedeployercoordinator_abi, self.w3, address)  # type: ignore

        self.errors = EETHHyperdriveDeployerCoordinatorContractErrors()

    errors: EETHHyperdriveDeployerCoordinatorContractErrors = (
        EETHHyperdriveDeployerCoordinatorContractErrors()
    )

    functions: EETHHyperdriveDeployerCoordinatorContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        factory: str

        coreDeployer: str

        target0Deployer: str

        target1Deployer: str

        target2Deployer: str

        target3Deployer: str

        target4Deployer: str

        liquidityPool: str

    @classmethod
    def constructor(cls, name: str, factory: str, coreDeployer: str, target0Deployer: str, target1Deployer: str, target2Deployer: str, target3Deployer: str, target4Deployer: str, liquidityPool: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(factory),
            dataclass_to_tuple(coreDeployer),
            dataclass_to_tuple(target0Deployer),
            dataclass_to_tuple(target1Deployer),
            dataclass_to_tuple(target2Deployer),
            dataclass_to_tuple(target3Deployer),
            dataclass_to_tuple(target4Deployer),
            dataclass_to_tuple(liquidityPool),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = EETHHyperdriveDeployerCoordinatorContractFunctions(
            eethhyperdrivedeployercoordinator_abi, w3, None
        )
        contract.errors = EETHHyperdriveDeployerCoordinatorContractErrors()

        return contract
