"""A web3.py Contract class for the EModeLogic contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import PypechainBaseContractErrors, combomethod_typed
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, TxReceipt

from .EModeLogicTypes import UserEModeSetEvent

structs = {}

emodelogic_abi: ABI = cast(
    ABI,
    [
        {
            "type": "event",
            "name": "UserEModeSet",
            "inputs": [
                {
                    "name": "user",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "categoryId",
                    "type": "uint8",
                    "indexed": False,
                    "internalType": "uint8",
                },
            ],
            "anonymous": False,
        }
    ],
)


class EModeLogicContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the EModeLogic contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class EModeLogicContractFunctions(ContractFunctions):
    """ContractFunctions for the EModeLogic contract."""

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)


class EModeLogicUserEModeSetContractEvent(ContractEvent):
    """ContractEvent for UserEModeSet."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[UserEModeSetEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            UserEModeSetEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=UserEModeSetEvent.UserEModeSetEventArgs(
                    user=abi_event.args["user"],
                    categoryId=abi_event.args["categoryId"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[UserEModeSetEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            UserEModeSetEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=UserEModeSetEvent.UserEModeSetEventArgs(
                    user=abi_event.args["user"],
                    categoryId=abi_event.args["categoryId"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class EModeLogicContractEvents(ContractEvents):
    """ContractEvents for the EModeLogic contract."""

    UserEModeSet: Type[EModeLogicUserEModeSetContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.UserEModeSet = cast(
            Type[EModeLogicUserEModeSetContractEvent],
            EModeLogicUserEModeSetContractEvent.factory(
                "UserEModeSet",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="UserEModeSet",
            ),
        )


class EModeLogicContract(Contract):
    """A web3.py Contract class for the EModeLogic contract."""

    abi: ABI = emodelogic_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x61103e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635d5dc3131461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610e45565b61005c565b005b60408051602081018252835481528251918301516100809289928992899290610127565b336000908152602084905260409081902080549183015160ff90811660ff198416179091551680156100e0576100dd8787878660405180602001604052908160008201548152505033876040015188600001518960200151610247565b50505b604080830151905160ff909116815233907fd728da875fc88944cbf17638bcbe4af0eedaef63becd1d1c57cc097eb4608d849060200160405180910390a250505050505050565b60ff81161580610152575060ff811660009081526020859052604090205462010000900461ffff1615155b6040518060400160405280600281526020016106a760f31b815250906101945760405162461bcd60e51b815260040161018b9190610f15565b60405180910390fd5b5082511561023f5760ff81161561023f5760005b8281101561023d576101ba84826102f3565b1561023557600081815260208781526040808320546001600160a01b03168352898252918290208251918201909252905480825260ff8481169160a81c16146040518060400160405280600281526020016106a760f31b815250906102325760405162461bcd60e51b815260040161018b9190610f15565b50505b6001016101a8565b505b505050505050565b6000806000806102948c8c8c6040518060a001604052808e81526020018b81526020018d6001600160a01b031681526020018a6001600160a01b031681526020018c60ff16815250610347565b9550955050505050670de0b6b3a764000082101560405180604001604052806002815260200161333560f01b815250906102e15760405162461bcd60e51b815260040161018b9190610f15565b50909b909a5098505050505050505050565b6040805180820190915260028152610dcd60f21b6020820152600090608083106103305760405162461bcd60e51b815260040161018b9190610f15565b50508151600182811b9190911c1615155b92915050565b60008060008060008061035d8760000151511590565b1561037b575060009450849350839250829150600019905081610821565b61041d6040518061026001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581526020016000151581525090565b608088015160ff161561046257608088015160ff16600090815260208a905260409020606089015161044f919061082e565b6101808401526101c08301526101a08201525b87602001518160c0015110156107415760c08101518851610482916108da565b6104965760c0810180516001019052610462565b60c0810151600090815260208b905260409020546001600160a01b031661020082018190526104cf5760c0810180516001019052610462565b6102008101516001600160a01b0316600090815260208c8152604091829020825180830190935280549283905260ff60a884901c81166101e0860152603084901c166060850181905261ffff601085901c811660a08701529093166080850152600a9290920a90830152610180820151158015906105585750816101e00151896080015160ff16145b6105d657606089015161020083015160405163b3596f0760e01b81526001600160a01b03918216600482015291169063b3596f0790602401602060405180830381865afa1580156105ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d19190610f64565b6105dd565b8161018001515b825260a0820151158015906105fd575060c082015189516105fd9161092a565b156106ed5761061a89604001518284600001518560200151610979565b6040830181905261010083018051610633908390610f93565b90525060808901516101e083015161064e9160ff1690610a32565b15156102408301526080820151156106a45781610240015161067457816080015161067b565b816101a001515b826040015161068a9190610fa6565b826101400181815161069c9190610f93565b9052506106ad565b60016102208301525b8161024001516106c1578160a001516106c8565b816101c001515b82604001516106d79190610fa6565b82610160018181516106e99190610f93565b9052505b60c082015189516106fd916102f3565b156107305761071a89604001518284600001518560200151610a49565b826101200181815161072c9190610f93565b9052505b5060c0810180516001019052610462565b806101000151600003610755576000610770565b8061010001518161014001518161076e5761076e610fbd565b045b61014082015261010081015160000361078a5760006107a5565b806101000151816101600151816107a3576107a3610fbd565b045b610160820152610120810151156107e7576107e28161012001516107dc836101600151846101000151610b7d90919063ffffffff16565b90610ba3565b6107eb565b6000195b60e0820181905261010082015161012083015161014084015161016085015161022090950151929a509098509650919450925090505b9499939850945094509450565b8154600090819081908190660100000000000090046001600160a01b031680156108bf5760405163b3596f0760e01b81526001600160a01b03828116600483015287169063b3596f0790602401602060405180830381865afa158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc9190610f64565b91505b50945461ffff80821697620100009092041695945092505050565b6040805180820190915260028152610dcd60f21b6020820152600090608083106109175760405162461bcd60e51b815260040161018b9190610f15565b5050905160019190911b1c600316151590565b6040805180820190915260028152610dcd60f21b6020820152600090608083106109675760405162461bcd60e51b815260040161018b9190610f15565b50509051600191821b82011c16151590565b60008061098585610bda565b600486810154604051630ed1279f60e11b81526001600160a01b038a8116938201939093529293506000928792610a0b928692911690631da24f3e90602401602060405180830381865afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190610f64565b90610c31565b610a159190610fa6565b9050838181610a2657610a26610fbd565b04979650505050505050565b60008215801590610a4257508282145b9392505050565b6006830154604051630ed1279f60e11b81526001600160a01b0386811660048301526000928392911690631da24f3e90602401602060405180830381865afa158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd9190610f64565b90508015610adb57610ad8610ad186610c75565b8290610c31565b90505b60058501546040516370a0823160e01b81526001600160a01b038881166004830152909116906370a0823190602401602060405180830381865afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190610f64565b610b559082610f93565b9050610b618185610fa6565b9050828181610b7257610b72610fbd565b049695505050505050565b600081156113881983900484111517610b9557600080fd5b506127109102611388010490565b60008115670de0b6b3a764000060028404190484111715610bc357600080fd5b50670de0b6b3a76400009190910260028204010490565b6003810154600090600160801b900464ffffffffff16428103610c09575050600101546001600160801b031690565b6001830154610a42906001600160801b0380821691610a0591600160801b9091041684610ccc565b600081156b019d971e4fe8401e740000001983900484111517610c5357600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b6003810154600090600160801b900464ffffffffff16428103610ca4575050600201546001600160801b031690565b6002830154610a42906001600160801b0380821691610a0591600160801b9091041684610d11565b600080610ce064ffffffffff841642610fd3565b610cea9085610fa6565b6301e1338090049050610d09816b033b2e3c9fd0803ce8000000610f93565b949350505050565b6000610a42838342600080610d2d64ffffffffff851684610fd3565b905080600003610d4c576b033b2e3c9fd0803ce8000000915050610a42565b60001981016000808060028511610d64576000610d69565b600285035b925066038882915c4000610d7d8a80610c31565b81610d8a57610d8a610fbd565b0491506301e13380610d9c838b610c31565b81610da957610da9610fbd565b049050600082610db98688610fa6565b610dc39190610fa6565b60029004905060008285610dd7888a610fa6565b610de19190610fa6565b610deb9190610fa6565b60069004905080826301e13380610e028a8f610fa6565b610e0c9190610fe6565b610e22906b033b2e3c9fd0803ce8000000610f93565b610e2c9190610f93565b610e369190610f93565b9b9a5050505050505050505050565b600080600080600080868803610100811215610e6057600080fd5b873596506020880135955060408801359450606080890135945060808901359350609f1982011215610e9157600080fd5b506040516060810181811067ffffffffffffffff82111715610ec357634e487b7160e01b600052604160045260246000fd5b60405260a0880135815260c08801356001600160a01b0381168114610ee757600080fd5b602082015260e088013560ff81168114610f0057600080fd5b80604083015250809150509295509295509295565b60006020808352835180602085015260005b81811015610f4357858101830151858201604001528201610f27565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610f7657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561034157610341610f7d565b808202811582820484141761034157610341610f7d565b634e487b7160e01b600052601260045260246000fd5b8181038181111561034157610341610f7d565b60008261100357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220be211417c4e71856d501ace57f4d480e6d67ad20b10b9a96dd72a761d756a70b64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = EModeLogicContractFunctions(emodelogic_abi, self.w3, address)  # type: ignore
        self.events = EModeLogicContractEvents(emodelogic_abi, self.w3, address)  # type: ignore

    events: EModeLogicContractEvents

    functions: EModeLogicContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = EModeLogicContractFunctions(
            emodelogic_abi, w3, None
        )

        return contract
