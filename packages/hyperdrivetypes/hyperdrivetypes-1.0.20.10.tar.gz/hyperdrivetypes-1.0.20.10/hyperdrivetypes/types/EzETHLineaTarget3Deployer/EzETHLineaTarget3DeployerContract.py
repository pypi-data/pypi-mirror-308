"""A web3.py Contract class for the EzETHLineaTarget3Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

ezethlineatarget3deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_xRenzoDeposit",
                    "type": "address",
                    "internalType": "contract IXRenzoDeposit",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {"name": "", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "xRenzoDeposit",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IXRenzoDeposit",
                }
            ],
            "stateMutability": "view",
        },
    ],
)


class EzETHLineaTarget3DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the EzETHLineaTarget3Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class EzETHLineaTarget3DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )
    _error_class = EzETHLineaTarget3DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaTarget3DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, arg3: bytes, _salt: bytes) -> EzETHLineaTarget3DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EzETHLineaTarget3DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EzETHLineaTarget3DeployerDeployTargetContractFunction0._type_signature: EzETHLineaTarget3DeployerDeployTargetContractFunction0.factory(
                "EzETHLineaTarget3DeployerDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class EzETHLineaTarget3DeployerXRenzoDepositContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the xRenzoDeposit() method."""

    _function_name = "xRenzoDeposit"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EzETHLineaTarget3DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaTarget3DeployerXRenzoDepositContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the xRenzoDeposit method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "xRenzoDeposit"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EzETHLineaTarget3DeployerXRenzoDepositContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EzETHLineaTarget3DeployerXRenzoDepositContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EzETHLineaTarget3DeployerXRenzoDepositContractFunction0._type_signature: EzETHLineaTarget3DeployerXRenzoDepositContractFunction0.factory(
                "EzETHLineaTarget3DeployerXRenzoDepositContractFunction0",
                **kwargs,
            ),
        }
        return out


class EzETHLineaTarget3DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the EzETHLineaTarget3Deployer contract."""

    deployTarget: EzETHLineaTarget3DeployerDeployTargetContractFunction

    xRenzoDeposit: EzETHLineaTarget3DeployerXRenzoDepositContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            EzETHLineaTarget3DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )
        self.xRenzoDeposit = (
            EzETHLineaTarget3DeployerXRenzoDepositContractFunction.factory(
                "xRenzoDeposit",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="xRenzoDeposit",
            )
        )


class EzETHLineaTarget3DeployerContract(Contract):
    """A web3.py Contract class for the EzETHLineaTarget3Deployer contract."""

    abi: ABI = ezethlineatarget3deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60a060405234801561001057600080fd5b5060405161454b38038061454b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516144bb610090600039600081816040015260bc01526144bb6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806312ae5e671461003b5780638c98b3c61461007e575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61006261008c36600461027b565b604080513360208201529081018290526000906060016040516020818303038152906040528051906020012085857f00000000000000000000000000000000000000000000000000000000000000006040516100e79061011f565b6100f3939291906103d7565b8190604051809103906000f5905080158015610113573d6000803e3d6000fd5b5090505b949350505050565b613f7a8061050c83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156101665761016661012c565b60405290565b80356001600160a01b038116811461018357600080fd5b919050565b60006080828403121561019a57600080fd5b6040516080810181811067ffffffffffffffff821117156101bd576101bd61012c565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ff57600080fd5b813567ffffffffffffffff8082111561021a5761021a61012c565b604051601f8301601f19908116603f011681019082821181831017156102425761024261012c565b8160405283815286602085880101111561025b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561029357600080fd5b610260808212156102a357600080fd5b6102ab610142565b91506102b68761016c565b82526102c46020880161016c565b60208301526102d56040880161016c565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e083015261010080880135818401525061012080880135818401525061014080880135818401525061016061033e81890161016c565b9083015261018061035088820161016c565b908301526101a061036288820161016c565b908301526101c061037488820161016c565b908301526101e061038789898301610188565b818401525081955061039a81880161016c565b9450505061028085013567ffffffffffffffff8111156103b957600080fd5b6103c5878288016101ee565b949793965093946102a0013593505050565b83516001600160a01b031681526102a08101602085015161040360208401826001600160a01b03169052565b50604085015161041e60408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016080860151610490828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e0808701518051918501919091526020810151610200850152604081015161022085015260600151610240840152848116610260840152831661028083015261011756fe6102a06040523480156200001257600080fd5b5060405162003f7a38038062003f7a8339810160408190526200003591620001b5565b600160005582516001600160a01b039081166080908152602080860151831660a0908152918601516101a052908501516101c05260c0808601516101e090815260e0808801516102005261012080890151909352610100808901519091526101408089015190915290870180515190925281519092015190915280516040908101516101605290516060908101516101805290850151821661024052909301516102605290821661022052166102805262000305565b60405161020081016001600160401b03811182821017156200011d57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013b57600080fd5b919050565b6000608082840312156200015357600080fd5b604051608081016001600160401b03811182821017156200018457634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008060008385036102a0811215620001cd57600080fd5b61026080821215620001de57600080fd5b620001e8620000eb565b9150620001f58662000123565b8252620002056020870162000123565b6020830152620002186040870162000123565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e08301526101008087015181840152506101208087015181840152506101408087015181840152506101606200028381880162000123565b908301526101806200029787820162000123565b908301526101a0620002ab87820162000123565b908301526101c0620002bf87820162000123565b908301526101e0620002d48888830162000140565b8184015250819450620002e981870162000123565b93505050620002fc610280850162000123565b90509250925092565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613aa5620004d56000396000612bf00152600050506000505060006112f901526000818161030301528181610332015261035f01526000818160de015281816105a9015261172001526000818161085601528181610941015281816109d401528181610add015281816115f1015281816116fa015281816120c70152818161212a01528181612a0901528181612d140152612d5001526000818161013f015281816108c601528181610ea7015281816114b5015281816115190152818161156001526116d401526000611ccc015260008181611e270152612fb001526000818161106b0152611dfb01526000612f660152600081816101810152818161091901528181610ec801528181611485015281816114e901528181611581015261174601526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fa3015261299f01526000818161029701528181610d6601528181610de101528181610e5701528181610f230152610f5b015260006119fa015260005050613aa56000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c3660046134f8565b610066565b60405190815260200160405180910390f35b61004161006136600461355c565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c04565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c3d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c63565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610c89565b9150915060006101ed610d5e565b90506101fd818360046001610d8a565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b6135c2565b611408565b611452565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f0000000000000000000000000000000000000000000000000000000000000000896135d5565b81526020810191909152604001600020546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061165f565b90506103287f0000000000000000000000000000000000000000000000000000000000000000826135c2565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f0000000000000000000000000000000000000000000000000000000000000000826135d5565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b03909116906135d5565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c9083906135c2565b9050600080600061043c8a61168b565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa15690610476908490600401613666565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190613675565b91506104ca6104c58c6117c5565b6117f3565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b91859101613666565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190613675565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e81876135d5565b9190611819565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611837565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b91906136a3565b8e61184c565b61063a896118f4565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d91906135c2565b9b5090508a158061073757506107348c6000611901565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611819565b610770565b60005b905061077f60208501856136a3565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b016136ce565b866107ca60408c018c6136eb565b6040516107dd9796959493929190613732565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c04565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610c89565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613786565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016123bf929190613904565b6040805180830381865af41580156123db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ff919061397a565b9150915061241d61240f826117c5565b6124189061399e565b6129c3565b925082612433576000965050505050505061144c565b61243c8261193c565b600780546000906124579084906001600160801b03166137eb565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506124848161193c565b600780546010906124a6908490600160801b90046001600160801b03166137eb565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125038761168b565b6040518263ffffffff1660e01b815260040161251f9190613666565b6040805180830381865af415801561253b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255f91906139ba565b9150915080612575575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916125db916135c2565b6125e591906135d5565b9050806000036125fd57506000958695509350505050565b600080871161260d576000612618565b612618848884611819565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561264c5761264c6139ea565b6040519080825280601f01601f191660200182016040528015612676576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612697578692505b828152826000602083013e9093509150505b9550959350505050565b6000806000836126c2866117c5565b6126cc919061380b565b905060008112156126e4576000809250925050610d57565b946001945092505050565b60008060006127018888888888612f04565b9050600061272c670de0b6b3a764000061271b8888612cb3565b61272591906135c2565b8390611837565b9050670de0b6b3a7640000811061276057612759612752670de0b6b3a764000089611837565b8290612b74565b9050612778565b612775612752670de0b6b3a764000089612cb3565b90505b6127828186611837565b90508881101561279a576000809350935050506126a9565b97909703976001975095505050505050565b60008060006127be8989888888612f33565b90506127d8866119b36127d18a8d6135c2565b8790612071565b98506127e5858a86611819565b9850888110156127fc576000809250925050611654565b888103670de0b6b3a7640000811061282a57612823612752670de0b6b3a764000089612cb3565b9050612842565b61283f612752670de0b6b3a764000089611837565b90505b8089101561285857600080935093505050611654565b90970398600198509650505050505050565b600080600080600061287d898789612f58565b909250905061288c82896135d5565b9750600061289b82888a611819565b90506128a7818b6135d5565b9a989950979650505050505050565b6000806128c4846000612fde565b6128cf846000612fde565b6128d9919061380b565b905060008113156128f5576128ee81866135c2565b9450612914565b6000811215612914576129078161399e565b61291190866135d5565b94505b50929392505050565b60006100918383670de0b6b3a76400005b600082600019048411830215820261294557600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612968610d5e565b6129729190613786565b905080831161298257600061298c565b61298c81846135d5565b9150610091612725670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613786565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa09190613a00565b935093509350935080612abc5750600098975050505050505050565b868414612aed57612acc8461193c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612b1e57612afd83611966565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612b4c57612b2e8261193c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612b8d5750670de0b6b3a764000061144c565b82600003612b9d5750600061144c565b6000612ba8836117c5565b90506000612bbd612bb8866117c5565b612ff4565b9050818102612bd4670de0b6b3a764000082613a41565b9050612bdf8161321a565b9695505050505050565b600061144c7f0000000000000000000000000000000000000000000000000000000000000000836133af565b600082600003612c26575084610078565b8115612c7957612c57612c3984876135c2565b612c438587612071565b612c4d888a612071565b61168591906135c2565b90506000612c658588611bfc565b905080821015612c73578091505b50610078565b828503612c8857506000610078565b610075612c9584876135d5565b612c9f858761291d565b612ca9888a612071565b61168591906135d5565b600061009183670de0b6b3a76400008461292e565b600060016001607f1b038211156117ef5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612d0d906001600160801b031684612cb3565b9050612d397f0000000000000000000000000000000000000000000000000000000000000000826135c2565b6002546001600160801b03161115611910576002547f000000000000000000000000000000000000000000000000000000000000000090612d849083906001600160801b03166135d5565b61009191906135d5565b612d96613494565b600080612da28461168b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612ddd9190613666565b6040805180830381865af4158015612df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1d91906139ba565b9350905082612e32575060009150612efc9050565b6000612e5461161684610160015185610140015161207190919063ffffffff16565b612e7461161685610120015186610100015161291d90919063ffffffff16565b612e7e919061380b565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6000612f108585612b74565b612f29612f21866119b3868b612071565b859085611819565b61007591906135c2565b6000612f3f8585612b74565b612f29612f50866119b3868b61291d565b85908561292e565b600080612fa885612fa285817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612f98818c612cb3565b612fa291906135d5565b9061291d565b9150612fd4827f0000000000000000000000000000000000000000000000000000000000000000612071565b9050935093915050565b6000818313612fed5781610091565b5090919050565b60008082136130165760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906130999084901c6117c5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361323557506000919050565b680755bf798b4a1bf1e5821261325e576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612bdf74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117c5565b6000806133bb846133c7565b90506114008382612071565b600080826001600160a01b03166396f0bd616040518163ffffffff1660e01b81526004016040805180830381865afa158015613407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342b919061397a565b509392505050565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061012001604052806134a8613433565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561191057600080fd5b600080600080600060a0868803121561351057600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561354357600080fd5b61354f888289016134e6565b9150509295509295909350565b60008060006060848603121561357157600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561359657600080fd5b6135a2868287016134e6565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561144c5761144c6135ac565b8181038181111561144c5761144c6135ac565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144c82846135e8565b60006020828403121561368757600080fd5b5051919050565b6001600160a01b0381168114610c3a57600080fd5b6000602082840312156136b557600080fd5b81356100918161368e565b8015158114610c3a57600080fd5b6000602082840312156136e057600080fd5b8135610091816136c0565b6000808335601e1984360301811261370257600080fd5b83018035915067ffffffffffffffff82111561371d57600080fd5b602001915036819003821315610d5757600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144c5761144c6135ac565b6000806000606084860312156137b257600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b03818116838216019080821115611935576119356135ac565b6001600160801b03818116838216019080821115611935576119356135ac565b8181036000831280158383131683831282161715611935576119356135ac565b60006020828403121561383d57600080fd5b81516100918161368e565b8082018281126000831280158216821582161715613868576138686135ac565b505092915050565b60006020828403121561388257600080fd5b8151610091816136c0565b634e487b7160e01b600052601260045260246000fd5b6000826138b2576138b261388d565b500690565b6001600160801b03828116828216039080821115611935576119356135ac565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144c5761144c6135ac565b60006102a0820190506139188285516135e8565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b6000806040838503121561398d57600080fd5b505080516020909101519092909150565b6000600160ff1b82016139b3576139b36135ac565b5060000390565b600080604083850312156139cd57600080fd5b8251915060208301516139df816136c0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613a1657600080fd5b8451935060208501519250604085015191506060850151613a36816136c0565b939692955090935050565b600082613a5057613a5061388d565b600160ff1b821460001984141615613a6a57613a6a6135ac565b50059056fea26469706673582212205c7771dac863bb7cb0b0362e8596b81129a6818e76f39838ea01e238524b254464736f6c63430008160033a264697066735822122046c6af9a6d66e7464b42beec179b2238547415da70be789047e326cd757fea6a64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = EzETHLineaTarget3DeployerContractFunctions(ezethlineatarget3deployer_abi, self.w3, address)  # type: ignore

    functions: EzETHLineaTarget3DeployerContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        xRenzoDeposit: str

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, xRenzoDeposit: str, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(dataclass_to_tuple(xRenzoDeposit))

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args, link_references
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = EzETHLineaTarget3DeployerContractFunctions(
            ezethlineatarget3deployer_abi, w3, None
        )

        return contract
