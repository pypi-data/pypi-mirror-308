"""A web3.py Contract class for the RsETHLineaTarget2Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

rsethlineatarget2deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_rsETHPool",
                    "type": "address",
                    "internalType": "contract IRSETHPoolV2",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {"name": "", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "rsETHPool",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IRSETHPoolV2",
                }
            ],
            "stateMutability": "view",
        },
    ],
)


class RsETHLineaTarget2DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the RsETHLineaTarget2Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class RsETHLineaTarget2DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )
    _error_class = RsETHLineaTarget2DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class RsETHLineaTarget2DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, arg3: bytes, _salt: bytes) -> RsETHLineaTarget2DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> RsETHLineaTarget2DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            RsETHLineaTarget2DeployerDeployTargetContractFunction0._type_signature: RsETHLineaTarget2DeployerDeployTargetContractFunction0.factory(
                "RsETHLineaTarget2DeployerDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class RsETHLineaTarget2DeployerRsETHPoolContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the rsETHPool() method."""

    _function_name = "rsETHPool"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = RsETHLineaTarget2DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class RsETHLineaTarget2DeployerRsETHPoolContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the rsETHPool method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "rsETHPool"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> RsETHLineaTarget2DeployerRsETHPoolContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> RsETHLineaTarget2DeployerRsETHPoolContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            RsETHLineaTarget2DeployerRsETHPoolContractFunction0._type_signature: RsETHLineaTarget2DeployerRsETHPoolContractFunction0.factory(
                "RsETHLineaTarget2DeployerRsETHPoolContractFunction0", **kwargs
            ),
        }
        return out


class RsETHLineaTarget2DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the RsETHLineaTarget2Deployer contract."""

    deployTarget: RsETHLineaTarget2DeployerDeployTargetContractFunction

    rsETHPool: RsETHLineaTarget2DeployerRsETHPoolContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            RsETHLineaTarget2DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )
        self.rsETHPool = (
            RsETHLineaTarget2DeployerRsETHPoolContractFunction.factory(
                "rsETHPool",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="rsETHPool",
            )
        )


class RsETHLineaTarget2DeployerContract(Contract):
    """A web3.py Contract class for the RsETHLineaTarget2Deployer contract."""

    abi: ABI = rsethlineatarget2deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016120ea929190613a95565b6040805180830381865af4158015612106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212a9190613b0b565b9150915061214861213a82611bc3565b61214390613b2f565b612bd5565b92508261215e5760009650505050505050610689565b6121678261190d565b600780546000906121829084906001600160801b03166138ce565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506121af8161190d565b600780546010906121d1908490600160801b90046001600160801b03166138ce565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61222e87612d6d565b6040518263ffffffff1660e01b815260040161224a9190613b4b565b6040805180830381865af4158015612266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228a9190613b5a565b91509150806122a0575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161230691613732565b6123109190613853565b90508060000361232857506000958695509350505050565b6000808711612338576000612343565b612343848884611898565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561237757612377613b8a565b6040519080825280601f01601f1916602001820160405280156123a1576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156123c2578692505b828152826000602083013e90999098509650505050505050565b60006123fd8787876123f688670de0b6b3a7640000613853565b8787612ea7565b979650505050505050565b60006114d761244961242284670de0b6b3a7640000613853565b611457670de0b6b3a7640000612438818a61146e565b6124429190613853565b879061268e565b61245b90670de0b6b3a7640000613732565b611d7984670de0b6b3a7640000613853565b6000806124a48561247c6118cc565b6124869190613732565b600254610ec1908790600160801b90046001600160801b0316613853565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b60008060008060006124db898789612eca565b90925090506124ea8289613853565b975060006124f982888a611898565b9050612505818b613853565b9a989950979650505050505050565b600082600003612525575084611904565b8115612578576125566125388487613732565b6125428587610671565b61254c888a610671565b611d799190613732565b90506000612564858861193b565b905080821015612572578091505b50611904565b82850361258757506000611904565b6125b26125948487613853565b61259e858761268e565b6125a8888a610671565b611d799190613853565b9695505050505050565b60006125e4600b60006125d06002866111f8565b815260200190815260200160002054611bc3565b6125f6600b60006125d06001876111f8565b61068991906138ee565b600061262c7f00000000000000000000000000000000000000000000000000000000000000008361268e565b60035461264291906001600160801b0316613732565b600254612658906001600160801b031684610671565b101592915050565b600061068982600461200b565b60006123fd87878761268788670de0b6b3a7640000613853565b8787612f4a565b60006106868383670de0b6b3a76400006127e8565b60008080806126f487866126ed8b6114576126c68c670de0b6b3a7640000613853565b7f00000000000000000000000000000000000000000000000000000000000000009061268e565b91906127e8565b9350612720847f0000000000000000000000000000000000000000000000000000000000000000610671565b9150600061274161273989670de0b6b3a7640000613853565b8a90886127e8565b905061276d817f000000000000000000000000000000000000000000000000000000000000000061268e565b9350612799847f0000000000000000000000000000000000000000000000000000000000000000610671565b6127a39084613732565b915050945094509450949050565b60008183116127c05781610686565b5090919050565b6000806127df846127d98a888a6127e8565b9061146e565b9050611d8c8884865b60008260001904841183021582026127ff57600080fd5b50910281810615159190040190565b60008061281a84612f5b565b9050610d368382610671565b600061068683670de0b6b3a764000084611898565b6000806128488484612fbf565b90925090508061285a5761285a6124af565b5092915050565b60006106897f000000000000000000000000000000000000000000000000000000000000000083612ffb565b6000816000036128a65750670de0b6b3a7640000610689565b826000036128b657506000610689565b60006128c183611bc3565b905060006128d66128d186611bc3565b613013565b90508181026128ed670de0b6b3a764000082613ba0565b90506125b281613239565b600060016001607f1b038211156119375760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612940575060016001607f1b0382135b156119375760405163a5353be560e01b815260040160405180910390fd5b60008061296c8460006133ce565b6129778460006133ce565b61298191906138ee565b9050600081131561299d576129968186613732565b94506129bc565b60008112156129bc576129af81613b2f565b6129b99086613853565b94505b50929392505050565b60035460009081906129e0906001600160801b03168461146e565b9050612a0c7f000000000000000000000000000000000000000000000000000000000000000082613732565b6002546001600160801b0316111561194a576002547f000000000000000000000000000000000000000000000000000000000000000090612a579083906001600160801b0316613853565b6114da9190613853565b612a6961360a565b600080612a7584612d6d565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612ab09190613b4b565b6040805180830381865af4158015612acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af09190613b5a565b9350905082612b055750600091506117d09050565b6000612b2c612b2784610160015185610140015161067190919063ffffffff16565b611bc3565b612b4c612b2785610120015186610100015161268e90919063ffffffff16565b612b5691906138ee565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb29190613bce565b935093509350935080612cce5750600098975050505050505050565b868414612cff57612cde8461190d565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612d3057612d0f83612922565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612d5e57612d408261190d565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612d7561365c565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612e6d91166133dd565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612e9f929004166133dd565b905292915050565b600080612eb8888888888888613453565b909250905080611da657611da66124af565b600080612f148561145785817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612f0a818c61146e565b6114579190613853565b9150612f40827f0000000000000000000000000000000000000000000000000000000000000000610671565b9050935093915050565b600080612eb888888888888861351b565b6000816001600160a01b031663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610689919061398a565b600080600083612fce86611bc3565b612fd891906138ee565b90506000811215612ff057600080925092505061066a565b946001945092505050565b60008061300784612f5b565b9050610d368382612826565b60008082136130355760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906130b89084901c611bc3565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361325457506000919050565b680755bf798b4a1bf1e5821261327d576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906125b274029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611bc3565b60008183136127c05781610686565b600080670de0b6b3a76400006133f161068f565b6133fb919061392b565b905080831161340b576000613415565b6134158184613853565b91506114da61344c670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000061392b565b8390612826565b600080600061346589898888886135db565b905061347f866118fe6134788a8d613732565b8790610671565b985061348c858a86611898565b9850888110156134a3576000809250925050613510565b888103670de0b6b3a764000081106134d8576134d16134ca670de0b6b3a76400008961146e565b829061288d565b90506134f0565b6134ed6134ca670de0b6b3a764000089612826565b90505b8089101561350657600080935093505050613510565b8803925060019150505b965096945050505050565b600080600061352d89898888886135db565b905061353d866118fe898b613732565b975087811015613554576000809250925050613510565b8781036135628186886127e8565b9050670de0b6b3a7640000811061358f576135886134ca670de0b6b3a76400008961146e565b90506135a7565b6135a46134ca670de0b6b3a764000089612826565b90505b6135b1818661146e565b9050808a10156135c957600080935093505050613510565b90980398600198509650505050505050565b60006135e7858561288d565b6136006135f8866118fe868b61268e565b8590856127e8565b6125b29190613732565b60405180610120016040528061361e61365c565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600080608085870312156136d357600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156136ff57600080fd5b85016060818803121561371157600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106895761068961371c565b6001600160a01b038116811461059957600080fd5b60006020828403121561376c57600080fd5b81356114da81613745565b801515811461059957600080fd5b60006020828403121561379757600080fd5b81356114da81613777565b6000808335601e198436030181126137b957600080fd5b83018035915067ffffffffffffffff8211156137d457600080fd5b60200191503681900382131561066a57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a0820152600061384660c0830184866137e9565b9998505050505050505050565b818103818111156106895761068961371c565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c082015260006138a060e0830184866137e9565b9a9950505050505050505050565b6001600160701b0381811683821601908082111561285a5761285a61371c565b6001600160801b0381811683821601908082111561285a5761285a61371c565b818103600083128015838313168383128216171561285a5761285a61371c565b60006020828403121561392057600080fd5b81516114da81613745565b80820281158282048414176106895761068961371c565b6001600160801b0382811682821603908082111561285a5761285a61371c565b80820182811260008312801582168215821617156139825761398261371c565b505092915050565b60006020828403121561399c57600080fd5b5051919050565b6000602082840312156139b557600080fd5b81516114da81613777565b634e487b7160e01b600052601260045260246000fd5b6000826139e5576139e56139c0565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156106895761068961371c565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613aa9828551613a17565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613b1e57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613b4457613b4461371c565b5060000390565b61018081016106898284613a17565b60008060408385031215613b6d57600080fd5b825191506020830151613b7f81613777565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613baf57613baf6139c0565b600160ff1b821460001984141615613bc957613bc961371c565b500590565b60008060008060808587031215613be457600080fd5b84519350602085015192506040850151915060608501516137118161377756fea2646970667358221220b9716cdc1cbc7a397d5c442c3a0d9fd4e11a8ede0dc55a2040322de64bdb8ef264736f6c63430008160033a26469706673582212203871b05cef1ebc666d8cca8e863d8aa30a610196309d4f4740e63e64da02295d64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = RsETHLineaTarget2DeployerContractFunctions(rsethlineatarget2deployer_abi, self.w3, address)  # type: ignore

    functions: RsETHLineaTarget2DeployerContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        rsETHPool: str

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, rsETHPool: str, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(dataclass_to_tuple(rsETHPool))

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args, link_references
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = RsETHLineaTarget2DeployerContractFunctions(
            rsethlineatarget2deployer_abi, w3, None
        )

        return contract
