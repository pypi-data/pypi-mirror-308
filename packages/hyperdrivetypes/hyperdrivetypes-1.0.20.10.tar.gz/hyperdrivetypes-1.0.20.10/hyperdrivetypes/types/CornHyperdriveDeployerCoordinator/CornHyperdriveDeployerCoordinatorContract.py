"""A web3.py Contract class for the CornHyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..CornConversions import CornConversionsContract
from ..HyperdriveDeployerCoordinator import (
    HyperdriveDeployerCoordinatorTypes as HyperdriveDeployerCoordinator,
)
from ..IHyperdrive import IHyperdriveTypes as IHyperdrive

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolDeployConfig": IHyperdrive.PoolDeployConfig,
    "HyperdriveDeployerCoordinator.Deployment": HyperdriveDeployerCoordinator.Deployment,
    "IHyperdrive.Options": IHyperdrive.Options,
}

cornhyperdrivedeployercoordinator_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_coreDeployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target0Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target1Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target2Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target3Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target4Deployer",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {
                    "name": "_shareAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "coreDeployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_targetIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployments",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct HyperdriveDeployerCoordinator.Deployment",
                    "components": [
                        {
                            "name": "configHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "extraDataHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target0",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target1",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target2",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target3",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target4",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "factory",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfTargets",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "_lp", "type": "address", "internalType": "address"},
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target0Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target1Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target2Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target3Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target4Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "ApprovalFailed", "inputs": []},
        {"type": "error", "name": "DeploymentAlreadyExists", "inputs": []},
        {"type": "error", "name": "DeploymentDoesNotExist", "inputs": []},
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {"type": "error", "name": "HyperdriveAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "HyperdriveIsNotDeployed", "inputs": []},
        {"type": "error", "name": "IncompleteDeployment", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidFeeAmounts", "inputs": []},
        {"type": "error", "name": "InvalidMinimumShareReserves", "inputs": []},
        {
            "type": "error",
            "name": "InvalidMinimumTransactionAmount",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTargetIndex", "inputs": []},
        {"type": "error", "name": "InvalidVaultSharesToken", "inputs": []},
        {"type": "error", "name": "MismatchedConfig", "inputs": []},
        {"type": "error", "name": "MismatchedExtraData", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {"type": "error", "name": "SenderIsNotFactory", "inputs": []},
        {"type": "error", "name": "TargetAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "UnsupportedToken", "inputs": []},
    ],
)


class CornHyperdriveDeployerCoordinatorAddressEmptyCodeContractError(
    PypechainBaseError
):
    """ContractError for AddressEmptyCode."""

    # Error name
    name: str = "AddressEmptyCode"
    # 4 byte error selector
    selector: str = "0x9996b315"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressEmptyCode(address)"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError(
    PypechainBaseError
):
    """ContractError for AddressInsufficientBalance."""

    # Error name
    name: str = "AddressInsufficientBalance"
    # 4 byte error selector
    selector: str = "0xcd786059"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressInsufficientBalance(address)"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorApprovalFailedContractError(
    PypechainBaseError
):
    """ContractError for ApprovalFailed."""

    # Error name
    name: str = "ApprovalFailed"
    # 4 byte error selector
    selector: str = "0x8164f842"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ApprovalFailed()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError(
    PypechainBaseError
):
    """ContractError for DeploymentAlreadyExists."""

    # Error name
    name: str = "DeploymentAlreadyExists"
    # 4 byte error selector
    selector: str = "0x77c3669a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeploymentAlreadyExists()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError(
    PypechainBaseError
):
    """ContractError for DeploymentDoesNotExist."""

    # Error name
    name: str = "DeploymentDoesNotExist"
    # 4 byte error selector
    selector: str = "0xe62c7024"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeploymentDoesNotExist()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorFailedInnerCallContractError(
    PypechainBaseError
):
    """ContractError for FailedInnerCall."""

    # Error name
    name: str = "FailedInnerCall"
    # 4 byte error selector
    selector: str = "0x1425ea42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "FailedInnerCall()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError(
    PypechainBaseError
):
    """ContractError for HyperdriveAlreadyDeployed."""

    # Error name
    name: str = "HyperdriveAlreadyDeployed"
    # 4 byte error selector
    selector: str = "0x2c95caeb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "HyperdriveAlreadyDeployed()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError(
    PypechainBaseError
):
    """ContractError for HyperdriveIsNotDeployed."""

    # Error name
    name: str = "HyperdriveIsNotDeployed"
    # 4 byte error selector
    selector: str = "0x952b05cb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "HyperdriveIsNotDeployed()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorIncompleteDeploymentContractError(
    PypechainBaseError
):
    """ContractError for IncompleteDeployment."""

    # Error name
    name: str = "IncompleteDeployment"
    # 4 byte error selector
    selector: str = "0xe97cc2bf"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "IncompleteDeployment()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInsufficientValueContractError(
    PypechainBaseError
):
    """ContractError for InsufficientValue."""

    # Error name
    name: str = "InsufficientValue"
    # 4 byte error selector
    selector: str = "0x11011294"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientValue()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInvalidBaseTokenContractError(
    PypechainBaseError
):
    """ContractError for InvalidBaseToken."""

    # Error name
    name: str = "InvalidBaseToken"
    # 4 byte error selector
    selector: str = "0x0e442a4a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidBaseToken()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidCheckpointDuration."""

    # Error name
    name: str = "InvalidCheckpointDuration"
    # 4 byte error selector
    selector: str = "0x5428734d"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidCheckpointDuration()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError(
    PypechainBaseError
):
    """ContractError for InvalidFeeAmounts."""

    # Error name
    name: str = "InvalidFeeAmounts"
    # 4 byte error selector
    selector: str = "0x45ee5986"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidFeeAmounts()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinimumShareReserves."""

    # Error name
    name: str = "InvalidMinimumShareReserves"
    # 4 byte error selector
    selector: str = "0x49db44f5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinimumShareReserves()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinimumTransactionAmount."""

    # Error name
    name: str = "InvalidMinimumTransactionAmount"
    # 4 byte error selector
    selector: str = "0x3192a446"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinimumTransactionAmount()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInvalidPositionDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidPositionDuration."""

    # Error name
    name: str = "InvalidPositionDuration"
    # 4 byte error selector
    selector: str = "0x4a7fff9e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidPositionDuration()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInvalidTargetIndexContractError(
    PypechainBaseError
):
    """ContractError for InvalidTargetIndex."""

    # Error name
    name: str = "InvalidTargetIndex"
    # 4 byte error selector
    selector: str = "0x3b3f02b2"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTargetIndex()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError(
    PypechainBaseError
):
    """ContractError for InvalidVaultSharesToken."""

    # Error name
    name: str = "InvalidVaultSharesToken"
    # 4 byte error selector
    selector: str = "0xe7ee73a0"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidVaultSharesToken()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorMismatchedConfigContractError(
    PypechainBaseError
):
    """ContractError for MismatchedConfig."""

    # Error name
    name: str = "MismatchedConfig"
    # 4 byte error selector
    selector: str = "0x332ee11f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedConfig()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorMismatchedExtraDataContractError(
    PypechainBaseError
):
    """ContractError for MismatchedExtraData."""

    # Error name
    name: str = "MismatchedExtraData"
    # 4 byte error selector
    selector: str = "0xd1939688"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedExtraData()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorNotPayableContractError(
    PypechainBaseError
):
    """ContractError for NotPayable."""

    # Error name
    name: str = "NotPayable"
    # 4 byte error selector
    selector: str = "0x1574f9f3"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "NotPayable()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError(
    PypechainBaseError
):
    """ContractError for SafeERC20FailedOperation."""

    # Error name
    name: str = "SafeERC20FailedOperation"
    # 4 byte error selector
    selector: str = "0x5274afe7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SafeERC20FailedOperation(address)"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError(
    PypechainBaseError
):
    """ContractError for SenderIsNotFactory."""

    # Error name
    name: str = "SenderIsNotFactory"
    # 4 byte error selector
    selector: str = "0x40843511"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SenderIsNotFactory()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError(
    PypechainBaseError
):
    """ContractError for TargetAlreadyDeployed."""

    # Error name
    name: str = "TargetAlreadyDeployed"
    # 4 byte error selector
    selector: str = "0x0744b578"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TargetAlreadyDeployed()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorTransferFailedContractError(
    PypechainBaseError
):
    """ContractError for TransferFailed."""

    # Error name
    name: str = "TransferFailed"
    # 4 byte error selector
    selector: str = "0x90b8ec18"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TransferFailed()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorUnsupportedTokenContractError(
    PypechainBaseError
):
    """ContractError for UnsupportedToken."""

    # Error name
    name: str = "UnsupportedToken"
    # 4 byte error selector
    selector: str = "0x6a172882"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsupportedToken()"
    # Error input types
    abi: ABI = cornhyperdrivedeployercoordinator_abi


class CornHyperdriveDeployerCoordinatorContractErrors(
    PypechainBaseContractErrors
):
    """ContractErrors for the CornHyperdriveDeployerCoordinator contract."""

    AddressEmptyCode: (
        CornHyperdriveDeployerCoordinatorAddressEmptyCodeContractError
    )

    AddressInsufficientBalance: (
        CornHyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError
    )

    ApprovalFailed: CornHyperdriveDeployerCoordinatorApprovalFailedContractError

    DeploymentAlreadyExists: (
        CornHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError
    )

    DeploymentDoesNotExist: (
        CornHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError
    )

    FailedInnerCall: (
        CornHyperdriveDeployerCoordinatorFailedInnerCallContractError
    )

    HyperdriveAlreadyDeployed: (
        CornHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError
    )

    HyperdriveIsNotDeployed: (
        CornHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError
    )

    IncompleteDeployment: (
        CornHyperdriveDeployerCoordinatorIncompleteDeploymentContractError
    )

    InsufficientValue: (
        CornHyperdriveDeployerCoordinatorInsufficientValueContractError
    )

    InvalidBaseToken: (
        CornHyperdriveDeployerCoordinatorInvalidBaseTokenContractError
    )

    InvalidCheckpointDuration: (
        CornHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError
    )

    InvalidFeeAmounts: (
        CornHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError
    )

    InvalidMinimumShareReserves: CornHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError

    InvalidMinimumTransactionAmount: CornHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError

    InvalidPositionDuration: (
        CornHyperdriveDeployerCoordinatorInvalidPositionDurationContractError
    )

    InvalidTargetIndex: (
        CornHyperdriveDeployerCoordinatorInvalidTargetIndexContractError
    )

    InvalidVaultSharesToken: (
        CornHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError
    )

    MismatchedConfig: (
        CornHyperdriveDeployerCoordinatorMismatchedConfigContractError
    )

    MismatchedExtraData: (
        CornHyperdriveDeployerCoordinatorMismatchedExtraDataContractError
    )

    NotPayable: CornHyperdriveDeployerCoordinatorNotPayableContractError

    SafeERC20FailedOperation: (
        CornHyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError
    )

    SenderIsNotFactory: (
        CornHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError
    )

    TargetAlreadyDeployed: (
        CornHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError
    )

    TransferFailed: CornHyperdriveDeployerCoordinatorTransferFailedContractError

    UnsupportedToken: (
        CornHyperdriveDeployerCoordinatorUnsupportedTokenContractError
    )

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = (
            CornHyperdriveDeployerCoordinatorAddressEmptyCodeContractError()
        )
        self.AddressInsufficientBalance = (
            CornHyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError()
        )
        self.ApprovalFailed = (
            CornHyperdriveDeployerCoordinatorApprovalFailedContractError()
        )
        self.DeploymentAlreadyExists = (
            CornHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError()
        )
        self.DeploymentDoesNotExist = (
            CornHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError()
        )
        self.FailedInnerCall = (
            CornHyperdriveDeployerCoordinatorFailedInnerCallContractError()
        )
        self.HyperdriveAlreadyDeployed = (
            CornHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError()
        )
        self.HyperdriveIsNotDeployed = (
            CornHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError()
        )
        self.IncompleteDeployment = (
            CornHyperdriveDeployerCoordinatorIncompleteDeploymentContractError()
        )
        self.InsufficientValue = (
            CornHyperdriveDeployerCoordinatorInsufficientValueContractError()
        )
        self.InvalidBaseToken = (
            CornHyperdriveDeployerCoordinatorInvalidBaseTokenContractError()
        )
        self.InvalidCheckpointDuration = (
            CornHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError()
        )
        self.InvalidFeeAmounts = (
            CornHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError()
        )
        self.InvalidMinimumShareReserves = (
            CornHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError()
        )
        self.InvalidMinimumTransactionAmount = (
            CornHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError()
        )
        self.InvalidPositionDuration = (
            CornHyperdriveDeployerCoordinatorInvalidPositionDurationContractError()
        )
        self.InvalidTargetIndex = (
            CornHyperdriveDeployerCoordinatorInvalidTargetIndexContractError()
        )
        self.InvalidVaultSharesToken = (
            CornHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError()
        )
        self.MismatchedConfig = (
            CornHyperdriveDeployerCoordinatorMismatchedConfigContractError()
        )
        self.MismatchedExtraData = (
            CornHyperdriveDeployerCoordinatorMismatchedExtraDataContractError()
        )
        self.NotPayable = (
            CornHyperdriveDeployerCoordinatorNotPayableContractError()
        )
        self.SafeERC20FailedOperation = (
            CornHyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError()
        )
        self.SenderIsNotFactory = (
            CornHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError()
        )
        self.TargetAlreadyDeployed = (
            CornHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError()
        )
        self.TransferFailed = (
            CornHyperdriveDeployerCoordinatorTransferFailedContractError()
        )
        self.UnsupportedToken = (
            CornHyperdriveDeployerCoordinatorUnsupportedTokenContractError()
        )

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.ApprovalFailed,
            self.DeploymentAlreadyExists,
            self.DeploymentDoesNotExist,
            self.FailedInnerCall,
            self.HyperdriveAlreadyDeployed,
            self.HyperdriveIsNotDeployed,
            self.IncompleteDeployment,
            self.InsufficientValue,
            self.InvalidBaseToken,
            self.InvalidCheckpointDuration,
            self.InvalidFeeAmounts,
            self.InvalidMinimumShareReserves,
            self.InvalidMinimumTransactionAmount,
            self.InvalidPositionDuration,
            self.InvalidTargetIndex,
            self.InvalidVaultSharesToken,
            self.MismatchedConfig,
            self.MismatchedExtraData,
            self.NotPayable,
            self.SafeERC20FailedOperation,
            self.SenderIsNotFactory,
            self.TargetAlreadyDeployed,
            self.TransferFailed,
            self.UnsupportedToken,
        ]


class CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToBase(int) method."""

    _function_name = "convertToBase"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the convertToBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shareAmount: int) -> CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToShares(int) method."""

    _function_name = "convertToShares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the convertToShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _baseAmount: int) -> CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the coreDeployer() method."""

    _function_name = "coreDeployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the coreDeployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "coreDeployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployHyperdrive(bytes,str,IHyperdrive.PoolDeployConfig,bytes,bytes) method."""

    _function_name = "deployHyperdrive"
    _type_signature = expand_struct_type_str(
        tuple(
            ["bytes", "str", "IHyperdrive.PoolDeployConfig", "bytes", "bytes"]
        ),
        structs,
    )
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployHyperdrive method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployHyperdrive"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, __name: str, _deployConfig: IHyperdrive.PoolDeployConfig, _extraData: bytes, _salt: bytes) -> CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(bytes,IHyperdrive.PoolDeployConfig,bytes,int,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(
            ["bytes", "IHyperdrive.PoolDeployConfig", "bytes", "int", "bytes"]
        ),
        structs,
    )
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _deployConfig: IHyperdrive.PoolDeployConfig, _extraData: bytes, _targetIndex: int, _salt: bytes) -> CornHyperdriveDeployerCoordinatorDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorDeployTargetContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorDeployTargetContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorDeploymentsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployments(bytes) method."""

    _function_name = "deployments"
    _type_signature = expand_struct_type_str(tuple(["bytes"]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> HyperdriveDeployerCoordinator.Deployment:
        """returns HyperdriveDeployerCoordinator.Deployment."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = HyperdriveDeployerCoordinator.Deployment

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            HyperdriveDeployerCoordinator.Deployment,
            rename_returned_types(structs, return_types, raw_values),
        )


class CornHyperdriveDeployerCoordinatorDeploymentsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployments method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployments"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes) -> CornHyperdriveDeployerCoordinatorDeploymentsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorDeploymentsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorDeploymentsContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorDeploymentsContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorDeploymentsContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorFactoryContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the factory() method."""

    _function_name = "factory"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorFactoryContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the factory method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "factory"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorFactoryContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorFactoryContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorFactoryContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorFactoryContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorFactoryContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfTargets() method."""

    _function_name = "getNumberOfTargets"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfTargets method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getNumberOfTargets"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorInitializeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the initialize(bytes,str,int,int,IHyperdrive.Options) method."""

    _function_name = "initialize"
    _type_signature = expand_struct_type_str(
        tuple(["bytes", "str", "int", "int", "IHyperdrive.Options"]), structs
    )
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorInitializeContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the initialize method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "initialize"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _lp: str, _contribution: int, _apr: int, _options: IHyperdrive.Options) -> CornHyperdriveDeployerCoordinatorInitializeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorInitializeContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorInitializeContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorInitializeContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorKindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorKindContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorKindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorKindContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorKindContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorKindContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorNameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorNameContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorNameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorNameContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorNameContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorNameContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target0Deployer() method."""

    _function_name = "target0Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target0Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target0Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target1Deployer() method."""

    _function_name = "target1Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target1Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target1Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target2Deployer() method."""

    _function_name = "target2Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target2Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target2Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target3Deployer() method."""

    _function_name = "target3Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target3Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target3Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the target4Deployer() method."""

    _function_name = "target4Deployer"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the target4Deployer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "target4Deployer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorVersionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = CornHyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class CornHyperdriveDeployerCoordinatorVersionContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> CornHyperdriveDeployerCoordinatorVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornHyperdriveDeployerCoordinatorVersionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornHyperdriveDeployerCoordinatorVersionContractFunction0._type_signature: CornHyperdriveDeployerCoordinatorVersionContractFunction0.factory(
                "CornHyperdriveDeployerCoordinatorVersionContractFunction0",
                **kwargs,
            ),
        }
        return out


class CornHyperdriveDeployerCoordinatorContractFunctions(ContractFunctions):
    """ContractFunctions for the CornHyperdriveDeployerCoordinator contract."""

    convertToBase: (
        CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction
    )

    convertToShares: (
        CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction
    )

    coreDeployer: CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction

    deployHyperdrive: (
        CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction
    )

    deployTarget: CornHyperdriveDeployerCoordinatorDeployTargetContractFunction

    deployments: CornHyperdriveDeployerCoordinatorDeploymentsContractFunction

    factory: CornHyperdriveDeployerCoordinatorFactoryContractFunction

    getNumberOfTargets: (
        CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction
    )

    initialize: CornHyperdriveDeployerCoordinatorInitializeContractFunction

    kind: CornHyperdriveDeployerCoordinatorKindContractFunction

    name: CornHyperdriveDeployerCoordinatorNameContractFunction

    target0Deployer: (
        CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction
    )

    target1Deployer: (
        CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction
    )

    target2Deployer: (
        CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction
    )

    target3Deployer: (
        CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction
    )

    target4Deployer: (
        CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction
    )

    version: CornHyperdriveDeployerCoordinatorVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = CornHyperdriveDeployerCoordinatorConvertToBaseContractFunction.factory(
            "convertToBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToBase",
        )
        self.convertToShares = CornHyperdriveDeployerCoordinatorConvertToSharesContractFunction.factory(
            "convertToShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToShares",
        )
        self.coreDeployer = CornHyperdriveDeployerCoordinatorCoreDeployerContractFunction.factory(
            "coreDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="coreDeployer",
        )
        self.deployHyperdrive = CornHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployHyperdrive",
        )
        self.deployTarget = CornHyperdriveDeployerCoordinatorDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployTarget",
        )
        self.deployments = CornHyperdriveDeployerCoordinatorDeploymentsContractFunction.factory(
            "deployments",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployments",
        )
        self.factory = (
            CornHyperdriveDeployerCoordinatorFactoryContractFunction.factory(
                "factory",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="factory",
            )
        )
        self.getNumberOfTargets = CornHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction.factory(
            "getNumberOfTargets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNumberOfTargets",
        )
        self.initialize = (
            CornHyperdriveDeployerCoordinatorInitializeContractFunction.factory(
                "initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="initialize",
            )
        )
        self.kind = (
            CornHyperdriveDeployerCoordinatorKindContractFunction.factory(
                "kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="kind",
            )
        )
        self.name = (
            CornHyperdriveDeployerCoordinatorNameContractFunction.factory(
                "name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="name",
            )
        )
        self.target0Deployer = CornHyperdriveDeployerCoordinatorTarget0DeployerContractFunction.factory(
            "target0Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target0Deployer",
        )
        self.target1Deployer = CornHyperdriveDeployerCoordinatorTarget1DeployerContractFunction.factory(
            "target1Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target1Deployer",
        )
        self.target2Deployer = CornHyperdriveDeployerCoordinatorTarget2DeployerContractFunction.factory(
            "target2Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target2Deployer",
        )
        self.target3Deployer = CornHyperdriveDeployerCoordinatorTarget3DeployerContractFunction.factory(
            "target3Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target3Deployer",
        )
        self.target4Deployer = CornHyperdriveDeployerCoordinatorTarget4DeployerContractFunction.factory(
            "target4Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target4Deployer",
        )
        self.version = (
            CornHyperdriveDeployerCoordinatorVersionContractFunction.factory(
                "version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="version",
            )
        )


class CornHyperdriveDeployerCoordinatorContract(Contract):
    """A web3.py Contract class for the CornHyperdriveDeployerCoordinator contract."""

    abi: ABI = cornhyperdrivedeployercoordinator_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x6101606040523480156200001257600080fd5b5060405162002ac538038062002ac58339810160408190526200003591620000c0565b878787878787878760006200004b8982620002a9565b506001600160a01b0396871660805294861660a05292851660c05290841660e05283166101005282166101205216610140525062000375975050505050505050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000bb57600080fd5b919050565b600080600080600080600080610100898b031215620000de57600080fd5b88516001600160401b0380821115620000f657600080fd5b818b0191508b601f8301126200010b57600080fd5b8151818111156200012057620001206200008d565b604051601f8201601f19908116603f011681019083821181831017156200014b576200014b6200008d565b81604052828152602093508e848487010111156200016857600080fd5b600091505b828210156200018c57848201840151818301850152908301906200016d565b6000848483010152809c50505050620001a7818c01620000a3565b98505050620001b960408a01620000a3565b9550620001c960608a01620000a3565b9450620001d960808a01620000a3565b9350620001e960a08a01620000a3565b9250620001f960c08a01620000a3565b91506200020960e08a01620000a3565b90509295985092959890939650565b600181811c908216806200022d57607f821691505b6020821081036200024e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a4576000816000526020600020601f850160051c810160208610156200027f5750805b601f850160051c820191505b81811015620002a0578281556001016200028b565b5050505b505050565b81516001600160401b03811115620002c557620002c56200008d565b620002dd81620002d6845462000218565b8462000254565b602080601f831160018114620003155760008415620002fc5750858301515b600019600386901b1c1916600185901b178555620002a0565b600085815260208120601f198616915b82811015620003465788860151825594840194600190910190840162000325565b5085821015620003655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161268c62000439600039600081816102a50152610e0a0152600081816103250152610cd401526000818161038d0152610b9e0152600081816102f10152610a68015260008181610359015261085a015260008181610455015261119d015260008181610401015281816105620152818161077e0152818161088a01528181610a9801528181610bce01528181610d0401528181610e3a01528181610f6c01526111ce015261268c6000f3fe6080604052600436106100fe5760003560e01c8063ab71905f11610095578063c45a015511610064578063c45a0155146103ef578063c6e6f59214610423578063c83e1f5114610443578063e990eba814610477578063e99be3961461049757600080fd5b8063ab71905f14610347578063b6cb11181461037b578063b88fed9f146103af578063c1510618146103cf57600080fd5b806354fd4d50116100d157806354fd4d5014610263578063966ecd1c14610293578063a085fa30146102df578063aa8cd6c41461031357600080fd5b806304baa00b1461010357806306fdde031461012e57806316abfc70146101435780633740401714610164575b600080fd5b34801561010f57600080fd5b506101186104ab565b6040516101259190611bab565b60405180910390f35b34801561013a57600080fd5b506101186104c7565b610156610151366004611cea565b610555565b604051908152602001610125565b34801561017057600080fd5b5061025661017f366004611daf565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091525060009081526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004830154811660808301526005830154811660a08301526006830154811660c08301526007830154811660e083015260089092015490911661010082015290565b6040516101259190611dc8565b34801561026f57600080fd5b50604080518082019091526007815266076312e302e32360cc1b6020820152610118565b34801561029f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610125565b3480156102eb57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561031f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561035357600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561038757600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103bb57600080fd5b506101566103ca366004611daf565b6106f3565b3480156103db57600080fd5b506102c76103ea366004611fa0565b610771565b3480156103fb57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561042f57600080fd5b5061015661043e366004611daf565b610f24565b34801561044f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561048357600080fd5b506102c761049236600461200e565b610f5f565b3480156104a357600080fd5b506005610156565b6040518060600160405280602181526020016126366021913981565b600080546104d4906120af565b80601f0160208091040260200160405190810160405280929190818152602001828054610500906120af565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b505050505081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105a057604051634084351160e01b815260040160405180910390fd5b6105a86112dc565b6000868152600160205260409020600301546001600160a01b0316806105e15760405163952b05cb60e01b815260040160405180910390fd5b60006105ef828888876112fd565b9050816001600160a01b03166377d05ff4828888886040518563ffffffff1660e01b8152600401610622939291906120e9565b60206040518083038185885af1158015610640573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610665919061212f565b92506000610673823461215e565b905080156106e657604051600090339083908381818185875af1925050503d80600081146106bd576040519150601f19603f3d011682016040523d82523d6000602084013e6106c2565b606091505b50509050806106e4576040516312171d8360e31b815260040160405180910390fd5b505b5050505b95945050505050565b60405163b88fed9f60e01b81526004810182905260009073__$5682da3f97efd8f880c10f145969e15691$__9063b88fed9f906024015b602060405180830381865af4158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b919061212f565b92915050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107bc57604051634084351160e01b815260040160405180910390fd5b600086815260016020526040812090849003610974578054156107f257604051633be1b34d60e11b815260040160405180910390fd5b6107fc86866113bc565b60006108088787611560565b905060008760405160200161081d9190612171565b604051602081830303815290604052805190602001209050600087805190602001209050600061084c8a61157a565b9050838160800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008c8f8c6040516020016108c6929190918252602082015260400190565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b81526004016108fb94939291906123a4565b6020604051808303816000875af115801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e91906123ea565b9285555060018401556002830191909155600490910180546001600160a01b0319166001600160a01b03831617905590506106ea565b600087815260016020526040902054806109a15760405163398b1c0960e21b815260040160405180910390fd5b80876040516020016109b39190612171565b60405160208183030381529060405280519060200120146109e75760405163332ee11f60e01b815260040160405180910390fd5b60018201548651602088012014610a1157604051631a3272d160e31b815260040160405180910390fd5b610a1b87876113bc565b6000610a268861157a565b6002840154608082015290506001869003610b695760058301546001600160a01b031615610a665760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610acd93929190612407565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610b0294939291906123a4565b6020604051808303816000875af1158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4591906123ea565b6005840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600203610c9f5760068301546001600160a01b031615610b9c5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610c0393929190612407565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610c3894939291906123a4565b6020604051808303816000875af1158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b91906123ea565b6006840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600303610dd55760078301546001600160a01b031615610cd25760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610d3993929190612407565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610d6e94939291906123a4565b6020604051808303816000875af1158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db191906123ea565b6007840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600403610f0b5760088301546001600160a01b031615610e085760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610e6f93929190612407565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610ea494939291906123a4565b6020604051808303816000875af1158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee791906123ea565b6008840180546001600160a01b0319166001600160a01b03831617905593506106e6565b604051631d9f815960e11b815260040160405180910390fd5b6040516363737ac960e11b81526004810182905260009073__$5682da3f97efd8f880c10f145969e15691$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = CornHyperdriveDeployerCoordinatorContractFunctions(cornhyperdrivedeployercoordinator_abi, self.w3, address)  # type: ignore

        self.errors = CornHyperdriveDeployerCoordinatorContractErrors()

    errors: CornHyperdriveDeployerCoordinatorContractErrors = (
        CornHyperdriveDeployerCoordinatorContractErrors()
    )

    functions: CornHyperdriveDeployerCoordinatorContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        factory: str

        coreDeployer: str

        target0Deployer: str

        target1Deployer: str

        target2Deployer: str

        target3Deployer: str

        target4Deployer: str

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        CornConversions: CornConversionsContract

    link_references_placeholder_lookup: dict[str, str] = {
        "CornConversions": "__$5682da3f97efd8f880c10f145969e15691$__",
    }

    @classmethod
    def constructor(cls, name: str, factory: str, coreDeployer: str, target0Deployer: str, target1Deployer: str, target2Deployer: str, target3Deployer: str, target4Deployer: str, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["CornConversions"],
                link_references.CornConversions.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(factory),
            dataclass_to_tuple(coreDeployer),
            dataclass_to_tuple(target0Deployer),
            dataclass_to_tuple(target1Deployer),
            dataclass_to_tuple(target2Deployer),
            dataclass_to_tuple(target3Deployer),
            dataclass_to_tuple(target4Deployer),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args, link_references
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = CornHyperdriveDeployerCoordinatorContractFunctions(
            cornhyperdrivedeployercoordinator_abi, w3, None
        )
        contract.errors = CornHyperdriveDeployerCoordinatorContractErrors()

        return contract
