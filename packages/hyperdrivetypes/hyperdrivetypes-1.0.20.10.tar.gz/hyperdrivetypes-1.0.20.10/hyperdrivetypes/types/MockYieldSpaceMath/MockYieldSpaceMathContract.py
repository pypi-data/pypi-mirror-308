"""A web3.py Contract class for the MockYieldSpaceMath contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

mockyieldspacemath_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "calculateBondsOutGivenSharesInDown",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "dz", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateMaxBuyBondsOutSafe",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "bool", "internalType": "bool"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateMaxBuySharesInSafe",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "bool", "internalType": "bool"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateMaxSellBondsInSafe",
            "inputs": [
                {"name": "z", "type": "uint256", "internalType": "uint256"},
                {"name": "zeta", "type": "int256", "internalType": "int256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "zMin", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "bool", "internalType": "bool"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateSharesInGivenBondsOutDown",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "dy", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateSharesInGivenBondsOutUp",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "dy", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateSharesOutGivenBondsInDown",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "dy", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateSharesOutGivenBondsInDownSafe",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "dy", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "bool", "internalType": "bool"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "kDown",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "kUp",
            "inputs": [
                {"name": "ze", "type": "uint256", "internalType": "uint256"},
                {"name": "y", "type": "uint256", "internalType": "uint256"},
                {"name": "t", "type": "uint256", "internalType": "uint256"},
                {"name": "c", "type": "uint256", "internalType": "uint256"},
                {"name": "mu", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "InsufficientLiquidity", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
    ],
)


class MockYieldSpaceMathExpInvalidExponentContractError(PypechainBaseError):
    """ContractError for ExpInvalidExponent."""

    # Error name
    name: str = "ExpInvalidExponent"
    # 4 byte error selector
    selector: str = "0x73a2d6b1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ExpInvalidExponent()"
    # Error input types
    abi: ABI = mockyieldspacemath_abi


class MockYieldSpaceMathInsufficientLiquidityContractError(PypechainBaseError):
    """ContractError for InsufficientLiquidity."""

    # Error name
    name: str = "InsufficientLiquidity"
    # 4 byte error selector
    selector: str = "0xbb55fd27"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientLiquidity()"
    # Error input types
    abi: ABI = mockyieldspacemath_abi


class MockYieldSpaceMathLnInvalidInputContractError(PypechainBaseError):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = mockyieldspacemath_abi


class MockYieldSpaceMathUnsafeCastToInt256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = mockyieldspacemath_abi


class MockYieldSpaceMathContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the MockYieldSpaceMath contract."""

    ExpInvalidExponent: MockYieldSpaceMathExpInvalidExponentContractError

    InsufficientLiquidity: MockYieldSpaceMathInsufficientLiquidityContractError

    LnInvalidInput: MockYieldSpaceMathLnInvalidInputContractError

    UnsafeCastToInt256: MockYieldSpaceMathUnsafeCastToInt256ContractError

    def __init__(
        self,
    ) -> None:
        self.ExpInvalidExponent = (
            MockYieldSpaceMathExpInvalidExponentContractError()
        )
        self.InsufficientLiquidity = (
            MockYieldSpaceMathInsufficientLiquidityContractError()
        )
        self.LnInvalidInput = MockYieldSpaceMathLnInvalidInputContractError()
        self.UnsafeCastToInt256 = (
            MockYieldSpaceMathUnsafeCastToInt256ContractError()
        )

        self._all = [
            self.ExpInvalidExponent,
            self.InsufficientLiquidity,
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
        ]


class MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the calculateBondsOutGivenSharesInDown(int,int,int,int,int,int) method."""

    _function_name = "calculateBondsOutGivenSharesInDown"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the calculateBondsOutGivenSharesInDown method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "calculateBondsOutGivenSharesInDown"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, dz: int, t: int, c: int, mu: int) -> MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction0._type_signature: MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction0.factory(
                "MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the calculateMaxBuyBondsOutSafe(int,int,int,int,int) method."""

    _function_name = "calculateMaxBuyBondsOutSafe"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for CalculateMaxBuyBondsOutSafe."""

        arg1: int
        arg2: bool

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, bool]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the calculateMaxBuyBondsOutSafe method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "calculateMaxBuyBondsOutSafe"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, t: int, c: int, mu: int) -> MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction0._type_signature: MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction0.factory(
                "MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the calculateMaxBuySharesInSafe(int,int,int,int,int) method."""

    _function_name = "calculateMaxBuySharesInSafe"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for CalculateMaxBuySharesInSafe."""

        arg1: int
        arg2: bool

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, bool]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the calculateMaxBuySharesInSafe method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "calculateMaxBuySharesInSafe"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, t: int, c: int, mu: int) -> MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction0._type_signature: MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction0.factory(
                "MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the calculateMaxSellBondsInSafe(int,int,int,int,int,int,int) method."""

    _function_name = "calculateMaxSellBondsInSafe"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for CalculateMaxSellBondsInSafe."""

        arg1: int
        arg2: bool

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, bool]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the calculateMaxSellBondsInSafe method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "calculateMaxSellBondsInSafe"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, z: int, zeta: int, y: int, zMin: int, t: int, c: int, mu: int) -> MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction0._type_signature: MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction0.factory(
                "MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the calculateSharesInGivenBondsOutDown(int,int,int,int,int,int) method."""

    _function_name = "calculateSharesInGivenBondsOutDown"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the calculateSharesInGivenBondsOutDown method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "calculateSharesInGivenBondsOutDown"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, dy: int, t: int, c: int, mu: int) -> MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction0._type_signature: MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction0.factory(
                "MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the calculateSharesInGivenBondsOutUp(int,int,int,int,int,int) method."""

    _function_name = "calculateSharesInGivenBondsOutUp"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the calculateSharesInGivenBondsOutUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "calculateSharesInGivenBondsOutUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, dy: int, t: int, c: int, mu: int) -> MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction0._type_signature: MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction0.factory(
                "MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the calculateSharesOutGivenBondsInDown(int,int,int,int,int,int) method."""

    _function_name = "calculateSharesOutGivenBondsInDown"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the calculateSharesOutGivenBondsInDown method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "calculateSharesOutGivenBondsInDown"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, dy: int, t: int, c: int, mu: int) -> MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction0._type_signature: MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction0.factory(
                "MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the calculateSharesOutGivenBondsInDownSafe(int,int,int,int,int,int) method."""

    _function_name = "calculateSharesOutGivenBondsInDownSafe"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for CalculateSharesOutGivenBondsInDownSafe."""

        arg1: int
        arg2: bool

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, bool]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the calculateSharesOutGivenBondsInDownSafe method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "calculateSharesOutGivenBondsInDownSafe"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, dy: int, t: int, c: int, mu: int) -> MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction0._type_signature: MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction0.factory(
                "MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockYieldSpaceMathKDownContractFunction0(PypechainContractFunction):
    """ContractFunction for the kDown(int,int,int,int,int) method."""

    _function_name = "kDown"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathKDownContractFunction(PypechainContractFunction):
    """ContractFunction for the kDown method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kDown"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, t: int, c: int, mu: int) -> MockYieldSpaceMathKDownContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathKDownContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathKDownContractFunction0._type_signature: MockYieldSpaceMathKDownContractFunction0.factory(
                "MockYieldSpaceMathKDownContractFunction0", **kwargs
            ),
        }
        return out


class MockYieldSpaceMathKUpContractFunction0(PypechainContractFunction):
    """ContractFunction for the kUp(int,int,int,int,int) method."""

    _function_name = "kUp"
    _type_signature = expand_struct_type_str(
        tuple(["int", "int", "int", "int", "int"]), structs
    )
    _error_class = MockYieldSpaceMathContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockYieldSpaceMathKUpContractFunction(PypechainContractFunction):
    """ContractFunction for the kUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, ze: int, y: int, t: int, c: int, mu: int) -> MockYieldSpaceMathKUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockYieldSpaceMathKUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockYieldSpaceMathKUpContractFunction0._type_signature: MockYieldSpaceMathKUpContractFunction0.factory(
                "MockYieldSpaceMathKUpContractFunction0", **kwargs
            ),
        }
        return out


class MockYieldSpaceMathContractFunctions(ContractFunctions):
    """ContractFunctions for the MockYieldSpaceMath contract."""

    calculateBondsOutGivenSharesInDown: (
        MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction
    )

    calculateMaxBuyBondsOutSafe: (
        MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction
    )

    calculateMaxBuySharesInSafe: (
        MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction
    )

    calculateMaxSellBondsInSafe: (
        MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction
    )

    calculateSharesInGivenBondsOutDown: (
        MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction
    )

    calculateSharesInGivenBondsOutUp: (
        MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction
    )

    calculateSharesOutGivenBondsInDown: (
        MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction
    )

    calculateSharesOutGivenBondsInDownSafe: (
        MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction
    )

    kDown: MockYieldSpaceMathKDownContractFunction

    kUp: MockYieldSpaceMathKUpContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.calculateBondsOutGivenSharesInDown = MockYieldSpaceMathCalculateBondsOutGivenSharesInDownContractFunction.factory(
            "calculateBondsOutGivenSharesInDown",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="calculateBondsOutGivenSharesInDown",
        )
        self.calculateMaxBuyBondsOutSafe = MockYieldSpaceMathCalculateMaxBuyBondsOutSafeContractFunction.factory(
            "calculateMaxBuyBondsOutSafe",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="calculateMaxBuyBondsOutSafe",
        )
        self.calculateMaxBuySharesInSafe = MockYieldSpaceMathCalculateMaxBuySharesInSafeContractFunction.factory(
            "calculateMaxBuySharesInSafe",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="calculateMaxBuySharesInSafe",
        )
        self.calculateMaxSellBondsInSafe = MockYieldSpaceMathCalculateMaxSellBondsInSafeContractFunction.factory(
            "calculateMaxSellBondsInSafe",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="calculateMaxSellBondsInSafe",
        )
        self.calculateSharesInGivenBondsOutDown = MockYieldSpaceMathCalculateSharesInGivenBondsOutDownContractFunction.factory(
            "calculateSharesInGivenBondsOutDown",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="calculateSharesInGivenBondsOutDown",
        )
        self.calculateSharesInGivenBondsOutUp = MockYieldSpaceMathCalculateSharesInGivenBondsOutUpContractFunction.factory(
            "calculateSharesInGivenBondsOutUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="calculateSharesInGivenBondsOutUp",
        )
        self.calculateSharesOutGivenBondsInDown = MockYieldSpaceMathCalculateSharesOutGivenBondsInDownContractFunction.factory(
            "calculateSharesOutGivenBondsInDown",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="calculateSharesOutGivenBondsInDown",
        )
        self.calculateSharesOutGivenBondsInDownSafe = MockYieldSpaceMathCalculateSharesOutGivenBondsInDownSafeContractFunction.factory(
            "calculateSharesOutGivenBondsInDownSafe",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="calculateSharesOutGivenBondsInDownSafe",
        )
        self.kDown = MockYieldSpaceMathKDownContractFunction.factory(
            "kDown",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kDown",
        )
        self.kUp = MockYieldSpaceMathKUpContractFunction.factory(
            "kUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kUp",
        )


class MockYieldSpaceMathContract(Contract):
    """A web3.py Contract class for the MockYieldSpaceMath contract."""

    abi: ABI = mockyieldspacemath_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        ""
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MockYieldSpaceMathContractFunctions(mockyieldspacemath_abi, self.w3, address)  # type: ignore

        self.errors = MockYieldSpaceMathContractErrors()

    errors: MockYieldSpaceMathContractErrors = (
        MockYieldSpaceMathContractErrors()
    )

    functions: MockYieldSpaceMathContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockYieldSpaceMathContractFunctions(
            mockyieldspacemath_abi, w3, None
        )
        contract.errors = MockYieldSpaceMathContractErrors()

        return contract
