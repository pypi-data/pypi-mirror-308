"""A web3.py Contract class for the Lib contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

lib_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "eq",
            "inputs": [
                {"name": "b1", "type": "string", "internalType": "string"},
                {"name": "b2", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "eq",
            "inputs": [
                {
                    "name": "b1",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "b2",
                    "type": "address[]",
                    "internalType": "address[]",
                },
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "eq",
            "inputs": [
                {"name": "b1", "type": "bytes", "internalType": "bytes"},
                {"name": "b2", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "neq",
            "inputs": [
                {"name": "b1", "type": "bytes", "internalType": "bytes"},
                {"name": "b2", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
    ],
)


class LibContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the Lib contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class LibEqContractFunction0(PypechainContractFunction):
    """ContractFunction for the eq(str,str) method."""

    _function_name = "eq"
    _type_signature = expand_struct_type_str(tuple(["str", "str"]), structs)
    _error_class = LibContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class LibEqContractFunction1(PypechainContractFunction):
    """ContractFunction for the eq(list[str],list[str]) method."""

    _function_name = "eq"
    _type_signature = expand_struct_type_str(
        tuple(["list[str]", "list[str]"]), structs
    )
    _error_class = LibContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class LibEqContractFunction2(PypechainContractFunction):
    """ContractFunction for the eq(bytes,bytes) method."""

    _function_name = "eq"
    _type_signature = expand_struct_type_str(tuple(["bytes", "bytes"]), structs)
    _error_class = LibContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class LibEqContractFunction(PypechainContractFunction):
    """ContractFunction for the eq method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "eq"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, b1: str, b2: str) -> LibEqContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, b1: list[str], b2: list[str]) -> LibEqContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, b1: bytes, b2: bytes) -> LibEqContractFunction2:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> LibEqContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            LibEqContractFunction0._type_signature: LibEqContractFunction0.factory(
                "LibEqContractFunction0", **kwargs
            ),
            LibEqContractFunction1._type_signature: LibEqContractFunction1.factory(
                "LibEqContractFunction1", **kwargs
            ),
            LibEqContractFunction2._type_signature: LibEqContractFunction2.factory(
                "LibEqContractFunction2", **kwargs
            ),
        }
        return out


class LibNeqContractFunction0(PypechainContractFunction):
    """ContractFunction for the neq(bytes,bytes) method."""

    _function_name = "neq"
    _type_signature = expand_struct_type_str(tuple(["bytes", "bytes"]), structs)
    _error_class = LibContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class LibNeqContractFunction(PypechainContractFunction):
    """ContractFunction for the neq method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "neq"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, b1: bytes, b2: bytes) -> LibNeqContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> LibNeqContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            LibNeqContractFunction0._type_signature: LibNeqContractFunction0.factory(
                "LibNeqContractFunction0", **kwargs
            ),
        }
        return out


class LibContractFunctions(ContractFunctions):
    """ContractFunctions for the Lib contract."""

    eq: LibEqContractFunction

    neq: LibNeqContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.eq = LibEqContractFunction.factory(
            "eq",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="eq",
        )
        self.neq = LibNeqContractFunction.factory(
            "neq",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="neq",
        )


class LibContract(Contract):
    """A web3.py Contract class for the Lib contract."""

    abi: ABI = lib_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x61047961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806321a496421461005b578063a63c847814610082578063cdb168401461005b578063d37a20ba14610095575b600080fd5b61006e610069366004610270565b6100a8565b604051901515815260200160405180910390f35b61006e61009036600461036a565b61010d565b61006e6100a3366004610270565b610153565b6000815183511480156101065750816040516020016100c791906103e8565b60405160208183030381529060405280519060200120836040516020016100ee91906103e8565b60405160208183030381529060405280519060200120145b9392505050565b60008151835114801561010657508160405160200161012c9190610404565b60405160208183030381529060405280519060200120836040516020016100ee9190610404565b60008151835114158061010657508160405160200161017291906103e8565b604051602081830303815290604052805190602001208360405160200161019991906103e8565b604051602081830303815290604052805190602001201415905092915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156101f8576101f86101b9565b604052919050565b600082601f83011261021157600080fd5b813567ffffffffffffffff81111561022b5761022b6101b9565b61023e601f8201601f19166020016101cf565b81815284602083860101111561025357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561028357600080fd5b823567ffffffffffffffff8082111561029b57600080fd5b6102a786838701610200565b935060208501359150808211156102bd57600080fd5b506102ca85828601610200565b9150509250929050565b600082601f8301126102e557600080fd5b8135602067ffffffffffffffff821115610301576103016101b9565b8160051b6103108282016101cf565b928352848101820192828101908785111561032a57600080fd5b83870192505b8483101561035f5782356001600160a01b03811681146103505760008081fd5b82529183019190830190610330565b979650505050505050565b6000806040838503121561037d57600080fd5b823567ffffffffffffffff8082111561039557600080fd5b6103a1868387016102d4565b935060208501359150808211156103b757600080fd5b506102ca858286016102d4565b60005b838110156103df5781810151838201526020016103c7565b50506000910152565b600082516103fa8184602087016103c4565b9190910192915050565b815160009082906020808601845b838110156104375781516001600160a01b031685529382019390820190600101610412565b5092969550505050505056fea26469706673582212202051ace86af19d0f5eb3c4aaf2ffd31f6cf323ee8d26e626056bee18bcc8e4de64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = LibContractFunctions(lib_abi, self.w3, address)  # type: ignore

    functions: LibContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = LibContractFunctions(lib_abi, w3, None)

        return contract
