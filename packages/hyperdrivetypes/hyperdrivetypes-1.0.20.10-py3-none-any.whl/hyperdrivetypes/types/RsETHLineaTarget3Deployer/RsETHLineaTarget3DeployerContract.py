"""A web3.py Contract class for the RsETHLineaTarget3Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

rsethlineatarget3deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_rsETHPool",
                    "type": "address",
                    "internalType": "contract IRSETHPoolV2",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {"name": "", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "rsETHPool",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IRSETHPoolV2",
                }
            ],
            "stateMutability": "view",
        },
    ],
)


class RsETHLineaTarget3DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the RsETHLineaTarget3Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class RsETHLineaTarget3DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )
    _error_class = RsETHLineaTarget3DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class RsETHLineaTarget3DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, arg3: bytes, _salt: bytes) -> RsETHLineaTarget3DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> RsETHLineaTarget3DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            RsETHLineaTarget3DeployerDeployTargetContractFunction0._type_signature: RsETHLineaTarget3DeployerDeployTargetContractFunction0.factory(
                "RsETHLineaTarget3DeployerDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class RsETHLineaTarget3DeployerRsETHPoolContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the rsETHPool() method."""

    _function_name = "rsETHPool"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = RsETHLineaTarget3DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class RsETHLineaTarget3DeployerRsETHPoolContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the rsETHPool method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "rsETHPool"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> RsETHLineaTarget3DeployerRsETHPoolContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> RsETHLineaTarget3DeployerRsETHPoolContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            RsETHLineaTarget3DeployerRsETHPoolContractFunction0._type_signature: RsETHLineaTarget3DeployerRsETHPoolContractFunction0.factory(
                "RsETHLineaTarget3DeployerRsETHPoolContractFunction0", **kwargs
            ),
        }
        return out


class RsETHLineaTarget3DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the RsETHLineaTarget3Deployer contract."""

    deployTarget: RsETHLineaTarget3DeployerDeployTargetContractFunction

    rsETHPool: RsETHLineaTarget3DeployerRsETHPoolContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            RsETHLineaTarget3DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )
        self.rsETHPool = (
            RsETHLineaTarget3DeployerRsETHPoolContractFunction.factory(
                "rsETHPool",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="rsETHPool",
            )
        )


class RsETHLineaTarget3DeployerContract(Contract):
    """A web3.py Contract class for the RsETHLineaTarget3Deployer contract."""

    abi: ABI = rsethlineatarget3deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60a060405234801561001057600080fd5b5060405161468b38038061468b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516145fb610090600039600081816040015260bc01526145fb6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637df91ba81461003b5780638c98b3c61461007e575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61006261008c36600461027b565b604080513360208201529081018290526000906060016040516020818303038152906040528051906020012085857f00000000000000000000000000000000000000000000000000000000000000006040516100e79061011f565b6100f3939291906103d7565b8190604051809103906000f5905080158015610113573d6000803e3d6000fd5b5090505b949350505050565b6140ba8061050c83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156101665761016661012c565b60405290565b80356001600160a01b038116811461018357600080fd5b919050565b60006080828403121561019a57600080fd5b6040516080810181811067ffffffffffffffff821117156101bd576101bd61012c565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ff57600080fd5b813567ffffffffffffffff8082111561021a5761021a61012c565b604051601f8301601f19908116603f011681019082821181831017156102425761024261012c565b8160405283815286602085880101111561025b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561029357600080fd5b610260808212156102a357600080fd5b6102ab610142565b91506102b68761016c565b82526102c46020880161016c565b60208301526102d56040880161016c565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e083015261010080880135818401525061012080880135818401525061014080880135818401525061016061033e81890161016c565b9083015261018061035088820161016c565b908301526101a061036288820161016c565b908301526101c061037488820161016c565b908301526101e061038789898301610188565b818401525081955061039a81880161016c565b9450505061028085013567ffffffffffffffff8111156103b957600080fd5b6103c5878288016101ee565b949793965093946102a0013593505050565b83516001600160a01b031681526102a08101602085015161040360208401826001600160a01b03169052565b50604085015161041e60408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016080860151610490828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e0808701518051918501919091526020810151610200850152604081015161022085015260600151610240840152848116610260840152831661028083015261011756fe6102a06040523480156200001257600080fd5b50604051620040ba380380620040ba8339810160408190526200003591620001b5565b600160005582516001600160a01b039081166080908152602080860151831660a0908152918601516101a052908501516101c05260c0808601516101e090815260e0808801516102005261012080890151909352610100808901519091526101408089015190915290870180515190925281519092015190915280516040908101516101605290516060908101516101805290850151821661024052909301516102605290821661022052166102805262000305565b60405161020081016001600160401b03811182821017156200011d57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013b57600080fd5b919050565b6000608082840312156200015357600080fd5b604051608081016001600160401b03811182821017156200018457634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008060008385036102a0811215620001cd57600080fd5b61026080821215620001de57600080fd5b620001e8620000eb565b9150620001f58662000123565b8252620002056020870162000123565b6020830152620002186040870162000123565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e08301526101008087015181840152506101208087015181840152506101408087015181840152506101606200028381880162000123565b908301526101806200029787820162000123565b908301526101a0620002ab87820162000123565b908301526101c0620002bf87820162000123565b908301526101e0620002d48888830162000140565b8184015250819450620002e981870162000123565b93505050620002fc610280850162000123565b90509250925092565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613bd0620004ea6000396000818161198f01528181611a5901528181612ce60152612d120152600050506000505060006112c80152600081816102fb0152818161032a015261035701526000818160d6015281816105a101526116ef01526000818161084601528181610931015281816109c401528181610acd015281816115c0015281816116c9015281816121bd0152818161222001528181612aff01528181612e360152612e72015260008181610137015281816108b601528181610e7601528181611484015281816114e80152818161152f01526116a301526000611dc2015260008181611f1d01526130cb01526000818161103a0152611ef1015260006130810152600081816101790152818161090901528181610e9701528181611454015281816114b801528181611550015261171501526000818161015801528181610230015281816102d0015281816106eb015281816108e301528181610f720152612a9501526000818161028f01528181610d3501528181610db001528181610e2601528181610ef20152610f2a01526000611af0015260005050613bd06000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c366004613623565b610066565b60405190815260200160405180910390f35b610041610061366004613687565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e8484846107f8565b90505b9392505050565b60006100a2610ba9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d482610bd3565b7f00000000000000000000000000000000000000000000000000000000000000008610156101155760405163211ddda360e11b815260040160405180910390fd5b600061019d610122610c0c565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c32565b9050848110806101ac57508381115b156101ca57604051633b61151160e11b815260040160405180910390fd5b6000806101d78986610c58565b9150915060006101e5610d2d565b90506101f5818360046001610d59565b50600254600454600354600092839261025f926001600160801b0380841693600f9390930b92600160801b900481169189911661025a6102557f00000000000000000000000000000000000000000000000000000000000000008b6136ed565b6113d7565b611421565b915091508061028157604051630552b01360e31b815260040160405180910390fd5b8b60006102f46008826102b47f000000000000000000000000000000000000000000000000000000000000000089613700565b81526020810191909152604001600020546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061162e565b90506103207f0000000000000000000000000000000000000000000000000000000000000000826136ed565b88118061037f57507f00000000000000000000000000000000000000000000000000000000000000008111801561037f575061037c7f000000000000000000000000000000000000000000000000000000000000000082613700565b88105b1561039d57604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103e9916001600160801b0390911690613700565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654919250906104249083906136ed565b905060008060006104348a61165a565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa1569061046e908490600401613791565b602060405180830381865af415801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af91906137a0565b91506104c26104bd8c611794565b6117c2565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052391859101613791565b602060405180830381865af4158015610540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056491906137a0565b9250818310156105875760405163184d952160e11b815260040160405180910390fd5b61059d84836105968187613700565b91906117e8565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e05760405163211ddda360e11b815260040160405180910390fd5b508f6105ec868e611806565b101561060b5760405163c972651760e01b815260040160405180910390fd5b61062960008e600001602081019061062391906137ce565b8e61181b565b610632896118c3565b95508561065257604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c90506000610715600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b031661025a7f00000000000000000000000000000000000000000000000000000000000000008c61025591906136ed565b9b5090508a158061072f575061072c8c60006118d0565b81125b1561074d57604051630552b01360e31b815260040160405180910390fd5b600088156107655761076087848b6117e8565b610768565b60005b905061077760208501856137ce565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107b460408a0160208b016137f9565b866107c260408c018c613816565b6040516107d5979695949392919061385d565b60405180910390a250505050505050505050505050505050506100786001600055565b6000610802610ba9565b61080b82610bd3565b60065460ff161561082f57604051637983c05160e01b815260040160405180910390fd5b60008061083c8685610c58565b909250905061086c7f000000000000000000000000000000000000000000000000000000000000000060026138b1565b82101561088c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016124b5929190613a2f565b6040805180830381865af41580156124d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f59190613aa5565b9150915061251361250582611794565b61250e90613ac9565b612ab9565b925082612529576000965050505050505061141b565b6125328261190b565b6007805460009061254d9084906001600160801b0316613916565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061257a8161190b565b6007805460109061259c908490600160801b90046001600160801b0316613916565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125f98761165a565b6040518263ffffffff1660e01b81526004016126159190613791565b6040805180830381865af4158015612631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126559190613ae5565b915091508061266b575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916126d1916136ed565b6126db9190613700565b9050806000036126f357506000958695509350505050565b600080871161270357600061270e565b61270e8488846117e8565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561274257612742613b15565b6040519080825280601f01601f19166020018201604052801561276c576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561278d578692505b828152826000602083013e9093509150505b9550959350505050565b6000806000836127b886611794565b6127c29190613936565b905060008112156127da576000809250925050610d26565b946001945092505050565b60008060006127f7888888888861301f565b90506000612822670de0b6b3a76400006128118888612dd5565b61281b91906136ed565b8390611806565b9050670de0b6b3a764000081106128565761284f612848670de0b6b3a764000089611806565b8290612c6a565b905061286e565b61286b612848670de0b6b3a764000089612dd5565b90505b6128788186611806565b9050888110156128905760008093509350505061279f565b97909703976001975095505050505050565b60008060006128b4898988888861304e565b90506128ce866119826128c78a8d6136ed565b8790612167565b98506128db858a866117e8565b9850888110156128f2576000809250925050611623565b888103670de0b6b3a7640000811061292057612919612848670de0b6b3a764000089612dd5565b9050612938565b612935612848670de0b6b3a764000089611806565b90505b8089101561294e57600080935093505050611623565b90970398600198509650505050505050565b6000806000806000612973898789613073565b90925090506129828289613700565b9750600061299182888a6117e8565b905061299d818b613700565b9a989950979650505050505050565b6000806129ba8460006130f9565b6129c58460006130f9565b6129cf9190613936565b905060008113156129eb576129e481866136ed565b9450612a0a565b6000811215612a0a576129fd81613ac9565b612a079086613700565b94505b50929392505050565b60006100918383670de0b6b3a76400005b6000826000190484118302158202612a3b57600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612a5e610d2d565b612a6891906138b1565b9050808311612a78576000612a82565b612a828184613700565b915061009161281b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006138b1565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b969190613b2b565b935093509350935080612bb25750600098975050505050505050565b868414612be357612bc28461190b565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612c1457612bf383611935565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612c4257612c248261190b565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612c835750670de0b6b3a764000061141b565b82600003612c935750600061141b565b6000612c9e83611794565b90506000612cb3612cae86611794565b61310f565b9050818102612cca670de0b6b3a764000082613b6c565b9050612cd581613335565b9695505050505050565b600061141b7f0000000000000000000000000000000000000000000000000000000000000000836134ca565b600061141b7f0000000000000000000000000000000000000000000000000000000000000000836134e2565b600082600003612d48575084610078565b8115612d9b57612d79612d5b84876136ed565b612d658587612167565b612d6f888a612167565b61165491906136ed565b90506000612d878588611cf2565b905080821015612d95578091505b50610078565b828503612daa57506000610078565b610075612db78487613700565b612dc18587612a13565b612dcb888a612167565b6116549190613700565b600061009183670de0b6b3a764000084612a24565b600060016001607f1b038211156117be5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612e2f906001600160801b031684612dd5565b9050612e5b7f0000000000000000000000000000000000000000000000000000000000000000826136ed565b6002546001600160801b031611156118df576002547f000000000000000000000000000000000000000000000000000000000000000090612ea69083906001600160801b0316613700565b6100919190613700565b612eb86135bf565b600080612ec48461165a565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612eff9190613791565b6040805180830381865af4158015612f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3f9190613ae5565b9350905082612f54575060009150611ac39050565b6000612f766115e584610160015185610140015161216790919063ffffffff16565b612f966115e5856101200151866101000151612a1390919063ffffffff16565b612fa09190613936565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b600061302b8585612c6a565b61304461303c86611982868b612167565b8590856117e8565b61007591906136ed565b600061305a8585612c6a565b61304461306b86611982868b612a13565b859085612a24565b6000806130c3856130bd85817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006130b3818c612dd5565b6130bd9190613700565b90612a13565b91506130ef827f0000000000000000000000000000000000000000000000000000000000000000612167565b9050935093915050565b60008183136131085781610091565b5090919050565b60008082136131315760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906131b49084901c611794565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361335057506000919050565b680755bf798b4a1bf1e58212613379576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612cd574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611794565b6000806134d6846134fa565b90506113cf8382611806565b6000806134ee846134fa565b90506113cf8382612167565b6000816001600160a01b031663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561353a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b91906137a0565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061012001604052806135d361355e565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000606082840312156118df57600080fd5b600080600080600060a0868803121561363b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561366e57600080fd5b61367a88828901613611565b9150509295509295909350565b60008060006060848603121561369c57600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156136c157600080fd5b6136cd86828701613611565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561141b5761141b6136d7565b8181038181111561141b5761141b6136d7565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161141b8284613713565b6000602082840312156137b257600080fd5b5051919050565b6001600160a01b0381168114610c0957600080fd5b6000602082840312156137e057600080fd5b8135610091816137b9565b8015158114610c0957600080fd5b60006020828403121561380b57600080fd5b8135610091816137eb565b6000808335601e1984360301811261382d57600080fd5b83018035915067ffffffffffffffff82111561384857600080fd5b602001915036819003821315610d2657600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761141b5761141b6136d7565b6000806000606084860312156138dd57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b03818116838216019080821115611904576119046136d7565b6001600160801b03818116838216019080821115611904576119046136d7565b8181036000831280158383131683831282161715611904576119046136d7565b60006020828403121561396857600080fd5b8151610091816137b9565b8082018281126000831280158216821582161715613993576139936136d7565b505092915050565b6000602082840312156139ad57600080fd5b8151610091816137eb565b634e487b7160e01b600052601260045260246000fd5b6000826139dd576139dd6139b8565b500690565b6001600160801b03828116828216039080821115611904576119046136d7565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561141b5761141b6136d7565b60006102a082019050613a43828551613713565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613ab857600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ade57613ade6136d7565b5060000390565b60008060408385031215613af857600080fd5b825191506020830151613b0a816137eb565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613b4157600080fd5b8451935060208501519250604085015191506060850151613b61816137eb565b939692955090935050565b600082613b7b57613b7b6139b8565b600160ff1b821460001984141615613b9557613b956136d7565b50059056fea2646970667358221220600f57780c8783fc27ce2b5adc7880fde220eb69be72bfeb357f953aa6324b5d64736f6c63430008160033a26469706673582212203dfa5b6b8106c2dcc0a897e56d451a07da42cde05df36049f431f4a65ee2969e64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = RsETHLineaTarget3DeployerContractFunctions(rsethlineatarget3deployer_abi, self.w3, address)  # type: ignore

    functions: RsETHLineaTarget3DeployerContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        rsETHPool: str

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, rsETHPool: str, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(dataclass_to_tuple(rsETHPool))

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args, link_references
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = RsETHLineaTarget3DeployerContractFunctions(
            rsethlineatarget3deployer_abi, w3, None
        )

        return contract
