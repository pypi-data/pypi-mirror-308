"""A web3.py Contract class for the AaveL2HyperdriveTest contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..LPMath import LPMathContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from .AaveL2HyperdriveTestTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    DeployedEvent,
    InitializeEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SweepEvent,
    TransferSingleEvent,
)

structs = {
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}

aavel2hyperdrivetest_abi: ABI = cast(
    ABI,
    [
        {"type": "constructor", "inputs": [], "stateMutability": "nonpayable"},
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__deployAndInitialize__asBase",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__deployAndInitialize__asShares",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__kind",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__name",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__pricePerVaultShare",
            "inputs": [
                {
                    "name": "sharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__version",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_close_long_with_base",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_long_with_shares",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_short_with_base",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_short_with_shares",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_getters",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_open_long_with_base",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_long_with_eth",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_long_with_shares",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_base",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_eth",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_shares",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_vaultSharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_maturity_with_base",
            "inputs": [
                {
                    "name": "_basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_maturity_with_shares",
            "inputs": [
                {
                    "name": "_vaultSharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_withdrawal_shares_with_base",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_withdrawal_shares_with_shares",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_maturity_with_base",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_maturity_with_shares",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_directSweep",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "InsufficientLiquidity", "inputs": []},
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint256", "inputs": []},
        {"type": "error", "name": "UnsupportedToken", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class AaveL2HyperdriveTestExpInvalidExponentContractError(PypechainBaseError):
    """ContractError for ExpInvalidExponent."""

    # Error name
    name: str = "ExpInvalidExponent"
    # 4 byte error selector
    selector: str = "0x73a2d6b1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ExpInvalidExponent()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestInsufficientLiquidityContractError(
    PypechainBaseError
):
    """ContractError for InsufficientLiquidity."""

    # Error name
    name: str = "InsufficientLiquidity"
    # 4 byte error selector
    selector: str = "0xbb55fd27"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientLiquidity()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestInvalidTimestampContractError(PypechainBaseError):
    """ContractError for InvalidTimestamp."""

    # Error name
    name: str = "InvalidTimestamp"
    # 4 byte error selector
    selector: str = "0xb7d09497"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimestamp()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestLnInvalidInputContractError(PypechainBaseError):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestUnsafeCastToInt256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestUnsafeCastToUint256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToUint256."""

    # Error name
    name: str = "UnsafeCastToUint256"
    # 4 byte error selector
    selector: str = "0xe3a26e20"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToUint256()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestUnsupportedTokenContractError(PypechainBaseError):
    """ContractError for UnsupportedToken."""

    # Error name
    name: str = "UnsupportedToken"
    # 4 byte error selector
    selector: str = "0x6a172882"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsupportedToken()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestWhaleBalanceExceededContractError(PypechainBaseError):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestWhaleIsContractContractError(PypechainBaseError):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = aavel2hyperdrivetest_abi


class AaveL2HyperdriveTestContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the AaveL2HyperdriveTest contract."""

    ExpInvalidExponent: AaveL2HyperdriveTestExpInvalidExponentContractError

    InsufficientLiquidity: (
        AaveL2HyperdriveTestInsufficientLiquidityContractError
    )

    InvalidTimestamp: AaveL2HyperdriveTestInvalidTimestampContractError

    LnInvalidInput: AaveL2HyperdriveTestLnInvalidInputContractError

    UnsafeCastToInt256: AaveL2HyperdriveTestUnsafeCastToInt256ContractError

    UnsafeCastToUint256: AaveL2HyperdriveTestUnsafeCastToUint256ContractError

    UnsupportedToken: AaveL2HyperdriveTestUnsupportedTokenContractError

    WhaleBalanceExceeded: AaveL2HyperdriveTestWhaleBalanceExceededContractError

    WhaleIsContract: AaveL2HyperdriveTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.ExpInvalidExponent = (
            AaveL2HyperdriveTestExpInvalidExponentContractError()
        )
        self.InsufficientLiquidity = (
            AaveL2HyperdriveTestInsufficientLiquidityContractError()
        )
        self.InvalidTimestamp = (
            AaveL2HyperdriveTestInvalidTimestampContractError()
        )
        self.LnInvalidInput = AaveL2HyperdriveTestLnInvalidInputContractError()
        self.UnsafeCastToInt256 = (
            AaveL2HyperdriveTestUnsafeCastToInt256ContractError()
        )
        self.UnsafeCastToUint256 = (
            AaveL2HyperdriveTestUnsafeCastToUint256ContractError()
        )
        self.UnsupportedToken = (
            AaveL2HyperdriveTestUnsupportedTokenContractError()
        )
        self.WhaleBalanceExceeded = (
            AaveL2HyperdriveTestWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            AaveL2HyperdriveTestWhaleIsContractContractError()
        )

        self._all = [
            self.ExpInvalidExponent,
            self.InsufficientLiquidity,
            self.InvalidTimestamp,
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.UnsafeCastToUint256,
            self.UnsupportedToken,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class AaveL2HyperdriveTestIS_TESTContractFunction0(PypechainContractFunction):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestIS_TESTContractFunction(PypechainContractFunction):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestIS_TESTContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestIS_TESTContractFunction0._type_signature: AaveL2HyperdriveTestIS_TESTContractFunction0.factory(
                "AaveL2HyperdriveTestIS_TESTContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestCreateUserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestCreateUserContractFunction(PypechainContractFunction):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, name: str) -> AaveL2HyperdriveTestCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestCreateUserContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestCreateUserContractFunction0._type_signature: AaveL2HyperdriveTestCreateUserContractFunction0.factory(
                "AaveL2HyperdriveTestCreateUserContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestExcludeArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestExcludeArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestExcludeArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestExcludeArtifactsContractFunction0._type_signature: AaveL2HyperdriveTestExcludeArtifactsContractFunction0.factory(
                "AaveL2HyperdriveTestExcludeArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestExcludeContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestExcludeContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestExcludeContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestExcludeContractsContractFunction0._type_signature: AaveL2HyperdriveTestExcludeContractsContractFunction0.factory(
                "AaveL2HyperdriveTestExcludeContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestExcludeSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestExcludeSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestExcludeSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestExcludeSendersContractFunction0._type_signature: AaveL2HyperdriveTestExcludeSendersContractFunction0.factory(
                "AaveL2HyperdriveTestExcludeSendersContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestFailedContractFunction0(PypechainContractFunction):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestFailedContractFunction(PypechainContractFunction):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestFailedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestFailedContractFunction0._type_signature: AaveL2HyperdriveTestFailedContractFunction0.factory(
                "AaveL2HyperdriveTestFailedContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestSetUpContractFunction0(PypechainContractFunction):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestSetUpContractFunction(PypechainContractFunction):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestSetUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestSetUpContractFunction0._type_signature: AaveL2HyperdriveTestSetUpContractFunction0.factory(
                "AaveL2HyperdriveTestSetUpContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction0._type_signature: AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction0.factory(
                "AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTargetArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestTargetArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTargetArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTargetArtifactsContractFunction0._type_signature: AaveL2HyperdriveTestTargetArtifactsContractFunction0.factory(
                "AaveL2HyperdriveTestTargetArtifactsContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTargetContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestTargetContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTargetContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTargetContractsContractFunction0._type_signature: AaveL2HyperdriveTestTargetContractsContractFunction0.factory(
                "AaveL2HyperdriveTestTargetContractsContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTargetInterfacesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class AaveL2HyperdriveTestTargetInterfacesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTargetInterfacesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTargetInterfacesContractFunction0._type_signature: AaveL2HyperdriveTestTargetInterfacesContractFunction0.factory(
                "AaveL2HyperdriveTestTargetInterfacesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTargetSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class AaveL2HyperdriveTestTargetSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTargetSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTargetSelectorsContractFunction0._type_signature: AaveL2HyperdriveTestTargetSelectorsContractFunction0.factory(
                "AaveL2HyperdriveTestTargetSelectorsContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTargetSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestTargetSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTargetSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTargetSendersContractFunction0._type_signature: AaveL2HyperdriveTestTargetSendersContractFunction0.factory(
                "AaveL2HyperdriveTestTargetSendersContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asBase() method."""

    _function_name = "test__deployAndInitialize__asBase"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__deployAndInitialize__asBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction0._type_signature: AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction0.factory(
                "AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asShares() method."""

    _function_name = "test__deployAndInitialize__asShares"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__deployAndInitialize__asShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction0._type_signature: AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest__kindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__kind() method."""

    _function_name = "test__kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest__kindContractFunction(PypechainContractFunction):
    """ContractFunction for the test__kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest__kindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest__kindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest__kindContractFunction0._type_signature: AaveL2HyperdriveTestTest__kindContractFunction0.factory(
                "AaveL2HyperdriveTestTest__kindContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTest__nameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__name() method."""

    _function_name = "test__name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest__nameContractFunction(PypechainContractFunction):
    """ContractFunction for the test__name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest__nameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest__nameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest__nameContractFunction0._type_signature: AaveL2HyperdriveTestTest__nameContractFunction0.factory(
                "AaveL2HyperdriveTestTest__nameContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__pricePerVaultShare(int) method."""

    _function_name = "test__pricePerVaultShare"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__pricePerVaultShare method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__pricePerVaultShare"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, sharesPaid: int) -> AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction0._type_signature: AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction0.factory(
                "AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest__versionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__version() method."""

    _function_name = "test__version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest__versionContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest__versionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest__versionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest__versionContractFunction0._type_signature: AaveL2HyperdriveTestTest__versionContractFunction0.factory(
                "AaveL2HyperdriveTestTest__versionContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTest_close_long_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_base(int,int) method."""

    _function_name = "test_close_long_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_close_long_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_long_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int, variableRate: int) -> AaveL2HyperdriveTestTest_close_long_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_close_long_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_close_long_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_close_long_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_close_long_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_shares(int,int) method."""

    _function_name = "test_close_long_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_long_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int, variableRate: int) -> AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_close_short_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_base(int,int) method."""

    _function_name = "test_close_short_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_close_short_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_short_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int, variableRate: int) -> AaveL2HyperdriveTestTest_close_short_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_close_short_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_close_short_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_close_short_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_close_short_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_shares(int,int) method."""

    _function_name = "test_close_short_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_short_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int, variableRate: int) -> AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_gettersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_getters() method."""

    _function_name = "test_getters"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_gettersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_getters method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_getters"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest_gettersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_gettersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_gettersContractFunction0._type_signature: AaveL2HyperdriveTestTest_gettersContractFunction0.factory(
                "AaveL2HyperdriveTestTest_gettersContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestTest_open_long_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_base(int) method."""

    _function_name = "test_open_long_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_open_long_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> AaveL2HyperdriveTestTest_open_long_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_open_long_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_open_long_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_open_long_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_open_long_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_open_long_with_ethContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_eth() method."""

    _function_name = "test_open_long_with_eth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_open_long_with_ethContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_eth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_eth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest_open_long_with_ethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_open_long_with_ethContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_open_long_with_ethContractFunction0._type_signature: AaveL2HyperdriveTestTest_open_long_with_ethContractFunction0.factory(
                "AaveL2HyperdriveTestTest_open_long_with_ethContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_shares(int) method."""

    _function_name = "test_open_long_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_open_short_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_base(int) method."""

    _function_name = "test_open_short_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_open_short_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int) -> AaveL2HyperdriveTestTest_open_short_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_open_short_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_open_short_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_open_short_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_open_short_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_open_short_with_ethContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_eth() method."""

    _function_name = "test_open_short_with_eth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_open_short_with_ethContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_eth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_eth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest_open_short_with_ethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_open_short_with_ethContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_open_short_with_ethContractFunction0._type_signature: AaveL2HyperdriveTestTest_open_short_with_ethContractFunction0.factory(
                "AaveL2HyperdriveTestTest_open_short_with_ethContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_shares(int) method."""

    _function_name = "test_open_short_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int) -> AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_long_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _basePaid: int) -> AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_long_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesPaid: int) -> AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_base(int,int) method."""

    _function_name = "test_round_trip_long_maturity_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_maturity_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _basePaid: int, _variableRate: int) -> AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_shares(int,int) method."""

    _function_name = "test_round_trip_long_maturity_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_maturity_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesPaid: int, _variableRate: int) -> AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_lp_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int) -> AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_lp_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int) -> AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_base(int,int) method."""

    _function_name = "test_round_trip_lp_withdrawal_shares_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_withdrawal_shares_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int, _variableRate: int) -> AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_shares(int,int) method."""

    _function_name = "test_round_trip_lp_withdrawal_shares_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_withdrawal_shares_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int, _variableRate: int) -> AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_short_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int) -> AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_short_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int) -> AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_base(int,int) method."""

    _function_name = "test_round_trip_short_maturity_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_maturity_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int, _variableRate: int) -> AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_shares(int,int) method."""

    _function_name = "test_round_trip_short_maturity_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_maturity_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int, _variableRate: int) -> AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction0._type_signature: AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction0.factory(
                "AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_directSweep() method."""

    _function_name = "test_sweep_failure_directSweep"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_directSweep method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_failure_directSweep"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction0._type_signature: AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction0.factory(
                "AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestTest_sweep_successContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success() method."""

    _function_name = "test_sweep_success"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class AaveL2HyperdriveTestTest_sweep_successContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> AaveL2HyperdriveTestTest_sweep_successContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestTest_sweep_successContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestTest_sweep_successContractFunction0._type_signature: AaveL2HyperdriveTestTest_sweep_successContractFunction0.factory(
                "AaveL2HyperdriveTestTest_sweep_successContractFunction0",
                **kwargs,
            ),
        }
        return out


class AaveL2HyperdriveTestWhaleTransferContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestWhaleTransferContractFunction1(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )
    _error_class = AaveL2HyperdriveTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class AaveL2HyperdriveTestWhaleTransferContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> AaveL2HyperdriveTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> AaveL2HyperdriveTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2HyperdriveTestWhaleTransferContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2HyperdriveTestWhaleTransferContractFunction0._type_signature: AaveL2HyperdriveTestWhaleTransferContractFunction0.factory(
                "AaveL2HyperdriveTestWhaleTransferContractFunction0", **kwargs
            ),
            AaveL2HyperdriveTestWhaleTransferContractFunction1._type_signature: AaveL2HyperdriveTestWhaleTransferContractFunction1.factory(
                "AaveL2HyperdriveTestWhaleTransferContractFunction1", **kwargs
            ),
        }
        return out


class AaveL2HyperdriveTestContractFunctions(ContractFunctions):
    """ContractFunctions for the AaveL2HyperdriveTest contract."""

    IS_TEST: AaveL2HyperdriveTestIS_TESTContractFunction

    createUser: AaveL2HyperdriveTestCreateUserContractFunction

    excludeArtifacts: AaveL2HyperdriveTestExcludeArtifactsContractFunction

    excludeContracts: AaveL2HyperdriveTestExcludeContractsContractFunction

    excludeSenders: AaveL2HyperdriveTestExcludeSendersContractFunction

    failed: AaveL2HyperdriveTestFailedContractFunction

    setUp: AaveL2HyperdriveTestSetUpContractFunction

    targetArtifactSelectors: (
        AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: AaveL2HyperdriveTestTargetArtifactsContractFunction

    targetContracts: AaveL2HyperdriveTestTargetContractsContractFunction

    targetInterfaces: AaveL2HyperdriveTestTargetInterfacesContractFunction

    targetSelectors: AaveL2HyperdriveTestTargetSelectorsContractFunction

    targetSenders: AaveL2HyperdriveTestTargetSendersContractFunction

    test__deployAndInitialize__asBase: (
        AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction
    )

    test__deployAndInitialize__asShares: (
        AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction
    )

    test__kind: AaveL2HyperdriveTestTest__kindContractFunction

    test__name: AaveL2HyperdriveTestTest__nameContractFunction

    test__pricePerVaultShare: (
        AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction
    )

    test__version: AaveL2HyperdriveTestTest__versionContractFunction

    test_close_long_with_base: (
        AaveL2HyperdriveTestTest_close_long_with_baseContractFunction
    )

    test_close_long_with_shares: (
        AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction
    )

    test_close_short_with_base: (
        AaveL2HyperdriveTestTest_close_short_with_baseContractFunction
    )

    test_close_short_with_shares: (
        AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction
    )

    test_getters: AaveL2HyperdriveTestTest_gettersContractFunction

    test_open_long_with_base: (
        AaveL2HyperdriveTestTest_open_long_with_baseContractFunction
    )

    test_open_long_with_eth: (
        AaveL2HyperdriveTestTest_open_long_with_ethContractFunction
    )

    test_open_long_with_shares: (
        AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction
    )

    test_open_short_with_base: (
        AaveL2HyperdriveTestTest_open_short_with_baseContractFunction
    )

    test_open_short_with_eth: (
        AaveL2HyperdriveTestTest_open_short_with_ethContractFunction
    )

    test_open_short_with_shares: (
        AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction
    )

    test_round_trip_long_instantaneous_with_base: AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction

    test_round_trip_long_instantaneous_with_shares: AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction

    test_round_trip_long_maturity_with_base: AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction

    test_round_trip_long_maturity_with_shares: AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction

    test_round_trip_lp_instantaneous_with_base: AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction

    test_round_trip_lp_instantaneous_with_shares: AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction

    test_round_trip_lp_withdrawal_shares_with_base: AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction

    test_round_trip_lp_withdrawal_shares_with_shares: AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction

    test_round_trip_short_instantaneous_with_base: AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction

    test_round_trip_short_instantaneous_with_shares: AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction

    test_round_trip_short_maturity_with_base: AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction

    test_round_trip_short_maturity_with_shares: AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction

    test_sweep_failure_directSweep: (
        AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction
    )

    test_sweep_success: AaveL2HyperdriveTestTest_sweep_successContractFunction

    whaleTransfer: AaveL2HyperdriveTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = AaveL2HyperdriveTestIS_TESTContractFunction.factory(
            "IS_TEST",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="IS_TEST",
        )
        self.createUser = (
            AaveL2HyperdriveTestCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createUser",
            )
        )
        self.excludeArtifacts = (
            AaveL2HyperdriveTestExcludeArtifactsContractFunction.factory(
                "excludeArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeArtifacts",
            )
        )
        self.excludeContracts = (
            AaveL2HyperdriveTestExcludeContractsContractFunction.factory(
                "excludeContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeContracts",
            )
        )
        self.excludeSenders = (
            AaveL2HyperdriveTestExcludeSendersContractFunction.factory(
                "excludeSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeSenders",
            )
        )
        self.failed = AaveL2HyperdriveTestFailedContractFunction.factory(
            "failed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="failed",
        )
        self.setUp = AaveL2HyperdriveTestSetUpContractFunction.factory(
            "setUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setUp",
        )
        self.targetArtifactSelectors = (
            AaveL2HyperdriveTestTargetArtifactSelectorsContractFunction.factory(
                "targetArtifactSelectors",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetArtifactSelectors",
            )
        )
        self.targetArtifacts = (
            AaveL2HyperdriveTestTargetArtifactsContractFunction.factory(
                "targetArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetArtifacts",
            )
        )
        self.targetContracts = (
            AaveL2HyperdriveTestTargetContractsContractFunction.factory(
                "targetContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetContracts",
            )
        )
        self.targetInterfaces = (
            AaveL2HyperdriveTestTargetInterfacesContractFunction.factory(
                "targetInterfaces",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetInterfaces",
            )
        )
        self.targetSelectors = (
            AaveL2HyperdriveTestTargetSelectorsContractFunction.factory(
                "targetSelectors",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSelectors",
            )
        )
        self.targetSenders = (
            AaveL2HyperdriveTestTargetSendersContractFunction.factory(
                "targetSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSenders",
            )
        )
        self.test__deployAndInitialize__asBase = AaveL2HyperdriveTestTest__deployAndInitialize__asBaseContractFunction.factory(
            "test__deployAndInitialize__asBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__deployAndInitialize__asBase",
        )
        self.test__deployAndInitialize__asShares = AaveL2HyperdriveTestTest__deployAndInitialize__asSharesContractFunction.factory(
            "test__deployAndInitialize__asShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__deployAndInitialize__asShares",
        )
        self.test__kind = (
            AaveL2HyperdriveTestTest__kindContractFunction.factory(
                "test__kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__kind",
            )
        )
        self.test__name = (
            AaveL2HyperdriveTestTest__nameContractFunction.factory(
                "test__name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__name",
            )
        )
        self.test__pricePerVaultShare = AaveL2HyperdriveTestTest__pricePerVaultShareContractFunction.factory(
            "test__pricePerVaultShare",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__pricePerVaultShare",
        )
        self.test__version = (
            AaveL2HyperdriveTestTest__versionContractFunction.factory(
                "test__version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__version",
            )
        )
        self.test_close_long_with_base = AaveL2HyperdriveTestTest_close_long_with_baseContractFunction.factory(
            "test_close_long_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_long_with_base",
        )
        self.test_close_long_with_shares = AaveL2HyperdriveTestTest_close_long_with_sharesContractFunction.factory(
            "test_close_long_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_long_with_shares",
        )
        self.test_close_short_with_base = AaveL2HyperdriveTestTest_close_short_with_baseContractFunction.factory(
            "test_close_short_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_short_with_base",
        )
        self.test_close_short_with_shares = AaveL2HyperdriveTestTest_close_short_with_sharesContractFunction.factory(
            "test_close_short_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_short_with_shares",
        )
        self.test_getters = (
            AaveL2HyperdriveTestTest_gettersContractFunction.factory(
                "test_getters",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_getters",
            )
        )
        self.test_open_long_with_base = AaveL2HyperdriveTestTest_open_long_with_baseContractFunction.factory(
            "test_open_long_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_base",
        )
        self.test_open_long_with_eth = (
            AaveL2HyperdriveTestTest_open_long_with_ethContractFunction.factory(
                "test_open_long_with_eth",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_open_long_with_eth",
            )
        )
        self.test_open_long_with_shares = AaveL2HyperdriveTestTest_open_long_with_sharesContractFunction.factory(
            "test_open_long_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_shares",
        )
        self.test_open_short_with_base = AaveL2HyperdriveTestTest_open_short_with_baseContractFunction.factory(
            "test_open_short_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_base",
        )
        self.test_open_short_with_eth = AaveL2HyperdriveTestTest_open_short_with_ethContractFunction.factory(
            "test_open_short_with_eth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_eth",
        )
        self.test_open_short_with_shares = AaveL2HyperdriveTestTest_open_short_with_sharesContractFunction.factory(
            "test_open_short_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_shares",
        )
        self.test_round_trip_long_instantaneous_with_base = AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_long_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_instantaneous_with_base",
        )
        self.test_round_trip_long_instantaneous_with_shares = AaveL2HyperdriveTestTest_round_trip_long_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_long_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_instantaneous_with_shares",
        )
        self.test_round_trip_long_maturity_with_base = AaveL2HyperdriveTestTest_round_trip_long_maturity_with_baseContractFunction.factory(
            "test_round_trip_long_maturity_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_maturity_with_base",
        )
        self.test_round_trip_long_maturity_with_shares = AaveL2HyperdriveTestTest_round_trip_long_maturity_with_sharesContractFunction.factory(
            "test_round_trip_long_maturity_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_maturity_with_shares",
        )
        self.test_round_trip_lp_instantaneous_with_base = AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_lp_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_instantaneous_with_base",
        )
        self.test_round_trip_lp_instantaneous_with_shares = AaveL2HyperdriveTestTest_round_trip_lp_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_lp_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_instantaneous_with_shares",
        )
        self.test_round_trip_lp_withdrawal_shares_with_base = AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction.factory(
            "test_round_trip_lp_withdrawal_shares_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_withdrawal_shares_with_base",
        )
        self.test_round_trip_lp_withdrawal_shares_with_shares = AaveL2HyperdriveTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction.factory(
            "test_round_trip_lp_withdrawal_shares_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_withdrawal_shares_with_shares",
        )
        self.test_round_trip_short_instantaneous_with_base = AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_short_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_instantaneous_with_base",
        )
        self.test_round_trip_short_instantaneous_with_shares = AaveL2HyperdriveTestTest_round_trip_short_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_short_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_instantaneous_with_shares",
        )
        self.test_round_trip_short_maturity_with_base = AaveL2HyperdriveTestTest_round_trip_short_maturity_with_baseContractFunction.factory(
            "test_round_trip_short_maturity_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_maturity_with_base",
        )
        self.test_round_trip_short_maturity_with_shares = AaveL2HyperdriveTestTest_round_trip_short_maturity_with_sharesContractFunction.factory(
            "test_round_trip_short_maturity_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_maturity_with_shares",
        )
        self.test_sweep_failure_directSweep = AaveL2HyperdriveTestTest_sweep_failure_directSweepContractFunction.factory(
            "test_sweep_failure_directSweep",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_failure_directSweep",
        )
        self.test_sweep_success = (
            AaveL2HyperdriveTestTest_sweep_successContractFunction.factory(
                "test_sweep_success",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_sweep_success",
            )
        )
        self.whaleTransfer = (
            AaveL2HyperdriveTestWhaleTransferContractFunction.factory(
                "whaleTransfer",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="whaleTransfer",
            )
        )


class AaveL2HyperdriveTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestCollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestPauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestRedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_addressContractEvent(ContractEvent):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_decimal_intContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_decimal_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_stringContractEvent(ContractEvent):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class AaveL2HyperdriveTestContractEvents(ContractEvents):
    """ContractEvents for the AaveL2HyperdriveTest contract."""

    AddLiquidity: Type[AaveL2HyperdriveTestAddLiquidityContractEvent]

    Approval: Type[AaveL2HyperdriveTestApprovalContractEvent]

    ApprovalForAll: Type[AaveL2HyperdriveTestApprovalForAllContractEvent]

    CloseLong: Type[AaveL2HyperdriveTestCloseLongContractEvent]

    CloseShort: Type[AaveL2HyperdriveTestCloseShortContractEvent]

    CollectGovernanceFee: Type[
        AaveL2HyperdriveTestCollectGovernanceFeeContractEvent
    ]

    CreateCheckpoint: Type[AaveL2HyperdriveTestCreateCheckpointContractEvent]

    Deployed: Type[AaveL2HyperdriveTestDeployedContractEvent]

    Initialize: Type[AaveL2HyperdriveTestInitializeContractEvent]

    OpenLong: Type[AaveL2HyperdriveTestOpenLongContractEvent]

    OpenShort: Type[AaveL2HyperdriveTestOpenShortContractEvent]

    PauseStatusUpdated: Type[
        AaveL2HyperdriveTestPauseStatusUpdatedContractEvent
    ]

    RedeemWithdrawalShares: Type[
        AaveL2HyperdriveTestRedeemWithdrawalSharesContractEvent
    ]

    RemoveLiquidity: Type[AaveL2HyperdriveTestRemoveLiquidityContractEvent]

    Sweep: Type[AaveL2HyperdriveTestSweepContractEvent]

    TransferSingle: Type[AaveL2HyperdriveTestTransferSingleContractEvent]

    log: Type[AaveL2HyperdriveTestLogContractEvent]

    log_address: Type[AaveL2HyperdriveTestLog_addressContractEvent]

    log_array: Type[AaveL2HyperdriveTestLog_arrayContractEvent]

    log_bytes: Type[AaveL2HyperdriveTestLog_bytesContractEvent]

    log_bytes32: Type[AaveL2HyperdriveTestLog_bytes32ContractEvent]

    log_int: Type[AaveL2HyperdriveTestLog_intContractEvent]

    log_named_address: Type[AaveL2HyperdriveTestLog_named_addressContractEvent]

    log_named_array: Type[AaveL2HyperdriveTestLog_named_arrayContractEvent]

    log_named_bytes: Type[AaveL2HyperdriveTestLog_named_bytesContractEvent]

    log_named_bytes32: Type[AaveL2HyperdriveTestLog_named_bytes32ContractEvent]

    log_named_decimal_int: Type[
        AaveL2HyperdriveTestLog_named_decimal_intContractEvent
    ]

    log_named_decimal_uint: Type[
        AaveL2HyperdriveTestLog_named_decimal_uintContractEvent
    ]

    log_named_int: Type[AaveL2HyperdriveTestLog_named_intContractEvent]

    log_named_string: Type[AaveL2HyperdriveTestLog_named_stringContractEvent]

    log_named_uint: Type[AaveL2HyperdriveTestLog_named_uintContractEvent]

    log_string: Type[AaveL2HyperdriveTestLog_stringContractEvent]

    log_uint: Type[AaveL2HyperdriveTestLog_uintContractEvent]

    logs: Type[AaveL2HyperdriveTestLogsContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            Type[AaveL2HyperdriveTestAddLiquidityContractEvent],
            AaveL2HyperdriveTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            Type[AaveL2HyperdriveTestApprovalContractEvent],
            AaveL2HyperdriveTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            Type[AaveL2HyperdriveTestApprovalForAllContractEvent],
            AaveL2HyperdriveTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            Type[AaveL2HyperdriveTestCloseLongContractEvent],
            AaveL2HyperdriveTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            Type[AaveL2HyperdriveTestCloseShortContractEvent],
            AaveL2HyperdriveTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            Type[AaveL2HyperdriveTestCollectGovernanceFeeContractEvent],
            AaveL2HyperdriveTestCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            Type[AaveL2HyperdriveTestCreateCheckpointContractEvent],
            AaveL2HyperdriveTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Deployed = cast(
            Type[AaveL2HyperdriveTestDeployedContractEvent],
            AaveL2HyperdriveTestDeployedContractEvent.factory(
                "Deployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Deployed",
            ),
        )
        self.Initialize = cast(
            Type[AaveL2HyperdriveTestInitializeContractEvent],
            AaveL2HyperdriveTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            Type[AaveL2HyperdriveTestOpenLongContractEvent],
            AaveL2HyperdriveTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            Type[AaveL2HyperdriveTestOpenShortContractEvent],
            AaveL2HyperdriveTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            Type[AaveL2HyperdriveTestPauseStatusUpdatedContractEvent],
            AaveL2HyperdriveTestPauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            Type[AaveL2HyperdriveTestRedeemWithdrawalSharesContractEvent],
            AaveL2HyperdriveTestRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            Type[AaveL2HyperdriveTestRemoveLiquidityContractEvent],
            AaveL2HyperdriveTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            Type[AaveL2HyperdriveTestSweepContractEvent],
            AaveL2HyperdriveTestSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            Type[AaveL2HyperdriveTestTransferSingleContractEvent],
            AaveL2HyperdriveTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )
        self.log = cast(
            Type[AaveL2HyperdriveTestLogContractEvent],
            AaveL2HyperdriveTestLogContractEvent.factory(
                "log",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log",
            ),
        )
        self.log_address = cast(
            Type[AaveL2HyperdriveTestLog_addressContractEvent],
            AaveL2HyperdriveTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            ),
        )
        self.log_array = cast(
            Type[AaveL2HyperdriveTestLog_arrayContractEvent],
            AaveL2HyperdriveTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            ),
        )
        self.log_bytes = cast(
            Type[AaveL2HyperdriveTestLog_bytesContractEvent],
            AaveL2HyperdriveTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            ),
        )
        self.log_bytes32 = cast(
            Type[AaveL2HyperdriveTestLog_bytes32ContractEvent],
            AaveL2HyperdriveTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            ),
        )
        self.log_int = cast(
            Type[AaveL2HyperdriveTestLog_intContractEvent],
            AaveL2HyperdriveTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            ),
        )
        self.log_named_address = cast(
            Type[AaveL2HyperdriveTestLog_named_addressContractEvent],
            AaveL2HyperdriveTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            ),
        )
        self.log_named_array = cast(
            Type[AaveL2HyperdriveTestLog_named_arrayContractEvent],
            AaveL2HyperdriveTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            ),
        )
        self.log_named_bytes = cast(
            Type[AaveL2HyperdriveTestLog_named_bytesContractEvent],
            AaveL2HyperdriveTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            ),
        )
        self.log_named_bytes32 = cast(
            Type[AaveL2HyperdriveTestLog_named_bytes32ContractEvent],
            AaveL2HyperdriveTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            ),
        )
        self.log_named_decimal_int = cast(
            Type[AaveL2HyperdriveTestLog_named_decimal_intContractEvent],
            AaveL2HyperdriveTestLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            ),
        )
        self.log_named_decimal_uint = cast(
            Type[AaveL2HyperdriveTestLog_named_decimal_uintContractEvent],
            AaveL2HyperdriveTestLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            ),
        )
        self.log_named_int = cast(
            Type[AaveL2HyperdriveTestLog_named_intContractEvent],
            AaveL2HyperdriveTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            ),
        )
        self.log_named_string = cast(
            Type[AaveL2HyperdriveTestLog_named_stringContractEvent],
            AaveL2HyperdriveTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            ),
        )
        self.log_named_uint = cast(
            Type[AaveL2HyperdriveTestLog_named_uintContractEvent],
            AaveL2HyperdriveTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            ),
        )
        self.log_string = cast(
            Type[AaveL2HyperdriveTestLog_stringContractEvent],
            AaveL2HyperdriveTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            ),
        )
        self.log_uint = cast(
            Type[AaveL2HyperdriveTestLog_uintContractEvent],
            AaveL2HyperdriveTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            ),
        )
        self.logs = cast(
            Type[AaveL2HyperdriveTestLogsContractEvent],
            AaveL2HyperdriveTestLogsContractEvent.factory(
                "logs",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="logs",
            ),
        )


class AaveL2HyperdriveTestContract(Contract):
    """A web3.py Contract class for the AaveL2HyperdriveTest contract."""

    abi: ABI = aavel2hyperdrivetest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60a06040819052600c8054600160ff199182168117909255601e8054909116909117905563f877cb1960e01b9052602060a452601060c4526f105490925514955357d49410d7d5549360821b60e4526000805160206205335d83398151915263f877cb19610104600060405180830381865afa15801562000084573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000ae919081019062000bb1565b602c90620000bd908262000d17565b5060405163f877cb1960e01b815260206004820152600c60248201526b109054d157d49410d7d5549360a21b60448201526000805160206205335d8339815191529063f877cb1990606401600060405180830381865afa15801562000126573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000150919081019062000bb1565b602d906200015f908262000d17565b5060405163f877cb1960e01b815260206004820152601460248201527f474e4f5349535f434841494e5f5250435f55524c00000000000000000000000060448201526000805160206205335d8339815191529063f877cb1990606401600060405180830381865afa158015620001d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000203919081019062000bb1565b602e9062000212908262000d17565b5060405163f877cb1960e01b815260206004820152600d60248201526c131253915057d49410d7d55493609a1b60448201526000805160206205335d8339815191529063f877cb1990606401600060405180830381865afa1580156200027c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002a6919081019062000bb1565b602f90620002b5908262000d17565b5060405163f877cb1960e01b815260206004820152600f60248201526e1350525393915517d49410d7d55493608a1b60448201526000805160206205335d8339815191529063f877cb1990606401600060405180830381865afa15801562000321573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200034b919081019062000bb1565b6030906200035a908262000d17565b5060405163f877cb1960e01b815260206004820152600f60248201526e14d15413d3125057d49410d7d55493608a1b60448201526000805160206205335d8339815191529063f877cb1990606401600060405180830381865afa158015620003c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003f0919081019062000bb1565b603190620003ff908262000d17565b50603580546001600160a01b03199081169091556075805482167370d95587d40a2caf56bd97485ab3eec10bee6336908117909155607680548316736286b9f080d27f860f6b4bb0226f8ef06cc9f2fc17905560778054831673b7fb2b774eb5e2dad9c060fb367acbdc7fa7099b179055607880548316738aecc5526f92a46718f8e68516d22038d8670e0d17905560798054909216731de5366615bceb1bdb7274536bf3fc9f06aa9c2c179091556040805160208101909152908152620004cc90607a90600162000b1a565b50604080516080810182526076546001600160a01b0390811682526077548116602083015260785481169282019290925260795490911660608201526200051890607b90600462000b1a565b503480156200052657600080fd5b506040805161058081018252600a6105408201908152694879706572647269766560b01b610560830152815281518083018352601081526f416176654c324879706572647269766560801b60208281019190915280830191909152601282840152607a8054845181840281018401909552808552929360608501939092830182828015620005de57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620005bf575b50505050508152602001607b8054806020026020016040519081016040528092919081815260200182805480156200064057602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000621575b505050505081526020017382af49447d8a07e3bd95bd0d56f35241523fbab16001600160a01b0316815260200173e50fa9b3c56ffb159cb0fca61f5c9d750e8128c86001600160a01b031681526020016103e8815260200166038d7ea4c68000815260200166038d7ea4c6800081526020016040518060800160405280600081526020016000815260200160008152602001600081525081526020016301e13380815260200160011515815260200160011515815260200160011515815260200160011515815260200160006001600160401b0381111562000726576200072662000b9b565b6040519080825280601f01601f19166020018201604052801562000751576020820181803683370190505b508152602001600115158152602001600115158152602001601481526020016014815260200160648152602001620186a08152602001620186a08152602001620186a081526020016103e881526020016103e88152602001620186a081526020016103e88152602001620186a081526020016103e88152602001620186a081526020016103e88152602001620186a081526020016103e88152602001620186a081526020016103e88152602001620186a08152602001620186a08152602001620186a0815260200160028152602001600281525080603860008201518160000190816200083f919062000d17565b506020820151600182019062000856908262000d17565b50604082015160028201805460ff191660ff909216919091179055606082015180516200088e91600384019160209091019062000b1a565b5060808201518051620008ac91600484019160209091019062000b1a565b5060a08201516005820180546001600160a01b039283166001600160a01b03199182161790915560c084015160068401805491909316911617905560e0820151600782015561010080830151600883015561012083015160098301556101408301518051600a8401556020810151600b8401556040810151600c84015560600151600d830155610160830151600e830155610180830151600f830180546101a08601516101c08701516101e0880151151563010000000263ff0000001991151562010000029190911663ffff00001992151590960261ff00199515159590951661ffff19909316929092179390931792909216929092171790556102008201516010820190620009bd908262000d17565b5061022082015160118201805461024085015115156101000261ff00199315159390931661ffff1990911617919091179055610260820151601282015561028082015160138201556102a082015160148201556102c082015160158201556102e08201516016820155610300820151601782015561032082015160188201556103408201516019820155610360820151601a820155610380820151601b8201556103a0820151601c8201556103c0820151601d8201556103e0820151601e820155610400820151601f82015561042082015160208201556104408201516021820155610460820151602282015561048082015160238201556104a082015160248201556104c082015160258201556104e0820151602682015561050082015160278201556105209091015160289091015550603d546001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1460805262000de3565b82805482825590600052602060002090810192821562000b72579160200282015b8281111562000b7257825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000b3b565b5062000b8092915062000b84565b5090565b5b8082111562000b80576000815560010162000b85565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121562000bc557600080fd5b82516001600160401b038082111562000bdd57600080fd5b818501915085601f83011262000bf257600080fd5b81518181111562000c075762000c0762000b9b565b604051601f8201601f19908116603f0116810190838211818310171562000c325762000c3262000b9b565b81604052828152888684870101111562000c4b57600080fd5b600093505b8284101562000c6f578484018601518185018701529285019262000c50565b600086848301015280965050505050505092915050565b600181811c9082168062000c9b57607f821691505b60208210810362000cbc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000d12576000816000526020600020601f850160051c8101602086101562000ced5750805b601f850160051c820191505b8181101562000d0e5782815560010162000cf9565b5050505b505050565b81516001600160401b0381111562000d335762000d3362000b9b565b62000d4b8162000d44845462000c86565b8462000cc2565b602080601f83116001811462000d83576000841562000d6a5750858301515b600019600386901b1c1916600185901b17855562000d0e565b600085815260208120601f198616915b8281101562000db45788860151825594840194600190910190840162000d93565b508582101562000dd35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051620524de62000e7f60003960008181610860015281816109b20152818161157601528181611b9f0152818161304c0152818161317f01528181615033015281816150c8015281816151fb0152818161831901528181618a340152818161982f015281816198bb0152818161a3fb0152818161a5b60152818161a6fa0152818161a8690152818161b8e6015261c0740152620524de6000f3fe60806040523480156200001157600080fd5b5060043610620002c15760003560e01c806385226c811162000179578063ac948f4511620000df578063bd553e441162000092578063bd553e4414620005d5578063cdbfca2914620005ec578063e20c9f711462000603578063e7686d38146200060d578063f502acad1462000624578063fa7626d4146200063b57600080fd5b8063ac948f451462000561578063af5e60c41462000578578063b22f6be9146200058f578063b5508aa914620005a6578063b75837d914620005b0578063ba414fa614620005ba57600080fd5b8063942d20e21162000138578063942d20e214620004f1578063982f9c561462000508578063a10c7034146200051f578063a89a9ae21462000529578063aa55594f1462000540578063abf4cef7146200054a57600080fd5b806385226c8114620004a357806385b2600114620004bc578063916a17c614620004d3578063938f9cda14620004dd5780639428be5e14620004e757600080fd5b80633f7286f4116200022b57806366d9a9a011620001de57806366d9a9a014620004245780636f3a66c7146200043d57806372e78ccd1462000454578063731d5995146200046b5780637b09763e1462000482578063838c573e146200048c57600080fd5b80633f7286f4146200039b57806341631a7914620003a55780634570d0d614620003af57806349ccc4ad14620003c6578063507ffba514620003dd57806356f10452146200040d57600080fd5b806324f5a0be116200028457806324f5a0be14620003365780632ade388014620003405780633c26039814620003595780633db13e7214620003635780633e5e0d26146200037a5780633e5e3c23146200039157600080fd5b80630a9254e414620002c65780631071676014620002d25780631966d53714620002fc5780631ed7831c14620003065780632111c118146200031f575b600080fd5b620002d062000649565b005b620002e9620002e336600462011ab2565b620007b0565b6040519081526020015b60405180910390f35b620002d06200083a565b6200031062000ecd565b604051620002f3919062011b4b565b620002d06200033036600462011b60565b62000f31565b620002d062001506565b6200034a620019e1565b604051620002f3919062011bd7565b620002d062001b2f565b620002d06200037436600462011c9d565b62001f70565b620002e96200038b36600462011cb7565b620022e4565b620003106200253e565b62000310620025a0565b620002d062002602565b620002d0620003c036600462011c9d565b6200283c565b620002d0620003d736600462011c9d565b62002ca3565b620003f4620003ee36600462011dfb565b6200330e565b6040516001600160a01b039091168152602001620002f3565b620002d06200041e36600462011c9d565b6200341e565b6200042e6200386d565b604051620002f3919062011e82565b620002d06200044e36600462011c9d565b62003957565b620002d06200046536600462011b60565b62003c73565b620002d06200047c36600462011b60565b620040d2565b620002d06200484b565b620002d06200049d36600462011b60565b620049fb565b620004ad62004dd2565b604051620002f3919062011f3b565b620002d0620004cd36600462011c9d565b62004eac565b6200042e62005400565b620002d0620054ea565b620002d062005934565b620002d06200050236600462011c9d565b62005af2565b620002d06200051936600462011b60565b6200635a565b620002d0620069a6565b620002d06200053a36600462011c9d565b62006a90565b620002d062006df8565b620002d06200055b36600462011c9d565b62006f09565b620002d06200057236600462011b60565b620072aa565b620002d06200058936600462011b60565b6200783c565b620002d0620005a036600462011c9d565b62007c24565b620004ad62007ff6565b620002d0620080d0565b620005c462008254565b6040519015158152602001620002f3565b620002d0620005e636600462011c9d565b62008309565b620002d0620005fd36600462011b60565b6200874e565b62000310620089c1565b620002d06200061e36600462011b60565b62008a23565b620002d06200063536600462011b60565b6200916a565b601e54620005c49060ff1681565b604051630637469360e31b8152630ec8c3229060009060008051602062052469833981519152906331ba3498906200068790602c9060040162012064565b6020604051808303816000875af1158015620006a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006cd919062012079565b604051639ebf682760e01b8152600481018290529091506000805160206205246983398151915290639ebf682790602401600060405180830381600087803b1580156200071957600080fd5b505af11580156200072e573d6000803e3d6000fd5b505060405163d9bbf3a160e01b81526004810185905260008051602062052469833981519152925063d9bbf3a19150602401600060405180830381600087803b1580156200077b57600080fd5b505af115801562000790573d6000803e3d6000fd5b50506032805460ff1916600117905550620007ac905062009477565b5050565b6040516370a0823160e01b81526001600160a01b0380851660048301526000916200083091869186918216906370a0823190602401602060405180830381865afa15801562000803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000829919062012079565b85620022e4565b90505b9392505050565b601e546047546101009091046001600160a01b0316319060ff166200085c5750565b60007f00000000000000000000000000000000000000000000000000000000000000006200094157603a5462000939906200089c9060ff16600a620121a6565b620008aa906103e8620121b7565b606154601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152600a9216906370a08231906024015b602060405180830381865afa15801562000900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000926919062012079565b620009329190620121e7565b906200a1f2565b90506200098a565b603a546200098790620009599060ff16600a620121a6565b62000967906103e8620121b7565b601e546200093290600a9061010090046001600160a01b031631620121e7565b90505b600062000997826200a20e565b9050620009b063beefbabe63deadfade8460016200a245565b7f00000000000000000000000000000000000000000000000000000000000000001562000a0057601e5462000a009061010090046001600160a01b031631620009fa8486620121fe565b6200a8d7565b6036546040805163313ce56760e01b8152905162000a83926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000a4d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a73919062012214565b603a5460ff91821691166200a8d7565b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b03908116602483015262000c18921690633656eec290604401602060405180830381865afa15801562000ae1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b07919062012079565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562000b5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b829190620122b4565b60a0015162000b93906002620121b7565b6036546040516363737ac960e11b8152600481018790526001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562000bdd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c03919062012079565b62000c0f9190620121fe565b603f546200a93b565b60365460408051630c048d9160e31b8152905162000c96926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562000c66573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c8c9190620123c7565b518260016200a93b565b60365460408051630c048d9160e31b8152905162000e15926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562000ce4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d0a9190620123c7565b60a00151603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562000d63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d899190620122b4565b60a00151603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562000de2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e089190620123c7565b51620009fa9190620121fe565b607454603654601e5460408051630161b2cb60e71b8152905162000ec8946001600160a01b039081169481169361010090041691879166b1a2bc2ec5000091600191869163b0d96580916004808301926102609291908290030181865afa15801562000e85573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eab9190620122b4565b60a001516040805160008152602081019091525b603f546200a9a5565b505050565b6060601680548060200260200160405190810160405280929190818152602001828054801562000f2757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000f08575b5050505050905090565b604754610100900460ff1662000f45575050565b60365460408051630161b2cb60e71b815290516001600160a01b039092169163c6e6f5929162000ff491849163b0d96580916004808301926102609291908290030181865afa15801562000f9d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fc39190620122b4565b60c0015162000fd4906002620121b7565b60365462000feb906001600160a01b03166200b0bd565b8691906200b0cc565b6040518263ffffffff1660e01b81526004016200101391815260200190565b602060405180830381865afa15801562001031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001057919062012079565b601f54909250600090819062001078906001600160a01b031685836200b158565b6049549193509150610100900460ff1615620010ad57620010a5836000683635c9adc5dea000006200b0cc565b9250620010b2565b600092505b60365460408051630161b2cb60e71b8152905162001132926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011269190620122b4565b6101000151846200b27f565b6000806200113f6200b5f4565b601f5491935091506000906200115e906001600160a01b03166200b6f1565b6036549091506000906200117b906001600160a01b03166200b6f1565b6047549091506000906301000000900460ff16156200139e57601f54600090620011b1906001600160a01b03168989846200b751565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa158015620011fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001222919062012079565b9150620012e5826038601f0154620012d3603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001288573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ae9190620122b4565b6101e0015160200151620012cb90670de0b6b3a7640000620121fe565b8b906200b7dd565b620012df919062012485565b6200b7f4565b62001397826200138e603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001343573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013699190620122b4565b6101e00151602001516200138690670de0b6b3a7640000620121fe565b8a906200b7dd565b6058546200a93b565b50620014cf565b601f54620013b7906001600160a01b031688886200b82f565b90506200141d816038601d0154620012d3603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001343573d6000803e3d6000fd5b620014cf81620014c6603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200147b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014a19190620122b4565b6101e0015160200151620014be90670de0b6b3a7640000620121fe565b89906200b7dd565b6056546200a93b565b601f54604754620014fb916001600160a01b03169083906301000000900460ff1615888888886200b863565b505050505050505050565b601f546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062052469833981519152906306447d5690602401600060405180830381600087803b1580156200155b57600080fd5b505af115801562001570573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000008015620015a4575060475460ff165b156200176657601f54603654604080516060810182526001600160a01b03938416808252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529031949093169263cba2e58d92671bc16d674ec80000926200162192670de0b6b3a764000092918291600401620124d0565b604080518083038185885af11580156200163f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620016669190620124f7565b5050601f546200168e906001600160a01b031631620009fa670de0b6b3a764000084620121fe565b50601f54603654604080516060810182526001600160a01b03938416808252600060208084018290528451828152908101855283850152925163cba2e58d60e01b81529031949093169263cba2e58d926706f05b59d3b20000926200170392670de0b6b3a764000092918291600401620124d0565b604080518083038185885af115801562001721573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620017489190620124f7565b5050601f5462001763906001600160a01b031631826200a8d7565b50565b604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e090620017a190631574f9f360e01b906004016201251c565b600060405180830381600087803b158015620017bc57600080fd5b505af1158015620017d1573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d9350671bc16d674ec80000926200184992670de0b6b3a7640000929091829190600401620124d0565b604080518083038185885af115801562001867573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200188e9190620124f7565b5050604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e090620018cb90631574f9f360e01b906004016201251c565b600060405180830381600087803b158015620018e657600080fd5b505af1158015620018fb573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526000602083018190529316945063cba2e58d93506706f05b59d3b2000092670de0b6b3a764000092909182918101825b6040519080825280601f01601f19166020018201604052801562001975576020820181803683370190505b508152506040518663ffffffff1660e01b81526004016200199a9493929190620124d0565b604080518083038185885af1158015620019b8573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620007ac9190620124f7565b565b6060601d805480602002602001604051908101604052809291908181526020016000905b8282101562001b2657600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101562001b0e57838290600052602060002001805462001a7a9062011fa3565b80601f016020809104026020016040519081016040528092919081815260200182805462001aa89062011fa3565b801562001af95780601f1062001acd5761010080835404028352916020019162001af9565b820191906000526020600020905b81548152906001019060200180831162001adb57829003601f168201915b50505050508152602001906001019062001a58565b50505050815250508152602001906001019062001a05565b50505050905090565b601f546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062052469833981519152906306447d5690602401600060405180830381600087803b15801562001b8457600080fd5b505af115801562001b99573d6000803e3d6000fd5b505050507f0000000000000000000000000000000000000000000000000000000000000000801562001bcd575060475460ff165b1562001d8b57601f54603654604080516060810182526001600160a01b039384168082526001602080840191909152835160008082529181018552838501529251630dbbe80760e41b81529031949293929092169163dbbe807091671bc16d674ec800009162001c4e91670de0b6b3a76400009182918891600401620124d0565b604080518083038185885af115801562001c6c573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001c939190620124f7565b601f5490925062001cb591506001600160a01b031631620009fa8385620121fe565b601f54603654604080516060810182526001600160a01b039384168082526000602080840182905284518281529081018552838501529251630dbbe80760e41b815290319650939092169263dbbe8070926706f05b59d3b200009262001d2b92670de0b6b3a764000092839291600401620124d0565b604080518083038185885af115801562001d49573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001d709190620124f7565b5050601f54620007ac906001600160a01b031631836200a8d7565b604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e09062001dc690631574f9f360e01b906004016201251c565b600060405180830381600087803b15801562001de157600080fd5b505af115801562001df6573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526001602080840191909152835160008082529181018552838501529251630dbbe80760e41b81529316945063dbbe80709350671bc16d674ec800009262001e6b92670de0b6b3a7640000928392600401620124d0565b604080518083038185885af115801562001e89573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001eb09190620124f7565b5050604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e09062001eed90631574f9f360e01b906004016201251c565b600060405180830381600087803b15801562001f0857600080fd5b505af115801562001f1d573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526000602083018190529316945063dbbe807093506706f05b59d3b2000092670de0b6b3a7640000928392908101826200194a565b604754610100900460ff1662001f835750565b60365460408051630161b2cb60e71b81529051620020fe926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001fd1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ff79190620122b4565b60c0015162002008906002620121b7565b60365460408051630a4e149360e01b81529051600a926001600160a01b031691630a4e14939160048083019260209291908290030181865afa15801562002053573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002079919062012531565b601f546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015620020c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020e9919062012079565b620020f59190620121e7565b8391906200b0cc565b60495490915060ff16156200211b5762002118816200a20e565b90505b601f5460009062002137906001600160a01b031683836200bb53565b9050600080620021466200b5f4565b601f54919350915060009062002165906001600160a01b03166200b6f1565b60365490915060009062002182906001600160a01b03166200b6f1565b6047549091506000906301000000900460ff16156200226257601f546000908190620021b9906001600160a01b031689836200bbea565b60365460405163b88fed9f60e01b8152600481018490529294509092506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562002207573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200222d919062012079565b92506200223c8160006200a8d7565b62002248828a6200b7f4565b6200225a828a6038601601546200a93b565b5050620022af565b601f546000906200227d906001600160a01b0316886200bc79565b90925090506200228f8160006200a8d7565b6200229b82896200b7f4565b620022ad82896038601501546200a93b565b505b601f54604754620022db916001600160a01b03169083906301000000900460ff1615888888886200b863565b50505050505050565b6040516370a0823160e01b81526001600160a01b03858116600483015260009182918616906370a0823190602401602060405180830381865afa15801562002330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002356919062012079565b9050808411156200237a5760405163188c93a560e31b815260040160405180910390fd5b6000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620023c857600080fd5b505af1158015620023dd573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03891660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200243257600080fd5b505af115801562002447573d6000803e3d6000fd5b505060405163c88a5e6d60e01b815260008051602062052469833981519152925063c88a5e6d915062002489908990670de0b6b3a76400009060040162012551565b600060405180830381600087803b158015620024a457600080fd5b505af1158015620024b9573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038816925063a9059cbb9150620024ed908690889060040162012551565b6020604051808303816000875af11580156200250d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200253391906201257b565b509295945050505050565b6060601880548060200260200160405190810160405280929190818152602001828054801562000f27576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f08575050505050905090565b6060601780548060200260200160405190810160405280929190818152602001828054801562000f27576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f08575050505050905090565b60365460408051630a4e149360e01b815290516000926001600160a01b031691630a4e14939160048083019260209291908290030181865afa1580156200264d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002673919062012531565b90506001600160a01b038116620026875750565b607354604080516310780f7360e01b8152905160008051602062052469833981519152926306447d56926001600160a01b03909116916310780f73916004808201926020929091908290030181865afa158015620026e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200270f919062012531565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156200275157600080fd5b505af115801562002766573d6000803e3d6000fd5b5050604051630618f58760e51b815260008051602062052469833981519152925063c31eb0e09150620027a5906313dd85ff60e31b906004016201251c565b600060405180830381600087803b158015620027c057600080fd5b505af1158015620027d5573d6000803e3d6000fd5b505060365460405162b40d3160e11b81526001600160a01b03858116600483015290911692506301681a629150602401600060405180830381600087803b1580156200282057600080fd5b505af115801562002835573d6000803e3d6000fd5b5050505050565b604754610100900460ff166200284f5750565b60365460408051630161b2cb60e71b81529051620028eb926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200289d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028c39190620122b4565b60c00151620028d4906002620121b7565b603654620020f5906001600160a01b03166200bcb9565b601f5490915060009081906200290c906001600160a01b031684836200bcc8565b915091506000806200291d6200b5f4565b601f5491935091506000906200293c906001600160a01b03166200b6f1565b60365490915060009062002959906001600160a01b03166200b6f1565b6047549091506000906301000000900460ff161562002ac257601f546000906200298f906001600160a01b0316898b846200be70565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa158015620029da573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a00919062012079565b915062002a20816038602301548962002a1a919062012485565b6200bef3565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562002a75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a9b9190620122b4565b6101e001515160000362002abb5762002abb81886038602401546200a93b565b5062002c6d565b601f5462002adb906001600160a01b0316888a6200bf2e565b60595460365460405163b88fed9f60e01b8152600481018a905292935062002b64928492916001600160a01b03169063b88fed9f906024015b602060405180830381865afa15801562002b32573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b58919062012079565b62002a1a919062012485565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562002bb9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002bdf9190620122b4565b6101e001515160000362002c6d5760365460405163b88fed9f60e01b81526004810188905262002c6d9183916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562002c3e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c64919062012079565b605a546200a93b565b601f5460475462002c99916001600160a01b03169083906301000000900460ff1615888888886200b863565b5050505050505050565b60008062002cb06200b5f4565b601f54919350915060009062002ccf906001600160a01b03166200b6f1565b60365490915060009062002cec906001600160a01b03166200b6f1565b905062002d9e603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562002d47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d6d9190620122b4565b60c0015162002d7e906002620121b7565b60365462002d95906001600160a01b03166200b0bd565b8791906200b0cc565b601f546040516303223eab60e11b81526001600160a01b03909116600482015290955060008051602062052469833981519152906306447d5690602401600060405180830381600087803b15801562002df657600080fd5b505af115801562002e0b573d6000803e3d6000fd5b505060475460ff1691506200304a905057604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e09062002e5790631574f9f360e01b906004016201251c565b600060405180830381600087803b15801562002e7257600080fd5b505af115801562002e87573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d9350899262002eef9284929091829190600401620124d0565b604080518083038185885af115801562002f0d573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062002f349190620124f7565b5050604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e09062002f719063350b944160e11b906004016201251c565b600060405180830381600087803b15801562002f8c57600080fd5b505af115801562002fa1573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d935062003005928a92918291600401620124d0565b60408051808303816000875af115801562003024573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022db9190620124f7565b7f00000000000000000000000000000000000000000000000000000000000000006200316757603660009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015620030c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620030ea919062012531565b60365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200311f92911690899060040162012551565b6020604051808303816000875af11580156200313f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200316591906201257b565b505b60365460009081906001600160a01b031663cba2e58d7f0000000000000000000000000000000000000000000000000000000000000000620031ab576000620031ad565b885b60408051606081018252601f546001600160a01b0316815260016020808301919091528251600080825291810184528284015291516001600160e01b031960e086901b16815262003208928d929091829190600401620124d0565b604080518083038185885af115801562003226573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200324d9190620124f7565b6036549193509150620032f0906001600160a01b0316633656eec2620032756001866200bf62565b601f5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015620032c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620032e9919062012079565b826200a8d7565b601f54620022db906001600160a01b0316886001898989896200bf98565b60008160405160200162003323919062012599565b60408051601f198184030181529082905280516020909101206318caf8e360e31b82529150600080516020620524698339815191529063c657c71890620033719084908690600401620125ae565b600060405180830381600087803b1580156200338c57600080fd5b505af1158015620033a1573d6000803e3d6000fd5b505060405163c88a5e6d60e01b815260008051602062052469833981519152925063c88a5e6d9150620033e590849069021e19e0c9bab24000009060040162012551565b600060405180830381600087803b1580156200340057600080fd5b505af115801562003415573d6000803e3d6000fd5b50505050919050565b604754610100900460ff16620034315750565b60365460408051630161b2cb60e71b815290516001600160a01b039092169163c6e6f59291620034e091849163b0d96580916004808301926102609291908290030181865afa15801562003489573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620034af9190620122b4565b60c00151620034c0906002620121b7565b603654620034d7906001600160a01b03166200b0bd565b8591906200b0cc565b6040518263ffffffff1660e01b8152600401620034ff91815260200190565b602060405180830381865afa1580156200351d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003543919062012079565b601f54909150600090819062003564906001600160a01b031684836200b158565b91509150600080620035756200b5f4565b601f54919350915060009062003594906001600160a01b03166200b6f1565b603654909150600090620035b1906001600160a01b03166200b6f1565b6047549091506000906301000000900460ff16156200370d57601f54600090620035e7906001600160a01b03168989846200b751565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562003632573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003658919062012079565b915062003672816038601b01548b62002a1a919062012485565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620036c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620036ed9190620122b4565b6101e001515160000362002abb5762002abb818a6038601c01546200a93b565b601f5462003726906001600160a01b031688886200b82f565b60515460365460405163b88fed9f60e01b8152600481018c905292935062003764928492916001600160a01b03169063b88fed9f9060240162002b14565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620037b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620037df9190620122b4565b6101e001515160000362002c6d5760365460405163b88fed9f60e01b8152600481018a905262002c6d9183916001600160a01b039091169063b88fed9f90602401602060405180830381865afa1580156200383e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003864919062012079565b6052546200a93b565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101562001b265760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200393e57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620038ff5790505b5050505050815250508152602001906001019062003891565b604754610100900460ff166200396a5750565b600080620039776200b5f4565b601f54919350915060009062003996906001600160a01b03166200b6f1565b603654909150600090620039b3906001600160a01b03166200b6f1565b603654909150600090620039d0906001600160a01b03166200b0bd565b835160365460408051630161b2cb60e71b81529051939450919262003a78926001600160a01b039092169163b0d96580916004808301926102609291908290030181865afa15801562003a27573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003a4d9190620122b4565b60c0015162003a5e906002620121b7565b82841162003a6d578362003a6f565b825b8991906200b0cc565b9650600062003a87886200a20e565b601f546040516303223eab60e11b81526001600160a01b03909116600482015290915060008051602062052469833981519152906306447d5690602401600060405180830381600087803b15801562003adf57600080fd5b505af115801562003af4573d6000803e3d6000fd5b5050604754610100900460ff16915062003b7a905057604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e09062003b459063350b944160e11b906004016201251c565b600060405180830381600087803b15801562003b6057600080fd5b505af115801562003b75573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b039081168252600060208084018290528451828152908101855283850152925163cba2e58d60e01b81529293849391169163cba2e58d9162003bdc91879186918291600401620124d0565b60408051808303816000875af115801562003bfb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003c219190620124f7565b603654919350915062003c49906001600160a01b0316633656eec2620032756001866200bf62565b601f5462003c67906001600160a01b03168b60008c8c8c8c6200bf98565b50505050505050505050565b6047546301000000900460ff1662003c89575050565b601f5460009062003ca3906001600160a01b03166200b6f1565b604954909150610100900460ff161562003d445760365460408051630161b2cb60e71b8152905162003d3e926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003d05573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003d2b9190620122b4565b610100015166b1a2bc2ec500006200b27f565b62003dc5565b60365460408051630161b2cb60e71b8152905162003dc5926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003d92573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003db89190620122b4565b610100015160006200b27f565b60365460009062003ddf906001600160a01b03166200b0bd565b825160365460408051630161b2cb60e71b81529051939450919262003e85926001600160a01b039092169163b0d96580916004808301926102609291908290030181865afa15801562003e36573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003e5c9190620122b4565b60c0015162003e6d906002620121b7565b82841162003e7c578362002d95565b8690836200b0cc565b601f54909550600090819062003eb1906001600160a01b031662003ea9896200a20e565b60006200b158565b6049549193509150610100900460ff161562003ee55762003edd8660006722b1c8c1227a00006200c317565b955062003eea565b600095505b60365460408051630161b2cb60e71b8152905162003f6a926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003f38573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003f5e9190620122b4565b6101000151876200b27f565b60008062003f776200b5f4565b601f54919350915062003f93906001600160a01b03166200b6f1565b60365490975060009062003fb0906001600160a01b03166200b6f1565b601f5490915060009062003fd0906001600160a01b03168787846200b751565b9050600062003fdf826200c3ae565b90506200403f81620012df603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200147b573d6000803e3d6000fd5b620040a6816200409d603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200147b573d6000803e3d6000fd5b604a546200a93b565b601f54620040c4906001600160a01b031682600088888f896200b863565b505050505050505050505050565b604754610100900460ff16620040e6575050565b60365460408051630161b2cb60e71b8152905162004261926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562004134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200415a9190620122b4565b60c001516200416b906002620121b7565b60365460408051630a4e149360e01b81529051600a926001600160a01b031691630a4e14939160048083019260209291908290030181865afa158015620041b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620041dc919062012531565b601f546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa15801562004226573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200424c919062012079565b620042589190620121e7565b8491906200b0cc565b60495490925060ff16156200427e576200427b826200a20e565b91505b601f546000906200429a906001600160a01b031684836200bb53565b90506000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620042ea57600080fd5b505af1158015620042ff573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200435c57600080fd5b505af115801562004371573d6000803e3d6000fd5b5050603654600092506200438f91506001600160a01b03166200bcb9565b601e54909150620043b19061010090046001600160a01b03168260006200bcc8565b50506047546301000000900460ff16156200466057601f546000908190620043e4906001600160a01b031685836200bbea565b6049549193509150610100900460ff16156200441857620044108560006722b1c8c1227a00006200b0cc565b94506200441d565b600094505b60365460408051630161b2cb60e71b815290516200449d926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200446b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620044919190620122b4565b6101000151866200b27f565b6036546001600160a01b031663414f826d620044b9826200c3e5565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b158015620044fa57600080fd5b505af11580156200450f573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200456a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620045909190620123c7565b6101a00151601f54909150600090620045b4906001600160a01b031684836200c46a565b60365460405163b88fed9f60e01b8152600481018490529296509092506000916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562004607573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200462d919062012079565b90506200463b82856200a8d7565b62004655816200464c86866200b7dd565b6050546200a93b565b505050505062004845565b601f5460009081906200467d906001600160a01b0316856200bc79565b6049549193509150610100900460ff1615620046b157620046a98560006722b1c8c1227a00006200b0cc565b9450620046b6565b600094505b60365460408051630161b2cb60e71b8152905162004704926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200446b573d6000803e3d6000fd5b6036546001600160a01b031663414f826d62004720826200c3e5565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b1580156200476157600080fd5b505af115801562004776573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620047d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620047f79190620123c7565b6101a00151601f549091506000906200481a906001600160a01b0316846200c4ed565b90945090506200482b81846200a8d7565b62002c99846200483c85856200b7dd565b604f546200a93b565b50505050565b603654604080516306fdde0360e01b815290516200495b926001600160a01b0316916306fdde039160048083019260009291908290030181865afa15801562004898573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620048c2919081019062012620565b60388054620048d19062011fa3565b80601f0160208091040260200160405190810160405280929190818152602001828054620048ff9062011fa3565b8015620049505780601f10620049245761010080835404028352916020019162004950565b820191906000526020600020905b8154815290600101906020018083116200493257829003601f168201915b50505050506200c521565b607454604080516306fdde0360e01b81529051620019df926001600160a01b0316916306fdde039160048083019260009291908290030181865afa158015620049a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620049d2919081019062012620565b604051620049e69060389060200162012658565b6040516020818303038152906040526200c521565b60475460ff1662004a0a575050565b60365460408051630161b2cb60e71b8152905162004aa6926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562004a58573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004a7e9190620122b4565b60c0015162004a8f906002620121b7565b60365462004258906001600160a01b03166200b0bd565b601f54909250600090819062004ac6906001600160a01b0316856200c557565b6049549193509150610100900460ff161562004afb5762004af3836000683635c9adc5dea000006200b0cc565b925062004b00565b600092505b62004b106301e13380846200b27f565b60008062004b1d6200b5f4565b601f54919350915060009062004b3c906001600160a01b03166200b6f1565b60365490915060009062004b59906001600160a01b03166200b6f1565b60475490915060009062010000900460ff161562004c5457601f5462004b8a906001600160a01b031688886200b82f565b905062004bf0816038601d0154620012d3603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001343573d6000803e3d6000fd5b62004c4e81620014c6603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200147b573d6000803e3d6000fd5b62004da8565b601f5460009062004c71906001600160a01b03168989846200b751565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562004cbc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004ce2919062012079565b915062004d48826038601f0154620012d3603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001288573d6000803e3d6000fd5b62004da6826200138e603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001343573d6000803e3d6000fd5b505b601f54604754620014fb916001600160a01b031690839062010000900460ff16888888886200b863565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101562001b2657838290600052602060002001805462004e189062011fa3565b80601f016020809104026020016040519081016040528092919081815260200182805462004e469062011fa3565b801562004e975780601f1062004e6b5761010080835404028352916020019162004e97565b820191906000526020600020905b81548152906001019060200180831162004e7957829003601f168201915b50505050508152602001906001019062004df6565b60008062004eb96200b5f4565b601f54919350915060009062004ed8906001600160a01b03166200b6f1565b60365490915060009062004ef5906001600160a01b03166200b6f1565b905062004f9e603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562004f50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004f769190620122b4565b60c0015162004f87906002620121b7565b60365462002d95906001600160a01b03166200bcb9565b601f546040516303223eab60e11b81526001600160a01b03909116600482015290955060008051602062052469833981519152906306447d5690602401600060405180830381600087803b15801562004ff657600080fd5b505af11580156200500b573d6000803e3d6000fd5b505060475460ff169150620050c69050576000805160206205246983398151915263c31eb0e07f0000000000000000000000000000000000000000000000000000000000000000620050655763350b944160e11b6200506e565b631574f9f360e01b5b6040518263ffffffff1660e01b81526004016200508c91906201251c565b600060405180830381600087803b158015620050a757600080fd5b505af1158015620050bc573d6000803e3d6000fd5b50505050620051e3565b7f0000000000000000000000000000000000000000000000000000000000000000620051e357603660009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa15801562005140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005166919062012531565b60365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200519b92911690899060040162012551565b6020604051808303816000875af1158015620051bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620051e191906201257b565b505b60365460009081906001600160a01b031663dbbe80707f00000000000000000000000000000000000000000000000000000000000000006200522757600062005229565b885b60408051606081018252601f546001600160a01b0316815260016020808301919091528251600080825291810184528284015291516001600160e01b031960e086901b16815262005281928d928392600401620124d0565b604080518083038185885af11580156200529f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620052c69190620124f7565b604754919350915060ff16620052df5750505050505050565b6036546200537d906001600160a01b0316633656eec2620053026002866200bf62565b601f5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401602060405180830381865afa15801562005350573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005376919062012079565b886200a8d7565b60006200539f6200538f838a620121fe565b89670de0b6b3a76400006200c5ba565b9050620053ae8260006200c649565b604654620053e2908290620053dc90620053cd906301e133806200c684565b66b1a2bc2ec50000906200b7dd565b6200c69b565b601f5462002c99906001600160a01b03168360018a8a8a8a6200bf98565b6060601c805480602002602001604051908101604052809291908181526020016000905b8282101562001b265760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620054d157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620054925790505b5050505050815250508152602001906001019062005424565b601e546047546001600160a01b036101009283900416319160ff9104166200550f5750565b6000620055ea606160010160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200556c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005592919062012214565b6200559f90600a620121a6565b620055ad906103e8620121b7565b606254601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152600a9216906370a0823190602401620008e2565b60495490915060ff1615620056075762005604816200a20e565b90505b6200561e63beefbabe63deadfade8360006200a245565b601e546200563c9061010090046001600160a01b031631836200a8d7565b6036546040805163313ce56760e01b8152905162005689926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000a4d573d6000803e3d6000fd5b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b039081166024830152620057a6921690633656eec2906044015b602060405180830381865afa158015620056e8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200570e919062012079565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562005763573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620057899190620122b4565b60a001516200579a906002620121b7565b62000c0f9084620121fe565b60365460408051630c048d9160e31b8152905162005822926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa158015620057f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200581a9190620123c7565b51826200a8d7565b60365460408051630c048d9160e31b81529051620058e9926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562005870573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620058969190620123c7565b60a0015160655460365460408051630c048d9160e31b815290516001600160a01b03909216916360246c88916004818101926101e0929091908290030181865afa15801562000de2573d6000803e3d6000fd5b607454603654601e54606554620007ac936001600160a01b039081169381169261010090041690859066b1a2bc2ec500009060009062000ebf60408051600081526020810190915290565b607354604080516310780f7360e01b8152905160008051602062052469833981519152926306447d56926001600160a01b03909116916310780f73916004808201926020929091908290030181865afa15801562005996573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620059bc919062012531565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015620059fe57600080fd5b505af115801562005a13573d6000803e3d6000fd5b505050506000601260008060001960405162005a2f9062011821565b60c080825260099082015268537765657061626c6560b81b60e08201526101006020820181905260059082015264053574545560dc1b61012082015260ff90941660408501526001600160a01b0390921660608401521515608083015260a082015261014001604051809103906000f08015801562005ab2573d6000803e3d6000fd5b506036546040516340c10f1960e01b81529192506001600160a01b03808416926340c10f1992620027a5921690678ac7230489e800009060040162012551565b60475460ff1662005b005750565b60365460408051630161b2cb60e71b8152905162005b4e926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200289d573d6000803e3d6000fd5b601f54909150600090819062005b6e906001600160a01b0316846200c6d6565b9150915062006024603660009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801562005bca573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005bf0919062012079565b603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562005c45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005c6b9190620123c7565b60600151603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562005cc4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005cea9190620123c7565b6101800151603660009054906101000a90046001600160a01b03166001600160a01b031663c69e16ad6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562005d43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005d69919062012079565b60365460408051630c048d9160e31b8152905162005f78926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562005db7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005ddd9190620123c7565b60c0015160365460408051630161b2cb60e71b8152905162005ee5926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562005e2f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005e559190620122b4565b6101e0015160200151603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562005eb3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005ed99190620123c7565b6101200151906200b7dd565b603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562005f3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005f609190620123c7565b610120015162005f71919062012485565b906200c684565b603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562005fcd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005ff39190620123c7565b5162006000919062012485565b6200600c919062012485565b62006018919062012485565b620053dc919062012485565b600080620060316200b5f4565b601f54919350915060009062006050906001600160a01b03166200b6f1565b6036549091506000906200606d906001600160a01b03166200b6f1565b60475490915060009062010000900460ff16156200615957601f546200609e906001600160a01b0316888a6200bf2e565b9050620060b8816038602101548862002a1a919062012485565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200610d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620061339190620122b4565b6101e001515160000362006153576200615381876038602201546200a93b565b62006330565b601f5460009062006176906001600160a01b0316898b846200be70565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa158015620061c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620061e7919062012079565b605b546036546040516363737ac960e11b8152600481018b905292945062006225928492916001600160a01b03169063c6e6f5929060240162002b14565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200627a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620062a09190620122b4565b6101e00151516000036200632e576036546040516363737ac960e11b8152600481018990526200632e9183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa158015620062ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006325919062012079565b605c546200a93b565b505b601f5460475462002c99916001600160a01b031690839062010000900460ff16888888886200b863565b601f5460009062006374906001600160a01b03166200b6f1565b604954909150610100900460ff1615620063dc5760365460408051630161b2cb60e71b81529051620063d6926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003d05573d6000803e3d6000fd5b6200642a565b60365460408051630161b2cb60e71b815290516200642a926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003d92573d6000803e3d6000fd5b60365460009062006444906001600160a01b03166200b0bd565b604754909150600090819060ff16156200651957602084015160365460408051630161b2cb60e71b81529051620064f1926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620064ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620064d19190620122b4565b60c00151620064e2906002620121b7565b82861162003a6d578562003a6f565b601f549097506200650c906001600160a01b0316886200c557565b9093509150620065d49050565b835160365460408051630161b2cb60e71b81529051620065a9926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562006569573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200658f9190620122b4565b60c00151620065a0906002620121b7565b8890866200b0cc565b601f54909750620065cd906001600160a01b031662003ea983620009328b6200a20e565b9093509150505b604954610100900460ff16156200660357620065fb8560006722b1c8c1227a00006200c317565b945062006608565b600094505b60365460408051630161b2cb60e71b8152905162006656926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200446b573d6000803e3d6000fd5b600080620066636200b5f4565b601f5491935091506200667f906001600160a01b03166200b6f1565b6036549096506000906200669c906001600160a01b03166200b6f1565b601f546040516303223eab60e11b81526001600160a01b03909116600482015290915060008051602062052469833981519152906306447d5690602401600060405180830381600087803b158015620066f457600080fd5b505af115801562006709573d6000803e3d6000fd5b505060475462010000900460ff1691506200678a90505760405163f28dceb360e01b8152600080516020620524698339815191529063f28dceb390620067559060489060040162012064565b600060405180830381600087803b1580156200677057600080fd5b505af115801562006785573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b03908116825260016020830152600093169163ded06231918991899186918101826040519080825280601f01601f191660200182016040528015620067ed576020820181803683370190505b508152506040518563ffffffff1660e01b8152600401620068129493929190620124d0565b6020604051808303816000875af115801562006832573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006858919062012079565b60475490915062010000900460ff16620068785750505050505050505050565b6200692181620012df603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620068d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620068fc9190620122b4565b6101e00151602001516200691990670de0b6b3a7640000620121fe565b88906200b7dd565b62006988816200697f603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620068d6573d6000803e3d6000fd5b604b546200a93b565b601f5462003c67906001600160a01b031682600187878d886200b863565b6036546040805163054fd4d560e41b8152905162006a43926001600160a01b0316916354fd4d509160048083019260009291908290030181865afa158015620069f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262006a1d919081019062012620565b60405180604001604052806007815260200166076312e302e32360cc1b8152506200c521565b6074546040805163054fd4d560e41b81529051620019df926001600160a01b0316916354fd4d509160048083019260009291908290030181865afa158015620069f3573d6000803e3d6000fd5b604754610100900460ff1662006aa35750565b60008062006ab06200b5f4565b601f54919350915060009062006acf906001600160a01b03166200b6f1565b60365490915060009062006aec906001600160a01b03166200b6f1565b905062006b47603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562004f50573d6000803e3d6000fd5b601f546040516303223eab60e11b81526001600160a01b03909116600482015290955060008051602062052469833981519152906306447d5690602401600060405180830381600087803b15801562006b9f57600080fd5b505af115801562006bb4573d6000803e3d6000fd5b5050604754610100900460ff16915062006c3a905057604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e09062006c059063350b944160e11b906004016201251c565b600060405180830381600087803b15801562006c2057600080fd5b505af115801562006c35573d6000803e3d6000fd5b505050505b6036546040516363737ac960e11b81526004810187905260009182916001600160a01b039091169063dbbe8070908990839063c6e6f59290602401602060405180830381865afa15801562006c93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006cb9919062012079565b60408051606081018252601f546001600160a01b0316815260006020808301829052835182815290810184528284015291516001600160e01b031960e087901b16815262006d0e9493929190600401620124d0565b60408051808303816000875af115801562006d2d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006d539190620124f7565b603654919350915062006d7b906001600160a01b0316633656eec2620053026002866200bf62565b600062006d88826200c3ae565b9050600062006dac62006d9c838b620121fe565b8a670de0b6b3a76400006200c5ba565b905062006dbb8260006200c649565b60465462006dda908290620053dc90620053cd906301e133806200c684565b601f54620014fb906001600160a01b03168360008b8b8b8b6200bf98565b603654604080516304baa00b60e01b8152905162006e7e926001600160a01b0316916304baa00b9160048083019260009291908290030181865afa15801562006e45573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262006e6f919081019062012620565b60398054620048d19062011fa3565b607454604080516304baa00b60e01b81529051620019df926001600160a01b0316916304baa00b9160048083019260009291908290030181865afa15801562006ecb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262006ef5919081019062012620565b604051620049e69060399060200162012658565b600073e50fa9b3c56ffb159cb0fca61f5c9d750e8128c86001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562006f5e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006f84919062012079565b9050600073e50fa9b3c56ffb159cb0fca61f5c9d750e8128c86001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562006fdb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007001919062012079565b90506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200705a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620070809190620123c7565b60c0015190506200709781620009fa85856200c684565b6200715362007124603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620070f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200711a9190620122b4565b60c001516200a20e565b62007131906002620121b7565b60365462000feb906200714d906001600160a01b03166200b0bd565b6200a20e565b6036546040516370a0823160e01b81526001600160a01b039091166004820152909450600090620071e29073e50fa9b3c56ffb159cb0fca61f5c9d750e8128c8906370a08231906024015b602060405180830381865afa158015620071bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200714d919062012079565b601f54909150620071ff906001600160a01b03168660006200b158565b50506036546040516370a0823160e01b81526001600160a01b039091166004820152620028359073e50fa9b3c56ffb159cb0fca61f5c9d750e8128c8906370a0823190602401602060405180830381865afa15801562007263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007289919062012079565b620072a1846200729a898662012485565b906200b7dd565b6127106200a93b565b604954610100900460ff16156200730f5760365460408051630161b2cb60e71b8152905162007309926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003d05573d6000803e3d6000fd5b6200735d565b60365460408051630161b2cb60e71b815290516200735d926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003d92573d6000803e3d6000fd5b60365460408051630161b2cb60e71b81529051620073f9926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620073ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620073d19190620122b4565b60c00151620073e2906002620121b7565b60365462004258906001600160a01b03166200bcb9565b601f546047549193506000916200741f916001600160a01b031690859060ff166200bcc8565b5090506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562007479573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200749f9190620123c7565b60c00151604954909150610100900460ff1615620074db57620074d383662386f26fc100006722b1c8c1227a00006200c317565b9250620074e0565b600092505b60365460408051630161b2cb60e71b815290516200752e926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001100573d6000803e3d6000fd5b6000806200753b6200b5f4565b601f5491935091506000906200755a906001600160a01b03166200b6f1565b60365490915060009062007577906001600160a01b03166200b6f1565b601f546040516303223eab60e11b81526001600160a01b03909116600482015290915060008051602062052469833981519152906306447d5690602401600060405180830381600087803b158015620075cf57600080fd5b505af1158015620075e4573d6000803e3d6000fd5b5050505060006200768386603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562007644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200766a9190620123c7565b60c001516200767a9190620121fe565b8a90886200c738565b60475490915062010000900460ff16158015620076a05750600088135b15620077105760405163f28dceb360e01b8152600080516020620524698339815191529063f28dceb390620076db9060489060040162012064565b600060405180830381600087803b158015620076f657600080fd5b505af11580156200770b573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b0390811682526001602083015260009316916329b23fc1918b918e9186918101826040519080825280601f01601f19166020018201604052801562007773576020820181803683370190505b508152506040518563ffffffff1660e01b8152600401620077989493929190620124d0565b6020604051808303816000875af1158015620077b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620077de919062012079565b60475490915062010000900460ff16620077fe5750505050505050505050565b6200781081620012df84600a62012485565b6200781e818360646200a93b565b601f5462003c67906001600160a01b0316826001898989896200b863565b6047546301000000900460ff1662007852575050565b604954610100900460ff1615620078b75760365460408051630161b2cb60e71b81529051620078b1926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003d05573d6000803e3d6000fd5b62007905565b60365460408051630161b2cb60e71b8152905162007905926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003d92573d6000803e3d6000fd5b60365460408051630161b2cb60e71b8152905162007953926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620073ab573d6000803e3d6000fd5b601f5490925060009062007972906001600160a01b031684836200bcc8565b5090506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620079cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620079f29190620123c7565b60c00151604954909150610100900460ff161562007a285762007a208360006722b1c8c1227a00006200c317565b925062007a2d565b600092505b60365460408051630161b2cb60e71b8152905162007a7b926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001100573d6000803e3d6000fd5b60008062007a886200b5f4565b601f54919350915060009062007aa7906001600160a01b03166200b6f1565b60365490915060009062007ac4906001600160a01b03166200b6f1565b9050600062007b2286603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562007644573d6000803e3d6000fd5b6047549091506301000000900460ff1662007ba757604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e09062007b729063350b944160e11b906004016201251c565b600060405180830381600087803b15801562007b8d57600080fd5b505af115801562007ba2573d6000803e3d6000fd5b505050505b601f5460009062007bc4906001600160a01b0316898c846200be70565b9050600062007bd3826200c3ae565b905062007be781620012df85600a62012485565b62007bf981846038601401546200a93b565b601f5462007c17906001600160a01b03168260008a8a8a8a6200b863565b5050505050505050505050565b60475460ff1662007c325750565b60365460408051630161b2cb60e71b8152905162007cce926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007c80573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007ca69190620122b4565b60c0015162007cb7906002620121b7565b603654620020f5906001600160a01b03166200b0bd565b601f54909150600090819062007cee906001600160a01b0316846200c557565b9150915060008062007cff6200b5f4565b601f54919350915060009062007d1e906001600160a01b03166200b6f1565b60365490915060009062007d3b906001600160a01b03166200b6f1565b60475490915060009062010000900460ff161562007e2157601f5462007d6c906001600160a01b031688886200b82f565b905062007d86816038601901548a62002a1a919062012485565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562007ddb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007e019190620122b4565b6101e001515160000362006153576200615381896038601a01546200a93b565b601f5460009062007e3e906001600160a01b03168989846200b751565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562007e89573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007eaf919062012079565b6053546036546040516363737ac960e11b8152600481018d905292945062007eed928492916001600160a01b03169063c6e6f5929060240162002b14565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562007f42573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007f689190620122b4565b6101e00151516000036200632e576036546040516363737ac960e11b8152600481018b90526200632e9183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562007fc7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007fed919062012079565b6054546200a93b565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101562001b265783829060005260206000200180546200803c9062011fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546200806a9062011fa3565b8015620080bb5780601f106200808f57610100808354040283529160200191620080bb565b820191906000526020600020905b8154815290600101906020018083116200809d57829003601f168201915b5050505050815260200190600101906200801a565b6036546040805163fbfa77cf60e01b815290516200815e926001600160a01b03169163fbfa77cf9160048083019260209291908290030181865afa1580156200811d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008143919062012531565b73794a61358d6845594f94dc1db02a252b5b4814ad6200c757565b60365460408051633a98ef3960e01b81529051620019df926001600160a01b031691633a98ef399160048083019260209291908290030181865afa158015620081ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620081d1919062012079565b6036546040516370a0823160e01b81526001600160a01b03909116600482015273e50fa9b3c56ffb159cb0fca61f5c9d750e8128c8906370a0823190602401602060405180830381865afa1580156200822e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009fa919062012079565b60085460009060ff16156200826d575060085460ff1690565b604051630667f9d760e41b8152600090600080516020620524698339815191529063667f9d7090620082be9060008051602062052489833981519152906519985a5b195960d21b9060040162012551565b602060405180830381865afa158015620082dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008302919062012079565b1415905090565b60475460ff16620083175750565b7f000000000000000000000000000000000000000000000000000000000000000015620083e65760365460408051630161b2cb60e71b81529051620083de926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200838c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620083b29190620122b4565b60c00151620083c3906002620121b7565b601f54620020f590600a906001600160a01b031631620121e7565b9050620084b9565b60365460408051630161b2cb60e71b81529051620084b6926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200845a9190620122b4565b60c001516200846b906002620121b7565b6036546040805163c55dae6360e01b81529051600a926001600160a01b03169163c55dae639160048083019260209291908290030181865afa15801562002053573d6000803e3d6000fd5b90505b601f54600090620084d4906001600160a01b0316836200c79b565b9050600080620084e36200b5f4565b601f54919350915060009062008502906001600160a01b03166200b6f1565b6036549091506000906200851f906001600160a01b03166200b6f1565b60475490915060009062010000900460ff16156200858957601f5460009062008552906001600160a01b0316886200bc79565b9092509050620085648160006200a8d7565b6200857082896200b7f4565b6200858282896038601501546200a93b565b5062008724565b601f546000908190620085a7906001600160a01b031689836200bbea565b60365460405163b88fed9f60e01b8152600481018490529294509092506001600160a01b03169063b88fed9f90602401602060405180830381865afa158015620085f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200861b919062012079565b92506200862a8160006200a8d7565b6036546040516363737ac960e11b8152600481018b9052620086a19184916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200867b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012df919062012079565b6036546040516363737ac960e11b8152600481018b9052620087219184916001600160a01b039091169063c6e6f59290602401602060405180830381865afa158015620086f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008718919062012079565b604e546200a93b565b50505b601f54604754620022db916001600160a01b031690839062010000900460ff16888888886200b863565b60475460ff166200875d575050565b60365460408051630161b2cb60e71b81529051620087ab926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620073ab573d6000803e3d6000fd5b601f54909250600090620087c9906001600160a01b0316846200c6d6565b50604954909150610100900460ff1615620087fc57620087f48260006722b1c8c1227a00006200b0cc565b915062008801565b600091505b60365460408051630161b2cb60e71b8152905162008881926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200884f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620088759190620122b4565b6101000151836200b27f565b6000806200888e6200b5f4565b601f549193509150600090620088ad906001600160a01b03166200b6f1565b603654909150600090620088ca906001600160a01b03166200b6f1565b60475490915060009062010000900460ff16156200891757601f54620088fb906001600160a01b0316878a6200bf2e565b905062006153816200890e8a8a6200b7dd565b605d546200a93b565b601f5460009062008934906001600160a01b0316888b846200be70565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa1580156200897f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620089a5919062012079565b91506200632e82620089b88b8b6200b7dd565b605e546200a93b565b6060601580548060200260200160405190810160405280929190818152602001828054801562000f27576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f08575050505050905090565b60475460ff1662008a32575050565b7f00000000000000000000000000000000000000000000000000000000000000001562008b015760365460408051630161b2cb60e71b8152905162008af9926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008aa7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008acd9190620122b4565b60c0015162008ade906002620121b7565b601f546200425890600a906001600160a01b031631620121e7565b915062008bd4565b60365460408051630161b2cb60e71b8152905162008bd1926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008b4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008b759190620122b4565b60c0015162008b86906002620121b7565b6036546040805163c55dae6360e01b81529051600a926001600160a01b03169163c55dae639160048083019260209291908290030181865afa158015620041b6573d6000803e3d6000fd5b91505b601f5460009062008bef906001600160a01b0316846200c79b565b90506000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562008c3f57600080fd5b505af115801562008c54573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b15801562008cb157600080fd5b505af115801562008cc6573d6000803e3d6000fd5b50506036546000925062008ce491506001600160a01b03166200bcb9565b601e5490915062008d049061010090046001600160a01b0316826200c6d6565b505060475462010000900460ff161562008f0a57601f54600090819062008d35906001600160a01b0316856200bc79565b9150915062008d468160006200c649565b604954610100900460ff161562008d755762008d6d8560006722b1c8c1227a00006200b0cc565b945062008d7a565b600094505b60365460408051630161b2cb60e71b8152905162008dc8926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200446b573d6000803e3d6000fd5b6036546001600160a01b031663414f826d62008de4826200c3e5565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b15801562008e2557600080fd5b505af115801562008e3a573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562008e95573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008ebb9190620123c7565b6101a00151601f5490915060009062008ede906001600160a01b0316846200c4ed565b909450905062008eef81846200a8d7565b62008f00846200483c85856200b7dd565b5050505062004845565b601f54600090819062008f28906001600160a01b031685836200bbea565b9150915062008f398160006200c649565b604954610100900460ff161562008f685762008f608560006722b1c8c1227a00006200b0cc565b945062008f6d565b600094505b60365460408051630161b2cb60e71b8152905162008fbb926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200446b573d6000803e3d6000fd5b6036546001600160a01b031663414f826d62008fd7826200c3e5565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b1580156200901857600080fd5b505af11580156200902d573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562009088573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620090ae9190620123c7565b6101a00151601f54909150600090620090d2906001600160a01b031684836200c46a565b60365460405163b88fed9f60e01b8152600481018490529296509092506000916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562009125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200914b919062012079565b90506200915982856200a8d7565b620014fb816200464c86866200b7dd565b604754610100900460ff166200917e575050565b60365460408051630161b2cb60e71b81529051620091cc926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620073ab573d6000803e3d6000fd5b601f54909250600090620091eb906001600160a01b031684836200bcc8565b50604954909150610100900460ff16156200921e57620092168260006722b1c8c1227a00006200c317565b915062009223565b600091505b60365460408051630161b2cb60e71b8152905162009271926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200884f573d6000803e3d6000fd5b6000806200927e6200b5f4565b601f5491935091506000906200929d906001600160a01b03166200b6f1565b603654909150600090620092ba906001600160a01b03166200b6f1565b905060008060006200934f89603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200931b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620093419190620122b4565b61010001518c91906200c7fb565b9150506200935d816200c871565b6047549092506301000000900460ff161590506200941e57601f5460009062009392906001600160a01b0316898c846200be70565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa158015620093dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009403919062012079565b92506200941783836038602601546200a93b565b506200944b565b601f5462009437906001600160a01b0316888b6200bf2e565b91506200944b82826038602501546200a93b565b601f54604754620014fb916001600160a01b03169084906301000000900460ff1615898989896200b863565b620094816200c899565b601e5460405163c88a5e6d60e01b8152600080516020620524698339815191529163c88a5e6d91620094d19161010090046001600160a01b03169069152d02c7e14af68000009060040162012551565b600060405180830381600087803b158015620094ec57600080fd5b505af115801562009501573d6000803e3d6000fd5b5050601f5460405163c88a5e6d60e01b815260008051602062052469833981519152935063c88a5e6d925062009550916001600160a01b03169069152d02c7e14af68000009060040162012551565b600060405180830381600087803b1580156200956b57600080fd5b505af115801562009580573d6000803e3d6000fd5b506000925060029150620095919050565b604051908082528060200260200182016040528015620095bb578160200160208202803683370190505b509050601e60019054906101000a90046001600160a01b031681600081518110620095ea57620095ea620126f1565b6001600160a01b039283166020918202929092010152601f548251911690829060019081106200961e576200961e620126f1565b60200260200101906001600160a01b031690816001600160a01b03168152505060005b603b54811015620096a257603654603d54603b805462009699936001600160a01b0390811693169190859081106200967d576200967d620126f1565b6000918252602090912001546001600160a01b0316856200cdc1565b60010162009641565b5060005b603c54811015620096eb57603654603e54603c8054620096e2936001600160a01b0390811693169190859081106200967d576200967d620126f1565b600101620096a6565b50620096f66200cf9a565b6073546200970d906001600160a01b03166200d6e4565b607480546001600160a01b0319166001600160a01b03928316908117909155607354604051630843957560e31b815260048101929092529091169063421caba890602401600060405180830381600087803b1580156200976c57600080fd5b505af115801562009781573d6000803e3d6000fd5b505060475460009250610100900460ff1690508015620097a4575060495460ff16155b15620097ff576062546040805163313ce56760e01b81529051620097f7926001600160a01b03169163313ce5679160048083019260209291908290030181865afa1580156200556c573d6000803e3d6000fd5b905062009886565b604754610100900460ff16156200982d57603a54620097f7906200714d906200559f9060ff16600a620121a6565b7f00000000000000000000000000000000000000000000000000000000000000006200986b57603a54620097f7906200089c9060ff16600a620121a6565b603a546200988390620009599060ff16600a620121a6565b90505b604754620098ab9063deadbeef9063deadbabe908490610100900460ff16156200a245565b60475460ff168015620098dc57507f0000000000000000000000000000000000000000000000000000000000000000155b1562009c70576000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200993057600080fd5b505af115801562009945573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b158015620099a257600080fd5b505af1158015620099b7573d6000803e3d6000fd5b5050603d54603654606154601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152938416955063095ea7b394509183169216906370a0823190602401602060405180830381865afa15801562009a21573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009a47919062012079565b6040518363ffffffff1660e01b815260040162009a6692919062012551565b6020604051808303816000875af115801562009a86573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009aac91906201257b565b506000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562009afb57600080fd5b505af115801562009b10573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b15801562009b6957600080fd5b505af115801562009b7e573d6000803e3d6000fd5b5050603d54603654606154601f546040516370a0823160e01b81526001600160a01b039182166004820152938116955063095ea7b39450918216929116906370a0823190602401602060405180830381865afa15801562009be3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009c09919062012079565b6040518363ffffffff1660e01b815260040162009c2892919062012551565b6020604051808303816000875af115801562009c48573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009c6e91906201257b565b505b604754610100900460ff16156200a00f576000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562009ccf57600080fd5b505af115801562009ce4573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b15801562009d4157600080fd5b505af115801562009d56573d6000803e3d6000fd5b5050603e54603654606254601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152938416955063095ea7b394509183169216906370a0823190602401602060405180830381865afa15801562009dc0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009de6919062012079565b6040518363ffffffff1660e01b815260040162009e0592919062012551565b6020604051808303816000875af115801562009e25573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009e4b91906201257b565b506000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562009e9a57600080fd5b505af115801562009eaf573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b15801562009f0857600080fd5b505af115801562009f1d573d6000803e3d6000fd5b5050603e54603654606254601f546040516370a0823160e01b81526001600160a01b039182166004820152938116955063095ea7b39450918216929116906370a0823190602401602060405180830381865afa15801562009f82573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009fa8919062012079565b6040518363ffffffff1660e01b815260040162009fc792919062012551565b6020604051808303816000875af115801562009fe7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a00d91906201257b565b505b604754610100900460ff16156200a06c57603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b0390811660248301526200a066921690633656eec290604401620056ca565b6200a187565b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b0390811660248301526200a187921690633656eec290604401602060405180830381865afa1580156200a0ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a0f0919062012079565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200a145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a16b9190620122b4565b60a001516200a17c906002620121b7565b62000c03846200a20e565b6000805160206205248983398151915260001c6001600160a01b03166341af2f526040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200a1d557600080fd5b505af11580156200a1ea573d6000803e3d6000fd5b505050505050565b60008183116200a20357826200a205565b815b90505b92915050565b60006200a2087382af49447d8a07e3bd95bd0d56f35241523fbab173794a61358d6845594f94dc1db02a252b5b4814ad846200d8ca565b601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062052469833981519152906306447d5690602401600060405180830381600087803b1580156200a29e57600080fd5b505af11580156200a2b3573d6000803e3d6000fd5b5050505060005b607460009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200a30e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a334919062012079565b8110156200a3ef576073546074546001600160a01b03918216916349f13de79188911660616200a36f60408051600081526020810190915290565b66b1a2bc2ec5000080888c6040518963ffffffff1660e01b81526004016200a39f989796959493929190620127f5565b6020604051808303816000875af11580156200a3bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a3e5919062012531565b506001016200a2ba565b508080156200a41c57507f0000000000000000000000000000000000000000000000000000000000000000155b156200a4a757603d5460745460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200a45a92911690869060040162012551565b6020604051808303816000875af11580156200a47a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a4a091906201257b565b506200a588565b801580156200a4b9575060495460ff16155b156200a4f757603e5460745460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200a45a92911690869060040162012551565b806200a58857603e546074546001600160a01b039182169163095ea7b391166200a521856200c3ae565b6040518363ffffffff1660e01b81526004016200a54092919062012551565b6020604051808303816000875af11580156200a560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a58691906201257b565b505b60475460ff161580156200a5995750805b156200a644576000805160206205246983398151915263c31eb0e07f00000000000000000000000000000000000000000000000000000000000000006200a5e85763350b944160e11b6200a5f1565b631574f9f360e01b5b6040518263ffffffff1660e01b81526004016200a60f91906201251c565b600060405180830381600087803b1580156200a62a57600080fd5b505af11580156200a63f573d6000803e3d6000fd5b505050505b604754610100900460ff161580156200a65b575080155b156200a6d157604051630618f58760e51b8152600080516020620524698339815191529063c31eb0e0906200a69c9063350b944160e11b906004016201251c565b600060405180830381600087803b1580156200a6b757600080fd5b505af11580156200a6cc573d6000803e3d6000fd5b505050505b601e546073546001600160a01b036101009092048216319116632e7cd9718380156200a71a57507f00000000000000000000000000000000000000000000000000000000000000005b6200a7275760006200a734565b6200a734856002620121b7565b60745488906001600160a01b0316603860616200a75c60408051600081526020810190915290565b60408051606081018252601e5461010090046001600160a01b031681528b151560208201528c9166b1a2bc2ec50000918291810160006040519080825280601f01601f1916602001820160405280156200a7bd576020820181803683370190505b508152508f6040518c63ffffffff1660e01b81526004016200a7e99a999897969594939291906201285c565b60206040518083038185885af11580156200a808573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200a82f919062012531565b603680546001600160a01b0319166001600160a01b039290921691909117905560475460ff1680156200a85f5750815b80156200a88957507f00000000000000000000000000000000000000000000000000000000000000005b156200a8bd576200a8b76200a89f8483620121fe565b601e5461010090046001600160a01b0316316200a8d7565b62002835565b601e546200283590829061010090046001600160a01b0316315b60405163260a5b1560e21b8152600481018390526024810182905260008051602062052469833981519152906398296c54906044015b60006040518083038186803b1580156200a92657600080fd5b505afa1580156200a1ea573d6000803e3d6000fd5b604051630b6903e360e11b815260048101849052602481018390526044810182905260008051602062052469833981519152906316d207c69060640160006040518083038186803b1580156200a99057600080fd5b505afa158015620022db573d6000803e3d6000fd5b60006000805160206205248983398151915260001c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af11580156200a9fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200aa2491908101906201291a565b905060006200aa54827fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed2344656200d8f2565b90506200aa64815160016200a8d7565b6200aace816000815181106200aa7e576200aa7e620126f1565b6020026020010151600001516000815181106200aa9f576200aa9f620126f1565b60200260200101517fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed2344656200da14565b6200ab24816000815181106200aae8576200aae8620126f1565b6020026020010151600001516001815181106200ab09576200ab09620126f1565b602002602001015160001c8c6001600160a01b03166200a8d7565b600080600080846000815181106200ab40576200ab40620126f1565b6020026020010151602001518060200190518101906200ab61919062012a93565b93509350935093506200ab75848f6200c757565b6200abe9838f6001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200abb9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200abe3919081019062012620565b6200c521565b60008e6001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200ac2b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ac519190620122b4565b835181519192506200ac63916200c757565b6200ac77836020015182602001516200c757565b6200ac8b836040015182604001516200c757565b6200ac9f836060015182606001516200da14565b6200acb383608001518260a001516200a8d7565b6200acc78360a001518260c001516200a8d7565b6200acdc8360e001518261010001516200a8d7565b6200acf28361010001518261012001516200a8d7565b6200ad088361012001518261014001516200a8d7565b6200ad1e8361014001518261016001516200c757565b6200ad348361016001518261018001516200c757565b6101c0830151516101e0820151516200ad4e91906200a8d7565b6200ad6c836101c0015160200151826101e00151602001516200a8d7565b6200ad8a836101c0015160400151826101e00151604001516200a8d7565b6200ada8836101c0015160600151826101e00151606001516200a8d7565b6200ae04826040516020016200adbf919062012599565b604051602081830303815290604052805190602001208a6040516020016200ade8919062012599565b604051602081830303815290604052805190602001206200da14565b50505050505060006200ae38827f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af36200d8f2565b90506200ae48815160016200a8d7565b6200aeb2816000815181106200ae62576200ae62620126f1565b6020026020010151600001516000815181106200ae83576200ae83620126f1565b60200260200101517f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af36200da14565b6200aeff816000815181106200aecc576200aecc620126f1565b6020026020010151600001516001815181106200aeed576200aeed620126f1565b602002602001015160001c8a6200c757565b60008a90506000806000806000866000815181106200af22576200af22620126f1565b6020026020010151602001518060200190518101906200af43919062012c28565b9398509196509450925090508d8c156200afee576200afe8866200af698e6002620121b7565b6040516363737ac960e11b8152600481018590526001600160a01b038b169063c6e6f59290602401602060405180830381865afa1580156200afaf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200afd5919062012079565b6200afe19190620121fe565b8c6200a93b565b6200b00c565b6200b00c866200b0008e6002620121b7565b6200afe19084620121fe565b6200b01885826200a8d7565b6200b09184886001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200b05d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b0839190620122b4565b60800151620186a06200a93b565b6200b09d838e6200da4f565b6200b0a9828f6200a8d7565b505050505050505050505050505050505050565b60006200a2088260076200da8c565b6000818311156200b1155760405162461bcd60e51b815260206004820152600e60248201526d098d2c47440dad2dc407c40dac2f60931b60448201526064015b60405180910390fd5b60006200b1238484620121fe565b6200b13090600162012485565b905060006200b140828762012c74565b90506200b14e858262012485565b9695505050505050565b6000806000836200b1d95760365460405163b88fed9f60e01b8152600481018790526001600160a01b039091169063b88fed9f90602401602060405180830381865afa1580156200b1ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b1d3919062012079565b6200b1db565b845b90506200b27186866040518060e0016040528088151581526020018a6001600160a01b0316815260200160006001600160401b038111156200b221576200b22162011d11565b6040519080825280601f01601f1916602001820160405280156200b24c576020820181803683370190505b508152602001898152602001600081526020018581526020016000198152506200dc8f565b92509250505b935093915050565b60405163d15e005360e01b81527382af49447d8a07e3bd95bd0d56f35241523fbab1600482015260009073794a61358d6845594f94dc1db02a252b5b4814ad9063d15e005390602401602060405180830381865afa1580156200b2e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b30c919062012079565b90506000805160206205246983398151915263e5d6bf026200b32f854262012485565b6040518263ffffffff1660e01b81526004016200b34e91815260200190565b600060405180830381600087803b1580156200b36957600080fd5b505af11580156200b37e573d6000803e3d6000fd5b5050505060006200b3918284866200c7fb565b50604080517382af49447d8a07e3bd95bd0d56f35241523fbab1602082015260349181019190915290915060009060600160408051808303601f190181529082905280516020909101206335ea6a7560e01b82527382af49447d8a07e3bd95bd0d56f35241523fbab16004830152915060009073794a61358d6845594f94dc1db02a252b5b4814ad906335ea6a75906024016101e060405180830381865afa1580156200b442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b468919062012d11565b9050600080516020620524698339815191526370ca10bb73794a61358d6845594f94dc1db02a252b5b4814ad6200b4a185600162012485565b604085810151905160e085901b6001600160e01b03191681526001600160a01b03939093166004840152602483019190915260801b6fffffffffffffffffffffffffffffffff191686176044820152606401600060405180830381600087803b1580156200b50e57600080fd5b505af11580156200b523573d6000803e3d6000fd5b506000805160206205246983398151915292506370ca10bb915073794a61358d6845594f94dc1db02a252b5b4814ad90506200b56185600362012485565b60001b8460a001516001600160801b0316608042901b60a88760e0015161ffff16901b171760001b6040518463ffffffff1660e01b81526004016200b5c4939291906001600160a01b039390931683526020830191909152604082015260600190565b600060405180830381600087803b1580156200b5df57600080fd5b505af115801562003c67573d6000803e3d6000fd5b60008073e50fa9b3c56ffb159cb0fca61f5c9d750e8128c86001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200b64a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b670919062012079565b73e50fa9b3c56ffb159cb0fca61f5c9d750e8128c86001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200b6c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b6e9919062012079565b915091509091565b6200b71660405180606001604052806000815260200160008152602001600081525090565b6000806200b724846200e0c8565b6040805160608101825291825260208201929092526001600160a01b039095163190850152509192915050565b60006200b7d4858585604051806080016040528087151581526020018a6001600160a01b0316815260200160006001600160401b038111156200b798576200b79862011d11565b6040519080825280601f01601f1916602001820160405280156200b7c3576020820181803683370190505b50815260200160008152506200e19b565b95945050505050565b60006200a2058383670de0b6b3a76400006200c738565b604051638466f41560e01b815260048101839052602481018290526000805160206205246983398151915290638466f415906044016200a90d565b60408051608081018252600181526001600160a01b038516602082015260009162000830918691869186918101866200b798565b84156200ba245760475462010000900460ff166200b8945760405163350b944160e11b815260040160405180910390fd5b6000806200b8a16200b5f4565b90925090506200b8bf826200b8b78a89620121fe565b60016200a93b565b6200b8e4816200b8cf8a6200a20e565b6200b8db9088620121fe565b6060546200a93b565b7f00000000000000000000000000000000000000000000000000000000000000006200b94c5760365460408401516200b928916001600160a01b031631906200a8d7565b601f5460408501516200b946916001600160a01b031631906200a8d7565b6200b98f565b60365460408401516200b96a916001600160a01b031631906200a8d7565b601f5460408501516200b98f916001600160a01b03163190620009fa908b9062012485565b60365460009081906200b9ab906001600160a01b03166200e0c8565b915091506000806200b9bd8d6200e0c8565b915091506200b9d18488602001516200a8d7565b6200b9e8828d8a60200151620009fa919062012485565b6200ba06836200b9f88e6200a20e565b89516200b8db9190620121fe565b87516060546200ba189183916200a93b565b505050505050620022db565b6047546301000000900460ff166200ba4f5760405163350b944160e11b815260040160405180910390fd5b6000806200ba5c6200b5f4565b915091506200ba6e828760016200a93b565b6200ba7c818660016200a93b565b60365460408401516200ba9a916001600160a01b031631906200a8d7565b601f5460408501516200bab8916001600160a01b031631906200a8d7565b60365460009081906200bad4906001600160a01b03166200e0c8565b915091506000806200bae68d6200e0c8565b915091506200bb008488602001516038602801546200a93b565b6200bb168289602001516038602801546200a93b565b6200bb26836200b9f88e6200a20e565b6200bb44816200bb368e6200a20e565b8a516200b8db919062012485565b50505050505050505050505050565b60006200083084846040518060e001604052808615158152602001886001600160a01b0316815260200160006001600160401b038111156200bb99576200bb9962011d11565b6040519080825280601f01601f1916602001820160405280156200bbc4576020820181803683370190505b50815260200187815260200160008152602001600081526020016000198152506200e314565b6000806200bc6d858560405180608001604052808715158152602001896001600160a01b0316815260200160006001600160401b038111156200bc31576200bc3162011d11565b6040519080825280601f01601f1916602001820160405280156200bc5c576020820181803683370190505b50815260200160008152506200e6ee565b91509150935093915050565b60408051608081018252600181526001600160a01b038416602082015260009182916200bcad91869186918101856200bc31565b915091505b9250929050565b60006200a2088260076200e865565b6000806000836200bd49576036546040516363737ac960e11b8152600481018790526001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200bd1d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bd43919062012079565b6200bd4b565b845b90506000846200bdcb576036546040516363737ac960e11b8152600481018890526001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200bd9f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bdc5919062012079565b6200bdcd565b855b90506200be6287876040518060e0016040528089151581526020018b6001600160a01b0316815260200160006001600160401b038111156200be13576200be1362011d11565b6040519080825280601f01601f1916602001820160405280156200be3e576020820181803683370190505b5081526020018681526020016000815260200160008152602001858152506200ea5e565b935093505050935093915050565b60006200b7d4858585604051806080016040528087151581526020018a6001600160a01b0316815260200160006001600160401b038111156200beb7576200beb762011d11565b6040519080825280601f01601f1916602001820160405280156200bee2576020820181803683370190505b50815260200160008152506200eedf565b60405163b12fc00560e01b81526004810183905260248101829052600080516020620524698339815191529063b12fc005906044016200a90d565b60408051608081018252600181526001600160a01b038516602082015260009162000830918691869186918101866200beb7565b60006001600160f81b038211156200bf8d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b84156200c2035760475460ff166200bfc35760405163350b944160e11b815260040160405180910390fd5b6000806200bfd06200b5f4565b90925090506200bfef826200bfe68a8962012485565b605f546200a93b565b6036546040516363737ac960e11b8152600481018a90526200c0729183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200c040573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c066919062012079565b6200bfe6908862012485565b7f00000000000000000000000000000000000000000000000000000000000000006200c0d65760365460408401516200c0b6916001600160a01b031631906200a8d7565b6200c0d0896001600160a01b03163185604001516200a8d7565b6200c115565b60365460408401516200c0f4916001600160a01b031631906200a8d7565b6200c115896001600160a01b031631898660400151620009fa9190620121fe565b60365460009081906200c131906001600160a01b03166200e0c8565b915091506000806200c1438d6200e0c8565b915091506200c1578488602001516200a8d7565b6200c16e828d8a60200151620009fa9190620121fe565b6036546040516363737ac960e11b8152600481018e90526200c1f39185916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200c1bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c1e5919062012079565b89516200bfe6919062012485565b6200ba188189600001516200a8d7565b604754610100900460ff166200c22c5760405163350b944160e11b815260040160405180910390fd5b6000806200c2396200b5f4565b915091506200c24982876200a8d7565b6200c25b81866038602701546200a93b565b60365460408401516200c279916001600160a01b031631906200a8d7565b601f5460408501516200c297916001600160a01b031631906200a8d7565b60365460009081906200c2b3906001600160a01b03166200e0c8565b915091506000806200c2c58d6200e0c8565b915091506200c2d98488602001516200a8d7565b6200c2e98289602001516200a8d7565b6200c2f9836200c1e58e6200a20e565b6200bb44816200c3098e6200a20e565b8a516200bfe69190620121fe565b6000818313156200c35c5760405162461bcd60e51b815260206004820152600e60248201526d098d2c47440dad2dc407c40dac2f60931b60448201526064016200b10c565b60006200c36a848462012e4a565b6200c37790600162012e6d565b905060006200c387828762012e98565b905060008112156200c3a2576200c39f828262012e6d565b90505b6200b14e858262012e6d565b60006200a2087382af49447d8a07e3bd95bd0d56f35241523fbab173794a61358d6845594f94dc1db02a252b5b4814ad846200f012565b6000816001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200c427573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c44d9190620122b4565b61012001516200c45e904262012c74565b6200a2089042620121fe565b6000806200bc6d858560405180608001604052808715158152602001896001600160a01b0316815260200160006001600160401b038111156200c4b1576200c4b162011d11565b6040519080825280601f01601f1916602001820160405280156200c4dc576020820181803683370190505b50815260200160008152506200f039565b60408051608081018252600181526001600160a01b038416602082015260009182916200bcad91869186918101856200c4b1565b60405163f320d96360e01b8152600080516020620524698339815191529063f320d963906200a90d908590859060040162012eaf565b6040805160e081018252600181526001600160a01b038416602080830191909152825160008082529181018452909283926200bcad928792879291908201908152602001878152602001600081526020018781526020016000198152506200dc8f565b6000670de0b6b3a764000082111580156200c5d55750600082115b6200c62d5760405162461bcd60e51b815260206004820152602160248201527f457870656374696e67204e6f726d616c697a656454696d6552656d61696e696e6044820152606760f81b60648201526084016200b10c565b620008306200c63d85846200b7dd565b62005f718686620121fe565b604051636d83fe6960e11b81526004810183905260248101829052600080516020620524698339815191529063db07fcd2906044016200a90d565b60006200a20583670de0b6b3a7640000846200c738565b60405163a8d4d1d960e01b81526004810183905260248101829052600080516020620524698339815191529063a8d4d1d9906044016200a90d565b6040805160e081018252600181526001600160a01b038416602080830191909152825160008082529181018452909283926200bcad9287928792919082019081526020018781526020016000815260200160008152602001878152506200ea5e565b60008260001904841183021582026200c75057600080fd5b5091020490565b6040516328a9b0fb60e11b81526001600160a01b03808416600483015282166024820152600080516020620524698339815191529063515361f6906044016200a90d565b6040805160e081018252600181526001600160a01b03841660208083019190915282516000808252918101845290926200a2059286928692820190815260200186815260200160008152602001600081526020016000198152506200e314565b600080806200c80f846301e133806200c684565b905060008512156200c848576200c8376200c82f826200729a8862012ed8565b87906200b7dd565b6200c8429062012ed8565b6200c858565b6200c8586200c82f86836200b7dd565b91506200c866828762012e6d565b925050935093915050565b6000808212156200c8955760405163071d137160e51b815260040160405180910390fd5b5090565b6200c8a36200f16b565b601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062052469833981519152906306447d5690602401600060405180830381600087803b1580156200c8fc57600080fd5b505af11580156200c911573d6000803e3d6000fd5b5050505060126000806000196040516200c92b9062011821565b60c08082526004908201819052634261736560e01b60e083015261010060208301819052820152634241534560e01b61012082015260ff90941660408501526001600160a01b0390921660608401521515608083015260a082015261014001604051809103906000f0801580156200c9a7573d6000803e3d6000fd5b50603380546001600160a01b0319166001600160a01b03929092169190911790556040516200c9d6906201182f565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103906000f0801580156200ca1a573d6000803e3d6000fd5b50603260016101000a8154816001600160a01b0302191690836001600160a01b031602179055506040516200ca4f906201183d565b604051809103906000f0801580156200ca6c573d6000803e3d6000fd5b50603480546001600160a01b0319166001600160a01b0392831690811790915560295460408051637ab4339d60e01b81526004810191909152601260448201527148797065726472697665526567697374727960701b60648201529216602483015290637ab4339d90608401600060405180830381600087803b1580156200caf357600080fd5b505af11580156200cb08573d6000803e3d6000fd5b5050505060006200cb2566b1a2bc2ec500006301e133806200f53b565b6040805160018082528183019092529192506000919060208083019080368337505060285482519293506001600160a01b0316918391506000906200cb6e576200cb6e620126f1565b60200260200101906001600160a01b031690816001600160a01b031681525050816101600151826101800151836101a00151846101c00151846040516200cbb5906201184b565b6200cbc595949392919062012ef7565b604051809103906000f0801580156200cbe2573d6000803e3d6000fd5b50603780546001600160a01b0319166001600160a01b03928316179055601e546200cc159161010090910416836200f62d565b6000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200cc6357600080fd5b505af11580156200cc78573d6000803e3d6000fd5b50506027546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200ccd157600080fd5b505af11580156200cce6573d6000803e3d6000fd5b50506036546028546040516338c0646560e11b81526001600160a01b0391821660048201526001602482015291169250637180c8ca9150604401600060405180830381600087803b1580156200cd3b57600080fd5b505af11580156200cd50573d6000803e3d6000fd5b505060325460ff169150620007ac9050576000805160206205246983398151915263e5d6bf026200cd876301e133806003620121b7565b6040518263ffffffff1660e01b81526004016200cda691815260200190565b600060405180830381600087803b1580156200a1d557600080fd5b6040516370a0823160e01b81526001600160a01b038381166004830152600091908516906370a0823190602401602060405180830381865afa1580156200ce0c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ce32919062012079565b905060005b82518110156200a1ea576200ce7984868551856200ce569190620121e7565b8685815181106200ce6b576200ce6b620126f1565b6020026020010151620022e4565b506000805160206205248983398151915260001c6001600160a01b03166306447d568483815181106200ceb0576200ceb0620126f1565b60200260200101516040518263ffffffff1660e01b81526004016200cee491906001600160a01b0391909116815260200190565b600060405180830381600087803b1580156200ceff57600080fd5b505af11580156200cf14573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b038816925063095ea7b391506200cf4a9089906000199060040162012551565b6020604051808303816000875af11580156200cf6a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200cf9091906201257b565b506001016200ce37565b602480546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062052469833981519152916306447d569101600060405180830381600087803b1580156200cfee57600080fd5b505af11580156200d003573d6000803e3d6000fd5b5060009250600191506200d0149050565b6040519080825280602002602001820160405280156200d03e578160200160208202803683370190505b50601f5481519192506001600160a01b03169082906000906200d065576200d065620126f1565b60200260200101906001600160a01b031690816001600160a01b0316815250506040516200d093906201182f565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103906000f0801580156200d0d7573d6000803e3d6000fd5b5060328054610100600160a81b0319166101006001600160a01b0393841681029190911791829055604080516102c081018252601e5483900485168152602080548616818301819052601f548716838501526060808401899052608080850192909252602654881660a0850152600060c08501819052610e1060e0860152617080858801526201518061012086015262093a806101408601526312cc0300610160860152670214e8348c4f0000610180860152671bc16d674ec800006101a086015266038d7ea4c680006101c08601526706f05b59d3b200006101e086018190526611c37937e08000610200870152610220860152855180840187528181528085018290528087018290528083019190915261024085015284519182018552670de0b6b3a764000080835282840181905282860181905290820152610260830152929093049093166102808301819052835163d13053bb60e01b8152935192936102a0850193919263d13053bb926004808401938290030181865afa1580156200d265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d28b919062012079565b90526040516200d29b9062011859565b6200d2a7919062012f35565b604051809103906000f0801580156200d2c4573d6000803e3d6000fd5b50607380546001600160a01b0319166001600160a01b03928316908117909155604080516101e081018252603d5484168152603e5490931660208085019190915281516399623bb160e01b8152825192850193926399623bb1926004808401939192918290030181865afa1580156200d341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d367919062012531565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b031663c905a4b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200d3c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d3ef919062012079565b81526040805460208084019190915260415482840152671bc16d674ec80000606084015260465460808401526201518060a0840152600060c0840152607354825163e333155560e01b8152925160e0909401936001600160a01b039091169263e33315559260048083019391928290030181865afa1580156200d476573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d49c919062012531565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200d4fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d524919062012531565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200d586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d5ac919062012531565b6001600160a01b0390811682526000602080840191909152604080516080808201835260425482526043548285015260445482840152604554606080840191909152958301919091528551606180549186166001600160a01b031992831617905586840151606280549187169183169190911790558683015160638054918716918316919091179055868601516064559086015160655560a086015160665560c086015160675560e0860151606855610100860151606955610120860151606a55610140860151606b8054918616918316919091179055610160860151606c8054918616918316919091179055610180860151606d80549186169183169190911790556101a0860151606e8054919095169116179092556101c0909301518051606f5592830151607055820151607155015160725550565b601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260009060008051602062052469833981519152906306447d5690602401600060405180830381600087803b1580156200d74057600080fd5b505af11580156200d755573d6000803e3d6000fd5b50506040516200d76d92506038915060200162012658565b604051602081830303815290604052826040516200d78b9062011867565b604051809103906000f0801580156200d7a8573d6000803e3d6000fd5b506040516200d7b79062011875565b604051809103906000f0801580156200d7d4573d6000803e3d6000fd5b506040516200d7e39062011883565b604051809103906000f0801580156200d800573d6000803e3d6000fd5b506040516200d80f9062011891565b604051809103906000f0801580156200d82c573d6000803e3d6000fd5b506040516200d83b906201189f565b604051809103906000f0801580156200d858573d6000803e3d6000fd5b506040516200d86790620118ad565b604051809103906000f0801580156200d884573d6000803e3d6000fd5b506040516200d89390620118bb565b6200d8a69897969594939291906201313f565b604051809103906000f0801580156200d8c3573d6000803e3d6000fd5b5092915050565b6000620008306b033b2e3c9fd0803ce80000006200d8e986866200fb50565b8491906200c738565b6060600083516001600160401b038111156200d912576200d91262011d11565b6040519080825280602002602001820160405280156200d96157816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816200d9315790505b50915060005b84518110156200da0b57838582815181106200d987576200d987620126f1565b6020026020010151600001516000815181106200d9a8576200d9a8620126f1565b6020026020010151036200da02578481815181106200d9cb576200d9cb620126f1565b60200260200101518383806200d9e1906201319f565b9450815181106200d9f6576200d9f6620126f1565b60200260200101819052505b6001016200d967565b50815292915050565b604051637c84c69b60e01b815260048101839052602481018290526000805160206205246983398151915290637c84c69b906044016200a90d565b60405163f7fe347760e01b815282151560048201528115156024820152600080516020620524698339815191529063f7fe3477906044016200a90d565b600080836001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200dacf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200daf59190620122b4565b90506000846001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200db39573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200db5f9190620123c7565b90506200dc856040518061018001604052808360000151815260200183602001518152602001836080015181526020018360e001518152602001836101c00151815260200184610140015181526020018360c001518152602001846080015181526020018460a001518152602001846101e00151600001518152602001846101e00151602001518152602001846101e0015160400151815250866001600160a01b031663cf210e656200dc1b896001600160a01b03166200c3e5565b6040518263ffffffff1660e01b81526004016200dc3a91815260200190565b602060405180830381865afa1580156200dc58573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200dc7e919062012079565b866200fbc1565b5095945050505050565b6000806000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200dce057600080fd5b505af11580156200dcf5573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200dd4a57600080fd5b505af11580156200dd5f573d6000803e3d6000fd5b50505050603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200ddb8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ddde9190620122b4565b5060365460408051630161b2cb60e71b8152905173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200de3e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200de649190620122b4565b516001600160a01b03161480156200de7a575082515b156200df3b5760365460608085015160a086015160808701516040805194850181526020808a01516001600160a01b0390811687528a51151591870191909152818a015186830152905163cba2e58d60e01b815295169463cba2e58d946200deec938b939092909190600401620124d0565b604080518083038185885af11580156200df0a573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200df319190620124f7565b915091506200b277565b60335460405163140e25ad60e31b8152600481018690526001600160a01b039091169063a0712d6890602401600060405180830381600087803b1580156200df8257600080fd5b505af11580156200df97573d6000803e3d6000fd5b505060335460365460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200dfd49290911690889060040162012551565b6020604051808303816000875af11580156200dff4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e01a91906201257b565b5060365460a08401516080850151604080516060810182526020808901516001600160a01b03908116835289511515918301919091528289015182840152915163cba2e58d60e01b8152919094169363cba2e58d936200e083938a9391929091600401620124d0565b60408051808303816000875af11580156200e0a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200df319190620124f7565b6040516370a0823160e01b81526001600160a01b038216600482015260009081907382af49447d8a07e3bd95bd0d56f35241523fbab1906370a0823190602401602060405180830381865afa1580156200e126573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e14c919062012079565b6040516370a0823160e01b81526001600160a01b03851660048201526200e1929073e50fa9b3c56ffb159cb0fca61f5c9d750e8128c8906370a08231906024016200719e565b91509150915091565b60006000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e1eb57600080fd5b505af11580156200e200573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200e25557600080fd5b505af11580156200e26a573d6000803e3d6000fd5b50506036546060808601516040805192830181526020808901516001600160a01b03908116855289511515918501919091528189015184830152905163ded0623160e01b81529316945063ded0623193506200e2ce928992899291600401620124d0565b6020604051808303816000875af11580156200e2ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b7d4919062012079565b60006000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e36457600080fd5b505af11580156200e379573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03871660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200e3ce57600080fd5b505af11580156200e3e3573d6000803e3d6000fd5b505060365460408051630161b2cb60e71b8152905173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee94506001600160a01b03909216925063b0d96580916004808301926102609291908290030181865afa1580156200e448573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e46e9190620122b4565b516001600160a01b03161480156200e484575081515b156200e54b57603654606080840151608085015160a086015160c08701516040805195860181526020808a01516001600160a01b0390811688528a51151591880191909152818a0151878301529051634c2ac1d960e01b8152961695634c2ac1d9956200e4fd948b9490939092909190600401620131bb565b60206040518083038185885af11580156200e51c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200e543919062012079565b905062000833565b603354606083015160405163140e25ad60e31b81526001600160a01b039092169163a0712d68916200e5839160040190815260200190565b600060405180830381600087803b1580156200e59e57600080fd5b505af11580156200e5b3573d6000803e3d6000fd5b5050603354603654606086015160405163095ea7b360e01b81526001600160a01b03938416955063095ea7b394506200e5f3939092169160040162012551565b6020604051808303816000875af11580156200e613573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e63991906201257b565b50603654608083015160a084015160c0850151604080516060810182526020808901516001600160a01b039081168352895115159183019190915282890151828401529151634c2ac1d960e01b81529190951694634c2ac1d9946200e6a8948a949193909290600401620131bb565b6020604051808303816000875af11580156200e6c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e543919062012079565b6000806000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e73f57600080fd5b505af11580156200e754573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200e7a957600080fd5b505af11580156200e7be573d6000803e3d6000fd5b50506036546060808701516040805192830181526020808a01516001600160a01b0390811685528a51151591850191909152818a01518483015290516332f04d0d60e21b81529316945063cbc1343493506200e82092899290600401620131e8565b60408051808303816000875af11580156200e83f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bc6d9190620124f7565b600080836001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200e8a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e8ce9190620122b4565b90506000846001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200e912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e9389190620123c7565b90506200b7d46040518061018001604052808360000151815260200183602001518152602001836080015181526020018360e001518152602001836101c00151815260200184610140015181526020018360c001518152602001846080015181526020018460a001518152602001846101e00151600001518152602001846101e00151602001518152602001846101e0015160400151815250866001600160a01b031663cf210e656200e9f4896001600160a01b03166200c3e5565b6040518263ffffffff1660e01b81526004016200ea1391815260200190565b602060405180830381865afa1580156200ea31573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ea57919062012079565b866200fdef565b6000806000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200eaaf57600080fd5b505af11580156200eac4573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200eb1957600080fd5b505af11580156200eb2e573d6000803e3d6000fd5b50506036546200eb4a92506001600160a01b031690506200ffb9565b915073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200ebbf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ebe59190620122b4565b516001600160a01b03161480156200ebfb575082515b156200ecbd5760365460608085015160c086015160808701516040805194850181526020808a01516001600160a01b0390811687528a51151591870191909152818a0151868301529051630dbbe80760e41b815295169463dbbe8070946200ec6d938b939092909190600401620124d0565b604080518083038185885af11580156200ec8b573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200ecb29190620124f7565b90925090506200b277565b603354606084015160405163140e25ad60e31b81526001600160a01b039092169163a0712d68916200ecf59160040190815260200190565b600060405180830381600087803b1580156200ed1057600080fd5b505af11580156200ed25573d6000803e3d6000fd5b505060335460365460c087015160405163095ea7b360e01b81526001600160a01b03938416955063095ea7b394506200ed65939092169160040162012551565b6020604051808303816000875af11580156200ed85573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200edab91906201257b565b5060365460c08401516080850151604080516060810182526020808901516001600160a01b039081168352895115159183019190915282890151828401529151630dbbe80760e41b8152919094169363dbbe8070936200ee14938a9391929091600401620124d0565b60408051808303816000875af11580156200ee33573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ee599190620124f7565b60335460608601519294509092506001600160a01b0316906342966c68906200ee84908490620121fe565b6040518263ffffffff1660e01b81526004016200eea391815260200190565b600060405180830381600087803b1580156200eebe57600080fd5b505af11580156200eed3573d6000803e3d6000fd5b50505050935093915050565b60006000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200ef2f57600080fd5b505af11580156200ef44573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200ef9957600080fd5b505af11580156200efae573d6000803e3d6000fd5b50506036546060808601516040805192830181526020808901516001600160a01b0390811685528951151591850191909152818901518483015290516329b23fc160e01b8152931694506329b23fc193506200e2ce928992899291600401620124d0565b6000620008306200f02485856200fb50565b83906b033b2e3c9fd0803ce80000006200c738565b6000806000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200f08a57600080fd5b505af11580156200f09f573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200f0f457600080fd5b505af11580156200f109573d6000803e3d6000fd5b50506036546060808701516040805192830181526020808a01516001600160a01b0390811685528a51151591850191909152818a015184830152905163074a6de960e01b81529316945063074a6de993506200e82092899290600401620131e8565b6200f19360405180604001604052806005815260200164616c69636560d81b8152506200330e565b601e60016101000a8154816001600160a01b0302191690836001600160a01b031602179055506200f1df604051806040016040528060038152602001623137b160e91b8152506200330e565b601f80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526563656c696e6560d01b60208201526200f227906200330e565b602060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200f273604051806040016040528060038152602001623230b760e91b8152506200330e565b602180546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600381526265766560e81b60208201526200f2b8906200330e565b602280546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260088152673232b83637bcb2b960c11b60208201526200f302906200330e565b602480546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526536b4b73a32b960d11b60208201526200f34a906200330e565b602380546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b3332b2a1b7b63632b1ba37b960a11b60208201526200f398906200330e565b602580546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600e81526d39bbb2b2b821b7b63632b1ba37b960911b60208201526200f3e8906200330e565b602680546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600a815269676f7665726e616e636560b01b60208201526200f434906200330e565b602780546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260068152653830bab9b2b960d11b60208201526200f47c906200330e565b602880546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260098152683932b3b4b9ba3930b960b91b60208201526200f4c7906200330e565b602980546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b726577617264536f7572636560a01b60208201526200f515906200330e565b602a80546001600160a01b0319166001600160a01b039290921691909117905542602b55565b6200f545620118c9565b60006200f55384846201003d565b80516001600160a01b0390811684526020808301518216908501526040808301518216908501526060808301519085015260808083015160a08087019190915283015160c08087019190915283015160e08087019190915283015161010080870191909152830151610120808701919091528301516101408087019190915283015182166101608087019190915283015182166101808087019190915283015182166101a0808701919091528301519091166101c080860191909152909101516101e0840152670de0b6b3a7640000908301525092915050565b6000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200f67b57600080fd5b505af11580156200f690573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03851660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200f6e557600080fd5b505af11580156200f6fa573d6000803e3d6000fd5b50506037546040518493506001600160a01b0390911691506200f71d90620119b1565b6200f72a92919062013209565b604051809103906000f0801580156200f747573d6000803e3d6000fd5b50603680546001600160a01b0319166001600160a01b0392831617905560375461016083015160405163dd2b8fbb60e01b8152908316600482015291169063dd2b8fbb90602401600060405180830381600087803b1580156200f7a957600080fd5b505af11580156200f7be573d6000803e3d6000fd5b5050603754610180840151604051631a586b9d60e31b81526001600160a01b0391821660048201529116925063d2c35ce89150602401600060405180830381600087803b1580156200f80f57600080fd5b505af11580156200f824573d6000803e3d6000fd5b50506037546101808401516040516308627a4f60e41b81526001600160a01b03918216600482015291169250638627a4f09150602401600060405180830381600087803b1580156200f87557600080fd5b505af11580156200f88a573d6000803e3d6000fd5b50506037546101c0840151604051630f8b480560e21b81526001600160a01b03918216600482015291169250633e2d20149150602401600060405180830381600087803b1580156200f8db57600080fd5b505af11580156200f8f0573d6000803e3d6000fd5b505050506000805160206205248983398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200f94257600080fd5b505af11580156200f957573d6000803e3d6000fd5b50506029546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206205246983398151915292506306447d569150602401600060405180830381600087803b1580156200f9b057600080fd5b505af11580156200f9c5573d6000803e3d6000fd5b5060009250600191506200f9d69050565b6040519080825280602002602001820160405280156200fa00578160200160208202803683370190505b5060408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060365485519293506001600160a01b0316918591506000906200fa6d576200fa6d620126f1565b60200260200101906001600160a01b031690816001600160a01b0316815250506001826000815181106200faa5576200faa5620126f1565b60200260200101906001600160801b031690816001600160801b0316815250506000816000815181106200fadd576200fadd620126f1565b6001600160a01b039283166020918202929092010152603454604051630ff9856960e11b8152911690631ff30ad2906200fb209086908690869060040162013338565b600060405180830381600087803b1580156200fb3b57600080fd5b505af1158015620014fb573d6000803e3d6000fd5b60405163d15e005360e01b81526001600160a01b0383811660048301526000919083169063d15e005390602401602060405180830381865afa1580156200fb9b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a205919062012079565b60008060006200fbda866000015187602001516201018a565b905060006200fbf88288604001518960e001518a60a00151620101ae565b90506000806200fc0a898585620101c9565b909250905060006200fc208a8a85858862010460565b91505080156200fc39575090945092506200b277915050565b506200fc4889838a86620105bc565b95506200fc588987868662010674565b94506000806200fc6c8b8b8a8a8962010460565b91509150806200fcd95760405162461bcd60e51b815260206004820152603160248201527f496e697469616c20677565737320696e206063616c63756c6174654d61784c6f6044820152703733b01034b99034b739b7b63b32b73a1760791b60648201526084016200b10c565b60005b898110156200fde0578489106200fd525760405162461bcd60e51b815260206004820152603360248201527f52656163686564206162736f6c757465206d617820626f6e6420616d6f756e746044820152721034b7103033b2ba2fb6b0bc2fb637b733b01760691b60648201526084016200b10c565b60006200fd628d8b8a8a620106cf565b93509050826200fd7357506200fde0565b60006200fd8185836200c684565b6200fd8d908c62012485565b905060006200fd9f8f838c8c62010674565b90506200fdb08f8f84848d62010460565b909650945084156200fdc857819b50809a506200fdd1565b5050506200fde0565b5050508060010190506200fcdc565b50505050505050935093915050565b6040805160608101825260008082526020820181905291810182905260006200fe21866000015187602001516201018a565b905060006200fe3f8288604001518960e001518a60a00151620101ae565b905060006200fe4f888462010777565b90506200fe60888285858b620108bc565b15801560408701529085526200fe7c5793506200083392505050565b60006200fe8b89848a62010a3f565b90506200fe9c898286868c620108bc565b1515604087018190529086526200ff105760405162461bcd60e51b815260206004820152603160248201527f496e697469616c20677565737320696e206063616c63756c6174654d617853686044820152701bdc9d18081a5cc81a5b9cdbdb1d995b9d607a1b60648201526084016200b10c565b60005b878110156200ffac576200ff2a8a83868862010b31565b158015604089015260208801919091526200ffac57602086015186516000916200ff5591906200c684565b6200ff61908462012485565b9050838111156200ff7357506200ffac565b6200ff828b8288888e620108bc565b15801560408a01529088526200ff9b578092506200ffa2565b506200ffac565b506001016200ff13565b5098975050505050505050565b6000816001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200fffb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620100219190620122b4565b610100015162010031836200c3e5565b6200a208919062012485565b62010047620119c0565b6040805160808101825260008082526020808301829052828401829052606080840183905284516101e0810186526033546001600160a01b039081168252818401949094526032546101009004909316838601819052855163d13053bb60e01b815295519495939491850193909263d13053bb926004808401938290030181865afa158015620100db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062010101919062012079565b8152602001670de0b6b3a7640000815260200166038d7ea4c680008152602001671bc16d674ec8000081526020018481526020016201518081526020016201014a868662010bc7565b81526027546001600160a01b039081166020830152602554811660408301526026548116606083015260355416608082015260a001919091529392505050565b60008062010199848462010c7c565b9092509050806200d8c3576200d8c362010cbe565b60006200b7d482620101c28588886200c738565b9062010cd7565b600080600080620102038688604001518960a00151670de0b6b3a7640000620101f39190620121fe565b8a60c001518b60e0015162010d4a565b90506201025d876101400151670de0b6b3a7640000620102249190620121fe565b62010256670de0b6b3a76400006201023d818a62010d82565b620102499190620121fe565b6101208b01519062010d99565b9062010d99565b915062010299876101400151670de0b6b3a76400006201027e9190620121fe565b6201029284670de0b6b3a764000062012485565b9062010d82565b60a0880151909250620102c790620102bf9062005f7181670de0b6b3a7640000620121fe565b839062010cd7565b9150620102e68760e001518860c0015162010d8290919063ffffffff16565b620102f2908362012485565b91506201030081836200c684565b915062010334620102bf8860a00151670de0b6b3a7640000620103249190620121fe565b670de0b6b3a7640000906200c684565b9150506000620103528760e00151836200c68490919063ffffffff16565b9050600080620103a8896101400151670de0b6b3a7640000620103769190620121fe565b6200729a670de0b6b3a76400006201038f818c6200c684565b6201039b9190620121fe565b6101208d0151906200b7dd565b905062010407846200729a620103d48c60a00151670de0b6b3a764000062010d8290919063ffffffff16565b620101c28d6101400151670de0b6b3a7640000620103f39190620121fe565b62005f7187670de0b6b3a764000062012485565b915050620104218860c0015188846200729a9190620121fe565b94506201043585878a610120015162010db0565b818960400151620104479190620121fe565b620104539190620121fe565b9350505050935093915050565b60008060006201047d86858a61012001518b610160015162010de4565b905060006201049a8960c00151836200c68490919063ffffffff16565b60c08a0151620104ac9089906200c684565b8a51620104ba919062012485565b620104c69190620121fe565b90506000868a60800151620104dc919062012485565b90506000620104ec8a8262010dfd565b620104f79062012ed8565b90508a6101000151620105188c60c00151846200c68490919063ffffffff16565b62010524919062012485565b60c08c0151620105369083906200c684565b62010542908562012485565b10620105a6576101008b015160c08c0151620105609084906200c684565b60c08d0151620105729084906200c684565b6201057e908662012485565b6201058a9190620121fe565b620105969190620121fe565b60019550955050505050620105b2565b60008095509550505050505b9550959350505050565b600080620105cd8685858662010e0e565b905060006201061c670b1a2bc2ec5000006200729a620106108a60a00151670de0b6b3a7640000620106009190620121fe565b670de0b6b3a76400009062010d82565b620101c2868b6200c684565b9050600062010634670de0b6b3a7640000836200b7dd565b6201064c6200c82f84670de0b6b3a7640000620121fe565b62010658919062012485565b9050620106688887878462010e0e565b98975050505050505050565b600080620106af8487604001516201069a8960c00151896200c68490919063ffffffff16565b8960a001518a60c001518b60e0015162010f3f565b9050620106c3858488610120015162010db0565b6200b14e9082620121fe565b600080620106e08686868662010f64565b909250905080620106f557600091506201076e565b620107246201070d84670de0b6b3a7640000620121fe565b6101208801516101608901516200729a916200b7dd565b62010730908362012485565b915062010746670de0b6b3a764000083620121fe565b91506201076b670de0b6b3a76400008760c00151846200c7389092919063ffffffff16565b91505b94509492505050565b6000806201079460008560200151620110d790919063ffffffff16565b846101000151620107a6919062012485565b90506000620107de8486604001518760a00151670de0b6b3a7640000620107ce9190620121fe565b8860c001518960e0015162010d4a565b9050600062010836620108248760a00151670de0b6b3a7640000620108049190620121fe565b620101c262010818878b602001516201018a565b60e08b01519062010d99565b60e088015160c08901519190620110ef565b620108429083620121fe565b9050670de0b6b3a7640000811062010886576201087e620108768760a00151670de0b6b3a7640000620103249190620121fe565b829062010cd7565b9050620108ab565b620108a8620108768760a00151670de0b6b3a7640000620106009190620121fe565b90505b60408601516200b14e9082620121fe565b600080600080620108f7878a604001518a8c60a00151670de0b6b3a7640000620108e79190620121fe565b8d60c001518e60e0015162011116565b91509150806201091057600080935093505050620105b2565b6000620109518a60c00151620109338b8a8e61012001518f6101600151620111ee565b620109458c8b8f6101200151620111fd565b620102929190620121fe565b9050808310156201096c5760008094509450505050620105b2565b60006201097a8285620121fe565b9050808b6000015110156201099a576000809550955050505050620105b2565b8a51600090620109ac908390620121fe565b90506000620109e08d60c00151620109cf60008c620110d790919063ffffffff16565b8f6080015162005f719190620121fe565b90508c610100015181620109f5919062012485565b821062010a2c576101008d015162010a0e8284620121fe565b62010a1a9190620121fe565b600197509750505050505050620105b2565b60008097509750505050505050620105b2565b600080839050600062010ab786610100015162010a6e8860c0015189608001516200c68490919063ffffffff16565b60c089015162010a859062005f71896000620110d7565b895162010a93919062012485565b62010a9f9190620121fe565b62010aab9190620121fe565b60c0880151906200b7dd565b90506200b14e62010aec62010ad587670de0b6b3a7640000620121fe565b6101208901516101608a01516200729a916200b7dd565b62010b1162010b0488670de0b6b3a7640000620121fe565b6101208a0151906200b7dd565b62010b1d9085620121fe565b62010b29919062012485565b82906200c684565b600080600062010b438787866201121c565b9050600062010b948860c0015162005f718a6101600151670de0b6b3a764000062010b6f9190620121fe565b6200729a62010b878b670de0b6b3a7640000620121fe565b6101208e0151906200b7dd565b905080821062010bb85762010baa8183620121fe565b60019350935050506201076e565b6000809350935050506201076e565b60008062010bfe62010bee62010bdf866064620121b7565b66a5bbed86c5a000906200b7dd565b6748cd4072281e0000906200c684565b905062010c14670de0b6b3a7640000826200c684565b905062010c74816200729a62010c4762010c4162010c3b89670de0b6b3a764000062012485565b6201130b565b62011336565b62005f7162010c4162010c608a8a6301e133806200c738565b62010c3b90670de0b6b3a764000062012485565b949350505050565b60008060008362010c8d866201130b565b62010c99919062012e4a565b9050600081121562010cb35760008092509250506200bcb2565b946001945092505050565b60405163bb55fd2760e01b815260040160405180910390fd5b60008160000362010cf25750670de0b6b3a76400006200a208565b8260000362010d04575060006200a208565b600062010d11836201130b565b9050600062010d2462010c41866201130b565b905081810262010d3d670de0b6b3a764000082620133a5565b90506200b14e816201155e565b600062010d58858562010cd7565b62010d7662010d6d86620101c2868b6200b7dd565b8590856200c738565b6200b14e919062012485565b60006200a20583670de0b6b3a764000084620110ef565b60006200a2058383670de0b6b3a7640000620110ef565b6000620008308462010256670de0b6b3a764000062010dd0818862010d82565b62010ddc9190620121fe565b859062010d99565b60006200b7d4846200729a846200729a89898962010db0565b60008183136200a20357826200a205565b60008062010e1d858262010dfd565b62010e289062012ed8565b9050600062010ea18760c00151671bc16d674ec8000089610100015162010e618b60c001518c608001516200c68490919063ffffffff16565b60c08c015162010e739088906200c684565b8c5162010e81919062012485565b62010e8d9190620121fe565b62010e999190620121fe565b91906200c738565b905062010f3462010ecc670de0b6b3a764000062010ec081896200c684565b62010b049190620121fe565b670de0b6b3a764000062010efc62010ee58983620121fe565b6101208c01516101608d01516200729a916200b7dd565b62010f10670de0b6b3a7640000896200c684565b62010f1c919062012485565b62010f289190620121fe565b62010b299190620121fe565b979650505050505050565b600062010f3487878762010f5c88670de0b6b3a7640000620121fe565b8787620116f7565b600080600062010f828760c00151876200c68490919063ffffffff16565b9050600062010fa262010f96838862012485565b60e08a0151906200b7dd565b9050600062010fda878a604001518b60a00151670de0b6b3a764000062010fca9190620121fe565b8c60c001518d60e0015162010d4a565b905062010ff9620103248a60a001518462010cd790919063ffffffff16565b945060006201102c6201101a8b60a001518562010cd790919063ffffffff16565b60e08c015160c08d015191906200c738565b905080821015620110485760008095509550505050506201076e565b620110866200c82f6201107a8c60a00151670de0b6b3a76400006201106e9190620121fe565b60a08e01519062010d82565b620101c28486620121fe565b9550620110ba670de0b6b3a7640000620110a1818a6200c684565b620110ad9190620121fe565b6101208c0151906200b7dd565b620110c69087620121fe565b9a60019a5098505050505050505050565b6000818313620110e857816200a205565b5090919050565b60008260001904841183021582026201110757600080fd5b50910281810615159190040190565b60008060006201112a89898888886201172a565b90506201113d86620101c2898b62012485565b97508781101562011156576000809250925050620111e3565b87810362011166818688620110ef565b9050670de0b6b3a7640000811062011198576201119062010876670de0b6b3a76400008962010d82565b9050620111b3565b620111b062010876670de0b6b3a7640000896200c684565b90505b620111bf818662010d82565b9050808a1015620111d957600080935093505050620111e3565b8903925060019150505b965096945050505050565b60006200b7d4826200729a8787875b600062000830846201025662010ddc86670de0b6b3a7640000620121fe565b600080620112438386604001518760a00151670de0b6b3a7640000620107ce9190620121fe565b9050600062011276620103246201126a8860a00151888a60400151620101c2919062012485565b60c08901519062010d99565b90506000620112fd620112a88860a00151670de0b6b3a76400006201129c9190620121fe565b60a08a01519062010d82565b620101c2620112dc8a60a00151670de0b6b3a7640000620112ca9190620121fe565b8a8c60400151620101c2919062012485565b620112e89087620121fe565b60c08b015160e08c01516200729a916200c684565b905062010f3482826200b7dd565b60006001600160ff1b038211156200c8955760405163396ea70160e11b815260040160405180910390fd5b6000808213620113595760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c6001600160401b031060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190620113dd9084901c6201130b565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136201157a57506000919050565b680755bf798b4a1bf1e58212620115a4576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906200b14e74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6201130b565b6000806201170a88888888888862011756565b9092509050806201171f576201171f62010cbe565b509695505050505050565b600062011738858562010cd7565b62010d766201174d86620101c2868b62010d99565b859085620110ef565b60008060006201176a89898888886201172a565b90506201178186620101c26200c82f8a8d62012485565b985062011790858a866200c738565b985088811015620117a9576000809250925050620111e3565b888103670de0b6b3a76400008110620117dc57620117d462010876670de0b6b3a76400008962010d82565b9050620117f7565b620117f462010876670de0b6b3a7640000896200c684565b90505b808910156201180f57600080935093505050620111e3565b90970398600198509650505050505050565b61203580620133da83390190565b6118f4806201540f83390190565b6129638062016d0383390190565b610549806201966683390190565b61412c8062019baf83390190565b612297806201dcdb83390190565b614d05806201ff7283390190565b614cf28062024c7783390190565b615152806202996983390190565b6150f8806202eabb83390190565b6140f78062033bb383390190565b612cea8062037caa83390190565b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001620119ac6040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b62017ad5806203a99483390190565b604051806101e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001620119ac6040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b03811681146200176357600080fd5b60008060006060848603121562011ac857600080fd5b833562011ad58162011a9c565b9250602084013562011ae78162011a9c565b9150604084013562011af98162011a9c565b809150509250925092565b60008151808452602080850194506020840160005b8381101562011b405781516001600160a01b03168752958201959082019060010162011b19565b509495945050505050565b6020815260006200a205602083018462011b04565b6000806040838503121562011b7457600080fd5b50508035926020909101359150565b60005b8381101562011ba057818101518382015260200162011b86565b50506000910152565b6000815180845262011bc381602086016020860162011b83565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101562011c8d57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101562011c7657605f1989850301835262011c6384865162011ba9565b948e01949350918d019160010162011c44565b505050978a01979450509188019160010162011bfe565b50919a9950505050505050505050565b60006020828403121562011cb057600080fd5b5035919050565b6000806000806080858703121562011cce57600080fd5b843562011cdb8162011a9c565b9350602085013562011ced8162011a9c565b925060408501359150606085013562011d068162011a9c565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b038111828210171562011d4d5762011d4d62011d11565b60405290565b6040516101e081016001600160401b038111828210171562011d4d5762011d4d62011d11565b604051606081016001600160401b038111828210171562011d4d5762011d4d62011d11565b604051601f8201601f191681016001600160401b038111828210171562011dc95762011dc962011d11565b604052919050565b60006001600160401b0382111562011ded5762011ded62011d11565b50601f01601f191660200190565b60006020828403121562011e0e57600080fd5b81356001600160401b0381111562011e2557600080fd5b8201601f8101841362011e3757600080fd5b803562011e4e62011e488262011dd1565b62011d9e565b81815285602083850101111562011e6457600080fd5b81602084016020830137600091810160200191909152949350505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b8481101562011f2c57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101562011f165783516001600160e01b0319168252928b019260019290920191908b019062011eea565b50978a0197955050509187019160010162011eac565b50919998505050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101562011f9657603f1988860301845262011f8385835162011ba9565b9450928501929085019060010162011f64565b5092979650505050505050565b600181811c9082168062011fb857607f821691505b60208210810362011fd957634e487b7160e01b600052602260045260246000fd5b50919050565b6000815462011fee8162011fa3565b8085526020600183811680156201200e5760018114620120295762012059565b60ff1985168884015283151560051b88018301955062012059565b866000528260002060005b85811015620120515781548a820186015290830190840162012034565b890184019650505b505050505092915050565b6020815260006200a205602083018462011fdf565b6000602082840312156201208c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620120ea578160001904821115620120ce57620120ce62012093565b80851615620120dc57918102915b93841c9390800290620120ae565b509250929050565b60008262012103575060016200a208565b8162012112575060006200a208565b81600181146201212b5760028114620121365762012156565b60019150506200a208565b60ff8411156201214a576201214a62012093565b50506001821b6200a208565b5060208310610133831016604e8410600b84101617156201217b575081810a6200a208565b620121878383620120a9565b80600019048211156201219e576201219e62012093565b029392505050565b60006200a20560ff841683620120f2565b80820281158282048414176200a208576200a20862012093565b634e487b7160e01b600052601260045260246000fd5b600082620121f957620121f9620121d1565b500490565b818103818111156200a208576200a20862012093565b6000602082840312156201222757600080fd5b815160ff811681146200083357600080fd5b8051620122468162011a9c565b919050565b6000608082840312156201225e57600080fd5b604051608081018181106001600160401b038211171562012283576201228362011d11565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006102608284031215620122c857600080fd5b620122d262011d27565b620122dd8362012239565b8152620122ed6020840162012239565b6020820152620123006040840162012239565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101606201236b81850162012239565b908201526101806201237f84820162012239565b908201526101a06201239384820162012239565b908201526101c0620123a784820162012239565b908201526101e0620123bc858583016201224b565b908201529392505050565b60006101e08284031215620123db57600080fd5b620123e562011d53565b825181526020808401519082015260408084015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c0928301519281019290925250919050565b808201808211156200a208576200a20862012093565b60018060a01b038151168252602081015115156020830152600060408201516060604085015262010c74606085018262011ba9565b8481528360208201528260408201526080606082015260006200b14e60808301846201249b565b600080604083850312156201250b57600080fd5b505080516020909101519092909150565b6001600160e01b031991909116815260200190565b6000602082840312156201254457600080fd5b8151620008338162011a9c565b6001600160a01b03929092168252602082015260400190565b805180151581146201224657600080fd5b6000602082840312156201258e57600080fd5b6200a205826201256a565b6020815260006200a205602083018462011ba9565b6001600160a01b0383168152604060208201819052600090620008309083018462011ba9565b600082601f830112620125e657600080fd5b8151620125f762011e488262011dd1565b8181528460208386010111156201260d57600080fd5b62010c7482602083016020870162011b83565b6000602082840312156201263357600080fd5b81516001600160401b038111156201264a57600080fd5b62010c7484828501620125d4565b6000808354620126688162011fa3565b600182811680156201268357600181146201269957620126ca565b60ff1984168752821515830287019450620126ca565b8760005260208060002060005b85811015620126c15781548a820152908401908201620126a6565b50505082870194505b5050722232b83637bcb2b921b7b7b93234b730ba37b960691b835250506013019392505050565b634e487b7160e01b600052603260045260246000fd5b6201272b826201271e83546001600160a01b031690565b6001600160a01b03169052565b60018101546001600160a01b0390811660208401526002820154811660408401526003820154606084015260048201546080840152600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a8201548116610140840152600b8201548116610160840152600c8201548116610180840152600d820154166101a0830152600e8101546101c0830152600f8101546101e083015260108101546102008301526011015461022090910152565b8881526001600160a01b038816602082015260006103206201281b604084018a62012707565b80610280840152620128308184018962011ba9565b915050856102a0830152846102c0830152836102e0830152826103008301529998505050505050505050565b8a81526001600160a01b038a16602082015261036060408201819052600090620128898382018c62011fdf565b90506201289a606084018b62012707565b8281036102a0840152620128af818a62011ba9565b9050876102c0840152866102e084015285610300840152828103610320840152620128db81866201249b565b915050826103408301529b9a5050505050505050505050565b60006001600160401b0382111562012910576201291062011d11565b5060051b60200190565b600060208083850312156201292e57600080fd5b82516001600160401b03808211156201294657600080fd5b818501915085601f8301126201295b57600080fd5b81516201296c62011e4882620128f4565b81815260059190911b830184019084810190888311156201298c57600080fd5b8585015b838110156200ffac57805185811115620129a957600080fd5b86016060818c03601f19011215620129c057600080fd5b620129ca62011d79565b8882015187811115620129dc57600080fd5b8201603f81018d13620129ee57600080fd5b8981015162012a0162011e4882620128f4565b81815260059190911b8201604001908b8101908f83111562012a2257600080fd5b6040840193505b8284101562012a445783518252928c0192908c019062012a29565b845250505060408201518781111562012a5c57600080fd5b62012a6c8d8b83860101620125d4565b8a8301525062012a7f6060830162012239565b604082015284525091860191860162012990565b6000806000808486036102a081121562012aac57600080fd5b855162012ab98162011a9c565b60208701519095506001600160401b038082111562012ad757600080fd5b62012ae589838a01620125d4565b9550610240603f198401121562012afb57600080fd5b62012b0562011d53565b925062012b156040890162012239565b835262012b256060890162012239565b602084015262012b386080890162012239565b604084015260a0880151606084015260c0880151608084015260e088015160a084015261010091508188015160c08401526101208089015160e0850152610140808a0151848601526101609350838a015182860152610180915062012b9f828b0162012239565b908501526101a062012bb38a820162012239565b848601526101c0935062012bc9848b0162012239565b8286015262012bdc6101e08b0162012239565b908501525062012bf1896102008a016201224b565b838301526102808801519294508083111562012c0c57600080fd5b505062012c1c87828801620125d4565b91505092959194509250565b600080600080600060a0868803121562012c4157600080fd5b85519450602086015193506040860151925062012c61606087016201256a565b9150608086015190509295509295909350565b60008262012c865762012c86620121d1565b500690565b60006020828403121562012c9e57600080fd5b604051602081018181106001600160401b038211171562012cc35762012cc362011d11565b6040529151825250919050565b80516001600160801b03811681146201224657600080fd5b805164ffffffffff811681146201224657600080fd5b805161ffff811681146201224657600080fd5b60006101e0828403121562012d2557600080fd5b62012d2f62011d53565b62012d3b848462012c8b565b815262012d4b6020840162012cd0565b602082015262012d5e6040840162012cd0565b604082015262012d716060840162012cd0565b606082015262012d846080840162012cd0565b608082015262012d9760a0840162012cd0565b60a082015262012daa60c0840162012ce8565b60c082015262012dbd60e0840162012cfe565b60e082015261010062012dd281850162012239565b9082015261012062012de684820162012239565b9082015261014062012dfa84820162012239565b9082015261016062012e0e84820162012239565b9082015261018062012e2284820162012cd0565b908201526101a062012e3684820162012cd0565b908201526101c0620123bc84820162012cd0565b81810360008312801583831316838312821617156200d8c3576200d8c362012093565b808201828112600083128015821682158216171562012e905762012e9062012093565b505092915050565b60008262012eaa5762012eaa620121d1565b500790565b60408152600062012ec4604083018562011ba9565b82810360208401526200b7d4818562011ba9565b6000600160ff1b820162012ef05762012ef062012093565b5060000390565b6001600160a01b038681168252858116602083015284811660408301528316606082015260a06080820181905260009062010f349083018462011b04565b6040815262012f506040820183516001600160a01b03169052565b6000602083015162012f6d60608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161038060a0840181905262012fa06103c085018362011b04565b9150608085015162012fbd60c08601826001600160a01b03169052565b5060a08501516001600160a01b03811660e08601525060c085015161010062012ff0818701836001600160a01b03169052565b60e087015161012087810191909152908701516101408088019190915290870151610160808801919091529087015161018080880191909152908701516101a080880191909152908701516101c080880191909152908701516101e080880191909152908701516102008088019190915290870151610220808801919091529087015161024080880191909152908701516102608088019190915290870151915061028090620130c382880184805182526020810151602083015260408101516040830152606081015160608301525050565b87015180516103008801526020808201516103208901526040808301516103408a0152606090920151610360890152918801516001600160a01b0316938701939093526102a08701516103a087015285840381870152601184527048797065726472697665466163746f727960781b9084015250810162010c74565b6000610100808352620131558184018c62011ba9565b6001600160a01b039a8b166020850152988a16604084015250509487166060860152928616608085015290851660a0840152841660c083015290921660e090920191909152919050565b600060018201620131b457620131b462012093565b5060010190565b85815284602082015283604082015282606082015260a06080820152600062010f3460a08301846201249b565b8381528260208201526060604082015260006200b7d460608301846201249b565b82516001600160a01b03168152610280810160208401516201323660208401826001600160a01b03169052565b5060408401516201325260408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e083015261010080850151818401525061012080850151818401525061014080850151818401525061016080850151620132c5828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0808601518051918501919091526020810151610200850152604081015161022085015260600151610240840152831661026083015262000833565b6060815260006201334d606083018662011b04565b82810360208481019190915285518083528682019282019060005b818110156201338f5784516001600160801b03168352938301939183019160010162013368565b5050848103604086015262010668818762011b04565b600082620133b757620133b7620121d1565b600160ff1b821460001984141615620133d457620133d462012093565b50059056fe6101006040523480156200001257600080fd5b506040516200203538038062002035833981016040819052620000359162000298565b8230818189898960006200004a8482620003e8565b506001620000598382620003e8565b5060ff81166080524660a0526200006f6200011e565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505090151560e052600c55506200053292505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001529190620004b4565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001e257600080fd5b81516001600160401b0380821115620001ff57620001ff620001ba565b604051601f8301601f19908116603f011681019082821181831017156200022a576200022a620001ba565b81604052838152602092508660208588010111156200024857600080fd5b600091505b838210156200026c57858201830151818301840152908201906200024d565b6000602085830101528094505050505092915050565b805180151581146200029357600080fd5b919050565b60008060008060008060c08789031215620002b257600080fd5b86516001600160401b0380821115620002ca57600080fd5b620002d88a838b01620001d0565b97506020890151915080821115620002ef57600080fd5b50620002fe89828a01620001d0565b955050604087015160ff811681146200031657600080fd5b60608801519094506001600160a01b03811681146200033457600080fd5b9250620003446080880162000282565b915060a087015190509295509295509295565b600181811c908216806200036c57607f821691505b6020821081036200038d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e3576000816000526020600020601f850160051c81016020861015620003be5750805b601f850160051c820191505b81811015620003df57828155600101620003ca565b5050505b505050565b81516001600160401b03811115620004045762000404620001ba565b6200041c8162000415845462000357565b8462000393565b602080601f8311600181146200045457600084156200043b5750858301515b600019600386901b1c1916600185901b178555620003df565b600085815260208120601f198616915b82811015620004855788860151825594840194600190910190840162000464565b5085821015620004a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620004c48162000357565b60018281168015620004df5760018114620004f55762000526565b60ff198416875282151583028701945062000526565b8760005260208060002060005b858110156200051d5781548a82015290840190820162000502565b50505082870194505b50929695505050505050565b60805160a05160c05160e051611a9f62000596600039600081816103d4015281816105e701528181610701015281816109e001528181610a7f01528181610dbe0152610e20015260006109bc01526000610987015260006103140152611a9f6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80637a8c63b511610125578063b7009613116100ad578063dd62ed3e1161007c578063dd62ed3e1461051a578063e688747b14610545578063ea7ca2761461057b578063ed0d0efb146105b2578063f2fde38b146105d257600080fd5b8063b7009613146104b8578063bf7e214f146104cb578063c53a3985146104de578063d505accf1461050757600080fd5b806395d89b41116100f457806395d89b41146104545780639dc29fac1461045c578063a0712d681461046f578063a9059cbb14610482578063aed307771461049557600080fd5b80637a8c63b5146103cf5780637a9e5e4b146103f65780637ecebe00146104095780638da5cb5b1461042957600080fd5b806323b872dd116101a857806342966c681161017757806342966c68146103635780634b5159da1461037657806367aff4841461038957806370a082311461039c578063728b952b146103bc57600080fd5b806323b872dd146102fc578063313ce5671461030f5780633644e5151461034857806340c10f191461035057600080fd5b8063095ea7b3116101ef578063095ea7b3146102915780630bade8a4146102b45780630ea9b75b146102d757806318160ddd146102ea578063239c70ae146102f357600080fd5b806305f05a941461022157806306a36aee1461023657806306fdde0314610269578063088a4ed01461027e575b600080fd5b61023461022f366004611502565b6105e5565b005b61025661024436600461153b565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b610271610671565b6040516102609190611558565b61023461028c3660046115a7565b6106ff565b6102a461029f3660046115c0565b61075c565b6040519015158152602001610260565b6102a46102c2366004611609565b600a6020526000908152604090205460ff1681565b6102346102e5366004611635565b6107c9565b61025660025481565b610256600c5481565b6102a461030a36600461167c565b6108a1565b6103367f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610260565b610256610983565b61023461035e3660046115c0565b6109de565b6102346103713660046115a7565b610a7d565b6102346103843660046116bd565b610ae2565b6102346103973660046116d9565b610b74565b6102566103aa36600461153b565b60036020526000908152604090205481565b6102346103ca366004611707565b610c3c565b6102a47f000000000000000000000000000000000000000000000000000000000000000081565b61023461040436600461153b565b610cc5565b61025661041736600461153b565b60056020526000908152604090205481565b60065461043c906001600160a01b031681565b6040516001600160a01b039091168152602001610260565b610271610daf565b61023461046a3660046115c0565b610dbc565b61023461047d3660046115a7565b610e1e565b6102a46104903660046115c0565b610eb9565b6102a46104a336600461153b565b600d6020526000908152604090205460ff1681565b6102a46104c6366004611735565b610f1f565b60075461043c906001600160a01b031681565b61043c6104ec36600461153b565b6008602052600090815260409020546001600160a01b031681565b61023461051536600461177c565b61101d565b610256610528366004611707565b600460209081526000928352604080842090915290825290205481565b6102a46105533660046117ea565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b6102a461058936600461181d565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b6102566105c0366004611609565b600b6020526000908152604090205481565b6102346105e036600461153b565b611261565b7f00000000000000000000000000000000000000000000000000000000000000001561064657610621336000356001600160e01b0319166112df565b6106465760405162461bcd60e51b815260040161063d90611849565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6000805461067e90611880565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa90611880565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b7f0000000000000000000000000000000000000000000000000000000000000000156107575761073b336000356001600160e01b0319166112df565b6107575760405162461bcd60e51b815260040161063d90611849565b600c55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107b79086815260200190565b60405180910390a35060015b92915050565b6107df336000356001600160e01b0319166112df565b6107fb5760405162461bcd60e51b815260040161063d906118ba565b801561082b576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610852565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610894911515815260200190565b60405180910390a3505050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146108fd576108d883826118f6565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906109259084906118f6565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020611a4a8339815191529061096e9087815260200190565b60405180910390a360019150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146109b9576109b4611389565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610a3657610a1a336000356001600160e01b0319166112df565b610a365760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610a6f57600c54811115610a6f5760405162461bcd60e51b815260040161063d90611909565b610a798282611423565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610ad557610ab9336000356001600160e01b0319166112df565b610ad55760405162461bcd60e51b815260040161063d90611849565b610adf338261147d565b50565b610af8336000356001600160e01b0319166112df565b610b145760405162461bcd60e51b815260040161063d906118ba565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610b8a336000356001600160e01b0319166112df565b610ba65760405162461bcd60e51b815260040161063d906118ba565b8015610bd5576001600160a01b03831660009081526009602052604090208054600160ff85161b179055610bfb565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610894911515815260200190565b610c52336000356001600160e01b0319166112df565b610c6e5760405162461bcd60e51b815260040161063d906118ba565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480610d5a575060075460405163b700961360e01b81526001600160a01b039091169063b700961390610d1990339030906001600160e01b0319600035169060040161194b565b602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611978565b610d6357600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b6001805461067e90611880565b7f000000000000000000000000000000000000000000000000000000000000000015610e1457610df8336000356001600160e01b0319166112df565b610e145760405162461bcd60e51b815260040161063d90611849565b610a79828261147d565b7f000000000000000000000000000000000000000000000000000000000000000015610e7657610e5a336000356001600160e01b0319166112df565b610e765760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610eaf57600c54811115610eaf5760405162461bcd60e51b815260040161063d90611909565b610adf3382611423565b33600090815260036020526040812080548391908390610eda9084906118f6565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020611a4a833981519152906107b79086815260200190565b6001600160a01b038083166000908152600860205260408120549091168015610fbb5760405163b700961360e01b81526001600160a01b0382169063b700961390610f729088908890889060040161194b565b602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190611978565b91505061097c565b6001600160e01b031983166000908152600a602052604090205460ff168061101457506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b4284101561106d5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161063d565b60006001611079610983565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611185573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111bb5750876001600160a01b0316816001600160a01b0316145b6111f85760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161063d565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b611277336000356001600160e01b0319166112df565b6112935760405162461bcd60e51b815260040161063d906118ba565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6007546000906001600160a01b03168015801590611369575060405163b700961360e01b81526001600160a01b0382169063b7009613906113289087903090889060040161194b565b602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190611978565b8061138157506006546001600160a01b038581169116145b949350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516113bb9190611995565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b80600260008282546114359190611a36565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020611a4a83398151915291015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906114a59084906118f6565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020611a4a83398151915290602001611471565b6001600160a01b0381168114610adf57600080fd5b8015158114610adf57600080fd5b6000806040838503121561151557600080fd5b8235611520816114df565b91506020830135611530816114f4565b809150509250929050565b60006020828403121561154d57600080fd5b813561097c816114df565b60006020808352835180602085015260005b818110156115865785810183015185820160400152820161156a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156115b957600080fd5b5035919050565b600080604083850312156115d357600080fd5b82356115de816114df565b946020939093013593505050565b80356001600160e01b03198116811461160457600080fd5b919050565b60006020828403121561161b57600080fd5b61097c826115ec565b803560ff8116811461160457600080fd5b60008060006060848603121561164a57600080fd5b61165384611624565b9250611661602085016115ec565b91506040840135611671816114f4565b809150509250925092565b60008060006060848603121561169157600080fd5b833561169c816114df565b925060208401356116ac816114df565b929592945050506040919091013590565b600080604083850312156116d057600080fd5b611520836115ec565b6000806000606084860312156116ee57600080fd5b83356116f9816114df565b925061166160208501611624565b6000806040838503121561171a57600080fd5b8235611725816114df565b91506020830135611530816114df565b60008060006060848603121561174a57600080fd5b8335611755816114df565b92506020840135611765816114df565b9150611773604085016115ec565b90509250925092565b600080600080600080600060e0888a03121561179757600080fd5b87356117a2816114df565b965060208801356117b2816114df565b955060408801359450606088013593506117ce60808901611624565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156117fd57600080fd5b61180683611624565b9150611814602084016115ec565b90509250929050565b6000806040838503121561183057600080fd5b823561183b816114df565b915061181460208401611624565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c9082168061189457607f821691505b6020821081036118b457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107c3576107c36118e0565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561198a57600080fd5b815161097c816114f4565b60008083548160018260011c915060018316806119b357607f831692505b602080841082036119d257634e487b7160e01b86526022600452602486fd5b8180156119e657600181146119fb57611a28565b60ff1986168952841515850289019650611a28565b60008a81526020902060005b86811015611a205781548b820152908501908301611a07565b505084890196505b509498975050505050505050565b808201808211156107c3576107c36118e056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bfa5831106ce09a23ad7aac9a09e02a9809dd79b0e0446958dd2bdec6da95de664736f6c634300081600336080604052600180546001600160a01b0319168117815560025534801561002557600080fd5b506040516118f43803806118f48339810160408190526100449161006d565b600061005082826101c1565b5050610280565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561008057600080fd5b82516001600160401b038082111561009757600080fd5b818501915085601f8301126100ab57600080fd5b8151818111156100bd576100bd610057565b604051601f8201601f19908116603f011681019083821181831017156100e5576100e5610057565b8160405282815288868487010111156100fd57600080fd5b600093505b8284101561011f5784840186015181850187015292850192610102565b600086848301015280965050505050505092915050565b600181811c9082168061014a57607f821691505b60208210810361016a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101bc576000816000526020600020601f850160051c810160208610156101995750805b601f850160051c820191505b818110156101b8578281556001016101a5565b5050505b505050565b81516001600160401b038111156101da576101da610057565b6101ee816101e88454610136565b84610170565b602080601f831160018114610223576000841561020b5750858301515b600019600386901b1c1916600185901b1785556101b8565b600085815260208120601f198616915b8281101561025257888601518255948401946001909101908401610233565b50858210156102705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6116658061028f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80630ecaea731161005b5780630ecaea73146100ff57806354fd4d5014610112578063600eb4ba14610138578063d13053bb1461016e57600080fd5b806304baa00b1461008257806306fdde03146100cc5780630710fd58146100d4575b600080fd5b6100b6604051806040016040528060158152602001744552433230466f72776172646572466163746f727960581b81525081565b6040516100c391906103fe565b60405180910390f35b6100b6610184565b6100e76100e236600461044d565b610212565b6040516001600160a01b0390911681526020016100c3565b6100e761010d36600461044d565b6102e7565b6100b660405180604001604052806007815260200166076312e302e32360cc1b81525081565b61014f6001546002546001600160a01b0390911691565b604080516001600160a01b0390931683526020830191909152016100c3565b6101766103c4565b6040519081526020016100c3565b6000805461019190610485565b80601f01602080910402602001604051908101604052809291908181526020018280546101bd90610485565b801561020a5780601f106101df5761010080835404028352916020019161020a565b820191906000526020600020905b8154815290600101906020018083116101ed57829003601f168201915b505050505081565b604080516001600160a01b03841660208201529081018290526000908190606001604051602081830303815290604052805190602001209050600060ff60f81b308360405180602001610264906103f1565b6020820181038252601f19601f82011660405250805190602001206040516020016102c694939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f19018152919052805160209091012095945050505050565b6002819055600180546001600160a01b0319166001600160a01b0384169081179091556040805160208101929092528101829052600090819060600160405160208183030381529060405280519060200120905060008160405161034a906103f1565b8190604051809103906000f590508015801561036a573d6000803e3d6000fd5b5090506103778585610212565b6001600160a01b0316816001600160a01b0316146103a75760405162e0775560e61b815260040160405180910390fd5b600180546001600160a01b03191681178155600255949350505050565b6040516103d3602082016103f1565b6020820181038252601f19601f820116604052508051906020012081565b611170806104c083390190565b60006020808352835180602085015260005b8181101561042c57858101830151858201604001528201610410565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561046057600080fd5b82356001600160a01b038116811461047757600080fd5b946020939093013593505050565b600181811c9082168061049957607f821691505b6020821081036104b957634e487b7160e01b600052602260045260246000fd5b5091905056fe60c060405234801561001057600080fd5b50604080516330075a5d60e11b815281513392839263600eb4ba92600480830193928290030181865afa15801561004b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061006f9190610084565b60a0526001600160a01b0316608052506100be565b6000806040838503121561009757600080fd5b82516001600160a01b03811681146100ae57600080fd5b6020939093015192949293505050565b60805160a05161100861016860003960008181610183015281816102f5015281816103a9015281816104a70152818161055201528181610664015281816107190152818161078801528181610a4d0152610bf50152600081816102ad0152818161031e015281816103ef015281816104d0015281816105a00152818161069d01528181610742015281816107d801528181610a8a01528181610b6b0152610c3301526110086000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806354fd4d50116100a2578063a9059cbb11610071578063a9059cbb14610265578063d505accf14610278578063dd62ed3e1461028d578063f698da25146102a0578063fc0c546a146102a857600080fd5b806354fd4d501461020457806370a082311461022a5780637ecebe001461023d57806395d89b411461025d57600080fd5b806318160ddd116100de57806318160ddd146101b357806323b872dd146101bb57806330adf81f146101ce578063313ce567146101f557600080fd5b806304baa00b1461011057806306fdde0314610153578063095ea7b31461015b57806317d70f7c1461017e575b600080fd5b61013d6040518060400160405280600e81526020016d22a92199182337b93bb0b93232b960911b81525081565b60405161014a9190610d57565b60405180910390f35b61013d6102e7565b61016e610169366004610da6565b61039a565b604051901515815260200161014a565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014a565b6101a5610498565b61016e6101c9366004610dd0565b610543565b6101a57f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6040516012815260200161014a565b61013d60405180604001604052806007815260200166076312e302e32360cc1b81525081565b6101a5610238366004610e0c565b610655565b6101a561024b366004610e0c565b60006020819052908152604090205481565b61013d61070a565b61016e610273366004610da6565b610779565b61028b610286366004610e2e565b610873565b005b6101a561029b366004610ea1565b610b41565b6101a5610ca5565b6102cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014a565b604051622b600360e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169062ad800c906024015b600060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103959190810190610eea565b905090565b6040516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060015b92915050565b60405163bd85b03960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd85b03990602401602060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610f97565b604051633912022f60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0384811660248301528381166044830152606482018390523360848301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161064391815260200190565b60405180910390a35060019392505050565b604051631b2b776160e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0382811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690633656eec290604401602060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610f97565b604051634e41a1fb60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e41a1fb90602401610350565b604051633912022f60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015233602482018190526001600160a01b0384811660448401526064830184905260848301919091526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b15801561081e57600080fd5b505af1158015610832573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610486565b834211156108945760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b0387166108bb5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038716600090815260208190526040812054906108dd610ca5565b604080517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960208201526001600160a01b03808d1692820192909252908a1660608201526080810189905260a0810184905260c0810188905260e0016040516020818303038152906040528051906020012060405160200161097692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa1580156109e1573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b031614610a1f57604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b03808b1660008181526020819052604090819020600187019055516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201528b83166024820152604481018b905260648101919091527f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258a604051610b2d91815260200190565b60405180910390a350505050505050505050565b60405163e985e9c560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e985e9c590604401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd89190610fb0565b15610be65750600019610492565b6040516321ff32a960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b03848116602483015283811660448301527f000000000000000000000000000000000000000000000000000000000000000016906321ff32a990606401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190610f97565b9050610492565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b60005b83811015610d4e578181015183820152602001610d36565b50506000910152565b6020815260008251806020840152610d76816040850160208701610d33565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610da157600080fd5b919050565b60008060408385031215610db957600080fd5b610dc283610d8a565b946020939093013593505050565b600080600060608486031215610de557600080fd5b610dee84610d8a565b9250610dfc60208501610d8a565b9150604084013590509250925092565b600060208284031215610e1e57600080fd5b610e2782610d8a565b9392505050565b600080600080600080600060e0888a031215610e4957600080fd5b610e5288610d8a565b9650610e6060208901610d8a565b95506040880135945060608801359350608088013560ff81168114610e8457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610eb457600080fd5b610ebd83610d8a565b9150610ecb60208401610d8a565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610efc57600080fd5b815167ffffffffffffffff80821115610f1457600080fd5b818401915084601f830112610f2857600080fd5b815181811115610f3a57610f3a610ed4565b604051601f8201601f19908116603f01168101908382118183101715610f6257610f62610ed4565b81604052828152876020848701011115610f7b57600080fd5b610f8c836020830160208801610d33565b979650505050505050565b600060208284031215610fa957600080fd5b5051919050565b600060208284031215610fc257600080fd5b81518015158114610e2757600080fdfea26469706673582212205ddffb7185efa4ec21205bb0497433d912fd9b24012a25e068d4e5cb71e7445f64736f6c63430008160033a26469706673582212203a7b5c316de3f745eb0758a94da553ab24fc4711c84882126c48ca1eccdbae1464736f6c63430008160033608060405234801561001057600080fd5b50612943806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639b724ad4116100c3578063e2f273bd1161007c578063e2f273bd146103f8578063e967e3881461040b578063ea3503211461041e578063f32c9e341461043e578063f59d00b91461045e578063f851a4401461046657600080fd5b80639b724ad414610310578063a587bbe114610367578063b73e3fab14610392578063bc30e7a1146103b2578063d2f72d52146103c5578063daac24da146103e557600080fd5b80634db6c0e0116101155780634db6c0e01461027257806354fd4d50146102925780636e95d67c146102b8578063716ba5f6146102ca5780637ab4339d146102ea57806384da92a7146102fd57600080fd5b806304baa00b1461015d57806306fdde03146101a457806318bb3b54146101ac5780631ff30ad2146102205780632ad19de814610235578063392e53cd14610255575b600080fd5b61018e6040518060400160405280601281526020017148797065726472697665526567697374727960701b81525081565b60405161019b9190611fa5565b60405180910390f35b61018e610479565b6102136101ba366004611fdb565b6040805180820190915260008082526020820152506040805180820182526001600160a01b0392831660008181526006602081815294822080546001600160801b03168552929091528352600101549092169082015290565b60405161019b9190611ff6565b61023361022e366004612061565b610507565b005b610248610243366004611fdb565b6108d2565b60405161019b9190612167565b6000546102629060ff1681565b604051901515815260200161019b565b61028561028036600461217a565b610a61565b60405161019b91906121bb565b61018e60405180604001604052806007815260200166076312e302e32360cc1b81525081565b6005545b60405190815260200161019b565b6102dd6102d836600461221b565b610baa565b60405161019b919061223d565b6102336102f836600461228a565b610ca9565b61023361030b366004612377565b610d4c565b61035861031e366004611fdb565b6040805160208082018352600091829052825180820184526001600160a01b039490941682526004905220546001600160801b0316815290565b6040519051815260200161019b565b61037a6103753660046123f6565b610dc4565b6040516001600160a01b03909116815260200161019b565b6103a56103a036600461217a565b610df4565b60405161019b9190612461565b6102dd6103c036600461221b565b611083565b6103d86103d336600461217a565b611182565b60405161019b91906124c5565b61037a6103f33660046123f6565b611443565b610233610406366004611fdb565b611458565b61023361041936600461251c565b6114cc565b61043161042c36600461217a565b611878565b60405161019b9190612587565b61045161044c366004611fdb565b611962565b60405161019b91906125c0565b6003546102bc565b60025461037a906001600160a01b031681565b60018054610486906125d3565b80601f01602080910402602001604051908101604052809291908181526020018280546104b2906125d3565b80156104ff5780601f106104d4576101008083540402835291602001916104ff565b820191906000526020600020905b8154815290600101906020018083116104e257829003601f168201915b505050505081565b6002546001600160a01b03163314610531576040516282b42960e81b815260040160405180910390fd5b84831415806105405750848114155b1561055e5760405163aaad13f760e01b815260040160405180910390fd5b60005b858110156108c9576000600660008989858181106105815761058161260d565b90506020020160208101906105969190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b031690508585838181106105cd576105cd61260d565b90506020020160208101906105e29190612623565b6001600160801b03161580156105f757508015155b156106805760008484848181106106105761061061260d565b90506020020160208101906106259190611fdb565b6001600160a01b03161461064c57604051637a44db9560e01b815260040160405180910390fd5b61067b8888848181106106615761066161260d565b90506020020160208101906106769190611fdb565b6119f7565b610803565b8585838181106106925761069261260d565b90506020020160208101906106a79190612623565b6001600160801b0316158015906106bd57508015155b1561073f5761067b8888848181106106d7576106d761260d565b90506020020160208101906106ec9190611fdb565b8787858181106106fe576106fe61260d565b90506020020160208101906107139190612623565b8686868181106107255761072561260d565b905060200201602081019061073a9190611fdb565b611b4d565b8585838181106107515761075161260d565b90506020020160208101906107669190612623565b6001600160801b03161580159061077b575080155b156107fd5761067b8888848181106107955761079561260d565b90506020020160208101906107aa9190611fdb565b8787858181106107bc576107bc61260d565b90506020020160208101906107d19190612623565b8686868181106107e3576107e361260d565b90506020020160208101906107f89190611fdb565b611c94565b506108c1565b8383838181106108155761081561260d565b905060200201602081019061082a9190611fdb565b6001600160a01b03168686848181106108455761084561260d565b905060200201602081019061085a9190612623565b6001600160801b03168989858181106108755761087561260d565b905060200201602081019061088a9190611fdb565b6001600160a01b03167fdcdda2b8267b8fe0ebfeb2cc8f266807b412bec096d16cbbe576d46d122553e060405160405180910390a4505b600101610561565b50505050505050565b6108da611f1d565b6040805160a0810182526001600160a01b0380851660008181526006602081815286832080546001600160801b031687528484529181526001909101549093169284019290925283516306fdde0360e01b8152845187958501936306fdde0392600480820193918290030181865afa15801561095a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610982919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ed919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a58919081019061264c565b90529392505050565b6060816001600160401b03811115610a7b57610a7b61230a565b604051908082528060200260200182016040528015610ac057816020015b6040805180820190915260008082526020820152815260200190600190039081610a995790505b50905060005b82811015610ba257604051806040016040528060066000878786818110610aef57610aef61260d565b9050602002016020810190610b049190611fdb565b6001600160a01b031681526020808201929092526040016000908120546001600160801b03168352910190600690878786818110610b4457610b4461260d565b9050602002016020810190610b599190611fdb565b6001600160a01b0390811682526020820192909252604001600020600101541690528251839083908110610b8f57610b8f61260d565b6020908102919091010152600101610ac6565b505b92915050565b6060818310610bcc57604051633b2735ab60e11b815260040160405180910390fd5b600354821115610bef5760405163e0f7becb60e01b815260040160405180910390fd5b610bf983836126b9565b6001600160401b03811115610c1057610c1061230a565b604051908082528060200260200182016040528015610c39578160200160208202803683370190505b509050825b82811015610ba25760038181548110610c5957610c5961260d565b6000918252602090912001546001600160a01b031682610c7986846126b9565b81518110610c8957610c8961260d565b6001600160a01b0390921660209283029190910190910152600101610c3e565b60005460ff1615610ccd5760405163722c395b60e11b815260040160405180910390fd5b6000805460ff19166001908117909155610ce883858361272b565b50600280546001600160a01b0319166001600160a01b038316908117909155604051610d1790859085906127ea565b604051908190038120907fe57439d837715589a751e391f73a95929ecc96ae6aa09a16be8ae312d614715790600090a3505050565b6002546001600160a01b03163314610d76576040516282b42960e81b815260040160405180910390fd5b6001610d8282826127fa565b5080604051610d9191906128b9565b604051908190038120907f9f7688a97f1ac51fe03bac18af18d6810f9f11f0db08c59b1938a9ac825ef74490600090a250565b600060038281548110610dd957610dd961260d565b6000918252602090912001546001600160a01b031692915050565b6060816001600160401b03811115610e0e57610e0e61230a565b604051908082528060200260200182016040528015610e6a57816020015b610e576040518060800160405280600081526020016060815260200160608152602001606081525090565b815260200190600190039081610e2c5790505b50905060005b82811015610ba2576000848483818110610e8c57610e8c61260d565b9050602002016020810190610ea19190611fdb565b9050604051806080016040528060046000888887818110610ec457610ec461260d565b9050602002016020810190610ed99190611fdb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060000160009054906101000a90046001600160801b03166001600160801b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f5c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f84919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fef919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105a919081019061264c565b81525083838151811061106f5761106f61260d565b602090810291909101015250600101610e70565b60608183106110a557604051633b2735ab60e11b815260040160405180910390fd5b6005548211156110c85760405163e0f7becb60e01b815260040160405180910390fd5b6110d283836126b9565b6001600160401b038111156110e9576110e961230a565b604051908082528060200260200182016040528015611112578160200160208202803683370190505b509050825b82811015610ba257600581815481106111325761113261260d565b6000918252602090912001546001600160a01b03168261115286846126b9565b815181106111625761116261260d565b6001600160a01b0390921660209283029190910190910152600101611117565b6060816001600160401b0381111561119c5761119c61230a565b6040519080825280602002602001820160405280156111d557816020015b6111c2611f1d565b8152602001906001900390816111ba5790505b50905060005b82811015610ba25760008484838181106111f7576111f761260d565b905060200201602081019061120c9190611fdb565b90506040518060a001604052806006600088888781811061122f5761122f61260d565b90506020020160208101906112449190611fdb565b6001600160a01b031681526020808201929092526040016000908120546001600160801b031683529101906006908888878181106112845761128461260d565b90506020020160208101906112999190611fdb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009054906101000a90046001600160a01b03166001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561131c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611344919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611387573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113af919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261141a919081019061264c565b81525083838151811061142f5761142f61260d565b6020908102919091010152506001016111db565b600060058281548110610dd957610dd961260d565b6002546001600160a01b03163314611482576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d90600090a250565b6002546001600160a01b031633146114f6576040516282b42960e81b815260040160405180910390fd5b8281146115165760405163aaad13f760e01b815260040160405180910390fd5b60005b83811015611871576000600460008787858181106115395761153961260d565b905060200201602081019061154e9190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b031690508383838181106115855761158561260d565b905060200201602081019061159a9190612623565b6001600160801b03161580156115af57508015155b156115e8576115e38686848181106115c9576115c961260d565b90506020020160208101906115de9190611fdb565b611dd9565b6117db565b8383838181106115fa576115fa61260d565b905060200201602081019061160f9190612623565b6001600160801b03161580159061162557508015155b156116b4576115e386868481811061163f5761163f61260d565b90506020020160208101906116549190611fdb565b8585858181106116665761166661260d565b905060200201602081019061167b9190612623565b6001600160a01b0391909116600090815260046020526040902080546001600160801b0319166001600160801b03909216919091179055565b8383838181106116c6576116c661260d565b90506020020160208101906116db9190612623565b6001600160801b0316158015906116f0575080155b156117d5576115e386868481811061170a5761170a61260d565b905060200201602081019061171f9190611fdb565b8585858181106117315761173161260d565b90506020020160208101906117469190612623565b60038054600181019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039094166001600160a01b0319909416841790556040805180820182526001600160801b03938416815291831660208381019182526000958652600490529320905192518216600160801b0292909116919091179055565b50611869565b8383838181106117ed576117ed61260d565b90506020020160208101906118029190612623565b6001600160801b031686868481811061181d5761181d61260d565b90506020020160208101906118329190611fdb565b6001600160a01b03167fd840ea8cb042bc840d3e55a04618ab268434d3d0a218638360a30fdb80de63f660405160405180910390a3505b600101611519565b5050505050565b6060816001600160401b038111156118925761189261230a565b6040519080825280602002602001820160405280156118d257816020015b6040805160208101909152600081528152602001906001900390816118b05790505b50905060005b82811015610ba2576040518060200160405280600460008787868181106119015761190161260d565b90506020020160208101906119169190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b03169052825183908390811061194f5761194f61260d565b60209081029190910101526001016118d8565b61198d6040518060800160405280600081526020016060815260200160608152602001606081525090565b604080516080810182526001600160a01b038416600081815260046020818152858320546001600160801b0316855285516306fdde0360e01b81529551889691860194936306fdde0393838101939192918290030181865afa15801561095a573d6000803e3d6000fd5b6001600160a01b038116600090815260066020526040902054600554600160801b9091046001600160801b031690611a306001826126b9565b826001600160801b031614611ae85760006005611a4e6001846126b9565b81548110611a5e57611a5e61260d565b60009182526020808320909101546001600160a01b03168083526006909152604090912080546001600160801b03808716600160801b810291909216179091556005805492935083929091908110611ab857611ab861260d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6005805480611af957611af96128d5565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b0395909516855260069091526040842093845560019390930180549093169092555050565b6001600160a01b03808416600090815260066020526040902060010154168015801590611b8c5750816001600160a01b0316816001600160a01b031614155b80611c2457506001600160a01b038116158015611bb157506001600160a01b03821615155b8015611c2457506040516335a2735f60e11b81526001600160a01b038581166004830152831690636b44e6be90602401602060405180830381865afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2291906128eb565b155b15611c4257604051637a44db9560e01b815260040160405180910390fd5b506001600160a01b03928316600090815260066020526040902080546001600160801b0319166001600160801b0393909316929092178255600190910180546001600160a01b03191691909216179055565b6001600160a01b03811615801590611d1357506040516335a2735f60e11b81526001600160a01b038481166004830152821690636b44e6be90602401602060405180830381865afa158015611ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1191906128eb565b155b15611d3157604051637a44db9560e01b815260040160405180910390fd5b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0810180546001600160a01b039687166001600160a01b03199182168117909255604080516060810182526001600160801b0397881681529387166020858101918252968916858301908152600094855260069097529220925191518616600160801b0291909516178155915191018054919093169116179055565b6001600160a01b038116600090815260046020526040902054600354600160801b9091046001600160801b031690611e126001826126b9565b826001600160801b031614611eca5760006003611e306001846126b9565b81548110611e4057611e4061260d565b60009182526020808320909101546001600160a01b03168083526004909152604090912080546001600160801b03808716600160801b810291909216179091556003805492935083929091908110611e9a57611e9a61260d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6003805480611edb57611edb6128d5565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152600490935250506040812055565b6040518060a001604052806000815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b60005b83811015611f70578181015183820152602001611f58565b50506000910152565b60008151808452611f91816020860160208601611f55565b601f01601f19169290920160200192915050565b602081526000611fb86020830184611f79565b9392505050565b80356001600160a01b0381168114611fd657600080fd5b919050565b600060208284031215611fed57600080fd5b611fb882611fbf565b815181526020808301516001600160a01b03169082015260408101610ba4565b60008083601f84011261202857600080fd5b5081356001600160401b0381111561203f57600080fd5b6020830191508360208260051b850101111561205a57600080fd5b9250929050565b6000806000806000806060878903121561207a57600080fd5b86356001600160401b038082111561209157600080fd5b61209d8a838b01612016565b909850965060208901359150808211156120b657600080fd5b6120c28a838b01612016565b909650945060408901359150808211156120db57600080fd5b506120e889828a01612016565b979a9699509497509295939492505050565b8051825260018060a01b0360208201511660208301526000604082015160a0604085015261212b60a0850182611f79565b9050606083015184820360608601526121448282611f79565b9150506080830151848203608086015261215e8282611f79565b95945050505050565b602081526000611fb860208301846120fa565b6000806020838503121561218d57600080fd5b82356001600160401b038111156121a357600080fd5b6121af85828601612016565b90969095509350505050565b602080825282518282018190526000919060409081850190868401855b8281101561220e576121fe848351805182526020908101516001600160a01b0316910152565b92840192908501906001016121d8565b5091979650505050505050565b6000806040838503121561222e57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561227e5783516001600160a01b031683529284019291840191600101612259565b50909695505050505050565b60008060006040848603121561229f57600080fd5b83356001600160401b03808211156122b657600080fd5b818601915086601f8301126122ca57600080fd5b8135818111156122d957600080fd5b8760208285010111156122eb57600080fd5b6020928301955093506123019186019050611fbf565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156123485761234861230a565b604052919050565b60006001600160401b038211156123695761236961230a565b50601f01601f191660200190565b60006020828403121561238957600080fd5b81356001600160401b0381111561239f57600080fd5b8201601f810184136123b057600080fd5b80356123c36123be82612350565b612320565b8181528560208385010111156123d857600080fd5b81602084016020830137600091810160200191909152949350505050565b60006020828403121561240857600080fd5b5035919050565b80518252600060208201516080602085015261242e6080850182611f79565b9050604083015184820360408601526124478282611f79565b9150506060830151848203606086015261215e8282611f79565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156124b857603f198886030184526124a685835161240f565b9450928501929085019060010161248a565b5092979650505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156124b857603f1988860301845261250a8583516120fa565b945092850192908501906001016124ee565b6000806000806040858703121561253257600080fd5b84356001600160401b038082111561254957600080fd5b61255588838901612016565b9096509450602087013591508082111561256e57600080fd5b5061257b87828801612016565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b8181101561227e57835151835292840192918401916001016125a3565b602081526000611fb8602083018461240f565b600181811c908216806125e757607f821691505b60208210810361260757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561263557600080fd5b81356001600160801b0381168114611fb857600080fd5b60006020828403121561265e57600080fd5b81516001600160401b0381111561267457600080fd5b8201601f8101841361268557600080fd5b80516126936123be82612350565b8181528560208385010111156126a857600080fd5b61215e826020830160208601611f55565b81810381811115610ba457634e487b7160e01b600052601160045260246000fd5b601f821115612726576000816000526020600020601f850160051c810160208610156127035750805b601f850160051c820191505b818110156127225782815560010161270f565b5050505b505050565b6001600160401b038311156127425761274261230a565b6127568361275083546125d3565b836126da565b6000601f84116001811461278a57600085156127725750838201355b600019600387901b1c1916600186901b178355611871565b600083815260209020601f19861690835b828110156127bb578685013582556020948501946001909201910161279b565b50868210156127d85760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b81516001600160401b038111156128135761281361230a565b6128278161282184546125d3565b846126da565b602080601f83116001811461285c57600084156128445750858301515b600019600386901b1c1916600185901b178555612722565b600085815260208120601f198616915b8281101561288b5788860151825594840194600190910190840161286c565b50858210156128a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516128cb818460208701611f55565b9190910192915050565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156128fd57600080fd5b81518015158114611fb857600080fdfea2646970667358221220c11057a383fa5371752db51a5d5db656ffe1f1b62ccebf2f42271dd36eddbd7664736f6c63430008160033608060405234801561001057600080fd5b5060405161054938038061054983398101604081905261002f91610143565b600080546001600160a01b038088166001600160a01b03199283161790925560018054878416908316179055600280548684169083161790556003805492851692909116919091179055805161008c906004906020840190610097565b50505050505061024d565b8280548282559060005260206000209081019282156100ec579160200282015b828111156100ec57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906100b7565b506100f89291506100fc565b5090565b5b808211156100f857600081556001016100fd565b80516001600160a01b038116811461012857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561015b57600080fd5b61016486610111565b94506020610173818801610111565b945061018160408801610111565b935061018f60608801610111565b60808801519093506001600160401b03808211156101ac57600080fd5b818901915089601f8301126101c057600080fd5b8151818111156101d2576101d261012d565b8060051b604051601f19603f830116810181811085821117156101f7576101f761012d565b60405291825284820192508381018501918c83111561021557600080fd5b938501935b8285101561023a5761022b85610111565b8452938501939285019261021a565b8096505050505050509295509295909350565b6102ed8061025c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063c415b95c11610066578063c415b95c1461013f578063d2c35ce814610152578063dd2b8fbb14610182578063e3331555146101b2578063f2596458146101c557600080fd5b806310780f73146100985780633e2d2014146100c85780638627a4f0146100fa578063a64c90bf1461012a575b600080fd5b6002546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f86100d636600461023a565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100f861010836600461023a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6101326101d8565b6040516100bf919061026a565b6001546100ab906001600160a01b031681565b6100f861016036600461023a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6100f861019036600461023a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546100ab906001600160a01b031681565b6003546100ab906001600160a01b031681565b6060600480548060200260200160405190810160405280929190818152602001828054801561023057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610212575b5050505050905090565b60006020828403121561024c57600080fd5b81356001600160a01b038116811461026357600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156102ab5783516001600160a01b031683529284019291840191600101610286565b5090969550505050505056fea2646970667358221220ab96712e826406cc06c9e7af2950b27b2813cb638d1321f2efc68188e4cd721364736f6c63430008160033608060405260026001553480156200001657600080fd5b506040516200412c3803806200412c833981016040819052620000399162000708565b60006200004782826200096d565b508160e0015182610100015110806200007557508160e0015182610100015162000072919062000a39565b15155b156200009457604051630219d66360e11b815260040160405180910390fd5b610100820151600b8190556101208301511080620000c757508160e00151826101200151620000c4919062000a39565b15155b15620000e65760405163f9c0959d60e01b815260040160405180910390fd5b610120820151600c81905561014083015110806200011957508160e0015182610140015162000116919062000a39565b15155b156200013857604051633007ad0160e11b815260040160405180910390fd5b610140820151600d81905561016083015110806200016b57508160e0015182610160015162000168919062000a39565b15155b156200018a5760405163cfb699cb60e01b815260040160405180910390fd5b610160820151600e556101a08201516101808301511115620001bf5760405163ef9bc65f60e01b815260040160405180910390fd5b610180820151600f556101a08201516010556101e08201516101c08301511115620001fd576040516330554de160e01b815260040160405180910390fd5b6101c08201516011556101e082015160125561022082015161020083015111156200023b576040516383ebdfb760e01b815260040160405180910390fd5b61020082015160135561022082015160145561026082015151670de0b6b3a764000010806200027a5750670de0b6b3a764000082610260015160200151115b80620002965750670de0b6b3a764000082610260015160400151115b80620002b25750670de0b6b3a764000082610260015160600151115b15620002d15760405163161071fb60e11b815260040160405180910390fd5b610260820151805160198190556020820151601a556040820151601b55606090910151601c556102408301515111806200031c57508161026001516020015182610240015160200151115b806200033957508161026001516040015182610240015160400151115b806200035657508161026001516060015182610240015160600151115b1562000375576040516315b05a8f60e01b815260040160405180910390fd5b61024082015180516015556020808201516016556040808301516017556060928301516018558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a086015160088054841691831691909117905560c08601516009805490931691161790559083015180516200043192601d9201906200046e565b5050610280810151600580546001600160a01b0319166001600160a01b039092169190911790556102a081015160065560e00151600a5562000a5c565b828054828255906000526020600020908101928215620004c6579160200282015b82811115620004c657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200048f565b50620004d4929150620004d8565b5090565b5b80821115620004d45760008155600101620004d9565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b03811182821017156200052b576200052b620004ef565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200055c576200055c620004ef565b604052919050565b80516001600160a01b03811681146200057c57600080fd5b919050565b600082601f8301126200059357600080fd5b815160206001600160401b03821115620005b157620005b1620004ef565b8160051b620005c282820162000531565b9283528481018201928281019087851115620005dd57600080fd5b83870192505b848310156200060757620005f78362000564565b82529183019190830190620005e3565b979650505050505050565b6000608082840312156200062557600080fd5b604051608081016001600160401b03811182821017156200064a576200064a620004ef565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600082601f8301126200068d57600080fd5b81516001600160401b03811115620006a957620006a9620004ef565b6020620006bf601f8301601f1916820162000531565b8281528582848701011115620006d457600080fd5b60005b83811015620006f4578581018301518282018401528201620006d7565b506000928101909101919091529392505050565b600080604083850312156200071c57600080fd5b82516001600160401b03808211156200073457600080fd5b9084019061038082870312156200074a57600080fd5b6200075462000505565b6200075f8362000564565b81526200076f6020840162000564565b6020820152620007826040840162000564565b60408201526060830151828111156200079a57600080fd5b620007a88882860162000581565b606083015250620007bc6080840162000564565b6080820152620007cf60a0840162000564565b60a0820152620007e260c0840162000564565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240620008708882860162000612565b9082015262000884876102c0850162000612565b61026082015262000899610340840162000564565b61028082015261036092909201516102a0830152602085015191935080821115620008c357600080fd5b50620008d2858286016200067b565b9150509250929050565b600181811c90821680620008f157607f821691505b6020821081036200091257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000968576000816000526020600020601f850160051c81016020861015620009435750805b601f850160051c820191505b8181101562000964578281556001016200094f565b5050505b505050565b81516001600160401b03811115620009895762000989620004ef565b620009a1816200099a8454620008dc565b8462000918565b602080601f831160018114620009d95760008415620009c05750858301515b600019600386901b1c1916600185901b17855562000964565b600085815260208120601f198616915b8281101562000a0a57888601518255948401946001909101908401620009e9565b508582101562000a295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008262000a5757634e487b7160e01b600052601260045260246000fd5b500690565b6136c08062000a6c6000396000f3fe6080604052600436106103a65760003560e01c80638e127cf5116101e7578063d2c35ce81161010d578063e4e7148f116100a0578063ec895f111161006f578063ec895f1114610ae9578063f259645814610b09578063f8c09e5914610b29578063fe3d5aeb14610b5957600080fd5b8063e4e7148f14610a74578063e71f34b314610a94578063e83e34b114610ab4578063eb71f66c14610ac957600080fd5b8063dd2b8fbb116100dc578063dd2b8fbb14610a09578063e0e2daaa14610a29578063e1b39c8014610a3f578063e333155514610a5457600080fd5b8063d2c35ce81461099d578063d6f50169146109bd578063daac24da146109d3578063daf012e6146109f357600080fd5b8063b256126311610185578063c415b95c11610154578063c415b95c1461093b578063c905a4b51461095b578063d0f96b9214610971578063d23d7ea31461098757600080fd5b8063b2561263146108c3578063bc30e7a1146108e3578063bf9bd5cd14610903578063c17225631461091957600080fd5b806399623bb1116101c157806399623bb11461084e5780639af252621461086e578063a64c90bf1461088e578063a98a46db146108a357600080fd5b80638e127cf5146107f85780638efc09861461081857806397b0e8ce1461082e57600080fd5b80634554f9a9116102cc578063628027a31161026a57806383b361e81161023957806383b361e81461077857806384c19aab1461079857806385229785146107b85780638627a4f0146107d857600080fd5b8063628027a3146106e35780636b44e6be146107035780636e95d67c146107435780636f6d5c4a1461075857600080fd5b80634fbfee77116102a65780634fbfee771461065a57806354fd4d501461067a5780635720c9d5146106ad5780635aa6e675146106c357600080fd5b80634554f9a91461060e578063488007601461062457806349f13de71461063a57600080fd5b80631ecda0fe116103445780632e7cd971116103135780632e7cd9711461059b5780633e2d2014146105ae578063411c3035146105ce578063421caba8146105ee57600080fd5b80631ecda0fe146105025780632885e3ac146105265780632907d3dd146105465780632b58f4181461056657600080fd5b806310d1dc3e1161038057806310d1dc3e1461047557806311e77bfe146104955780631978ebcf146104b55780631b59be0c146104d557600080fd5b806304baa00b146103d557806306fdde031461042857806310780f731461043d57600080fd5b366103d0576002600154036103ce57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156103e157600080fd5b506104126040518060400160405280601181526020017048797065726472697665466163746f727960781b81525081565b60405161041f9190612cec565b60405180910390f35b34801561043457600080fd5b50610412610b79565b34801561044957600080fd5b5060085461045d906001600160a01b031681565b6040516001600160a01b03909116815260200161041f565b34801561048157600080fd5b506103ce610490366004612cff565b610c07565b3480156104a157600080fd5b506103ce6104b0366004612d11565b610d20565b3480156104c157600080fd5b506103ce6104d0366004612d11565b610df9565b3480156104e157600080fd5b506104f56104f0366004612d2a565b610e7b565b60405161041f9190612d9f565b34801561050e57600080fd5b50610518600f5481565b60405190815260200161041f565b34801561053257600080fd5b506103ce610541366004612cff565b610f56565b34801561055257600080fd5b506103ce610561366004612d11565b6110bc565b34801561057257600080fd5b5061045d610581366004612e14565b60208052600090815260409020546001600160a01b031681565b61045d6105a93660046130ee565b61113e565b3480156105ba57600080fd5b506103ce6105c9366004612e14565b611580565b3480156105da57600080fd5b506103ce6105e93660046131cf565b6115f4565b3480156105fa57600080fd5b506103ce610609366004612e14565b6117c5565b34801561061a57600080fd5b5061051860105481565b34801561063057600080fd5b5061051860145481565b34801561064657600080fd5b5061045d6106553660046131fb565b6118ce565b34801561066657600080fd5b506103ce610675366004612d11565b6119c0565b34801561068657600080fd5b5061041260405180604001604052806007815260200166076312e302e32360cc1b81525081565b3480156106b957600080fd5b50610518600b5481565b3480156106cf57600080fd5b5060025461045d906001600160a01b031681565b3480156106ef57600080fd5b506103ce6106fe366004612d11565b611a1d565b34801561070f57600080fd5b5061073361071e366004612e14565b60226020526000908152604090205460ff1681565b604051901515815260200161041f565b34801561074f57600080fd5b50602154610518565b34801561076457600080fd5b506103ce610773366004612d11565b611a9f565b34801561078457600080fd5b506103ce610793366004612d11565b611b43565b3480156107a457600080fd5b506103ce6107b3366004612d11565b611bc5565b3480156107c457600080fd5b506103ce6107d3366004612e14565b611c47565b3480156107e457600080fd5b506103ce6107f3366004612e14565b611cbb565b34801561080457600080fd5b506103ce610813366004612d11565b611d2f565b34801561082457600080fd5b50610518600e5481565b34801561083a57600080fd5b506103ce610849366004612d11565b611dd3565b34801561085a57600080fd5b5060055461045d906001600160a01b031681565b34801561087a57600080fd5b506103ce610889366004612d2a565b611e55565b34801561089a57600080fd5b506104f5611ebd565b3480156108af57600080fd5b506103ce6108be366004612e14565b611f1f565b3480156108cf57600080fd5b506103ce6108de366004612e14565b611f93565b3480156108ef57600080fd5b506104f56108fe36600461328f565b612007565b34801561090f57600080fd5b5061051860125481565b34801561092557600080fd5b5061092e612109565b60405161041f91906132b1565b34801561094757600080fd5b5060075461045d906001600160a01b031681565b34801561096757600080fd5b5061051860065481565b34801561097d57600080fd5b50610518600a5481565b34801561099357600080fd5b5061051860115481565b3480156109a957600080fd5b506103ce6109b8366004612e14565b612161565b3480156109c957600080fd5b5061051860135481565b3480156109df57600080fd5b5061045d6109ee366004612d11565b6121d5565b3480156109ff57600080fd5b50610518600d5481565b348015610a1557600080fd5b506103ce610a24366004612e14565b612205565b348015610a3557600080fd5b50610518600c5481565b348015610a4b57600080fd5b50601e54610518565b348015610a6057600080fd5b5060045461045d906001600160a01b031681565b348015610a8057600080fd5b5060035461045d906001600160a01b031681565b348015610aa057600080fd5b506103ce610aaf366004612d11565b612279565b348015610ac057600080fd5b5061092e61231d565b348015610ad557600080fd5b506103ce610ae4366004612d11565b612375565b348015610af557600080fd5b506104f5610b0436600461328f565b61240d565b348015610b1557600080fd5b5060095461045d906001600160a01b031681565b348015610b3557600080fd5b50610733610b44366004612e14565b601f6020526000908152604090205460ff1681565b348015610b6557600080fd5b5061045d610b74366004612d11565b61250f565b60008054610b86906132dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb2906132dc565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b505050505081565b6002546001600160a01b03163314610c31576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601954808252601a546020830152601b5492820192909252601c5460608201529082351180610c71575080602001518260200135115b80610c83575080604001518260400135115b80610c95575080606001518260600135115b15610cb3576040516315b05a8f60e01b815260040160405180910390fd5b81356015819055602080840135601681905560408086013560178190556060808801356018819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610d4a576040516282b42960e81b815260040160405180910390fd5b80600b54610d589190613310565b151580610d71575080600c54610d6e9190613310565b15155b80610d88575080600d54610d859190613310565b15155b80610d9f575080600e54610d9c9190613310565b15155b15610dbd576040516311b75c1560e31b815260040160405180910390fd5b600a8190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610e23576040516282b42960e81b815260040160405180910390fd5b601254811115610e4657604051631670f79760e01b815260040160405180910390fd5b60118190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610dee565b60215460609067ffffffffffffffff811115610e9957610e99612e31565b604051908082528060200260200182016040528015610ec2578160200160208202803683370190505b50905060005b82811015610f4e5760206000858584818110610ee657610ee6613332565b9050602002016020810190610efb9190612e14565b6001600160a01b0390811682526020820192909252604001600020548351911690839083908110610f2e57610f2e613332565b6001600160a01b0390921660209283029190910190910152600101610ec8565b505b92915050565b6002546001600160a01b03163314610f80576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260155481526016546020820152601754918101919091526018546060820152670de0b6b3a764000082351180610fcb5750670de0b6b3a76400008260200135115b80610fe15750670de0b6b3a76400008260400135115b80610ff75750670de0b6b3a76400008260600135115b80611003575080518235105b80611015575080602001518260200135105b80611027575080604001518260400135105b80611039575080606001518260600135105b156110575760405163161071fb60e11b815260040160405180910390fd5b81356019819055602080840135601a819055604080860135601b819055606080880135601c819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610d14565b6002546001600160a01b031633146110e6576040516282b42960e81b815260040160405180910390fd5b601054811115611109576040516328a2d9a960e01b815260040160405180910390fd5b600f8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610dee565b6001600160a01b0389166000908152601f602052604081205460ff1661117757604051636e623f0f60e01b815260040160405180910390fd5b611182888686612524565b60408051336020808301919091528183018e905282518083038401815260608301938490528051910120631d321d7560e31b9092526000916001600160a01b038d169163e990eba8916111df918e908e908e908a90606401613459565b6020604051808303816000875af11580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906134a9565b90508a60206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03168961014001906001600160a01b031690816001600160a01b0316815250508a6001600160a01b03167fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed234465828c8c8c6040516112e194939291906134c6565b60405180910390a26021805460018082019092557f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5700180546001600160a01b0319166001600160a01b03848116918217909255600090815260226020908152604091829020805460ff1916851790559280558051339381019390935282018e90528c16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b81526004016113aa959493929190613518565b60206040518083038185885af11580156113c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ed919061357b565b50600260015560005b601d5481101561149a57816001600160a01b0316637180c8ca601d838154811061142257611422613332565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050600190920191506113f69050565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea990602401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50479250508115905061157057604051600090339083908381818185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b505090508061156e576040516312171d8360e31b815260040160405180910390fd5b505b509b9a5050505050505050505050565b6002546001600160a01b031633146115aa576040516282b42960e81b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517fae062fb82c932c653cd44617343ecda1d13e375e0d6f20d969c944fbda1963d390600090a250565b6002546001600160a01b0316331480159061161a57506003546001600160a01b03163314155b15611637576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152601f602052604090205460ff1661167057604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601e828154811061168d5761168d613332565b6000918252602090912001546001600160a01b0316146116c057604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601f60205260409020805460ff19169055601e80546116f0906001906135aa565b8154811061170057611700613332565b600091825260209091200154601e80546001600160a01b03909216918390811061172c5761172c613332565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601e80548061176b5761176b6135bd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b031633148015906117eb57506003546001600160a01b03163314155b15611808576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16156118425760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020526040808220805460ff19166001908117909155601e8054918201815583527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6001600160a01b0387166000908152601f602052604081205460ff1661190757604051636e623f0f60e01b815260040160405180910390fd5b611912878686612524565b60408051336020808301919091528183018c90528251808303840181526060830193849052805191012063182a20c360e31b9092526000916001600160a01b038b169163c15106189161196f918c908c908a908a906064016135d3565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906134a9565b9a9950505050505050505050565b6002546001600160a01b031633146119ea576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6002546001600160a01b03163314611a47576040516282b42960e81b815260040160405180910390fd5b601354811015611a6a57604051630a35539d60e41b815260040160405180910390fd5b60148190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610dee565b6002546001600160a01b03163314611ac9576040516282b42960e81b815260040160405180910390fd5b600b54811080611ae45750600a54611ae19082613310565b15155b80611af05750600d5481115b15611b0e5760405163f9c0959d60e01b815260040160405180910390fd5b600c8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610dee565b6002546001600160a01b03163314611b6d576040516282b42960e81b815260040160405180910390fd5b601454811115611b9057604051635a8f655760e01b815260040160405180910390fd5b60138190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610dee565b6002546001600160a01b03163314611bef576040516282b42960e81b815260040160405180910390fd5b600f54811015611c1257604051637edc061360e11b815260040160405180910390fd5b60108190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610dee565b6002546001600160a01b03163314611c71576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6002546001600160a01b03163314611ce5576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b6002546001600160a01b03163314611d59576040516282b42960e81b815260040160405180910390fd5b600a54811080611d745750600a54611d719082613310565b15155b80611d805750600c5481115b15611d9e57604051630219d66360e11b815260040160405180910390fd5b600b8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610dee565b6002546001600160a01b03163314611dfd576040516282b42960e81b815260040160405180910390fd5b601154811015611e205760405163019cfb7b60e61b815260040160405180910390fd5b60128190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610dee565b6002546001600160a01b03163314611e7f576040516282b42960e81b815260040160405180910390fd5b611e8b601d8383612c37565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610d14929190613612565b6060601d805480602002602001604051908101604052809291908181526020018280548015611f1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ef7575b5050505050905090565b6002546001600160a01b03163314611f49576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a90600090a250565b6002546001600160a01b03163314611fbd576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90600090a250565b606081831061202957604051633b2735ab60e11b815260040160405180910390fd5b60215482111561204c5760405163e0f7becb60e01b815260040160405180910390fd5b61205683836135aa565b67ffffffffffffffff81111561206e5761206e612e31565b604051908082528060200260200182016040528015612097578160200160208202803683370190505b509050825b82811015610f4e57602181815481106120b7576120b7613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106120e9576120e9613332565b6001600160a01b039092166020928302919091019091015260010161209c565b6121346040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526015548152601654602082015260175491810191909152601854606082015290565b6002546001600160a01b0316331461218b576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000602182815481106121ea576121ea613332565b6000918252602090912001546001600160a01b031692915050565b6002546001600160a01b0316331461222f576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6002546001600160a01b031633146122a3576040516282b42960e81b815260040160405180910390fd5b600c548110806122be5750600a546122bb9082613310565b15155b806122ca5750600e5481115b156122e857604051633007ad0160e11b815260040160405180910390fd5b600d8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610dee565b6123486040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526019548152601a546020820152601b5491810191909152601c54606082015290565b6002546001600160a01b0316331461239f576040516282b42960e81b815260040160405180910390fd5b600d548110806123ba5750600a546123b79082613310565b15155b156123d85760405163cfb699cb60e01b815260040160405180910390fd5b600e8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610dee565b606081831061242f57604051633b2735ab60e11b815260040160405180910390fd5b601e548211156124525760405163e0f7becb60e01b815260040160405180910390fd5b61245c83836135aa565b67ffffffffffffffff81111561247457612474612e31565b60405190808252806020026020018201604052801561249d578160200160208202803683370190505b509050825b82811015610f4e57601e81815481106124bd576124bd613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106124ef576124ef613332565b6001600160a01b03909216602092830291909101909101526001016124a2565b6000601e82815481106121ea576121ea613332565b600b54836101000151108061253f5750600c54836101000151115b8061255b5750600a548361010001516125589190613310565b15155b1561257957604051635428734d60e01b815260040160405180910390fd5b600d548360e0015110806125925750600e548360e00151115b806125b057508261010001518360e001516125ad9190613310565b15155b156125ce5760405163253fffcf60e11b815260040160405180910390fd5b600f548360c0015110806125e757506010548360c00151115b156126055760405163ef9bc65f60e01b815260040160405180910390fd5b6019546101c08401515111806126395750601a5460e08401516101c085015160200151612637916301e1338090612895565b115b8061264e5750601b546101c084015160400151115b806126635750601c546101c084015160600151115b8061267557506015546101c084015151105b8061269e575060165460e08401516101c08501516020015161269c916301e13380906128bb565b105b806126b357506017546101c084015160400151105b806126c857506018546101c084015160600151105b156126e657604051632d8768f960e01b815260040160405180910390fd5b6011548210806126f7575060125482115b15612715576040516330554de160e01b815260040160405180910390fd5b600061273a6611c37937e0800061273485671bc16d674ec800006128d9565b906128f5565b60135490915061274a90826128f5565b82108061277d575061277a612771671bc16d674ec8000061276b86856128f5565b9061290b565b60145490612920565b82115b1561279b576040516383ebdfb760e01b815260040160405180910390fd5b60006127ab838660e00151612935565b60055460408701519192506001600160a01b0391821691161415806127d65750600654856060015114155b806127f557506007546101608601516001600160a01b03908116911614155b8061281457506008546101808601516001600160a01b03908116911614155b8061283357506009546101a08601516001600160a01b03908116911614155b8061285257506004546101408601516001600160a01b03908116911614155b80612861575061012085015115155b1561287f5760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b60008260001904841183021582026128ac57600080fd5b50910281810615159190040190565b60008260001904841183021582026128d257600080fd5b5091020490565b60006128ee83670de0b6b3a7640000846128bb565b9392505050565b600081831161290457816128ee565b5090919050565b60006128ee8383670de0b6b3a76400006128bb565b600081831161292f57826128ee565b50919050565b600080612966612957612949866064613660565b66a5bbed86c5a0009061290b565b6748cd4072281e0000906128d9565b905061297a670de0b6b3a7640000826128d9565b90506129d28161276b6129a56129a061299b89670de0b6b3a7640000613677565b6129da565b612a08565b6129cc6129a06129ba8a8a6301e133806128bb565b61299b90670de0b6b3a7640000613677565b906128d9565b949350505050565b60006001600160ff1b03821115612a045760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213612a2a5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ab69084901c6129da565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255906000526020600020908101928215612c8a579160200282015b82811115612c8a5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612c57565b50612a049291505b80821115612a045760008155600101612c92565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006128ee6020830184612ca6565b60006080828403121561292f57600080fd5b600060208284031215612d2357600080fd5b5035919050565b60008060208385031215612d3d57600080fd5b823567ffffffffffffffff80821115612d5557600080fd5b818501915085601f830112612d6957600080fd5b813581811115612d7857600080fd5b8660208260051b8501011115612d8d57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612de05783516001600160a01b031683529284019291840191600101612dbb565b50909695505050505050565b6001600160a01b0381168114612e0157600080fd5b50565b8035612e0f81612dec565b919050565b600060208284031215612e2657600080fd5b81356128ee81612dec565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715612e6b57612e6b612e31565b60405290565b600082601f830112612e8257600080fd5b813567ffffffffffffffff80821115612e9d57612e9d612e31565b604051601f8301601f19908116603f01168101908282118183101715612ec557612ec5612e31565b81604052838152866020858801011115612ede57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215612f1057600080fd5b6040516080810181811067ffffffffffffffff82111715612f3357612f33612e31565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102408284031215612f7757600080fd5b612f7f612e47565b9050612f8a82612e04565b8152612f9860208301612e04565b6020820152612fa960408301612e04565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140613006818401612e04565b90820152610160613018838201612e04565b9082015261018061302a838201612e04565b908201526101a061303c838201612e04565b908201526101c061304f84848301612efe565b9082015292915050565b60006060828403121561306b57600080fd5b6040516060810167ffffffffffffffff828210818311171561308f5761308f612e31565b81604052829350843591506130a382612dec565b90825260208401359081151582146130ba57600080fd5b81602084015260408501359150808211156130d457600080fd5b506130e185828601612e71565b6040830152505092915050565b6000806000806000806000806000806103608b8d03121561310e57600080fd5b8a35995061311e60208c01612e04565b985060408b013567ffffffffffffffff8082111561313b57600080fd5b6131478e838f01612e71565b99506131568e60608f01612f64565b98506102a08d013591508082111561316d57600080fd5b6131798e838f01612e71565b97506102c08d013596506102e08d013595506103008d013594506103208d01359150808211156131a857600080fd5b506131b58d828e01613059565b9250506103408b013590509295989b9194979a5092959850565b600080604083850312156131e257600080fd5b82356131ed81612dec565b946020939093013593505050565b600080600080600080600080610320898b03121561321857600080fd5b88359750602089013561322a81612dec565b96506132398a60408b01612f64565b955061028089013567ffffffffffffffff81111561325657600080fd5b6132628b828c01612e71565b989b979a5095986102a0810135976102c082013597506102e0820135965061030090910135945092505050565b600080604083850312156132a257600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610f50565b600181811c908216806132f057607f821691505b60208210810361292f57634e487b7160e01b600052602260045260246000fd5b60008261332d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b80516001600160a01b03168252602081015161336f60208401826001600160a01b03169052565b50604081015161338a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516133f0828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b60006102c087835280602084015261347381840188612ca6565b90506134826040840187613348565b8281036102808401526134958186612ca6565b915050826102a08301529695505050505050565b6000602082840312156134bb57600080fd5b81516128ee81612dec565b6001600160a01b03851681526102a0602082018190526000906134eb83820187612ca6565b90506134fa6040840186613348565b82810361028084015261350d8185612ca6565b979650505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e084015261356f610100840182612ca6565b98975050505050505050565b60006020828403121561358d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f5057610f50613594565b634e487b7160e01b600052603160045260246000fd5b60006102c08783526135e86020840188613348565b806102608401526135fb81840187612ca6565b61028084019590955250506102a001529392505050565b60208082528181018390526000908460408401835b8681101561365557823561363a81612dec565b6001600160a01b031682529183019190830190600101613627565b509695505050505050565b8082028115828204841417610f5057610f50613594565b80820180821115610f5057610f5061359456fea2646970667358221220be80dea5cc16b1535b83c7c3c215ffa84c788a86a6fd7a5c3e5b8bed638cb13e64736f6c63430008160033608060405234801561001057600080fd5b50612277806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638cc23ce01462000033575b600080fd5b6200004a620000443660046200036d565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208b8b8b8a8a8a8a8a604051620000a890620000ec565b620000bb9897969594939291906200058d565b8190604051809103906000f5905080158015620000dc573d6000803e3d6000fd5b509b9a5050505050505050505050565b611c09806200063983390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715620001375762000137620000fa565b60405290565b600082601f8301126200014f57600080fd5b813567ffffffffffffffff808211156200016d576200016d620000fa565b604051601f8301601f19908116603f01168101908282118183101715620001985762000198620000fa565b81604052838152866020858801011115620001b257600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114620001ea57600080fd5b919050565b6000608082840312156200020257600080fd5b6040516080810181811067ffffffffffffffff82111715620002285762000228620000fa565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600061026082840312156200026d57600080fd5b6200027762000110565b90506200028482620001d2565b81526200029460208301620001d2565b6020820152620002a760408301620001d2565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016062000312818401620001d2565b9082015261018062000326838201620001d2565b908201526101a06200033a838201620001d2565b908201526101c06200034e838201620001d2565b908201526101e06200036384848301620001ef565b9082015292915050565b6000806000806000806000806000806103808b8d0312156200038e57600080fd5b8a3567ffffffffffffffff80821115620003a757600080fd5b620003b58e838f016200013d565b9b50620003c68e60208f0162000259565b9a50620003d76102808e01620001d2565b99506102a08d0135915080821115620003ef57600080fd5b50620003fe8d828e016200013d565b975050620004106102c08c01620001d2565b9550620004216102e08c01620001d2565b9450620004326103008c01620001d2565b9350620004436103208c01620001d2565b9250620004546103408c01620001d2565b91506103608b013590509295989b9194979a5092959850565b80516001600160a01b0316825260208101516200049560208401826001600160a01b03169052565b506040810151620004b160408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015162000524828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b60006103408083528a518082850152600091505b80821015620005c5576020828d0101516103608386010152602082019150620005a1565b6103609150600082828601015281601f19601f83011685010192505050620005f1602083018a6200046d565b6001600160a01b039788166102808301529587166102a08201529386166102c08501529185166102e08401528416610300830152909216610320909201919091529291505056fe6103406040523480156200001257600080fd5b5060405162001c0938038062001c0983398101604081905262000035916200073f565b6001600081905587516001600160a01b0390811660809081526020808b0151831660a0908152918b01516101a052908a01516101c05260c0808b01516101e090815260e0808d015161020052610120808e0151909352610100808e0151909152610140808e0151909152908c01805151909252815190920151909152805160409081015161016052905160609081015161018052908a01518216610240528901516102605287166102205288908890889088908890889088908890620000fc8982620008f8565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e05281166103005260a05160408051633a9ae92360e11b81529051919092169450637535d2469350600480830193506020928290030181865afa1580156200016a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001909190620009c4565b6001600160a01b03908116610320819052608051620001b39216906001620001c1565b505050505050505062000a26565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200021b90859083906200028d16565b6200028757604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200027b9186916200033e16565b6200028784826200033e565b50505050565b6000806000846001600160a01b031684604051620002ac9190620009e4565b6000604051808303816000865af19150503d8060008114620002eb576040519150601f19603f3d011682016040523d82523d6000602084013e620002f0565b606091505b50915091508180156200031e5750805115806200031e5750808060200190518101906200031e919062000a02565b80156200033557506000856001600160a01b03163b115b95945050505050565b6000620003556001600160a01b03841683620003b1565b905080516000141580156200037d5750808060200190518101906200037b919062000a02565b155b15620003ac57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060620003c183836000620003c8565b9392505050565b606081471015620003ef5760405163cd78605960e01b8152306004820152602401620003a3565b600080856001600160a01b031684866040516200040d9190620009e4565b60006040518083038185875af1925050503d80600081146200044c576040519150601f19603f3d011682016040523d82523d6000602084013e62000451565b606091505b509092509050620004648683836200046e565b9695505050505050565b60608262000487576200048182620004d2565b620003c1565b81511580156200049f57506001600160a01b0384163b155b15620004ca57604051639996b31560e01b81526001600160a01b0385166004820152602401620003a3565b5080620003c1565b805115620004e35780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b03811182821017156200053b576200053b620004ff565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200056c576200056c620004ff565b604052919050565b60005b838110156200059157818101518382015260200162000577565b50506000910152565b6001600160a01b0381168114620004fc57600080fd5b8051620005bd816200059a565b919050565b600060808284031215620005d557600080fd5b604051608081016001600160401b0381118282101715620005fa57620005fa620004ff565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600061026082840312156200063f57600080fd5b6200064962000515565b90506200065682620005b0565b81526200066660208301620005b0565b60208201526200067960408301620005b0565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e0820152610100808301518183015250610120808301518183015250610140808301518183015250610160620006e4818401620005b0565b90820152610180620006f8838201620005b0565b908201526101a06200070c838201620005b0565b908201526101c062000720838201620005b0565b908201526101e06200073584848301620005c2565b9082015292915050565b600080600080600080600080610340898b0312156200075d57600080fd5b88516001600160401b03808211156200077557600080fd5b818b0191508b601f8301126200078a57600080fd5b8151818111156200079f576200079f620004ff565b620007b4601f8201601f191660200162000541565b91508082528c6020828501011115620007cc57600080fd5b620007df81602084016020860162000574565b509850620007f390508a60208b016200062b565b9650620008046102808a01620005b0565b9550620008156102a08a01620005b0565b9450620008266102c08a01620005b0565b9350620008376102e08a01620005b0565b9250620008486103008a01620005b0565b9150620008596103208a01620005b0565b90509295985092959890939650565b600181811c908216806200087d57607f821691505b6020821081036200089e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003ac576000816000526020600020601f850160051c81016020861015620008cf5750805b601f850160051c820191505b81811015620008f057828155600101620008db565b505050505050565b81516001600160401b03811115620009145762000914620004ff565b6200092c8162000925845462000868565b84620008a4565b602080601f8311600181146200096457600084156200094b5750858301515b600019600386901b1c1916600185901b178555620008f0565b600085815260208120601f198616915b82811015620009955788860151825594840194600190910190840162000974565b5085821015620009b45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620009d757600080fd5b8151620003c1816200059a565b60008251620009f881846020870162000574565b9190910192915050565b60006020828403121562000a1557600080fd5b81518015158114620003c157600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516110ad62000b5c60003960005050600081816105ee0152818161065a01526107530152600081816105660152818161078301526107e101526000818161051f015261097c0152600081816105ba01526106f00152600081816101ce015281816103900152818161062a0152818161068c015281816106be01528181610724015281816107b6015281816108120152818161094a01526109af0152600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506110ad6000f3fe6080604052600436106101b75760003560e01c80639032c726116100ec578063d899e1121161008a578063e44808bc11610064578063e44808bc14610588578063eac3e799146105a8578063f3f70707146105dc578063f698da2514610610576101b7565b8063d899e11214610554578063dbbe807014610541578063ded06231146103ca576101b7565b8063a6e8a859116100c6578063a6e8a8591461050d578063ab033ea9146102c7578063cba2e58d14610541578063cbc1343414610304576101b7565b80639032c726146104cd5780639cd241af146104ed578063a22cb4651461049a576101b7565b806330adf81f116101595780634c2ac1d9116101335780634c2ac1d91461046c5780634ed2d6ac1461047f5780637180c8ca1461049a57806377d05ff4146104ba576101b7565b806330adf81f146103f85780633e691db91461042c578063414f826d1461044c576101b7565b806317fad7fc1161019557806317fad7fc1461033e5780631c0f12b61461035e57806321b57d531461037e57806329b23fc1146103ca576101b7565b806301681a62146102c757806302329a29146102e9578063074a6de914610304575b3480156101c357600080fd5b5060003660606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051610206929190610a85565b600060405180830381855af49150503d8060008114610241576040519150601f19603f3d011682016040523d82523d6000602084013e610246565b606091505b5091509150811561026a57604051638bb0a34b60e01b815260040160405180910390fd5b600061027582610a95565b90506001600160e01b03198116636e64089360e11b1461029757815160208301fd5b8151600319810160048401908152926102b891810160200190602401610b06565b80519650602001945050505050f35b3480156102d357600080fd5b506102e76102e2366004610bcb565b610625565b005b3480156102f557600080fd5b506102e76102e2366004610c04565b34801561031057600080fd5b5061032461031f366004610c31565b610652565b604080519283526020830191909152015b60405180910390f35b34801561034a57600080fd5b506102e7610359366004610ccd565b610687565b34801561036a57600080fd5b506102e7610379366004610d62565b6106b9565b34801561038a57600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610335565b3480156103d657600080fd5b506103ea6103e5366004610daa565b6106e9565b604051908152602001610335565b34801561040457600080fd5b506103ea7f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b34801561043857600080fd5b506103ea610447366004610e04565b61071d565b34801561045857600080fd5b506102e7610467366004610e41565b61074e565b6103ea61047a366004610e63565b61077c565b34801561048b57600080fd5b506102e7610379366004610ec7565b3480156104a657600080fd5b506102e76104b5366004610f11565b6107b1565b6103ea6104c8366004610c31565b6107da565b3480156104d957600080fd5b506102e76104e8366004610f46565b61080d565b3480156104f957600080fd5b506102e7610508366004610fc4565b610945565b34801561051957600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b61032461054f366004610daa565b610974565b34801561056057600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561059457600080fd5b506102e76105a3366004610ffc565b6109aa565b3480156105b457600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e857600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561061c57600080fd5b506103ea6109db565b61064e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b5050565b60008061067e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b50935093915050565b6106b07f0000000000000000000000000000000000000000000000000000000000000000610a69565b50505050505050565b6106e27f0000000000000000000000000000000000000000000000000000000000000000610a69565b5050505050565b60006107147f0000000000000000000000000000000000000000000000000000000000000000610a69565b50949350505050565b60006107487f0000000000000000000000000000000000000000000000000000000000000000610a69565b50919050565b6107777f0000000000000000000000000000000000000000000000000000000000000000610a69565b505050565b60006107a77f0000000000000000000000000000000000000000000000000000000000000000610a69565b5095945050505050565b6107777f0000000000000000000000000000000000000000000000000000000000000000610a69565b60006108057f0000000000000000000000000000000000000000000000000000000000000000610a69565b509392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108426109db565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b179052516108eb919061105b565b600060405180830381855af49150503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b50915091508161093d57805160208201fd5b805160208201f35b61096e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b50505050565b6000806109a07f0000000000000000000000000000000000000000000000000000000000000000610a69565b5094509492505050565b6109d37f0000000000000000000000000000000000000000000000000000000000000000610a69565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6060600080836001600160a01b03166000366040516108eb9291905b8183823760009101908152919050565b805160208201516001600160e01b03198082169291906004831015610ac45780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610afd578181015183820152602001610ae5565b50506000910152565b600060208284031215610b1857600080fd5b815167ffffffffffffffff80821115610b3057600080fd5b818401915084601f830112610b4457600080fd5b815181811115610b5657610b56610acc565b604051601f8201601f19908116603f01168101908382118183101715610b7e57610b7e610acc565b81604052828152876020848701011115610b9757600080fd5b610ba8836020830160208801610ae2565b979650505050505050565b6001600160a01b0381168114610bc857600080fd5b50565b600060208284031215610bdd57600080fd5b8135610be881610bb3565b9392505050565b80358015158114610bff57600080fd5b919050565b600060208284031215610c1657600080fd5b610be882610bef565b60006060828403121561074857600080fd5b600080600060608486031215610c4657600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610c6b57600080fd5b610c7786828701610c1f565b9150509250925092565b60008083601f840112610c9357600080fd5b50813567ffffffffffffffff811115610cab57600080fd5b6020830191508360208260051b8501011115610cc657600080fd5b9250929050565b60008060008060008060808789031215610ce657600080fd5b8635610cf181610bb3565b95506020870135610d0181610bb3565b9450604087013567ffffffffffffffff80821115610d1e57600080fd5b610d2a8a838b01610c81565b90965094506060890135915080821115610d4357600080fd5b50610d5089828a01610c81565b979a9699509497509295939492505050565b60008060008060808587031215610d7857600080fd5b843593506020850135610d8a81610bb3565b92506040850135610d9a81610bb3565b9396929550929360600135925050565b60008060008060808587031215610dc057600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115610dec57600080fd5b610df887828801610c1f565b91505092959194509250565b600060208284031215610e1657600080fd5b813567ffffffffffffffff811115610e2d57600080fd5b610e3984828501610c1f565b949350505050565b60008060408385031215610e5457600080fd5b50508035926020909101359150565b600080600080600060a08688031215610e7b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610eae57600080fd5b610eba88828901610c1f565b9150509295509295909350565b60008060008060808587031215610edd57600080fd5b843593506020850135610eef81610bb3565b9250604085013591506060850135610f0681610bb3565b939692955090935050565b60008060408385031215610f2457600080fd5b8235610f2f81610bb3565b9150610f3d60208401610bef565b90509250929050565b600080600080600080600060e0888a031215610f6157600080fd5b8735610f6c81610bb3565b96506020880135610f7c81610bb3565b9550610f8a60408901610bef565b945060608801359350608088013560ff81168114610fa757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080600060608486031215610fd957600080fd5b833592506020840135610feb81610bb3565b929592945050506040919091013590565b600080600080600060a0868803121561101457600080fd5b85359450602086013561102681610bb3565b9350604086013561103681610bb3565b925060608601359150608086013561104d81610bb3565b809150509295509295909350565b6000825161106d818460208701610ae2565b919091019291505056fea26469706673582212200cec65aaa4d5fb8d627a4bac36b985a95c95bb1f86ab3670ead5cad157ccaa9964736f6c63430008160033a2646970667358221220066ee79a308b12b183f81004b36d42d282944ebc23d976f07acfaec5132a2aa564736f6c63430008160033608060405234801561001057600080fd5b50614ce5806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638c98b3c61462000033575b600080fd5b6200004a6200004436600462000247565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051620000a290620000da565b620000af929190620003bc565b8190604051809103906000f5905080158015620000d0573d6000803e3d6000fd5b5095945050505050565b6147bf80620004f183390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715620001255762000125620000e8565b60405290565b80356001600160a01b03811681146200014357600080fd5b919050565b6000608082840312156200015b57600080fd5b6040516080810181811067ffffffffffffffff82111715620001815762000181620000e8565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f830112620001c457600080fd5b813567ffffffffffffffff80821115620001e257620001e2620000e8565b604051601f8301601f19908116603f011681019082821181831017156200020d576200020d620000e8565b816040528381528660208588010111156200022757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156200026057600080fd5b610260808212156200027157600080fd5b6200027b620000fe565b915062000288876200012b565b825262000298602088016200012b565b6020830152620002ab604088016200012b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e0830152610100808801358184015250610120808801358184015250610140808801358184015250610160620003168189016200012b565b908301526101806200032a8882016200012b565b908301526101a06200033e8882016200012b565b908301526101c0620003528882016200012b565b908301526101e0620003678989830162000148565b81840152508195506200037c8188016200012b565b9450505061028085013567ffffffffffffffff8111156200039c57600080fd5b620003aa87828801620001b2565b949793965093946102a0013593505050565b82516001600160a01b0316815261028081016020840151620003e960208401826001600160a01b03169052565b5060408401516200040560408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015162000478828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102a06040523480156200001257600080fd5b50604051620047bf380380620047bf833981016040819052620000359162000578565b600160005581516001600160a01b039081166080908152602080850151831660a0818152928601516101a052918501516101c05260c0808601516101e090815260e08088015161020052610120808901519093526101008089015190915261014080890151909152908701805151909252815183015190528051604090810151610160529051606090810151610180528187015185166102405286015161026052928416610220528251633a9ae92360e11b815292519192637535d24692600480830193928290030181865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a9190620006b5565b6001600160a01b039081166102808190526080516200015d921690600162000165565b50506200072a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001bf90859083906200023116565b6200022b57604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200021f918691620002e216565b6200022b8482620002e2565b50505050565b6000806000846001600160a01b031684604051620002509190620006d5565b6000604051808303816000865af19150503d80600081146200028f576040519150601f19603f3d011682016040523d82523d6000602084013e62000294565b606091505b5091509150818015620002c2575080511580620002c2575080806020019051810190620002c2919062000706565b8015620002d957506000856001600160a01b03163b115b95945050505050565b6000620002f96001600160a01b0384168362000355565b90508051600014158015620003215750808060200190518101906200031f919062000706565b155b156200035057604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b606062000365838360006200036c565b9392505050565b606081471015620003935760405163cd78605960e01b815230600482015260240162000347565b600080856001600160a01b03168486604051620003b19190620006d5565b60006040518083038185875af1925050503d8060008114620003f0576040519150601f19603f3d011682016040523d82523d6000602084013e620003f5565b606091505b5090925090506200040886838362000412565b9695505050505050565b6060826200042b57620004258262000476565b62000365565b81511580156200044357506001600160a01b0384163b155b156200046e57604051639996b31560e01b81526001600160a01b038516600482015260240162000347565b508062000365565b805115620004875780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60405161020081016001600160401b0381118282101715620004d557634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b0381168114620004a057600080fd5b8051620004fe81620004db565b919050565b6000608082840312156200051657600080fd5b604051608081016001600160401b03811182821017156200054757634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000808284036102808112156200058e57600080fd5b610260808212156200059f57600080fd5b620005a9620004a3565b9150620005b685620004f1565b8252620005c660208601620004f1565b6020830152620005d960408601620004f1565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016062000644818701620004f1565b9083015261018062000658868201620004f1565b908301526101a06200066c868201620004f1565b908301526101c062000680868201620004f1565b908301526101e0620006958787830162000503565b8184015250819350620006aa818601620004f1565b925050509250929050565b600060208284031215620006c857600080fd5b81516200036581620004db565b6000825160005b81811015620006f85760208186018101518583015201620006dc565b506000920191825250919050565b6000602082840312156200071957600080fd5b815180151581146200036557600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613eec620008d36000396000818161154c01528181612692015281816126df01528181612b3f0152612dca015260008181610d9b01526123e8015260008181610d6c01526123ab015260008181610c4601528181610ecb01528181610f5b01528181610feb0152818161107b015281816116d60152818161176e0152818161193701528181611f6201528181612038015261218f01526000610e33015260008181610e0d015261259b015260008181610de70152612575015260008181610dc1015261254f01526000611188015260006111620152600061113c01526000611116015260008181610ea501526125c1015260008181610e590152818161131d0152612993015260008181610e7f0152612d0601526000818161062501528181610d3d01528181611ed30152612c5801526000818161075501528181610d0e015281816112b601528181612671015281816126be01528181612af90152612bdd0152613eec6000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c806360246c881161013b578063becee9c3116100b8578063d81657431161007c578063d816574314610504578063e44808bc14610519578063e985e9c51461052c578063fba560081461053f578063fbfa77cf1461056e57600080fd5b8063becee9c3146104ae578063c55dae63146104ce578063c69e16ad146104d6578063c6e6f592146104de578063cf210e65146104f157600080fd5b8063a22cb465116100ff578063a22cb4651461044f578063ab033ea914610462578063b0d9658014610473578063b88fed9f14610488578063bd85b0391461049b57600080fd5b806360246c88146103fa5780637180c8ca1461040f5780637ecebe0014610421578063950c5d03146104345780639cd241af1461043c57600080fd5b806320fc4881116101c95780633e691db91161018d5780633e691db91461039657806346fbf68e146103a95780634e41a1fb146103cc5780634ed2d6ac146103df57806354fd4d50146103f257600080fd5b806320fc4881146102fb57806321ff32a914610340578063313ce567146103615780633656eec21461037b5780633a98ef391461038e57600080fd5b806306fdde031161021057806306fdde031461029a5780630a4e1493146102a257806314e5f07b146102c257806317fad7fc146102d55780631c0f12b6146102e857600080fd5b8062ad800c1461024157806301681a621461026a57806302329a291461027f57806304baa00b14610292575b600080fd5b61025461024f366004613087565b610576565b60405161026191906130f0565b60405180910390f35b61027d610278366004613118565b6105ad565b005b61027d61028d366004613143565b6105b6565b6102546105bf565b610254610600565b6102aa610617565b6040516001600160a01b039091168152602001610261565b61027d6102d036600461316f565b610657565b61027d6102e336600461324a565b610673565b61027d6102f63660046132df565b610689565b61030e610309366004613087565b61069c565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610261565b61035361034e366004613327565b610708565b604051908152602001610261565b61036961074e565b60405160ff9091168152602001610261565b610353610389366004613369565b6107e9565b610353610822565b6103536103a4366004613399565b610841565b6103bc6103b7366004613118565b61084c565b6040519015158152602001610261565b6102546103da366004613087565b61086c565b61027d6103ed3660046133d4565b61087a565b6102546108c8565b6104026108fd565b604051610261919061341e565b61027d61041d3660046134bf565b5050565b61035361042f366004613118565b610c0c565b6102aa610c38565b61027d61044a3660046134ed565b610c78565b61027d61045d3660046134bf565b610c89565b61027d610470366004613118565b50565b61047b610cf5565b6040516102619190613525565b610353610496366004613087565b6111bd565b6103536104a9366004613087565b6111cb565b6104c16104bc36600461364b565b6111ed565b604051610261919061368d565b6102aa6112a8565b6103536112e8565b6103536104ec366004613087565b611302565b6103536104ff366004613087565b611310565b61050c611347565b60405161026191906136d1565b61027d6105273660046137e2565b611453565b6103bc61053a366004613841565b61149b565b6105476114df565b6040805182516001600160801b039081168252602093840151169281019290925201610261565b6102aa61153e565b60606105a86105848361157e565b60405160200161059491906130f0565b6040516020818303038152906040526116a6565b919050565b610470816116ca565b61047081611935565b60606105fd6040518060400160405280601081526020016f416176654c324879706572647269766560801b81525060405160200161059491906130f0565b90565b60606105fd6001604051602001610594919061386f565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105fd9101610594565b610668898989898989898989611a4f565b505050505050505050565b610681868686868686611c46565b505050505050565b6106968484848433611cfa565b50505050565b60408051606081018252600080825260208201819052918101919091526105a860086000848152602001908152602001600020604051602001610594919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b03868116855290835281842090851684528252808320548151928301526107479101610594565b9392505050565b60006105fd7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190613920565b6040805160ff909216602083015201610594565b6000828152600a602090815260408083206001600160a01b038516845282528083205481519283015261081c9101610594565b92915050565b60006105fd61082f611ebb565b60405160200161059491815260200190565b600061081c82611f4b565b60006105a861085a8361218a565b60408051911515602083015201610594565b60606105a86105848361226f565b836108848161236d565b6001600160a01b0316336001600160a01b0316146108b557604051632aab8bd360e01b815260040160405180910390fd5b6108c18585858561242a565b5050505050565b60606105fd60405180604001604052806007815260200166076312e302e32360cc1b81525060405160200161059491906130f0565b610976604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000610980612497565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109eb9190613969565b6109f5919061397c565b905060008215610b075773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a22856124aa565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af7919061398f565b509050610b048184612640565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bd857610bd38486612655565b610bdb565b60005b81526003546001600160801b0316602091820152604051919250610c05916105949184910161341e565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105a89101610594565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105fd9101610594565b610c848383833361242a565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610cfd612fa0565b6105fd6040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b91906139bf565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb91906139bf565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b91906139bf565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb91906139bf565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000008152508152506040516020016105949190613525565b60006105a861082f8361266a565b6000818152600b60209081526040808320548151928301526105a89101610594565b606060008267ffffffffffffffff81111561120a5761120a6139dc565b604051908082528060200260200182016040528015611233578160200160208202803683370190505b50905060005b8381101561128c576000858583818110611255576112556139f2565b90506020020135905060008154905080848481518110611277576112776139f2565b60209081029190910101525050600101611239565b506112a181604051602001610594919061368d565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105fd9101610594565b60006105fd60095460405160200161059491815260200190565b60006105a861082f836126b7565b60006105a861082f6113427f000000000000000000000000000000000000000000000000000000000000000085613969565b612704565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105fd6002604051602001610594919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b8461145d8161236d565b6001600160a01b0316336001600160a01b03161461148e57604051632aab8bd360e01b815260040160405180910390fd5b6106818686868686611cfa565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff909116151591810191909152909161081c9101610594565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105fd90606001610594565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105fd9101610594565b606060f882901c6001600160f81b038316600061159a82612748565b905060008360038111156115b0576115b061393d565b036115e2576040518060400160405280600d81526020016c048797065726472697665204c5609c1b815250935061169e565b60018360038111156115f6576115f661393d565b03611622578060405160200161160c9190613a08565b604051602081830303815290604052935061169e565b60028360038111156116365761163661393d565b0361164c578060405160200161160c9190613a41565b60038360038111156116605761166061393d565b0361169e576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b81526004016116c191906130f0565b60405180910390fd5b6116d26127fd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611732573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175691906139bf565b9050336001600160a01b0382161480159061180457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ee91906139bf565b6001600160a01b0316336001600160a01b031614155b801561181657506118143361218a565b155b15611833576040516282b42960e81b815260040160405180910390fd5b600061183d611ebb565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ab9190613a7b565b90506118c16001600160a01b0385168483612827565b816118ca611ebb565b146118e8576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104706001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b791906139bf565b6001600160a01b0316336001600160a01b0316141580156119de57506119dc3361218a565b155b156119fb576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a590611a4490831515815260200190565b60405180910390a150565b83421115611a705760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a975760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b85573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611bc357604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c6357506001600160a01b038516155b15611c815760405163f0dd15fd60e01b815260040160405180910390fd5b828114611ca15760405163174861a760e31b815260040160405180910390fd5b60005b83811015611cf157611ce9858583818110611cc157611cc16139f2565b905060200201358888868686818110611cdc57611cdc6139f2565b9050602002013533611cfa565b600101611ca4565b50505050505050565b6001600160a01b0384161580611d1757506001600160a01b038316155b15611d355760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611df9576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611df9576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611df7576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611df190849061397c565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611e2b90849061397c565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e62908490613969565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f469190613a7b565b905090565b6000611f556127fd565b611f5e82612879565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe291906139bf565b90506001600160a01b038116611ffb6020850185613118565b6001600160a01b03161461202257604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b038216148015906120ce57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b891906139bf565b6001600160a01b0316336001600160a01b031614155b80156120e057506120de3361218a565b155b156120fd576040516282b42960e81b815260040160405180910390fd5b6000612107612497565b60098054600090915590915061211e8183876128af565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461215d60408a0160208b01613143565b60408051938452602084019290925215159082015260600160405180910390a25050506105a86001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122139190810190613aef565b905060005b815181101561226557836001600160a01b031682828151811061223d5761223d6139f2565b60200260200101516001600160a01b03160361225d575060019392505050565b600101612218565b5060009392505050565b606060f882901c6001600160f81b038316600061228b82612748565b905060008360038111156122a1576122a161393d565b036122d3576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b815250935061169e565b60018360038111156122e7576122e761393d565b036122fd578060405160200161160c9190613ba1565b60028360038111156123115761231161393d565b03612327578060405160200161160c9190613bd9565b600383600381111561233b5761233b61393d565b0361169e57505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611f46670de0b6b3a764000061266a565b61250e6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916126069116612948565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261263892900416612948565b905292915050565b60006107478383670de0b6b3a76400006129be565b600061074783670de0b6b3a7640000846129be565b600061081c7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846129dc565b600061081c7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084612a07565b600061272c600b6000612718600286612a2b565b815260200190815260200160002054612a60565b61273e600b6000612718600187612a2b565b61081c9190613c05565b60408051604e80825260808201909252606091906000908260208201818036833701905050905060005b84156127ef57612783600a86613c3b565b61278e906030613969565b60f81b82600161279e848761397c565b6127a8919061397c565b815181106127b8576127b86139f2565b60200101906001600160f81b031916908160001a905350806127d981613c4f565b91506127e89050600a86613c68565b9450612772565b918290030190815292915050565b60026000540361282057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c84908490612a8e565b60006128886020830183613118565b6001600160a01b0316036104705760405163f0dd15fd60e01b815260040160405180910390fd5b6000806128bc8585612640565b90506128c7816126b7565b9450846000036128db576000915050610747565b8491506128ee6040840160208501613143565b1561291d57612916856129046020860186613118565b6129116040870187613c7c565b612af1565b9150612940565b6129408561292e6020860186613118565b61293b6040870187613c7c565b612c56565b509392505050565b600080670de0b6b3a764000061295c612cfe565b6129669190613cc3565b9050808311612976576000612980565b612980818461397c565b91506107476129b7670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613cc3565b8390612655565b60008260001904841183021582026129d557600080fd5b5091020490565b60006129ff6129eb8585612d2a565b83906b033b2e3c9fd0803ce80000006129be565b949350505050565b60006129ff6b033b2e3c9fd0803ce8000000612a238686612d2a565b8491906129be565b60006001600160f81b03821115612a555760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60006001600160ff1b03821115612a8a5760405163396ea70160e11b815260040160405180910390fd5b5090565b6000612aa36001600160a01b03841683612d98565b90508051600014158015612ac8575080806020019051810190612ac69190613cda565b155b15610c8457604051635274afe760e01b81526001600160a01b03841660048201526024016116c1565b600080612b267f0000000000000000000000000000000000000000000000000000000000000000612b218861266a565b612da6565b60405163470cc4cf60e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e19899e906024016020604051808303816000875af1158015612b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb49190613a7b565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018390529193507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015612c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4c9190613cda565b5050949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84612c8f8761266a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015612cda573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c19190613cda565b6000611f46427f0000000000000000000000000000000000000000000000000000000000000000612e68565b60405163d15e005360e01b81526001600160a01b0383811660048301526000919083169063d15e005390602401602060405180830381865afa158015612d74573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190613a7b565b606061074783836000612e7e565b6040516335ea6a7560e01b81526001600160a01b03838116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101e060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190613d77565b60e081015190915060006000198514612e4f5784612e58565b6001600160801b035b60101b9190910195945050505050565b6000612e748284613c3b565b610747908461397c565b606081471015612ea35760405163cd78605960e01b81523060048201526024016116c1565b600080856001600160a01b03168486604051612ebf9190613e9a565b60006040518083038185875af1925050503d8060008114612efc576040519150601f19603f3d011682016040523d82523d6000602084013e612f01565b606091505b5091509150612f11868383612f1b565b9695505050505050565b606082612f3057612f2b82612f77565b610747565b8151158015612f4757506001600160a01b0384163b155b15612f7057604051639996b31560e01b81526001600160a01b03851660048201526024016116c1565b5080610747565b805115612f875780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016130826040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b60006020828403121561309957600080fd5b5035919050565b60005b838110156130bb5781810151838201526020016130a3565b50506000910152565b600081518084526130dc8160208601602086016130a0565b601f01601f19169290920160200192915050565b60208152600061074760208301846130c4565b6001600160a01b038116811461047057600080fd5b60006020828403121561312a57600080fd5b813561074781613103565b801515811461047057600080fd5b60006020828403121561315557600080fd5b813561074781613135565b60ff8116811461047057600080fd5b60008060008060008060008060006101208a8c03121561318e57600080fd5b8935985060208a0135975060408a01356131a781613103565b965060608a01356131b781613103565b955060808a01356131c781613135565b945060a08a0135935060c08a01356131de81613160565b8093505060e08a013591506101008a013590509295985092959850929598565b60008083601f84011261321057600080fd5b50813567ffffffffffffffff81111561322857600080fd5b6020830191508360208260051b850101111561324357600080fd5b9250929050565b6000806000806000806080878903121561326357600080fd5b863561326e81613103565b9550602087013561327e81613103565b9450604087013567ffffffffffffffff8082111561329b57600080fd5b6132a78a838b016131fe565b909650945060608901359150808211156132c057600080fd5b506132cd89828a016131fe565b979a9699509497509295939492505050565b600080600080608085870312156132f557600080fd5b84359350602085013561330781613103565b9250604085013561331781613103565b9396929550929360600135925050565b60008060006060848603121561333c57600080fd5b83359250602084013561334e81613103565b9150604084013561335e81613103565b809150509250925092565b6000806040838503121561337c57600080fd5b82359150602083013561338e81613103565b809150509250929050565b6000602082840312156133ab57600080fd5b813567ffffffffffffffff8111156133c257600080fd5b82016060818503121561074757600080fd5b600080600080608085870312156133ea57600080fd5b8435935060208501356133fc81613103565b925060408501359150606085013561341381613103565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b600080604083850312156134d257600080fd5b82356134dd81613103565b9150602083013561338e81613135565b60008060006060848603121561350257600080fd5b83359250602084013561351481613103565b929592945050506040919091013590565b81516001600160a01b031681526102608101602083015161355160208401826001600160a01b03169052565b50604083015161356c60408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401518184015250610140808401518184015250610160808401516135de828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b6000806020838503121561365e57600080fd5b823567ffffffffffffffff81111561367557600080fd5b613681858286016131fe565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156136c5578351835292840192918401916001016136a9565b50909695505050505050565b81516001600160801b03168152610180810160208301516136fd60208401826001600160801b03169052565b50604083015161371860408401826001600160801b03169052565b50606083015161373360608401826001600160801b03169052565b5060808301516137486080840182600f0b9052565b5060a083015161376360a08401826001600160801b03169052565b5060c083015161377e60c08401826001600160801b03169052565b5060e083015161379960e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b03811682850152613643565b600080600080600060a086880312156137fa57600080fd5b85359450602086013561380c81613103565b9350604086013561381c81613103565b925060608601359150608086013561383381613103565b809150509295509295909350565b6000806040838503121561385457600080fd5b823561385f81613103565b9150602083013561338e81613103565b60006020808352600084548160018260011c9150600183168061389357607f831692505b6020831081036138b157634e487b7160e01b85526022600452602485fd5b60208801839052604088018180156138d057600181146138e657613911565b60ff198616825284151560051b82019650613911565b60008b81526020902060005b8681101561390b578154848201529085019089016138f2565b83019750505b50949998505050505050505050565b60006020828403121561393257600080fd5b815161074781613160565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561081c5761081c613953565b8181038181111561081c5761081c613953565b600080604083850312156139a257600080fd5b82519150602083015161338e81613135565b80516105a881613103565b6000602082840312156139d157600080fd5b815161074781613103565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b700243cb832b9323934bb32902637b7339d1607d1b815260008251613a348160118501602087016130a0565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b815260008251613a6e8160128501602087016130a0565b9190910160120192915050565b600060208284031215613a8d57600080fd5b5051919050565b6040516101e0810167ffffffffffffffff81118282101715613ab857613ab86139dc565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613ae757613ae76139dc565b604052919050565b60006020808385031215613b0257600080fd5b825167ffffffffffffffff80821115613b1a57600080fd5b818501915085601f830112613b2e57600080fd5b815181811115613b4057613b406139dc565b8060051b9150613b51848301613abe565b8181529183018401918481019088841115613b6b57600080fd5b938501935b83851015613b955784519250613b8583613103565b8282529385019390850190613b70565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b815260008251613bcc8160108501602087016130a0565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b815260008251613a348160118501602087016130a0565b81810360008312801583831316838312821617156112a1576112a1613953565b634e487b7160e01b600052601260045260246000fd5b600082613c4a57613c4a613c25565b500690565b600060018201613c6157613c61613953565b5060010190565b600082613c7757613c77613c25565b500490565b6000808335601e19843603018112613c9357600080fd5b83018035915067ffffffffffffffff821115613cae57600080fd5b60200191503681900382131561324357600080fd5b808202811582820484141761081c5761081c613953565b600060208284031215613cec57600080fd5b815161074781613135565b600060208284031215613d0957600080fd5b6040516020810181811067ffffffffffffffff82111715613d2c57613d2c6139dc565b6040529151825250919050565b80516001600160801b03811681146105a857600080fd5b805164ffffffffff811681146105a857600080fd5b805161ffff811681146105a857600080fd5b60006101e08284031215613d8a57600080fd5b613d92613a94565b613d9c8484613cf7565b8152613daa60208401613d39565b6020820152613dbb60408401613d39565b6040820152613dcc60608401613d39565b6060820152613ddd60808401613d39565b6080820152613dee60a08401613d39565b60a0820152613dff60c08401613d50565b60c0820152613e1060e08401613d65565b60e0820152610100613e238185016139b4565b90820152610120613e358482016139b4565b90820152610140613e478482016139b4565b90820152610160613e598482016139b4565b90820152610180613e6b848201613d39565b908201526101a0613e7d848201613d39565b908201526101c0613e8f848201613d39565b908201529392505050565b60008251613eac8184602087016130a0565b919091019291505056fea2646970667358221220027492a2b2cb54579e8697821ff77ffd42975d4319dbc26e349bda09cca8e16064736f6c63430008160033a264697066735822122024055918114095cf1348f6163455f1c9f5b9fcd274441ce1e44e7f5d7653561b64736f6c63430008160033608060405234801561001057600080fd5b50614cd2806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638c98b3c61462000033575b600080fd5b6200004a6200004436600462000247565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051620000a290620000da565b620000af929190620003bc565b8190604051809103906000f5905080158015620000d0573d6000803e3d6000fd5b5095945050505050565b6147ac80620004f183390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715620001255762000125620000e8565b60405290565b80356001600160a01b03811681146200014357600080fd5b919050565b6000608082840312156200015b57600080fd5b6040516080810181811067ffffffffffffffff82111715620001815762000181620000e8565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f830112620001c457600080fd5b813567ffffffffffffffff80821115620001e257620001e2620000e8565b604051601f8301601f19908116603f011681019082821181831017156200020d576200020d620000e8565b816040528381528660208588010111156200022757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156200026057600080fd5b610260808212156200027157600080fd5b6200027b620000fe565b915062000288876200012b565b825262000298602088016200012b565b6020830152620002ab604088016200012b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e0830152610100808801358184015250610120808801358184015250610140808801358184015250610160620003168189016200012b565b908301526101806200032a8882016200012b565b908301526101a06200033e8882016200012b565b908301526101c0620003528882016200012b565b908301526101e0620003678989830162000148565b81840152508195506200037c8188016200012b565b9450505061028085013567ffffffffffffffff8111156200039c57600080fd5b620003aa87828801620001b2565b949793965093946102a0013593505050565b82516001600160a01b0316815261028081016020840151620003e960208401826001600160a01b03169052565b5060408401516200040560408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015162000478828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102a06040523480156200001257600080fd5b50604051620047ac380380620047ac833981016040819052620000359162000578565b600160005581516001600160a01b039081166080908152602080850151831660a0818152928601516101a052918501516101c05260c0808601516101e090815260e08088015161020052610120808901519093526101008089015190915261014080890151909152908701805151909252815183015190528051604090810151610160529051606090810151610180528187015185166102405286015161026052928416610220528251633a9ae92360e11b815292519192637535d24692600480830193928290030181865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a9190620006b5565b6001600160a01b039081166102808190526080516200015d921690600162000165565b50506200072a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001bf90859083906200023116565b6200022b57604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200021f918691620002e216565b6200022b8482620002e2565b50505050565b6000806000846001600160a01b031684604051620002509190620006d5565b6000604051808303816000865af19150503d80600081146200028f576040519150601f19603f3d011682016040523d82523d6000602084013e62000294565b606091505b5091509150818015620002c2575080511580620002c2575080806020019051810190620002c2919062000706565b8015620002d957506000856001600160a01b03163b115b95945050505050565b6000620002f96001600160a01b0384168362000355565b90508051600014158015620003215750808060200190518101906200031f919062000706565b155b156200035057604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b606062000365838360006200036c565b9392505050565b606081471015620003935760405163cd78605960e01b815230600482015260240162000347565b600080856001600160a01b03168486604051620003b19190620006d5565b60006040518083038185875af1925050503d8060008114620003f0576040519150601f19603f3d011682016040523d82523d6000602084013e620003f5565b606091505b5090925090506200040886838362000412565b9695505050505050565b6060826200042b57620004258262000476565b62000365565b81511580156200044357506001600160a01b0384163b155b156200046e57604051639996b31560e01b81526001600160a01b038516600482015260240162000347565b508062000365565b805115620004875780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60405161020081016001600160401b0381118282101715620004d557634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b0381168114620004a057600080fd5b8051620004fe81620004db565b919050565b6000608082840312156200051657600080fd5b604051608081016001600160401b03811182821017156200054757634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000808284036102808112156200058e57600080fd5b610260808212156200059f57600080fd5b620005a9620004a3565b9150620005b685620004f1565b8252620005c660208601620004f1565b6020830152620005d960408601620004f1565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016062000644818701620004f1565b9083015261018062000658868201620004f1565b908301526101a06200066c868201620004f1565b908301526101c062000680868201620004f1565b908301526101e0620006958787830162000503565b8184015250819350620006aa818601620004f1565b925050509250929050565b600060208284031215620006c857600080fd5b81516200036581620004db565b6000825160005b81811015620006f85760208186018101518583015201620006dc565b506000920191825250919050565b6000602082840312156200071957600080fd5b815180151581146200036557600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613eab62000901600039600081816119fe015281816125f6015281816126690152612f25015260005050600050506000610b650152600050506000818160af015281816103250152612dd90152600081816113eb015281816117fc0152818161185f015281816129b7015281816129f301528181612bf20152612db301526000818161071301528181610de801528181610e2f01528181610ff401528181611661015281816116af0152612d8d01526000611b71015260008181611c97015281816122fa01526123730152600081816108d701528181610f8c01528181611c6b0152612347015260008181610e8101526122c001526000818161073401528181610dc601528181610e50015281816110150152818161163f015281816116d00152612dff01526000818161080f01528181610f0b015281816117580152818161219501526134870152600081816105d20152818161064d015281816106c30152818161078f01526107c7015260006127820152600081816119dd015281816125d50152818161262301526127070152613eab6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806329b23fc11461003b578063ded0623114610060575b600080fd5b61004e610049366004613735565b610073565b60405190815260200160405180910390f35b61004e61006e366004613735565b61008c565b60006100818585858561009a565b90505b949350505050565b600061008185858585610310565b60006100a461054f565b6100ad82610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156100ee5760405163211ddda360e11b815260040160405180910390fd5b60006100f86105b2565b90508542101561011d5761011761010d6105ca565b82600460016105f6565b5061012d565b61012b8682600460016105f6565b505b61014261013b600288610c73565b3387610ca8565b6000806000806000806101568b888e610d81565b95509550955095509550955060008c90508c42101561021657826009600082825461018191906137aa565b9091555061019990506101926105ca565b4284611075565b6101a68c888787856111b3565b60006101b18e61132d565b90506101cf6101bf8e611377565b6101c990836137bd565b826113a5565b6101d8896113e4565b6101e4576101e4611444565b60006101ef8a61145d565b90508061020f57604051638bdf918d60e01b815260040160405180910390fd5b505061022d565b610220868961146a565b955061022b8861145d565b505b600061023a878a8d61154b565b90508b81101561025d5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61026d600288610c73565b61027a60208301836137f2565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102b86040890160208a0161381d565b6102cc8a6102c68d8f6137aa565b906115e5565b8d6102da60408c018c61383a565b6040516102ee9897969594939291906138aa565b60405180910390a450939c505050505050505050505050506100846001600055565b600061031a61054f565b61032382610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156103645760405163211ddda360e11b815260040160405180910390fd5b600061036e6105b2565b9050854210156103895761038361010d6105ca565b50610399565b6103978682600460016105f6565b505b6103a761013b600188610c73565b6000806000806000806103bb8b888e6115fa565b95509550955095509550955060008c90508c42101561046e5782600960008282546103e691906137aa565b909155506103f790506101926105ca565b6104048c888787856117e5565b600061040f8261132d565b905061042761041d8e611377565b6101c990836138f2565b610430896113e4565b61043c5761043c611444565b60006104478a61145d565b90508061046757604051638bdf918d60e01b815260040160405180910390fd5b5050610485565b610478868961146a565b95506104838861145d565b505b6000610492878a8d61154b565b90508b8110156104b55760405163c972651760e01b815260040160405180910390fd5b8c898c6104c3600186610c73565b6104d060208301836137f2565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee526788888761050e6040890160208a0161381d565b8a61051c60408b018b61383a565b60405161052f979695949392919061391a565b60405180910390a450919a50505050505050505050506100846001600055565b60026000540361057257604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600061058860208301836137f2565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b60006105c5670de0b6b3a76400006119d6565b905090565b60006105c5427f0000000000000000000000000000000000000000000000000000000000000000611a23565b600084815260086020526040812060018101546001600160801b031615158061061e57504286115b1561063757600101546001600160801b03169050610084565b60008060006106446105ca565b905060006106727f00000000000000000000000000000000000000000000000000000000000000008b6137aa565b90505b818110156106e8576000818152600860205260409020600101546001600160801b031680156106c0576000828152600860205260409020549094506001600160801b031692506106e8565b507f000000000000000000000000000000000000000000000000000000000000000001610675565b8360000361075b578893506107586106fe611a39565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a5a565b92505b5061076583611a71565b6001850180546001600160801b0319166001600160801b03929092169190911790556107bb6107b47f00000000000000000000000000000000000000000000000000000000000000008b61395b565b8a84611075565b6107f9896107f36107ec7f0000000000000000000000000000000000000000000000000000000000000000836137aa565b4290611a9b565b84611075565b61080288611ab0565b50600090506008816108347f00000000000000000000000000000000000000000000000000000000000000008d61395b565b815260208101919091526040016000908120600101546001600160801b0316915061086060028c610c73565b6000818152600b60205260408120549192508c8c83156109a6576001925060008061088f86898d866000611c54565b9150915080600960008282546108a591906137aa565b909155506108c19050866000846108bb81611377565b886111b3565b6108cb81836137aa565b91506108fb86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611d23565b915061090f61090a83856115e5565b611d6d565b600680546002906109309084906201000090046001600160701b031661396e565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061095d82611a71565b6006805460109061097f908490600160801b90046001600160801b031661398e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b60006109b3600184610c73565b6000818152600b60205260409020549091508015610ac257600194506000806109e0838b8f886001611c54565b9150915080600960008282546109f691906137aa565b90915550610a12905083600084610a0c81611377565b8a6117e5565b610a1c818361395b565b9150610a2b61090a83876115e5565b60068054600290610a4c9084906201000090046001600160701b031661396e565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7982611a71565b60068054601090610a9b908490600160801b90046001600160801b031661398e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610afc57610aee610ad487611377565b610add83611377565b610ae791906137bd565b60006113a5565b8e610af98482611d97565b50505b6000610b0784611f91565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be591906139be565b90506001600160a01b03811615610c5a57610c575a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906120dd565b50505b509b9d5050505050505050505050505050949350505050565b60006001600160f81b03821115610c9d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610ceb57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610d2e90849061395b565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600080600080600080600080610d95611a39565b90506000610da28a612168565b6002549091508c908c90610e0c908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f00000000000000000000000000000000000000000000000000000000000000006121b9565b600254919d509a50909550610e74908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a5a565b9550610eaa858c610ea5897f0000000000000000000000000000000000000000000000000000000000000000612229565b612259565b15610eb757610eb7611444565b6000806000610ec885878b8761229b565b9c5091945092509050610edb818461395b565b610ee590896137aa565b9750610ef182846137aa565b610efb908d6137aa565b9b505050505050506000600860007f00000000000000000000000000000000000000000000000000000000000000008c610f35919061395b565b815260208101919091526040016000908120600101546001600160801b03169150428b11610f7d5760008b8152600860205260409020600101546001600160801b0316610f7f565b8b5b90508b610fb08e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611d23565b9950610fbc878a61395b565b9850670de0b6b3a7640000611039610fd487876137aa565b600254610ff2908f90600160801b90046001600160801b031661395b565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a5a565b111561104757611047611444565b6110578a8a878a878760006123af565b939d50919b5090995090975050505050505093975093979195509350565b600083815260086020526040902054600160801b90046001600160801b03168083036110a15750505050565b6000848152600860205260408120546001600160801b0316908190036110fb576110ca83611a71565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611179565b61114c611147670de0b6b3a7640000611114888661395b565b61111e91906139db565b85670de0b6b3a7640000611132878a61395b565b61113c91906139db565b85929190600161244e565b611a71565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61118284611a71565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111fc611147826111df670de0b6b3a7640000866139db565b600554600160801b90046001600160801b031691908a600061244e565b600580546001600160801b03928316600160801b02921691909117905561122286611a71565b61122c90826139f2565b600480546001600160801b03928316600160801b02921691909117905561125284611a71565b6002805460009061126d9084906001600160801b031661398e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061129a836124f8565b600480546000906112af908490600f0b613a12565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506112df85611a71565b60028054601090611301908490600160801b90046001600160801b03166139f2565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000611355600b6000611341600286610c73565b815260200190815260200160002054611377565b611367600b6000611341600187610c73565b61137191906137bd565b92915050565b60006001600160ff1b038211156113a15760405163396ea70160e11b815260040160405180910390fd5b5090565b6003546113c090611147906001600160801b03168484612534565b600380546001600160801b0319166001600160801b03929092169190911790555050565b60006114107f00000000000000000000000000000000000000000000000000000000000000008361259b565b60035461142691906001600160801b03166137aa565b60025461143c906001600160801b0316846115e5565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000611371826004611d97565b600080600061147884611ab0565b9092509050600061148986866115e5565b9050818311156114a15761149e8683856125b0565b95505b828110156114b35780830392506114b8565b600092505b6114c183611d6d565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b909104168087101561151457869003611518565b5060005b61152181611a71565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b60008061155885856115e5565b9050611563816125ce565b9450846000036115775760009150506115de565b84915061158a604084016020850161381d565b156115b9576115b2856115a060208601866137f2565b6115ad604087018761383a565b61261b565b91506115dc565b6115dc856115ca60208601866137f2565b6115d7604087018761383a565b612780565b505b9392505050565b60006115de8383670de0b6b3a76400006125b0565b60008060008060008060008061160e611a39565b9050600061161b8a612168565b6002549091508b908d90611685908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f000000000000000000000000000000000000000000000000000000000000000061282f565b600254919d509b50909550600090819081906116f4908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a5a565b985061170284878b8861229b565b9c509194509092509050611716828461395b565b611720908961395b565b975061172c81846137aa565b611736908e61395b565b9c506117428a8e6137aa565b9b50505050505050506117cf86868386600860007f00000000000000000000000000000000000000000000000000000000000000008f611782919061395b565b81526020810191909152604001600020600101546001600160801b0316428e116117c65760008e8152600860205260409020600101546001600160801b03166117c8565b8e5b60016123af565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b03168381108061182757507f0000000000000000000000000000000000000000000000000000000000000000611825858361395b565b105b1561183457611834611444565b6004549084900390600f0b61184984826137bd565b90508361185586611377565b13801561188a57507f00000000000000000000000000000000000000000000000000000000000000006118888383612883565b105b1561189757611897611444565b600354600160801b90046001600160801b03166118d9611147826118c3670de0b6b3a7640000886139db565b6005546001600160801b031691908c600061244e565b600580546001600160801b0319166001600160801b0392909216919091179055611903888261395b565b905061190e81611a71565b600380546001600160801b03928316600160801b02921691909117905561193483611a71565b600280546001600160801b0319166001600160801b039290921691909117905561195d826124f8565b600480546001600160801b0319166001600160801b039290921691909117905561198687611a71565b600280546010906119a8908490600160801b90046001600160801b031661398e565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60006113717f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846128a9565b6000611a2f8284613a55565b6115de908461395b565b6002546004546000916105c5916001600160801b0390911690600f0b612883565b600061008182611a6b8588886125b0565b906128cc565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611aaa57826115de565b50919050565b6006546000908190611ad3908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611c4f576000611afd838361395b565b9050611b0c6111478286612941565b60068054601090611b2e908490600160801b90046001600160801b03166139f2565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611b67858361295690919063ffffffff16565b90506000611b95827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611ba991906137aa565b90915550611bb99050818361395b565b9150611bc482611a71565b60028054600090611bdf9084906001600160801b031661398e565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c0c8261296b565b60048054600090611c21908490600f0b613a12565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611c618785612956565b91506000611c8f837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611cbb817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611cde57611ccd828261395b565b611cd7908461395b565b9250611cf5565b611ce8828261395b565b611cf290846137aa565b92505b86861015611d1857611d088387896125b0565b9250611d158287896125b0565b91505b509550959350505050565b600080611d3b84611d358a888a6125b0565b90612956565b9050611d488884866125b0565b611d5290826137aa565b905086811115611d625786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611de2916001600160801b03169061395b565b905080600003611df6576001915050611371565b6000611e0185612995565b905080600003611e1657600192505050611371565b600080611e24838589612a31565b9150915080611e3a576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e76929190613ae7565b6040805180830381865af4158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb69190613b5d565b91509150611ed4611ec682611377565b611ecf90613b81565b612bac565b925082611eea5760009650505050505050611371565b611ef382611a71565b60078054600090611f0e9084906001600160801b031661398e565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f3b81611a71565b60078054601090611f5d908490600160801b90046001600160801b031661398e565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611fba87612d44565b6040518263ffffffff1660e01b8152600401611fd69190613b9d565b6040805180830381865af4158015611ff2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120169190613bac565b915091508061202c575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b031691612092916137aa565b61209c919061395b565b9050806000036120b457506000958695509350505050565b60008087116120c45760006120cf565b6120cf8488846125b0565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561210357612103613bdc565b6040519080825280601f01601f19166020018201604052801561212d576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561214e578692505b828152826000602083013e90999098509650505050505050565b6000806121736105ca565b905080831161218357600061218d565b61218d818461395b565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612956565b600080806121da6121d288670de0b6b3a764000061395b565b899087612e7e565b9050861561221c576121ec888861259b565b915061220d8a8a846122068a670de0b6b3a764000061395b565b8989612ea4565b925061221983826137aa565b90505b9750975097945050505050565b600061224761224084670de0b6b3a764000061395b565b839061259b565b6115de90670de0b6b3a764000061395b565b60008061229085612268611a39565b61227291906137aa565b600254610ff2908790600160801b90046001600160801b031661395b565b909210949350505050565b60008080806122f287866122eb8b6122e56122be8c670de0b6b3a764000061395b565b7f00000000000000000000000000000000000000000000000000000000000000009061259b565b9061259b565b9190612e7e565b935061231e847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061233f61233789670de0b6b3a764000061395b565b8a9088612e7e565b905061236b817f000000000000000000000000000000000000000000000000000000000000000061259b565b9350612397847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123a190846137aa565b915050945094509450949050565b6000806000806000808888101561241e5786156123d4576123d18d898b6125b0565b9c505b6123df8c898b6125b0565b9b506123ea8b611377565b6123f38d611377565b6123fd91906137bd565b905061240a8b898b6125b0565b9a506124178a898b6125b0565b995061243d565b6124278b611377565b6124308d611377565b61243a91906137bd565b90505b9b9c9a9b999a975050505050505050565b60008260000361245f5750846124ef565b81156124b25761249061247284876137aa565b61247c85876115e5565b612486888a6115e5565b611d3591906137aa565b9050600061249e8588611a9b565b9050808210156124ac578091505b506124ef565b8285036124c1575060006124ef565b6124ec6124ce848761395b565b6124d8858761259b565b6124e2888a6115e5565b611d35919061395b565b90505b95945050505050565b600060016001607f1b0319821280612516575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b600080612542846000612ec7565b61254d846000612ec7565b61255791906137bd565b905060008113156125735761256c81866137aa565b9450612592565b60008112156125925761258581613b81565b61258f908661395b565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612e7e565b60008260001904841183021582026125c757600080fd5b5091020490565b60006113717f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084612edd565b6000806126507f000000000000000000000000000000000000000000000000000000000000000061264b886119d6565b612f01565b60405163470cc4cf60e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e19899e906024016020604051808303816000875af11580156126ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126de9190613bf2565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018390529193507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015612752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127769190613c0b565b5050949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb846127b9876119d6565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015612804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128289190613c0b565b5050505050565b6000808061285061284888670de0b6b3a764000061395b565b8990876125b0565b9050861561221c5761286288886115e5565b915061220d8a8a8461287c8a670de0b6b3a764000061395b565b8989612fc3565b6000806128908484612fd4565b9092509050806128a2576128a2611444565b5092915050565b60006100846128b88585613013565b83906b033b2e3c9fd0803ce80000006125b0565b6000816000036128e55750670de0b6b3a7640000611371565b826000036128f557506000611371565b600061290083611377565b9050600061291561291086611377565b613081565b905081810261292c670de0b6b3a764000082613c28565b9050612937816132a7565b9695505050505050565b60006115de83670de0b6b3a764000084612e7e565b60006115de83670de0b6b3a7640000846125b0565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b60035460009081906129b0906001600160801b031684612941565b90506129dc7f0000000000000000000000000000000000000000000000000000000000000000826137aa565b6002546001600160801b03161115611aaa576002547f000000000000000000000000000000000000000000000000000000000000000090612a279083906001600160801b031661395b565b6115de919061395b565b612a39613682565b600080612a4584612d44565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612a809190613b9d565b6040805180830381865af4158015612a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac09190613bac565b9350905082612ad5575060009150612ba49050565b6000612afc612af78461016001518561014001516115e590919063ffffffff16565b611377565b612b1c612af785610120015186610100015161259b90919063ffffffff16565b612b2691906137bd565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161214d929190613f11565b6040805180830381865af4158015612169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218d9190613f87565b915091506121ab61219d82611c26565b6121a690613fab565b612e13565b9250826121c157600096505050505050506106ba565b6121ca82611970565b600780546000906121e59084906001600160801b0316613d53565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061221281611970565b60078054601090612234908490600160801b90046001600160801b0316613d53565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61229187612fab565b6040518263ffffffff1660e01b81526004016122ad9190613fc7565b6040805180830381865af41580156122c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ed9190613fd6565b9150915080612303575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161236991613bb7565b6123739190613cd8565b90508060000361238b57506000958695509350505050565b600080871161239b5760006123a6565b6123a68488846118fb565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156123da576123da614006565b6040519080825280601f01601f191660200182016040528015612404576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612425578692505b828152826000602083013e90999098509650505050505050565b600061246087878761245988670de0b6b3a7640000613cd8565b87876130e5565b979650505050505050565b60006115296124ac61248584670de0b6b3a7640000613cd8565b611488670de0b6b3a764000061249b818a61149f565b6124a59190613cd8565b87906126f1565b6124be90670de0b6b3a7640000613bb7565b611ddc84670de0b6b3a7640000613cd8565b600080612507856124df61192f565b6124e99190613bb7565b600254610ef2908790600160801b90046001600160801b0316613cd8565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061253e898789613108565b909250905061254d8289613cd8565b9750600061255c82888a6118fb565b9050612568818b613cd8565b9a989950979650505050505050565b600082600003612588575084611967565b81156125db576125b961259b8487613bb7565b6125a585876106a2565b6125af888a6106a2565b611ddc9190613bb7565b905060006125c7858861199e565b9050808210156125d5578091505b50611967565b8285036125ea57506000611967565b6126156125f78487613cd8565b61260185876126f1565b61260b888a6106a2565b611ddc9190613cd8565b9695505050505050565b6000612647600b6000612633600286611229565b815260200190815260200160002054611c26565b612659600b6000612633600187611229565b6106ba9190613d73565b600061268f7f0000000000000000000000000000000000000000000000000000000000000000836126f1565b6003546126a591906001600160801b0316613bb7565b6002546126bb906001600160801b0316846106a2565b101592915050565b60006106ba82600461206e565b60006124608787876126ea88670de0b6b3a7640000613cd8565b8787613188565b60006106b78383670de0b6b3a764000061284b565b600080808061275787866127508b6114886127298c670de0b6b3a7640000613cd8565b7f0000000000000000000000000000000000000000000000000000000000000000906126f1565b919061284b565b9350612783847f00000000000000000000000000000000000000000000000000000000000000006106a2565b915060006127a461279c89670de0b6b3a7640000613cd8565b8a908861284b565b90506127d0817f00000000000000000000000000000000000000000000000000000000000000006126f1565b93506127fc847f00000000000000000000000000000000000000000000000000000000000000006106a2565b6128069084613bb7565b915050945094509450949050565b600081831161282357816106b7565b5090919050565b6000806128428461283c8a888a61284b565b9061149f565b9050611def8884865b600082600019048411830215820261286257600080fd5b50910281810615159190040190565b60006115296128808585613199565b83906b033b2e3c9fd0803ce80000006118fb565b60006106b783670de0b6b3a7640000846118fb565b6000806128b68484613207565b9092509050806128c8576128c8612512565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526118f59186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613243565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261298784826132b0565b6118f5576040516001600160a01b038481166024830152600060448301526129bc91869182169063095ea7b390606401612904565b6118f58482613243565b6040516335ea6a7560e01b81526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101e060405180830381865afa158015612a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5691906140e2565b60e0015190506000612a6785611970565b60101b609085901b01919091019150509392505050565b60006106ba7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084613353565b600081600003612ae45750670de0b6b3a76400006106ba565b82600003612af4575060006106ba565b6000612aff83611c26565b90506000612b14612b0f86611c26565b613377565b9050818102612b2b670de0b6b3a764000082614205565b90506126158161359d565b600060016001607f1b0382111561199a5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612b7e575060016001607f1b0382135b1561199a5760405163a5353be560e01b815260040160405180910390fd5b600080612baa846000613732565b612bb5846000613732565b612bbf9190613d73565b90506000811315612bdb57612bd48186613bb7565b9450612bfa565b6000811215612bfa57612bed81613fab565b612bf79086613cd8565b94505b50929392505050565b6003546000908190612c1e906001600160801b03168461149f565b9050612c4a7f000000000000000000000000000000000000000000000000000000000000000082613bb7565b6002546001600160801b031611156119ad576002547f000000000000000000000000000000000000000000000000000000000000000090612c959083906001600160801b0316613cd8565b61152c9190613cd8565b612ca7613a8f565b600080612cb384612fab565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612cee9190613fc7565b6040805180830381865af4158015612d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2e9190613fd6565b9350905082612d4357506000915061183b9050565b6000612d6a612d658461016001518561014001516106a290919063ffffffff16565b611c26565b612d8a612d658561012001518661010001516126f190919063ffffffff16565b612d949190613d73565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa15690610476908490600401613c16565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190613c25565b91506104ca6104c58c6117c5565b6117f3565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b91859101613c16565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190613c25565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613b85565b9190611819565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611837565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613c53565b8e61184c565b61063a896118f4565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d9190613b72565b9b5090508a158061073757506107348c6000611901565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611819565b610770565b60005b905061077f6020850185613c53565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613c7e565b866107ca60408c018c613c9b565b6040516107dd9796959493929190613ce2565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c04565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610c89565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613d36565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016124f7929190613ec4565b6040805180830381865af4158015612513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125379190613f3a565b91509150612555612547826117c5565b61255090613f5e565b612afb565b92508261256b576000965050505050505061144c565b6125748261193c565b6007805460009061258f9084906001600160801b0316613d9b565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506125bc8161193c565b600780546010906125de908490600160801b90046001600160801b0316613d9b565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61263b8761168b565b6040518263ffffffff1660e01b81526004016126579190613c16565b6040805180830381865af4158015612673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126979190613f7a565b91509150806126ad575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161271391613b72565b61271d9190613b85565b90508060000361273557506000958695509350505050565b6000808711612745576000612750565b612750848884611819565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561278457612784613faa565b6040519080825280601f01601f1916602001820160405280156127ae576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156127cf578692505b828152826000602083013e9093509150505b9550959350505050565b6000806000836127fa866117c5565b6128049190613dbb565b9050600081121561281c576000809250925050610d57565b946001945092505050565b60008060006128398888888888613252565b90506000612864670de0b6b3a76400006128538888613008565b61285d9190613b72565b8390611837565b9050670de0b6b3a764000081106128985761289161288a670de0b6b3a764000089611837565b8290612cac565b90506128b0565b6128ad61288a670de0b6b3a764000089613008565b90505b6128ba8186611837565b9050888110156128d2576000809350935050506127e1565b97909703976001975095505050505050565b60008060006128f68989888888613281565b9050612910866119b36129098a8d613b72565b87906121a9565b985061291d858a86611819565b985088811015612934576000809250925050611654565b888103670de0b6b3a764000081106129625761295b61288a670de0b6b3a764000089613008565b905061297a565b61297761288a670de0b6b3a764000089611837565b90505b8089101561299057600080935093505050611654565b90970398600198509650505050505050565b60008060008060006129b58987896132a6565b90925090506129c48289613b85565b975060006129d382888a611819565b90506129df818b613b85565b9a989950979650505050505050565b6000806129fc84600061332c565b612a0784600061332c565b612a119190613dbb565b90506000811315612a2d57612a268186613b72565b9450612a4c565b6000811215612a4c57612a3f81613f5e565b612a499086613b85565b94505b50929392505050565b60006100918383670de0b6b3a76400005b6000826000190484118302158202612a7d57600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612aa0610d5e565b612aaa9190613d36565b9050808311612aba576000612ac4565b612ac48184613b85565b915061009161285d670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613d36565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd89190613fc0565b935093509350935080612bf45750600098975050505050505050565b868414612c2557612c048461193c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612c5657612c3583611966565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612c8457612c668261193c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612cc55750670de0b6b3a764000061144c565b82600003612cd55750600061144c565b6000612ce0836117c5565b90506000612cf5612cf0866117c5565b613342565b9050818102612d0c670de0b6b3a764000082614001565b9050612d1781613568565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052611bc79186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506136fd565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612dd9848261376a565b611bc7576040516001600160a01b03848116602483015260006044830152612e0e91869182169063095ea7b390606401612d56565b611bc784826136fd565b6040516335ea6a7560e01b81526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101e060405180830381865afa158015612e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea891906140f5565b60e0015190506000612eb98561193c565b60101b609085901b01919091019150509392505050565b600061144c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008461380d565b600061144c7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084613831565b600082600003612f7b575084610078565b8115612fce57612fac612f8e8487613b72565b612f9885876121a9565b612fa2888a6121a9565b6116859190613b72565b90506000612fba8588611d34565b905080821015612fc8578091505b50610078565b828503612fdd57506000610078565b610075612fea8487613b85565b612ff48587612a55565b612ffe888a6121a9565b6116859190613b85565b600061009183670de0b6b3a764000084612a66565b600060016001607f1b038211156117ef5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190613062906001600160801b031684613008565b905061308e7f000000000000000000000000000000000000000000000000000000000000000082613b72565b6002546001600160801b03161115611910576002547f0000000000000000000000000000000000000000000000000000000000000000906130d99083906001600160801b0316613b85565b6100919190613b85565b6130eb613a44565b6000806130f78461168b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016131329190613c16565b6040805180830381865af415801561314e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131729190613f7a565b9350905082613187575060009150611b0d9050565b60006131a96116168461016001518561014001516121a990919063ffffffff16565b6131c9611616856101200151866101000151612a5590919063ffffffff16565b6131d39190613dbb565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b600061325e8585612cac565b61327761326f866119b3868b6121a9565b859085611819565b6100759190613b72565b600061328d8585612cac565b61327761329e866119b3868b612a55565b859085612a66565b6000806132f6856132f085817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006132e6818c613008565b6132f09190613b85565b90612a55565b9150613322827f00000000000000000000000000000000000000000000000000000000000000006121a9565b9050935093915050565b600081831361333b5781610091565b5090919050565b60008082136133645760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906133e79084901c6117c5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361358357506000919050565b680755bf798b4a1bf1e582126135ac576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612d1774029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117c5565b60006137126001600160a01b03841683613854565b905080516000141580156137375750808060200190518101906137359190613e30565b155b1561376557604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6000806000846001600160a01b0316846040516137879190614218565b6000604051808303816000865af19150503d80600081146137c4576040519150601f19603f3d011682016040523d82523d6000602084013e6137c9565b606091505b50915091508180156137f35750805115806137f35750808060200190518101906137f39190613e30565b80156100785750505050506001600160a01b03163b151590565b600061008e6b033b2e3c9fd0803ce80000006138298686613862565b849190611819565b600061008e6138408585613862565b83906b033b2e3c9fd0803ce8000000611819565b6060610091838360006138d0565b60405163d15e005360e01b81526001600160a01b0383811660048301526000919083169063d15e005390602401602060405180830381865afa1580156138ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100919190613c25565b6060814710156138f55760405163cd78605960e01b815230600482015260240161375c565b600080856001600160a01b031684866040516139119190614218565b60006040518083038185875af1925050503d806000811461394e576040519150601f19603f3d011682016040523d82523d6000602084013e613953565b606091505b5091509150612d178683836060826139735761396e826139ba565b610091565b815115801561398a57506001600160a01b0384163b155b156139b357604051639996b31560e01b81526001600160a01b038516600482015260240161375c565b5080610091565b8051156139ca5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101200160405280613a586139e3565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561191057600080fd5b600080600080600060a08688031215613ac057600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115613af357600080fd5b613aff88828901613a96565b9150509295509295909350565b600080600060608486031215613b2157600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613b4657600080fd5b613b5286828701613a96565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561144c5761144c613b5c565b8181038181111561144c5761144c613b5c565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144c8284613b98565b600060208284031215613c3757600080fd5b5051919050565b6001600160a01b0381168114610c3a57600080fd5b600060208284031215613c6557600080fd5b813561009181613c3e565b8015158114610c3a57600080fd5b600060208284031215613c9057600080fd5b813561009181613c70565b6000808335601e19843603018112613cb257600080fd5b83018035915067ffffffffffffffff821115613ccd57600080fd5b602001915036819003821315610d5757600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144c5761144c613b5c565b600080600060608486031215613d6257600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561193557611935613b5c565b6001600160801b0381811683821601908082111561193557611935613b5c565b818103600083128015838313168383128216171561193557611935613b5c565b8051613de681613c3e565b919050565b600060208284031215613dfd57600080fd5b815161009181613c3e565b8082018281126000831280158216821582161715613e2857613e28613b5c565b505092915050565b600060208284031215613e4257600080fd5b815161009181613c70565b634e487b7160e01b600052601260045260246000fd5b600082613e7257613e72613e4d565b500690565b6001600160801b0382811682821603908082111561193557611935613b5c565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144c5761144c613b5c565b60006102a082019050613ed8828551613b98565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613f4d57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613f7357613f73613b5c565b5060000390565b60008060408385031215613f8d57600080fd5b825191506020830151613f9f81613c70565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613fd657600080fd5b8451935060208501519250604085015191506060850151613ff681613c70565b939692955090935050565b60008261401057614010613e4d565b600160ff1b82146000198414161561402a5761402a613b5c565b500590565b6040516101e0810167ffffffffffffffff8111828210171561406157634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561407957600080fd5b6040516020810181811067ffffffffffffffff821117156140aa57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516001600160801b0381168114613de657600080fd5b805164ffffffffff81168114613de657600080fd5b805161ffff81168114613de657600080fd5b60006101e0828403121561410857600080fd5b61411061402f565b61411a8484614067565b8152614128602084016140b7565b6020820152614139604084016140b7565b604082015261414a606084016140b7565b606082015261415b608084016140b7565b608082015261416c60a084016140b7565b60a082015261417d60c084016140ce565b60c082015261418e60e084016140e3565b60e08201526101006141a1818501613ddb565b908201526101206141b3848201613ddb565b908201526101406141c5848201613ddb565b908201526101606141d7848201613ddb565b908201526101806141e98482016140b7565b908201526101a06141fb8482016140b7565b908201526101c061420d8482016140b7565b908201529392505050565b6000825160005b81811015614239576020818601810151858301520161421f565b50600092019182525091905056fea264697066735822122001386c875fff4bc801ce8158787d5be42b9093f6a838fdd61fa0a79ae169974764736f6c63430008160033a26469706673582212201e11f2c9988c21a884941e4b6a92774e9f1f3f695efc55f2af7402ed7d462fea64736f6c63430008160033608060405234801561001057600080fd5b506140d7806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638c98b3c61462000033575b600080fd5b6200004a6200004436600462000247565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051620000a290620000da565b620000af929190620003bc565b8190604051809103906000f5905080158015620000d0573d6000803e3d6000fd5b5095945050505050565b613bb180620004f183390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715620001255762000125620000e8565b60405290565b80356001600160a01b03811681146200014357600080fd5b919050565b6000608082840312156200015b57600080fd5b6040516080810181811067ffffffffffffffff82111715620001815762000181620000e8565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f830112620001c457600080fd5b813567ffffffffffffffff80821115620001e257620001e2620000e8565b604051601f8301601f19908116603f011681019082821181831017156200020d576200020d620000e8565b816040528381528660208588010111156200022757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156200026057600080fd5b610260808212156200027157600080fd5b6200027b620000fe565b915062000288876200012b565b825262000298602088016200012b565b6020830152620002ab604088016200012b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e0830152610100808801358184015250610120808801358184015250610140808801358184015250610160620003168189016200012b565b908301526101806200032a8882016200012b565b908301526101a06200033e8882016200012b565b908301526101c0620003528882016200012b565b908301526101e0620003678989830162000148565b81840152508195506200037c8188016200012b565b9450505061028085013567ffffffffffffffff8111156200039c57600080fd5b620003aa87828801620001b2565b949793965093946102a0013593505050565b82516001600160a01b0316815261028081016020840151620003e960208401826001600160a01b03169052565b5060408401516200040560408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015162000478828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102a06040523480156200001257600080fd5b5060405162003bb138038062003bb1833981016040819052620000359162000578565b600160005581516001600160a01b039081166080908152602080850151831660a0818152928601516101a052918501516101c05260c0808601516101e090815260e08088015161020052610120808901519093526101008089015190915261014080890151909152908701805151909252815183015190528051604090810151610160529051606090810151610180528187015185166102405286015161026052928416610220528251633a9ae92360e11b815292519192637535d24692600480830193928290030181865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a9190620006b5565b6001600160a01b039081166102808190526080516200015d921690600162000165565b50506200072a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001bf90859083906200023116565b6200022b57604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200021f918691620002e216565b6200022b8482620002e2565b50505050565b6000806000846001600160a01b031684604051620002509190620006d5565b6000604051808303816000865af19150503d80600081146200028f576040519150601f19603f3d011682016040523d82523d6000602084013e62000294565b606091505b5091509150818015620002c2575080511580620002c2575080806020019051810190620002c2919062000706565b8015620002d957506000856001600160a01b03163b115b95945050505050565b6000620002f96001600160a01b0384168362000355565b90508051600014158015620003215750808060200190518101906200031f919062000706565b155b156200035057604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b606062000365838360006200036c565b9392505050565b606081471015620003935760405163cd78605960e01b815230600482015260240162000347565b600080856001600160a01b03168486604051620003b19190620006d5565b60006040518083038185875af1925050503d8060008114620003f0576040519150601f19603f3d011682016040523d82523d6000602084013e620003f5565b606091505b5090925090506200040886838362000412565b9695505050505050565b6060826200042b57620004258262000476565b62000365565b81511580156200044357506001600160a01b0384163b155b156200046e57604051639996b31560e01b81526001600160a01b038516600482015260240162000347565b508062000365565b805115620004875780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60405161020081016001600160401b0381118282101715620004d557634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b0381168114620004a057600080fd5b8051620004fe81620004db565b919050565b6000608082840312156200051657600080fd5b604051608081016001600160401b03811182821017156200054757634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000808284036102808112156200058e57600080fd5b610260808212156200059f57600080fd5b620005a9620004a3565b9150620005b685620004f1565b8252620005c660208601620004f1565b6020830152620005d960408601620004f1565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016062000644818701620004f1565b9083015261018062000658868201620004f1565b908301526101a06200066c868201620004f1565b908301526101c062000680868201620004f1565b908301526101e0620006958787830162000503565b8184015250819350620006aa818601620004f1565b925050509250929050565b600060208284031215620006c857600080fd5b81516200036581620004db565b6000825160005b81811015620006f85760208186018101518583015201620006dc565b506000920191825250919050565b6000602082840312156200071957600080fd5b815180151581146200036557600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516133376200087a600039600081816110fc015281816122df015281816123520152612a7a0152600050506000505060006109c10152600050506000818161026d0152611fa60152600081816117ec0152818161184f01528181611b8b01528181611bc701528181611dbf0152611f8001526000818161056f0152611f5a015260006113c10152600061151c01526000818161073301526114f0015260005050600081816105900152611fcc01526000818161066b01526125890152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb01526106230152600061246b0152600081816110db015281816122be0152818161230c01526123f001526133376000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612bcb565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612c22565b6100b5565b005b610059610095366004612bcb565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612c59565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612c84565b61017160408c018c612ca1565b60405161018396959493929190612d11565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612d61565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612c59565b88610ee8565b60006103066102fd6020870187612c59565b88848989610ad0565b90945090506103158188612d8b565b9250600061032283610f88565b5090506103326020870187612c59565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612c84565b8a888e80604001906103829190612ca1565b604051610396989796959493929190612d9e565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612c59565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f0000000000000000000000000000000000000000000000000000000000000000611121565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612de6565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a61113e565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061115f565b92505b506105c18361117f565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612d8b565b8a846111ad565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612de6565b42906112eb565b846111ad565b61065e88611300565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612d8b565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c6114a4565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d8660006114d9565b9150915080600960008282546107019190612de6565b9091555061071d905086600084610717816115a8565b886115d2565b6107278183612de6565b915061075786838a8e877f000000000000000000000000000000000000000000000000000000000000000061174c565b915061076b6107668385611796565b6117ab565b6006805460029061078c9084906201000090046001600160701b0316612df9565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261117f565b600680546010906107db908490600160801b90046001600160801b0316612e19565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f6001846114a4565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f8860016114d9565b9150915080600960008282546108529190612de6565b9091555061086e905083600084610868816115a8565b8a6117d5565b6108788183612d8b565b91506108876107668387611796565b600680546002906108a89084906201000090046001600160701b0316612df9565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261117f565b600680546010906108f7908490600160801b90046001600160801b0316612e19565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a610930876115a8565b610939836115a8565b6109439190612e39565b60006119c6565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612e69565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611a05565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611a90565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611a9d565b9050610b568361117f565b610b609083612e86565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161117f565b60078054601090610bab908490600160801b90046001600160801b0316612e86565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611abb565b9350610be68684611b54565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612d8b565b905080600003610c72576001915050610e08565b6000610c7d85611b69565b905080600003610c9257600192505050610e08565b600080610ca0838589611c05565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612f24565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190612f9a565b91509150610d50610d42826115a8565b610d4b90612fbe565b611d79565b925082610d665760009650505050505050610e08565b610d6f8261117f565b60078054600090610d8a9084906001600160801b0316612e19565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161117f565b60078054601090610dd9908490600160801b90046001600160801b0316612e19565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612d8b565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612de6565b90915550506000838152600b602052604081208054839290610f3d908490612de6565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611f11565b6040518263ffffffff1660e01b8152600401610fcd9190612fda565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612fe9565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612de6565b6110939190612d8b565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611a9d565b976001975095505050505050565b6000610e087f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008461204b565b600061112d8284612d61565b6111379084612d8b565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b61206e565b600061117682611170858888611a9d565b90612094565b95945050505050565b60006001600160801b038211156111a957604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036111d95750505050565b6000848152600860205260408120546001600160801b031690819003611233576112028361117f565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790556112b1565b61128461127f670de0b6b3a764000061124c8886612d8b565b6112569190613019565b85670de0b6b3a764000061126a878a612d8b565b6112749190613019565b859291906001612109565b61117f565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112ba8461117f565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116112fa5782611137565b50919050565b6006546000908190611323908490600160801b90046001600160801b0316611796565b6006546201000090046001600160701b0316925090508181111561149f57600061134d8383612d8b565b905061135c61127f82866121a7565b6006805460109061137e908490600160801b90046001600160801b0316612e86565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006113b785836121bc90919063ffffffff16565b905060006113e5827f0000000000000000000000000000000000000000000000000000000000000000611796565b905080600960008282546113f99190612de6565b9091555061140990508183612d8b565b91506114148261117f565b6002805460009061142f9084906001600160801b0316612e19565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061145c826121d1565b60048054600090611471908490600f0b613030565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156114ce5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806114e687856121bc565b91506000611514837f0000000000000000000000000000000000000000000000000000000000000000611796565b9050611540817f0000000000000000000000000000000000000000000000000000000000000000611796565b91508315611563576115528282612d8b565b61155c9084612d8b565b925061157a565b61156d8282612d8b565b6115779084612de6565b92505b8686101561159d5761158d838789611a9d565b925061159a828789611a9d565b91505b509550959350505050565b60006001600160ff1b038211156111a95760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b031661161b61127f826115fe670de0b6b3a764000086613019565b600554600160801b90046001600160801b031691908a6000612109565b600580546001600160801b03928316600160801b0292169190911790556116418661117f565b61164b9082612e86565b600480546001600160801b03928316600160801b0292169190911790556116718461117f565b6002805460009061168c9084906001600160801b0316612e19565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116b9836121fb565b600480546000906116ce908490600f0b613030565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506116fe8561117f565b60028054601090611720908490600160801b90046001600160801b0316612e86565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806117648461175e8a888a611a9d565b906121bc565b9050611771888486611a9d565b61177b9082612de6565b90508681111561178b5786810391505b509695505050505050565b60006111378383670de0b6b3a7640000611a9d565b60006001600160701b038211156111a95760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061181757507f00000000000000000000000000000000000000000000000000000000000000006118158583612d8b565b105b1561182457611824612237565b6004549084900390600f0b6118398482612e39565b905083611845866115a8565b13801561187a57507f0000000000000000000000000000000000000000000000000000000000000000611878838361206e565b105b1561188757611887612237565b600354600160801b90046001600160801b03166118c961127f826118b3670de0b6b3a764000088613019565b6005546001600160801b031691908c6000612109565b600580546001600160801b0319166001600160801b03929092169190911790556118f38882612d8b565b90506118fe8161117f565b600380546001600160801b03928316600160801b0292169190911790556119248361117f565b600280546001600160801b0319166001600160801b039290921691909117905561194d826121fb565b600480546001600160801b0319166001600160801b03929092169190911790556119768761117f565b60028054601090611998908490600160801b90046001600160801b0316612e19565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546119e19061127f906001600160801b03168484612250565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a2b57611a2b61305d565b6040519080825280601f01601f191660200182016040528015611a55576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611a76578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611ab457600080fd5b5091020490565b600080611ac88585611796565b9050611ad3816122b7565b945084600003611ae7576000915050611137565b849150611afa6040840160208501612c84565b15611b2957611b2285611b106020860186612c59565b611b1d6040870187612ca1565b612304565b9150611b4c565b611b4c85611b3a6020860186612c59565b611b476040870187612ca1565b612469565b509392505050565b60006111378383670de0b6b3a7640000612518565b6003546000908190611b84906001600160801b0316846121a7565b9050611bb07f000000000000000000000000000000000000000000000000000000000000000082612de6565b6002546001600160801b031611156112fa576002547f000000000000000000000000000000000000000000000000000000000000000090611bfb9083906001600160801b0316612d8b565b6111379190612d8b565b611c0d612b18565b600080611c1984611f11565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c549190612fda565b6040805180830381865af4158015611c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c949190612fe9565b9350905082611ca95750600091506100ad9050565b6000611cd0611ccb84610160015185610140015161179690919063ffffffff16565b6115a8565b611cf0611ccb856101200151866101000151611b5490919063ffffffff16565b611cfa9190612e39565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e569190613073565b935093509350935080611e725750600098975050505050505050565b868414611ea357611e828461117f565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611ed457611eb3836121fb565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611f0257611ee48261117f565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b611f19612b6a565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612011911661253e565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926120439290041661253e565b905292915050565b6000610ac861205a85856125b4565b83906b033b2e3c9fd0803ce8000000611a9d565b60008061207b8484612622565b90925090508061208d5761208d612237565b5092915050565b6000816000036120ad5750670de0b6b3a7640000610e08565b826000036120bd57506000610e08565b60006120c8836115a8565b905060006120dd6120d8866115a8565b612661565b90508181026120f4670de0b6b3a7640000826130b4565b90506120ff81612887565b9695505050505050565b60008260000361211a575084611176565b811561216d5761214b61212d8487612de6565b6121378587611796565b612141888a611796565b61175e9190612de6565b9050600061215985886112eb565b905080821015612167578091505b50611176565b82850361217c57506000611176565b6120ff6121898487612d8b565b6121938587611b54565b61219d888a611796565b61175e9190612d8b565b600061113783670de0b6b3a764000084612518565b600061113783670de0b6b3a764000084611a9d565b600060016001607f1b038211156111a95760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612219575060016001607f1b0382135b156111a95760405163a5353be560e01b815260040160405180910390fd5b60405163bb55fd2760e01b815260040160405180910390fd5b60008061225e846000612a1c565b612269846000612a1c565b6122739190612e39565b9050600081131561228f576122888186612de6565b94506122ae565b60008112156122ae576122a181612fbe565b6122ab9086612d8b565b94505b50929392505050565b6000610e087f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084612a32565b6000806123397f0000000000000000000000000000000000000000000000000000000000000000612334886110d4565b612a56565b60405163470cc4cf60e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e19899e906024016020604051808303816000875af11580156123a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c791906130e2565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018390529193507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f91906130fb565b5050949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb846124a2876110d4565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251191906130fb565b5050505050565b600082600019048411830215820261252f57600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612552610426565b61255c9190613019565b905080831161256c576000612576565b6125768184612d8b565b91506111376125ad670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613019565b83906121bc565b60405163d15e005360e01b81526001600160a01b0383811660048301526000919083169063d15e005390602401602060405180830381865afa1580156125fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113791906130e2565b600080600083612631866115a8565b61263b9190612e39565b9050600081121561265357600080925092505061265a565b9150600190505b9250929050565b60008082136126835760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906127069084901c6115a8565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136128a257506000919050565b680755bf798b4a1bf1e582126128cb576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906120ff74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6115a8565b6000818313612a2b5781611137565b5090919050565b6000610ac86b033b2e3c9fd0803ce8000000612a4e86866125b4565b849190611a9d565b6040516335ea6a7560e01b81526001600160a01b03838116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101e060405180830381865afa158015612ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae691906131de565b60e081015190915060006000198514612aff5784612b08565b6001600160801b035b60101b9190910195945050505050565b604051806101200160405280612b2c612b6a565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215612be057600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612c0557600080fd5b840160608187031215612c1757600080fd5b809150509250925092565b60008060408385031215612c3557600080fd5b50508035926020909101359150565b6001600160a01b038116811461040b57600080fd5b600060208284031215612c6b57600080fd5b813561113781612c44565b801515811461040b57600080fd5b600060208284031215612c9657600080fd5b813561113781612c76565b6000808335601e19843603018112612cb857600080fd5b83018035915067ffffffffffffffff821115612cd357600080fd5b60200191503681900382131561265a57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b868152856020820152846040820152831515606082015260a060808201526000612d3f60a083018486612ce8565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b600082612d7057612d70612d4b565b500690565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e0857610e08612d75565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000612dd860e083018486612ce8565b9a9950505050505050505050565b80820180821115610e0857610e08612d75565b6001600160701b0381811683821601908082111561208d5761208d612d75565b6001600160801b0381811683821601908082111561208d5761208d612d75565b818103600083128015838313168383128216171561208d5761208d612d75565b8051612e6481612c44565b919050565b600060208284031215612e7b57600080fd5b815161113781612c44565b6001600160801b0382811682821603908082111561208d5761208d612d75565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050612f38828551612ea6565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215612fad57600080fd5b505080516020909101519092909150565b6000600160ff1b8201612fd357612fd3612d75565b5060000390565b6101808101610e088284612ea6565b60008060408385031215612ffc57600080fd5b82519150602083015161300e81612c76565b809150509250929050565b8082028115828204841417610e0857610e08612d75565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715610e0857610e08612d75565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561308957600080fd5b84519350602085015192506040850151915060608501516130a981612c76565b939692955090935050565b6000826130c3576130c3612d4b565b600160ff1b8214600019841416156130dd576130dd612d75565b500590565b6000602082840312156130f457600080fd5b5051919050565b60006020828403121561310d57600080fd5b815161113781612c76565b6040516101e0810167ffffffffffffffff8111828210171561314a57634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561316257600080fd5b6040516020810181811067ffffffffffffffff8211171561319357634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516001600160801b0381168114612e6457600080fd5b805164ffffffffff81168114612e6457600080fd5b805161ffff81168114612e6457600080fd5b60006101e082840312156131f157600080fd5b6131f9613118565b6132038484613150565b8152613211602084016131a0565b6020820152613222604084016131a0565b6040820152613233606084016131a0565b6060820152613244608084016131a0565b608082015261325560a084016131a0565b60a082015261326660c084016131b7565b60c082015261327760e084016131cc565b60e082015261010061328a818501612e59565b9082015261012061329c848201612e59565b908201526101406132ae848201612e59565b908201526101606132c0848201612e59565b908201526101806132d28482016131a0565b908201526101a06132e48482016131a0565b908201526101c06132f68482016131a0565b90820152939250505056fea26469706673582212203783b9bf9017f3c6da9605388776fcc07ce1ae98a220c1ab3cb287de852050e664736f6c63430008160033a2646970667358221220cebb8752be2c35788be128c72f9d1f229d9d19272c72c1535dc6410d851c4f3764736f6c634300081600336101606040523480156200001257600080fd5b5060405162002cea38038062002cea8339810160408190526200003591620000c0565b878787878787878760006200004b8982620002a9565b506001600160a01b0396871660805294861660a05292851660c05290841660e05283166101005282166101205216610140525062000375975050505050505050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000bb57600080fd5b919050565b600080600080600080600080610100898b031215620000de57600080fd5b88516001600160401b0380821115620000f657600080fd5b818b0191508b601f8301126200010b57600080fd5b8151818111156200012057620001206200008d565b604051601f8201601f19908116603f011681019083821181831017156200014b576200014b6200008d565b81604052828152602093508e848487010111156200016857600080fd5b600091505b828210156200018c57848201840151818301850152908301906200016d565b6000848483010152809c50505050620001a7818c01620000a3565b98505050620001b960408a01620000a3565b9550620001c960608a01620000a3565b9450620001d960808a01620000a3565b9350620001e960a08a01620000a3565b9250620001f960c08a01620000a3565b91506200020960e08a01620000a3565b90509295985092959890939650565b600181811c908216806200022d57607f821691505b6020821081036200024e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a4576000816000526020600020601f850160051c810160208610156200027f5750805b601f850160051c820191505b81811015620002a0578281556001016200028b565b5050505b505050565b81516001600160401b03811115620002c557620002c56200008d565b620002dd81620002d6845462000218565b8462000254565b602080601f831160018114620003155760008415620002fc5750858301515b600019600386901b1c1916600185901b178555620002a0565b600085815260208120601f198616915b82811015620003465788860151825594840194600190910190840162000325565b5085821015620003655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e0516101005161012051610140516128b162000439600039600081816102c50152610da30152600081816103450152610c6d0152600081816103ad0152610b370152600081816103110152610a0101526000818161037901526107f3015260008181610435015261110801526000818161040101528181610579015281816107170152818161082301528181610a3101528181610b6701528181610c9d01528181610dd301528181610ed7015261113901526128b16000f3fe6080604052600436106100fe5760003560e01c8063aa8cd6c411610095578063c45a015511610064578063c45a0155146103ef578063c83e1f5114610423578063ce34a8c314610457578063e990eba814610477578063e99be3961461049757600080fd5b8063aa8cd6c414610333578063ab71905f14610367578063b6cb11181461039b578063c1510618146103cf57600080fd5b806337404017116100d1578063374040171461018457806354fd4d5014610283578063966ecd1c146102b3578063a085fa30146102ff57600080fd5b806304baa00b146101035780630550e6e41461012e57806306fdde031461015c57806316abfc7014610171575b600080fd5b34801561010f57600080fd5b506101186104ab565b6040516101259190611d8d565b60405180910390f35b34801561013a57600080fd5b5061014e610149366004611dc5565b6104c7565b604051908152602001610125565b34801561016857600080fd5b506101186104de565b61014e61017f366004611f0d565b61056c565b34801561019057600080fd5b5061027661019f366004611fd2565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091525060009081526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004830154811660808301526005830154811660a08301526006830154811660c08301526007830154811660e083015260089092015490911661010082015290565b6040516101259190611feb565b34801561028f57600080fd5b50604080518082019091526007815266076312e302e32360cc1b6020820152610118565b3480156102bf57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610125565b34801561030b57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b34801561033f57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b34801561037357600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a757600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103db57600080fd5b506102e76103ea3660046121c3565b61070a565b3480156103fb57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b34801561042f57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b34801561046357600080fd5b5061014e610472366004611dc5565b610ebd565b34801561048357600080fd5b506102e7610492366004612231565b610eca565b3480156104a357600080fd5b50600561014e565b6040518060600160405280602381526020016128596023913981565b60006104d4848484611247565b90505b9392505050565b600080546104eb906122d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610517906122d2565b80156105645780601f1061053957610100808354040283529160200191610564565b820191906000526020600020905b81548152906001019060200180831161054757829003601f168201915b505050505081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105b757604051634084351160e01b815260040160405180910390fd5b6105bf61126b565b6000868152600160205260409020600301546001600160a01b0316806105f85760405163952b05cb60e01b815260040160405180910390fd5b60006106068288888761128c565b9050816001600160a01b03166377d05ff4828888886040518563ffffffff1660e01b81526004016106399392919061230c565b60206040518083038185885af1158015610657573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061067c9190612352565b9250600061068a8234612381565b905080156106fd57604051600090339083908381818185875af1925050503d80600081146106d4576040519150601f19603f3d011682016040523d82523d6000602084013e6106d9565b606091505b50509050806106fb576040516312171d8360e31b815260040160405180910390fd5b505b5050505b95945050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461075557604051634084351160e01b815260040160405180910390fd5b60008681526001602052604081209084900361090d5780541561078b57604051633be1b34d60e11b815260040160405180910390fd5b6107958686611410565b60006107a18787611626565b90506000876040516020016107b69190612394565b60405160208183030381529060405280519060200120905060008780519060200120905060006107e58a6116ad565b9050838160800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008c8f8c60405160200161085f929190918252602082015260400190565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b815260040161089494939291906125c7565b6020604051808303816000875af11580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d7919061260d565b9285555060018401556002830191909155600490910180546001600160a01b0319166001600160a01b0383161790559050610701565b6000878152600160205260409020548061093a5760405163398b1c0960e21b815260040160405180910390fd5b808760405160200161094c9190612394565b60405160208183030381529060405280519060200120146109805760405163332ee11f60e01b815260040160405180910390fd5b600182015486516020880120146109aa57604051631a3272d160e31b815260040160405180910390fd5b6109b48787611410565b60006109bf886116ad565b6002840154608082015290506001869003610b025760058301546001600160a01b0316156109ff5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610a669392919061262a565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610a9b94939291906125c7565b6020604051808303816000875af1158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade919061260d565b6005840180546001600160a01b0319166001600160a01b03831617905593506106fd565b85600203610c385760068301546001600160a01b031615610b355760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610b9c9392919061262a565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610bd194939291906125c7565b6020604051808303816000875af1158015610bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c14919061260d565b6006840180546001600160a01b0319166001600160a01b03831617905593506106fd565b85600303610d6e5760078301546001600160a01b031615610c6b5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610cd29392919061262a565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610d0794939291906125c7565b6020604051808303816000875af1158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a919061260d565b6007840180546001600160a01b0319166001600160a01b03831617905593506106fd565b85600403610ea45760088301546001600160a01b031615610da15760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610e089392919061262a565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610e3d94939291906125c7565b6020604051808303816000875af1158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e80919061260d565b6008840180546001600160a01b0319166001600160a01b03831617905593506106fd565b604051631d9f815960e11b815260040160405180910390fd5b60006104d484848461177b565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1557604051634084351160e01b815260040160405180910390fd5b60008681526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b03908116606083018190526004840154821660808401526005840154821660a08401526006840154821660c08401526007840154821660e0840152600890930154166101008201529015610fbe57604051632c95caeb60e01b815260040160405180910390fd5b8051610fdd5760405163398b1c0960e21b815260040160405180910390fd5b60808101516001600160a01b03161580611002575060a08101516001600160a01b0316155b80611018575060c08101516001600160a01b0316155b8061102e575060e08101516001600160a01b0316155b8061104557506101008101516001600160a01b0316155b156110635760405163e97cc2bf60e01b815260040160405180910390fd5b8051604051611076908790602001612394565b60405160208183030381529060405280519060200120146110aa5760405163332ee11f60e01b815260040160405180910390fd5b80602001518480519060200120146110d557604051631a3272d160e31b815260040160405180910390fd5b6110df8585611410565b60006110ea866116ad565b905081604001518160800181815250506000889050600085905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638cc23ce08b867f00000000000000000000000000000000000000000000000000000000000000008c8a608001518b60a001518c60c001518d60e001518e61010001518d8d60405160200161118f929190918252602082015260400190565b604051602081830303815290604052805190602001206040518b63ffffffff1660e01b81526004016111ca9a9998979695949392919061264b565b6020604051808303816000875af11580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d919061260d565b60009b8c5260016020526040909b2060030180546001600160a01b0319166001600160a01b038d1617905550989998505050505050505050565b60006104d46b033b2e3c9fd0803ce8000000611263868661179e565b84919061180c565b341561128a57604051631574f9f360e01b815260040160405180910390fd5b565b6000806000866001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f3919061260d565b9050836020015115611307578091506113da565b866001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611369919061260d565b91506113d781836001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d1919061260d565b87610ebd565b94505b6113ef6001600160a01b03831687308861182a565b6114036001600160a01b0383168887611897565b5060009695505050505050565b61141a8282611927565b60208201516001600160a01b03166114455760405163073f739d60e51b815260040160405180910390fd5b81602001516001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab919061260d565b6001600160a01b031682600001516001600160a01b0316146114e057604051630722152560e11b815260040160405180910390fd5b600382600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611524573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154891906126ce565b61155291906126f1565b61155d90600a6127ee565b82608001511015611581576040516349db44f560e01b815260040160405180910390fd5b600382600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e991906126ce565b6115f391906126f1565b6115fe90600a6127ee565b8260a001511015611622576040516318c9522360e11b815260040160405180910390fd5b5050565b60006116a4836000015184602001516001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611696919061260d565b670de0b6b3a7640000610ebd565b90505b92915050565b6116b5611c56565b81516001600160a01b03908116825260208084015182169083015260408084015182169083015260608084015190830152608083015160a08084019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015181166101608084019190915283015181166101808084019190915283015181166101a080840191909152830151166101c080830191909152909101516101e082015290565b60006104d461178a858561179e565b83906b033b2e3c9fd0803ce800000061180c565b60405163d15e005360e01b81526001600160a01b0383811660048301526000919083169063d15e005390602401602060405180830381865afa1580156117e8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a49190612352565b600082600019048411830215820261182357600080fd5b5091020490565b6040516001600160a01b0384811660248301528381166044830152606482018390526118919186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611a3c565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526118e88482611aa9565b611891576040516001600160a01b0384811660248301526000604483015261191d91869182169063095ea7b39060640161185f565b6118918482611a3c565b6103e88260800151101561194e576040516349db44f560e01b815260040160405180910390fd5b81610100015160000361197457604051635428734d60e01b815260040160405180910390fd5b8161010001518260e00151108061199e57508161010001518260e0015161199b91906127fd565b15155b156119bc5760405163253fffcf60e11b815260040160405180910390fd5b6101c082015151670de0b6b3a764000010806119e85750670de0b6b3a7640000826101c0015160200151115b80611a035750670de0b6b3a7640000826101c0015160400151115b80611a1e5750670de0b6b3a7640000826101c0015160600151115b15611622576040516322f72cc360e11b815260040160405180910390fd5b6000611a516001600160a01b03841683611b4c565b90508051600014158015611a76575080806020019051810190611a74919061281f565b155b15611aa457604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6000806000846001600160a01b031684604051611ac6919061283c565b6000604051808303816000865af19150503d8060008114611b03576040519150601f19603f3d011682016040523d82523d6000602084013e611b08565b606091505b5091509150818015611b32575080511580611b32575080806020019051810190611b32919061281f565b80156107015750505050506001600160a01b03163b151590565b60606116a48383600084600080856001600160a01b03168486604051611b72919061283c565b60006040518083038185875af1925050503d8060008114611baf576040519150601f19603f3d011682016040523d82523d6000602084013e611bb4565b606091505b5091509150611bc4868383611bce565b9695505050505050565b606082611be357611bde82611c2a565b6104d7565b8151158015611bfa57506001600160a01b0384163b155b15611c2357604051639996b31560e01b81526001600160a01b0385166004820152602401611a9b565b50806104d7565b805115611c3a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001611d386040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b60005b83811015611d58578181015183820152602001611d40565b50506000910152565b60008151808452611d79816020860160208601611d3d565b601f01601f19169290920160200192915050565b6020815260006116a46020830184611d61565b6001600160a01b0381168114611c5357600080fd5b8035611dc081611da0565b919050565b600080600060608486031215611dda57600080fd5b8335611de581611da0565b92506020840135611df581611da0565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611e3f57611e3f611e06565b60405290565b6040516101e0810167ffffffffffffffff81118282101715611e3f57611e3f611e06565b8015158114611c5357600080fd5b600067ffffffffffffffff80841115611e9257611e92611e06565b604051601f8501601f19908116603f01168101908282118183101715611eba57611eba611e06565b81604052809350858152868686011115611ed357600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611efe57600080fd5b6116a483833560208501611e77565b600080600080600060a08688031215611f2557600080fd5b853594506020860135611f3781611da0565b93506040860135925060608601359150608086013567ffffffffffffffff80821115611f6257600080fd5b908701906060828a031215611f7657600080fd5b611f7e611e1c565b8235611f8981611da0565b81526020830135611f9981611e69565b6020820152604083013582811115611fb057600080fd5b611fbc8b828601611eed565b6040830152508093505050509295509295909350565b600060208284031215611fe457600080fd5b5035919050565b8151815260208083015190820152604080830151908201526060808301516001600160a01b039081169183019190915260808084015182169083015260a08084015182169083015260c08084015182169083015260e08084015182169083015261010080840151918216818401526101208301915b505092915050565b60006080828403121561207a57600080fd5b6040516080810181811067ffffffffffffffff8211171561209d5761209d611e06565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600061024082840312156120e157600080fd5b6120e9611e45565b90506120f482611db5565b815261210260208301611db5565b602082015261211360408301611db5565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140612170818401611db5565b90820152610160612182838201611db5565b90820152610180612194838201611db5565b908201526101a06121a6838201611db5565b908201526101c06121b984848301612068565b9082015292915050565b60008060008060006102c086880312156121dc57600080fd5b853594506121ed87602088016120ce565b935061026086013567ffffffffffffffff81111561220a57600080fd5b61221688828901611eed565b9598949750949561028081013595506102a001359392505050565b60008060008060006102c0868803121561224a57600080fd5b85359450602086013567ffffffffffffffff8082111561226957600080fd5b818801915088601f83011261227d57600080fd5b61228c89833560208501611e77565b955061229b8960408a016120ce565b94506102808801359150808211156122b257600080fd5b506122bf88828901611eed565b959894975092956102a001359392505050565b600181811c908216806122e657607f821691505b60208210810361230657634e487b7160e01b600052602260045260246000fd5b50919050565b8381528260208201526060604082015260018060a01b03825116606082015260208201511515608082015260006040830151606060a0840152611bc460c0840182611d61565b60006020828403121561236457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156116a7576116a761236b565b81516001600160a01b03168152610240810160208301516123c060208401826001600160a01b03169052565b5060408301516123db60408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151612441828501826001600160a01b03169052565b5050610160838101516001600160a01b0390811691840191909152610180808501518216908401526101a080850151909116908301526101c08084015180518285015260208101516101e085015260408101516102008501526060810151610220850152612060565b80516001600160a01b0316825260208101516124d160208401826001600160a01b03169052565b5060408101516124ec60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015161255e828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e080820151805182850152602081015161020085015260408101516102208501526060810151610240850152611891565b60006102c06125d683886124aa565b6001600160a01b03861661026084015261028083018190526125fa81840186611d61565b915050826102a083015295945050505050565b60006020828403121561261f57600080fd5b81516104d781611da0565b6001600160a01b039390931683526020830191909152604082015260600190565b600061038080835261265f8184018e611d61565b905061266e602084018d6124aa565b6001600160a01b038b81166102808501528382036102a0850152612692828c611d61565b9981166102c08501529788166102e084015250509385166103008501529184166103208401529092166103408201526103600152949350505050565b6000602082840312156126e057600080fd5b815160ff811681146104d757600080fd5b60ff82811682821603908111156116a7576116a761236b565b600181815b8085111561274557816000190482111561272b5761272b61236b565b8085161561273857918102915b93841c939080029061270f565b509250929050565b60008261275c575060016116a7565b81612769575060006116a7565b816001811461277f5760028114612789576127a5565b60019150506116a7565b60ff84111561279a5761279a61236b565b50506001821b6116a7565b5060208310610133831016604e8410600b84101617156127c8575081810a6116a7565b6127d2838361270a565b80600019048211156127e6576127e661236b565b029392505050565b60006116a460ff84168361274d565b60008261281a57634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561283157600080fd5b81516104d781611e69565b6000825161284e818460208701611d3d565b919091019291505056fe416176654c32487970657264726976654465706c6f796572436f6f7264696e61746f72a264697066735822122090fc61442995c38b082b2354099f1dd1f7afb72acb3893c648a30d85589fb49b64736f6c634300081600336103206040523480156200001257600080fd5b5060405162017ad538038062017ad583398101604081905262000035916200037f565b6040518060400160405280600e81526020016d4d6f636b4879706572647269766560901b815250828284846040516200006e9062000271565b6200007b929190620004bc565b604051809103906000f08015801562000098573d6000803e3d6000fd5b508585604051620000a9906200027f565b620000b6929190620004bc565b604051809103906000f080158015620000d3573d6000803e3d6000fd5b508686604051620000e4906200028d565b620000f1929190620004bc565b604051809103906000f0801580156200010e573d6000803e3d6000fd5b5087876040516200011f906200029b565b6200012c929190620004bc565b604051809103906000f08015801562000149573d6000803e3d6000fd5b5088886040516200015a90620002a9565b62000167929190620004bc565b604051809103906000f08015801562000184573d6000803e3d6000fd5b506001600081905587516001600160a01b0390811660809081526020808b0151831660a0908152918b01516101a052908a01516101c05260c0808b01516101e090815260e0808d015161020052610120808e0151909352610100808e0151909152610140808e0151909152908c01805151909252815190920151909152805160409081015161016052905160609081015161018052908a0151821661024052890151610260528716610220526200023c898262000681565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e0521661030052506200074d9350505050565b614228806200369383390190565b61425c80620078bb83390190565b6144da806200bb1783390190565b614483806200fff183390190565b613661806201447483390190565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b0381118282101715620002f357620002f3620002b7565b60405290565b80516001600160a01b03811681146200031157600080fd5b919050565b6000608082840312156200032957600080fd5b604051608081016001600160401b03811182821017156200034e576200034e620002b7565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000808284036102808112156200039557600080fd5b61026080821215620003a657600080fd5b620003b0620002cd565b9150620003bd85620002f9565b8252620003cd60208601620002f9565b6020830152620003e060408601620002f9565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200044b818701620002f9565b908301526101806200045f868201620002f9565b908301526101a062000473868201620002f9565b908301526101c062000487868201620002f9565b908301526101e06200049c8787830162000316565b8184015250819350620004b1818601620002f9565b925050509250929050565b82516001600160a01b0316815261028081016020840151620004e960208401826001600160a01b03169052565b5060408401516200050560408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015162000578828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e09485015180519584019590955260208501516102008401526040850151610220840152606090940151610240830152919092166102609092019190915290565b600181811c908216806200060557607f821691505b6020821081036200062657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200067c576000816000526020600020601f850160051c81016020861015620006575750805b601f850160051c820191505b81811015620006785782815560010162000663565b5050505b505050565b81516001600160401b038111156200069d576200069d620002b7565b620006b581620006ae8454620005f0565b846200062c565b602080601f831160018114620006ed5760008415620006d45750858301515b600019600386901b1c1916600185901b17855562000678565b600085815260208120601f198616915b828110156200071e57888601518255948401946001909101908401620006fd565b50858210156200073d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051612d9b620008f86000396000818161093001528181610a790152610b960152600081816108a801528181610bc60152610df00152600081816107af0152610ff20152600081816108fc0152610b330152600081816102940152818161045601528181610a4901528181610aab01528181610add01528181610b6701528181610da901528181610e3801528181610f9f0152611025015260005050600050506000505060005050600050506000818161191c015281816119580152611c67015260008181611698015281816116da01526117cc0152600050506000818161115e015281816111d7015261151e0152600081816111ab015261174d015260008181611124015281816114da015261172c015260008181611676015281816116fb01526117ed0152600081816114a101526119e10152600061162301526000505060008181610c2501528181610cbf0152610d330152612d9b6000f3fe60806040526004361061027d5760003560e01c8063907c0f921161014f578063ca6d38f7116100c1578063ded062311161007a578063ded06231146104d0578063e44808bc146108ca578063eac3e799146108ea578063f3f707071461091e578063f45cf2e014610952578063f698da2514610a2f5761027d565b8063ca6d38f71461084e578063cba2e58d1461086e578063cbc13434146103ca578063d5002f2e14610881578063d899e11214610896578063dbbe80701461086e5761027d565b8063a22cb46511610113578063a22cb46514610634578063a6e8a8591461079d578063a77384c1146107d1578063ab033ea91461038d578063b1b4b170146107f1578063b4f8da39146108115761027d565b8063907c0f92146106e757806394a97cdb146106fc5780639bd334981461073d5780639cd241af1461075d5780639eea5f661461077d5761027d565b80634c2ac1d9116101f35780637180c8ca116101ac5780637180c8ca1461063457806371f88b7c1461065457806377d05ff4146106745780638120a3e214610687578063836a1040146106a75780639032c726146106c75761027d565b80634c2ac1d9146105725780634ed2d6ac1461058557806358af4a0a146105a057806368096239146105c057806368c2ecb8146105e0578063702db0eb146106005761027d565b806321b57d531161024557806321b57d531461044457806322d5506b1461049057806329b23fc1146104d057806330adf81f146104fe5780633e691db914610532578063414f826d146105525761027d565b806301681a621461038d57806302329a29146103af578063074a6de9146103ca57806317fad7fc146104045780631c0f12b614610424575b34801561028957600080fd5b5060003660606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685856040516102cc929190612435565b600060405180830381855af49150503d8060008114610307576040519150601f19603f3d011682016040523d82523d6000602084013e61030c565b606091505b5091509150811561033057604051638bb0a34b60e01b815260040160405180910390fd5b600061033b82612445565b90506001600160e01b03198116636e64089360e11b1461035d57815160208301fd5b81516003198101600484019081529261037e918101602001906024016124e0565b80519650602001945050505050f35b34801561039957600080fd5b506103ad6103a8366004612597565b610a44565b005b3480156103bb57600080fd5b506103ad6103a83660046125d2565b3480156103d657600080fd5b506103ea6103e5366004612601565b610a71565b604080519283526020830191909152015b60405180910390f35b34801561041057600080fd5b506103ad61041f366004612696565b610aa6565b34801561043057600080fd5b506103ad61043f36600461272b565b610ad8565b34801561045057600080fd5b506104787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103fb565b34801561049c57600080fd5b506104b06104ab366004612773565b610b08565b6040805194855260208501939093529183015260608201526080016103fb565b3480156104dc57600080fd5b506104f06104eb3660046127a5565b610b2c565b6040519081526020016103fb565b34801561050a57600080fd5b506104f07f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b34801561053e57600080fd5b506104f061054d3660046127ff565b610b60565b34801561055e57600080fd5b506103ad61056d366004612834565b610b91565b6104f0610580366004612856565b610bbf565b34801561059157600080fd5b506103ad61043f3660046128ba565b3480156105ac57600080fd5b506103ad6105bb366004612904565b610bf4565b3480156105cc57600080fd5b506103ad6105db366004612834565b610c01565b3480156105ec57600080fd5b506104f06105fb366004612963565b610d93565b34801561060c57600080fd5b506103ad61061b366004612993565b6001600160801b03908116600160801b02911617600255565b34801561064057600080fd5b506103ad61064f3660046129c6565b610da4565b34801561066057600080fd5b506103ea61066f3660046129ff565b610dcd565b6104f0610682366004612601565b610de9565b34801561069357600080fd5b506103ad6106a2366004612963565b610e1c565b3480156106b357600080fd5b506103ad6106c2366004612a2b565b610e28565b3480156106d357600080fd5b506103ad6106e2366004612a63565b610e33565b3480156106f357600080fd5b506104f0610f6b565b34801561070857600080fd5b506103ad610717366004612a2b565b6000928352600a602090815260408085206001600160a01b039094168552929052912055565b34801561074957600080fd5b506104b0610758366004612834565b610f7a565b34801561076957600080fd5b506103ad610778366004612a2b565b610f9a565b34801561078957600080fd5b506103ad610798366004612a2b565b610fc9565b3480156107a957600080fd5b506104787f000000000000000000000000000000000000000000000000000000000000000081565b3480156107dd57600080fd5b506103ad6107ec366004612963565b600f55565b3480156107fd57600080fd5b506104f061080c366004612963565b610fd4565b34801561081d57600080fd5b506103ad61082c366004612ae3565b600380546001600160801b0319166001600160801b0392909216919091179055565b34801561085a57600080fd5b506104f0610869366004612963565b610fdf565b6103ea61087c3660046127a5565b610fea565b34801561088d57600080fd5b50600f546104f0565b3480156108a257600080fd5b506104787f000000000000000000000000000000000000000000000000000000000000000081565b3480156108d657600080fd5b506103ad6108e5366004612904565b611020565b3480156108f657600080fd5b506104787f000000000000000000000000000000000000000000000000000000000000000081565b34801561092a57600080fd5b506104787f000000000000000000000000000000000000000000000000000000000000000081565b34801561095e57600080fd5b506103ad61096d366004612b27565b805160208201516001600160801b03918216600160801b91831682021760025560408301516060840151908316908316820217600355608083015160a084015190831690831682021760045560c083015160e084015190831690831682021760055561010080840151600680546101208701516101408801516101609098015161ffff1990921693151561ff001916939093179215159093029190911761ffff16620100006001600160701b0390961695909502841694909417921602179055565b348015610a3b57600080fd5b506104f0611051565b610a6d7f00000000000000000000000000000000000000000000000000000000000000006110df565b5050565b600080610a9d7f00000000000000000000000000000000000000000000000000000000000000006110df565b50935093915050565b610acf7f00000000000000000000000000000000000000000000000000000000000000006110df565b50505050505050565b610b017f00000000000000000000000000000000000000000000000000000000000000006110df565b5050505050565b600080600080610b1a888888886110ff565b929b919a509850909650945050505050565b6000610b577f00000000000000000000000000000000000000000000000000000000000000006110df565b50949350505050565b6000610b8b7f00000000000000000000000000000000000000000000000000000000000000006110df565b50919050565b610bba7f00000000000000000000000000000000000000000000000000000000000000006110df565b505050565b6000610bea7f00000000000000000000000000000000000000000000000000000000000000006110df565b5095945050505050565b610b018585858585611213565b6040516370a0823160e01b8152306004820152600090610c97906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190612c13565b83856113d4565b9150506000811315610d20576040516340c10f1960e01b8152306004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906044015b600060405180830381600087803b158015610d0c57600080fd5b505af1158015610acf573d6000803e3d6000fd5b6000811215610bba576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639dc29fac30610d6284612c42565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610cf2565b6000610d9e82611474565b92915050565b610bba7f00000000000000000000000000000000000000000000000000000000000000006110df565b600080610ddb8585856114cc565b90925090505b935093915050565b6000610e147f00000000000000000000000000000000000000000000000000000000000000006110df565b509392505050565b610e258161154c565b50565b610bba838383611572565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e68611051565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b17905251610f119190612c5e565b600060405180830381855af49150503d8060008114610f4c576040519150601f19603f3d011682016040523d82523d6000602084013e610f51565b606091505b509150915081610f6357805160208201fd5b805160208201f35b6000610f7561161b565b905090565b600080600080610f8a8686611647565b9299919850965090945092505050565b610fc37f00000000000000000000000000000000000000000000000000000000000000006110df565b50505050565b610bba838383611829565b6000610d9e826118fa565b6000610d9e82611996565b6000806110167f00000000000000000000000000000000000000000000000000000000000000006110df565b5094509492505050565b6110497f00000000000000000000000000000000000000000000000000000000000000006110df565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6060600080836001600160a01b0316600036604051610f11929190612435565b6000808080611156878661114f8b6111496111228c670de0b6b3a7640000612c7a565b7f000000000000000000000000000000000000000000000000000000000000000090611a0c565b90611a0c565b9190611a1d565b9350611182847f0000000000000000000000000000000000000000000000000000000000000000611a43565b915060006111a361119b89670de0b6b3a7640000612c7a565b8a9088611a1d565b90506111cf817f0000000000000000000000000000000000000000000000000000000000000000611a0c565b93506111fb847f0000000000000000000000000000000000000000000000000000000000000000611a43565b6112059084612c8d565b915050945094509450949050565b6001600160a01b038416158061123057506001600160a01b038316155b1561124e5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611312576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611312576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611310576000868152600d602090815260408083206001600160a01b03808a16855290835281842090861684529091528120805485929061130a908490612c7a565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611344908490612c7a565b90915550506000858152600a602090815260408083206001600160a01b03871684529091528120805484929061137b908490612c8d565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b600080806113e6846301e13380611a58565b9050600061140b82600088126113fc5787611405565b61140588612c42565b90611a43565b9050600086131561143e5761142961142282611a6d565b8890611a43565b93506114358785612c7a565b92505050610de1565b60008612156114665761145a61145382611a6d565b8890611a58565b93506114358785612ca0565b509495600095509350505050565b60008061147f61161b565b905080831161148f576000611499565b6114998184612c7a565b91506114c5827f0000000000000000000000000000000000000000000000000000000000000000611a58565b9392505050565b6000806115168561114985817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000061150c818c611c0c565b6111499190612c7a565b9150611542827f0000000000000000000000000000000000000000000000000000000000000000611a43565b9050935093915050565b61155581611c21565b610e2557604051635044b7f560e01b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906115a4908490612c8d565b90915550506000838152600b6020526040812080548392906115c7908490612c8d565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000610f75427f0000000000000000000000000000000000000000000000000000000000000000611db9565b6000806000806000611657611dcf565b6002549091506116bc908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f0000000000000000000000000000000000000000000000000000000000000000611df0565b60025490945061171f908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e1c565b91506117768785611771857f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e3c565b611eaf565b1561178357611783611ef1565b61178f87858885611f0a565b91965094509250670de0b6b3a76400006118116117ac8784612c8d565b6002546117ca908890600160801b90046001600160801b0316612c7a565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e1c565b111561181f5761181f611ef1565b5092959194509250565b6000838152600a602090815260408083206001600160a01b038616845290915290205481111561186c57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b909152812080548392906118af908490612c7a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910161160e565b6003546000908190611915906001600160801b031684611c0c565b90506119417f000000000000000000000000000000000000000000000000000000000000000082612c8d565b6002546001600160801b03161115610b8b576002547f00000000000000000000000000000000000000000000000000000000000000009061198c9083906001600160801b0316612c7a565b6114c59190612c7a565b600080670de0b6b3a76400006119aa61161b565b6119b49190612cc0565b90508083116119c45760006119ce565b6119ce8184612c7a565b91506114c5611a05670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000612cc0565b8390611a58565b60006114c58383670de0b6b3a76400005b6000826000190484118302158202611a3457600080fd5b50910281810615159190040190565b60006114c58383670de0b6b3a7640000611f56565b60006114c583670de0b6b3a764000084611f56565b6000680248ce36a70cb26b3e198213611a8857506000919050565b680755bf798b4a1bf1e58212611ab1576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190611c0274029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611f74565b9695505050505050565b60006114c583670de0b6b3a764000084611a1d565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190612ced565b935093509350935080611d1a5750600098975050505050505050565b868414611d4b57611d2a84611fa2565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611d7c57611d5b83611fcc565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611daa57611d8c82611fa2565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b6000611dc58284612d23565b6114c59084612c7a565b600254600454600091610f75916001600160801b0390911690600f0b61201a565b6000611e11878787611e0a88670de0b6b3a7640000612c7a565b8787612040565b979650505050505050565b6000611e3382611e2d858888611f56565b9061206e565b95945050505050565b6000611ea7611e7d611e5684670de0b6b3a7640000612c7a565b611149670de0b6b3a7640000611e6c818a611c0c565b611e769190612c7a565b8790611a0c565b611e8f90670de0b6b3a7640000612c8d565b611ea184670de0b6b3a7640000612c7a565b90611a58565b949350505050565b600080611ee685611ebe611dcf565b611ec89190612c8d565b6002546117ca908790600160801b90046001600160801b0316612c7a565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000806000806000611f1d8987896114cc565b9092509050611f2c8289612c7a565b97506000611f3b82888a611f56565b9050611f47818b612c7a565b9a989950979650505050505050565b6000826000190484118302158202611f6d57600080fd5b5091020490565b60006001600160ff1b03821115611f9e5760405163396ea70160e11b815260040160405180910390fd5b5090565b60006001600160801b03821115611f9e57604051630f0af95160e11b815260040160405180910390fd5b60006f7fffffffffffffffffffffffffffffff19821280611ffc57506f7fffffffffffffffffffffffffffffff82135b15611f9e5760405163a5353be560e01b815260040160405180910390fd5b60008061202784846120d9565b90925090508061203957612039611ef1565b5092915050565b600080612051888888888888612118565b90925090508061206357612063611ef1565b509695505050505050565b6000816000036120875750670de0b6b3a7640000610d9e565b8260000361209757506000610d9e565b60006120a283611f74565b905060006120b76120b286611f74565b6121e0565b90508181026120ce670de0b6b3a764000082612d37565b9050611c0281611a6d565b6000806000836120e886611f74565b6120f29190612ca0565b9050600081121561210a576000809250925050612111565b9150600190505b9250929050565b600080600061212a8989888888612406565b905061214486611e2d61213d8a8d612c8d565b8790611a43565b9850612151858a86611f56565b9850888110156121685760008092509250506121d5565b888103670de0b6b3a7640000811061219d5761219661218f670de0b6b3a764000089611c0c565b829061206e565b90506121b5565b6121b261218f670de0b6b3a764000089611a58565b90505b808910156121cb576000809350935050506121d5565b8803925060019150505b965096945050505050565b60008082136122025760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906122859084901c611f74565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000612412858561206e565b61242b61242386611e2d868b611a0c565b859085611a1d565b611c029190612c8d565b8183823760009101908152919050565b805160208201516001600160e01b031980821692919060048310156124745780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156124b6576124b661247c565b60405290565b60005b838110156124d75781810151838201526020016124bf565b50506000910152565b6000602082840312156124f257600080fd5b815167ffffffffffffffff8082111561250a57600080fd5b818401915084601f83011261251e57600080fd5b8151818111156125305761253061247c565b604051601f8201601f19908116603f011681019083821181831017156125585761255861247c565b8160405282815287602084870101111561257157600080fd5b611e118360208301602088016124bc565b6001600160a01b0381168114610e2557600080fd5b6000602082840312156125a957600080fd5b81356114c581612582565b8015158114610e2557600080fd5b80356125cd816125b4565b919050565b6000602082840312156125e457600080fd5b81356114c5816125b4565b600060608284031215610b8b57600080fd5b60008060006060848603121561261657600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561263b57600080fd5b612647868287016125ef565b9150509250925092565b60008083601f84011261266357600080fd5b50813567ffffffffffffffff81111561267b57600080fd5b6020830191508360208260051b850101111561211157600080fd5b600080600080600080608087890312156126af57600080fd5b86356126ba81612582565b955060208701356126ca81612582565b9450604087013567ffffffffffffffff808211156126e757600080fd5b6126f38a838b01612651565b9096509450606089013591508082111561270c57600080fd5b5061271989828a01612651565b979a9699509497509295939492505050565b6000806000806080858703121561274157600080fd5b84359350602085013561275381612582565b9250604085013561276381612582565b9396929550929360600135925050565b6000806000806080858703121561278957600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080608085870312156127bb57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156127e757600080fd5b6127f3878288016125ef565b91505092959194509250565b60006020828403121561281157600080fd5b813567ffffffffffffffff81111561282857600080fd5b611ea7848285016125ef565b6000806040838503121561284757600080fd5b50508035926020909101359150565b600080600080600060a0868803121561286e57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156128a157600080fd5b6128ad888289016125ef565b9150509295509295909350565b600080600080608085870312156128d057600080fd5b8435935060208501356128e281612582565b92506040850135915060608501356128f981612582565b939692955090935050565b600080600080600060a0868803121561291c57600080fd5b85359450602086013561292e81612582565b9350604086013561293e81612582565b925060608601359150608086013561295581612582565b809150509295509295909350565b60006020828403121561297557600080fd5b5035919050565b80356001600160801b03811681146125cd57600080fd5b600080604083850312156129a657600080fd5b6129af8361297c565b91506129bd6020840161297c565b90509250929050565b600080604083850312156129d957600080fd5b82356129e481612582565b915060208301356129f4816125b4565b809150509250929050565b600080600060608486031215612a1457600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215612a4057600080fd5b833592506020840135612a5281612582565b929592945050506040919091013590565b600080600080600080600060e0888a031215612a7e57600080fd5b8735612a8981612582565b96506020880135612a9981612582565b95506040880135612aa9816125b4565b945060608801359350608088013560ff81168114612ac657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215612af557600080fd5b6114c58261297c565b8035600f81900b81146125cd57600080fd5b80356001600160701b03811681146125cd57600080fd5b60006101808284031215612b3a57600080fd5b612b42612492565b612b4b8361297c565b8152612b596020840161297c565b6020820152612b6a6040840161297c565b6040820152612b7b6060840161297c565b6060820152612b8c60808401612afe565b6080820152612b9d60a0840161297c565b60a0820152612bae60c0840161297c565b60c0820152612bbf60e0840161297c565b60e0820152610100612bd28185016125c2565b90820152610120612be48482016125c2565b90820152610140612bf6848201612b10565b90820152610160612c0884820161297c565b908201529392505050565b600060208284031215612c2557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201612c5757612c57612c2c565b5060000390565b60008251612c708184602087016124bc565b9190910192915050565b81810381811115610d9e57610d9e612c2c565b80820180821115610d9e57610d9e612c2c565b818103600083128015838313168383128216171561203957612039612c2c565b8082028115828204841417610d9e57610d9e612c2c565b634e487b7160e01b600052601260045260246000fd5b60008060008060808587031215612d0357600080fd5b84519350602085015192506040850151915060608501516128f9816125b4565b600082612d3257612d32612cd7565b500690565b600082612d4657612d46612cd7565b600160ff1b821460001984141615612d6057612d60612c2c565b50059056fea264697066735822122018ff508a4cd8b9994c34af7ff126070c3507fcc8db7db00f456e3a2728dbe0bd64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004228380380620042288339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613da66200048260003960008181610dab01526123a7015260008181610d7c015261236a015260008181610c5601528181610edb01528181610f6b01528181610ffb0152818161108b0152818161168c01528181611724015281816118ed01528181611f2101528181611ff7015261214e01526000610e43015260008181610e1d015261255a015260008181610df70152612534015260008181610dd1015261250e01526000611198015260006111720152600061114c01526000611126015260008181610eb50152612580015260008181610e69015281816113130152612a9c015260008181610e8f0152612edb01526000818161061b0152610d4d01526000818161074b01528181610d1e015281816112c601528181611e95015281816126440152818161268d0152818161273f0152818161278801528181612c0101528181612cad01528181612d990152612e450152613da66000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c806360246c881161013b578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104f1578063d816574314610504578063e44808bc14610519578063e985e9c51461052c578063fba560081461053f57600080fd5b8063bd85b039146104a3578063becee9c3146104b6578063c55dae63146104d6578063c69e16ad14610434578063c6e6f592146104de57600080fd5b80639cd241af116100ff5780639cd241af14610444578063a22cb46514610457578063ab033ea91461046a578063b0d965801461047b578063b88fed9f1461049057600080fd5b806360246c88146103fa5780637180c8ca1461040f5780637ecebe00146104215780638e67f87e14610434578063950c5d031461043c57600080fd5b806320fc4881116101c95780633e691db91161018d5780633e691db91461039657806346fbf68e146103a95780634e41a1fb146103cc5780634ed2d6ac146103df57806354fd4d50146103f257600080fd5b806320fc4881146102fb57806321ff32a914610340578063313ce567146103615780633656eec21461037b5780633a98ef391461038e57600080fd5b806306fdde031161021057806306fdde031461029a5780630a4e1493146102a257806314e5f07b146102c257806317fad7fc146102d55780631c0f12b6146102e857600080fd5b8062ad800c1461024157806301681a621461026a57806302329a291461027f57806304baa00b14610292575b600080fd5b61025461024f36600461312c565b61056e565b6040516102619190613195565b60405180910390f35b61027d6102783660046131bd565b6105a5565b005b61027d61028d3660046131e8565b6105ae565b6102546105b7565b6102546105f6565b6102aa61060d565b6040516001600160a01b039091168152602001610261565b61027d6102d0366004613214565b61064d565b61027d6102e33660046132ef565b610669565b61027d6102f6366004613384565b61067f565b61030e61030936600461312c565b610692565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610261565b61035361034e3660046133cc565b6106fe565b604051908152602001610261565b610369610744565b60405160ff9091168152602001610261565b61035361038936600461340e565b6107df565b610353610818565b6103536103a436600461343e565b610837565b6103bc6103b73660046131bd565b610842565b6040519015158152602001610261565b6102546103da36600461312c565b610862565b61027d6103ed366004613479565b610870565b6102546108be565b6104026108f3565b60405161026191906134c3565b61027d61041d366004613564565b5050565b61035361042f3660046131bd565b610c02565b610353610c2e565b6102aa610c48565b61027d610452366004613592565b610c88565b61027d610465366004613564565b610c99565b61027d6104783660046131bd565b50565b610483610d05565b60405161026191906135ca565b61035361049e36600461312c565b6111cd565b6103536104b136600461312c565b6111db565b6104c96104c43660046136f0565b6111fd565b6040516102619190613732565b6102aa6112b8565b6103536104ec36600461312c565b6112f8565b6103536104ff36600461312c565b611306565b61050c61133d565b6040516102619190613776565b61027d610527366004613887565b611449565b6103bc61053a3660046138e6565b611491565b6105476114d5565b6040805182516001600160801b039081168252602093840151169281019290925201610261565b60606105a061057c83611534565b60405160200161058c9190613195565b60405160208183030381529060405261165c565b919050565b61047881611680565b610478816118eb565b60606105f36040518060400160405280600e81526020016d4d6f636b4879706572647269766560901b81525060405160200161058c9190613195565b90565b60606105f3600160405160200161058c9190613914565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b61065e898989898989898989611a05565b505050505050505050565b610677868686868686611bfc565b505050505050565b61068c8484848433611cb0565b50505050565b60408051606081018252600080825260208201819052918101919091526105a06008600084815260200190815260200160002060405160200161058c919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b038681168552908352818420908516845282528083205481519283015261073d910161058c565b9392505050565b60006105f37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb91906139c5565b6040805160ff90921660208301520161058c565b6000828152600a602090815260408083206001600160a01b0385168452825280832054815192830152610812910161058c565b92915050565b60006105f3610825611e71565b60405160200161058c91815260200190565b600061081282611f0a565b60006105a061085083612149565b6040805191151560208301520161058c565b60606105a061057c8361222e565b8361087a8161232c565b6001600160a01b0316336001600160a01b0316146108ab57604051632aab8bd360e01b815260040160405180910390fd5b6108b7858585856123e9565b5050505050565b60606105f360405180604001604052806007815260200166076312e302e32360cc1b81525060405160200161058c9190613195565b61096c604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000610976612456565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109e19190613a0e565b6109eb9190613a21565b905060008215610afd5773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a1885612469565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190613a34565b509050610afa81846125ff565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bce57610bc98486612614565b610bd1565b60005b81526003546001600160801b0316602091820152604051919250610bfb9161058c918491016134c3565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105a0910161058c565b60006105f360095460405160200161058c91815260200190565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b610c94838383336123e9565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d0d613045565b6105f36040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107b9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190613a64565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161058c91906135ca565b60006105a061082583612629565b6000818152600b60209081526040808320548151928301526105a0910161058c565b606060008267ffffffffffffffff81111561121a5761121a613a81565b604051908082528060200260200182016040528015611243578160200160208202803683370190505b50905060005b8381101561129c57600085858381811061126557611265613a97565b9050602002013590506000815490508084848151811061128757611287613a97565b60209081029190910101525050600101611249565b506112b18160405160200161058c9190613732565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b60006105a061082583612724565b60006105a06108256113387f000000000000000000000000000000000000000000000000000000000000000085613a0e565b61280d565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105f3600260405160200161058c919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b846114538161232c565b6001600160a01b0316336001600160a01b03161461148457604051632aab8bd360e01b815260040160405180910390fd5b6106778686868686611cb0565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff9091161515918101919091529091610812910161058c565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105f39060600161058c565b606060f882901c6001600160f81b038316600061155082612851565b90506000836003811115611566576115666139e2565b03611598576040518060400160405280600d81526020016c048797065726472697665204c5609c1b8152509350611654565b60018360038111156115ac576115ac6139e2565b036115d857806040516020016115c29190613aad565b6040516020818303038152906040529350611654565b60028360038111156115ec576115ec6139e2565b0361160257806040516020016115c29190613ae6565b6003836003811115611616576116166139e2565b03611654576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b81526004016116779190613195565b60405180910390fd5b611688612906565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190613a64565b9050336001600160a01b038216148015906117ba57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190613a64565b6001600160a01b0316336001600160a01b031614155b80156117cc57506117ca33612149565b155b156117e9576040516282b42960e81b815260040160405180910390fd5b60006117f3611e71565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561183d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118619190613b20565b90506118776001600160a01b0385168483612930565b81611880611e71565b1461189e576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104786001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190613a64565b6001600160a01b0316336001600160a01b031614158015611994575061199233612149565b155b156119b1576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119fa90831515815260200190565b60405180910390a150565b83421115611a265760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a4d5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b3b573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b7957604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c1957506001600160a01b038516155b15611c375760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c575760405163174861a760e31b815260040160405180910390fd5b60005b83811015611ca757611c9f858583818110611c7757611c77613a97565b905060200201358888868686818110611c9257611c92613a97565b9050602002013533611cb0565b600101611c5a565b50505050505050565b6001600160a01b0384161580611ccd57506001600160a01b038316155b15611ceb5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611daf576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611daf576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611dad576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611da7908490613a21565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611de1908490613a21565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e18908490613a0e565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b8152306004820152600090611f05906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f009190613b20565b612724565b905090565b6000611f14612906565b611f1d82612982565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa19190613a64565b90506001600160a01b038116611fba60208501856131bd565b6001600160a01b031614611fe157604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061208d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120779190613a64565b6001600160a01b0316336001600160a01b031614155b801561209f575061209d33612149565b155b156120bc576040516282b42960e81b815260040160405180910390fd5b60006120c6612456565b6009805460009091559091506120dd8183876129b8565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461211c60408a0160208b016131e8565b60408051938452602084019290925215159082015260600160405180910390a25050506105a06001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121d29190810190613b39565b905060005b815181101561222457836001600160a01b03168282815181106121fc576121fc613a97565b60200260200101516001600160a01b03160361221c575060019392505050565b6001016121d7565b5060009392505050565b606060f882901c6001600160f81b038316600061224a82612851565b90506000836003811115612260576122606139e2565b03612292576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b8152509350611654565b60018360038111156122a6576122a66139e2565b036122bc57806040516020016115c29190613bfe565b60028360038111156122d0576122d06139e2565b036122e657806040516020016115c29190613c36565b60038360038111156122fa576122fa6139e2565b0361165457505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611f05670de0b6b3a7640000612629565b6124cd6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125c59116612a51565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125f792900416612a51565b905292915050565b600061073d8383670de0b6b3a7640000612ac7565b600061073d83670de0b6b3a764000084612ac7565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612678575047612703565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190613b20565b90505b600f5460000361271457600061073d565b600f5461073d9084908390612ac7565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016127735750476127fe565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fb9190613b20565b90505b600f5461073d90849083612ac7565b6000612835600b6000612821600286612ae5565b815260200190815260200160002054612b1a565b612847600b6000612821600187612ae5565b6108129190613c62565b60408051604e80825260808201909252606091906000908260208201818036833701905050905060005b84156128f85761288c600a86613c98565b612897906030613a0e565b60f81b8260016128a78487613a21565b6128b19190613a21565b815181106128c1576128c1613a97565b60200101906001600160f81b031916908160001a905350806128e281613cac565b91506128f19050600a86613cc5565b945061287b565b918290030190815292915050565b60026000540361292957604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c94908490612b48565b600061299160208301836131bd565b6001600160a01b0316036104785760405163f0dd15fd60e01b815260040160405180910390fd5b6000806129c585856125ff565b90506129d081612724565b9450846000036129e457600091505061073d565b8491506129f760408401602085016131e8565b15612a2657612a1f85612a0d60208601866131bd565b612a1a6040870187613cd9565b612bab565b9150612a49565b612a4985612a3760208601866131bd565b612a446040870187613cd9565b612d45565b509392505050565b600080670de0b6b3a7640000612a65612ed3565b612a6f9190613d20565b9050808311612a7f576000612a89565b612a898184613a21565b915061073d612ac0670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613d20565b8390612614565b6000826000190484118302158202612ade57600080fd5b5091020490565b60006001600160f81b03821115612b0f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60006001600160ff1b03821115612b445760405163396ea70160e11b815260040160405180910390fd5b5090565b6000612b5d6001600160a01b03841683612eff565b90508051600014158015612b82575080806020019051810190612b809190613d37565b155b15610c9457604051635274afe760e01b81526001600160a01b0384166004820152602401611677565b6000600f548511612bbc5784612bc0565b600f545b94506000612bcd86612629565b905085600f6000828254612be19190613a21565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612c87576040516001600160a01b038716908390600081818185875af1925050503d8060008114612c77576040519150601f19603f3d011682016040523d82523d6000602084013e612c7c565b606091505b505080915050612d1d565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a9190613d37565b90505b80612d3b576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f548411612d545783612d58565b600f545b93506000612d6585612629565b905084600f6000828254612d799190613a21565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612e1f576040516001600160a01b038616908390600081818185875af1925050503d8060008114612e0f576040519150601f19603f3d011682016040523d82523d6000602084013e612e14565b606091505b505080915050612eb5565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb29190613d37565b90505b80610677576040516312171d8360e31b815260040160405180910390fd5b6000611f05427f0000000000000000000000000000000000000000000000000000000000000000612f0d565b606061073d83836000612f23565b6000612f198284613c98565b61073d9084613a21565b606081471015612f485760405163cd78605960e01b8152306004820152602401611677565b600080856001600160a01b03168486604051612f649190613d54565b60006040518083038185875af1925050503d8060008114612fa1576040519150601f19603f3d011682016040523d82523d6000602084013e612fa6565b606091505b5091509150612fb6868383612fc0565b9695505050505050565b606082612fd557612fd08261301c565b61073d565b8151158015612fec57506001600160a01b0384163b155b1561301557604051639996b31560e01b81526001600160a01b0385166004820152602401611677565b508061073d565b80511561302c5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016131276040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b60006020828403121561313e57600080fd5b5035919050565b60005b83811015613160578181015183820152602001613148565b50506000910152565b60008151808452613181816020860160208601613145565b601f01601f19169290920160200192915050565b60208152600061073d6020830184613169565b6001600160a01b038116811461047857600080fd5b6000602082840312156131cf57600080fd5b813561073d816131a8565b801515811461047857600080fd5b6000602082840312156131fa57600080fd5b813561073d816131da565b60ff8116811461047857600080fd5b60008060008060008060008060006101208a8c03121561323357600080fd5b8935985060208a0135975060408a013561324c816131a8565b965060608a013561325c816131a8565b955060808a013561326c816131da565b945060a08a0135935060c08a013561328381613205565b8093505060e08a013591506101008a013590509295985092959850929598565b60008083601f8401126132b557600080fd5b50813567ffffffffffffffff8111156132cd57600080fd5b6020830191508360208260051b85010111156132e857600080fd5b9250929050565b6000806000806000806080878903121561330857600080fd5b8635613313816131a8565b95506020870135613323816131a8565b9450604087013567ffffffffffffffff8082111561334057600080fd5b61334c8a838b016132a3565b9096509450606089013591508082111561336557600080fd5b5061337289828a016132a3565b979a9699509497509295939492505050565b6000806000806080858703121561339a57600080fd5b8435935060208501356133ac816131a8565b925060408501356133bc816131a8565b9396929550929360600135925050565b6000806000606084860312156133e157600080fd5b8335925060208401356133f3816131a8565b91506040840135613403816131a8565b809150509250925092565b6000806040838503121561342157600080fd5b823591506020830135613433816131a8565b809150509250929050565b60006020828403121561345057600080fd5b813567ffffffffffffffff81111561346757600080fd5b82016060818503121561073d57600080fd5b6000806000806080858703121561348f57600080fd5b8435935060208501356134a1816131a8565b92506040850135915060608501356134b8816131a8565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b6000806040838503121561357757600080fd5b8235613582816131a8565b91506020830135613433816131da565b6000806000606084860312156135a757600080fd5b8335925060208401356135b9816131a8565b929592945050506040919091013590565b81516001600160a01b03168152610260810160208301516135f660208401826001600160a01b03169052565b50604083015161361160408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151613683828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b6000806020838503121561370357600080fd5b823567ffffffffffffffff81111561371a57600080fd5b613726858286016132a3565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561376a5783518352928401929184019160010161374e565b50909695505050505050565b81516001600160801b03168152610180810160208301516137a260208401826001600160801b03169052565b5060408301516137bd60408401826001600160801b03169052565b5060608301516137d860608401826001600160801b03169052565b5060808301516137ed6080840182600f0b9052565b5060a083015161380860a08401826001600160801b03169052565b5060c083015161382360c08401826001600160801b03169052565b5060e083015161383e60e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b038116828501526136e8565b600080600080600060a0868803121561389f57600080fd5b8535945060208601356138b1816131a8565b935060408601356138c1816131a8565b92506060860135915060808601356138d8816131a8565b809150509295509295909350565b600080604083850312156138f957600080fd5b8235613904816131a8565b91506020830135613433816131a8565b60006020808352600084548160018260011c9150600183168061393857607f831692505b60208310810361395657634e487b7160e01b85526022600452602485fd5b6020880183905260408801818015613975576001811461398b576139b6565b60ff198616825284151560051b820196506139b6565b60008b81526020902060005b868110156139b057815484820152908501908901613997565b83019750505b50949998505050505050505050565b6000602082840312156139d757600080fd5b815161073d81613205565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610812576108126139f8565b81810381811115610812576108126139f8565b60008060408385031215613a4757600080fd5b825191506020830151613433816131da565b80516105a0816131a8565b600060208284031215613a7657600080fd5b815161073d816131a8565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b700243cb832b9323934bb32902637b7339d1607d1b815260008251613ad9816011850160208701613145565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b815260008251613b13816012850160208701613145565b9190910160120192915050565b600060208284031215613b3257600080fd5b5051919050565b60006020808385031215613b4c57600080fd5b825167ffffffffffffffff80821115613b6457600080fd5b818501915085601f830112613b7857600080fd5b815181811115613b8a57613b8a613a81565b8060051b604051601f19603f83011681018181108582111715613baf57613baf613a81565b604052918252848201925083810185019188831115613bcd57600080fd5b938501935b82851015613bf257613be385613a59565b84529385019392850192613bd2565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b815260008251613c29816010850160208701613145565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b815260008251613ad9816011850160208701613145565b81810360008312801583831316838312821617156112b1576112b16139f8565b634e487b7160e01b600052601260045260246000fd5b600082613ca757613ca7613c82565b500690565b600060018201613cbe57613cbe6139f8565b5060010190565b600082613cd457613cd4613c82565b500490565b6000808335601e19843603018112613cf057600080fd5b83018035915067ffffffffffffffff821115613d0b57600080fd5b6020019150368190038213156132e857600080fd5b8082028115828204841417610812576108126139f8565b600060208284031215613d4957600080fd5b815161073d816131da565b60008251613d66818460208701613145565b919091019291505056fea2646970667358221220fc48960ebfc2d4107101b2838d672c46d78b8028720f78fd5c6c25fae03caf1064736f6c634300081600336102806040523480156200001257600080fd5b506040516200425c3803806200425c8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613da1620004bb60003960005050600050506000610b650152600050506000818160af01528181610325015261301c0152600081816113eb015281816117fc0152818161185f01528181612bfa01528181612c3601528181612e350152612ff601526000818161071301528181610de801528181610e2f01528181610ff401528181611661015281816116af0152612fd001526000611c1f015260008181611d45015281816123a801526124210152600081816108d701528181610f8c01528181611d1901526123f5015260008181610e81015261236e01526000818161073401528181610dc601528181610e50015281816110150152818161163f015281816116d0015261304201526000818161080f01528181610f0b015281816117580152818161224301526135760152600081816105d20152818161064d015281816106c30152818161078f01526107c7015260005050600081816119f101528181611a3a01528181612697015281816126e0015281816127bb015281816128670152818161295301526129ff0152613da16000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806329b23fc11461003b578063ded0623114610060575b600080fd5b61004e610049366004613824565b610073565b60405190815260200160405180910390f35b61004e61006e366004613824565b61008c565b60006100818585858561009a565b90505b949350505050565b600061008185858585610310565b60006100a461054f565b6100ad82610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156100ee5760405163211ddda360e11b815260040160405180910390fd5b60006100f86105b2565b90508542101561011d5761011761010d6105ca565b82600460016105f6565b5061012d565b61012b8682600460016105f6565b505b61014261013b600288610c73565b3387610ca8565b6000806000806000806101568b888e610d81565b95509550955095509550955060008c90508c4210156102165782600960008282546101819190613899565b9091555061019990506101926105ca565b4284611075565b6101a68c888787856111b3565b60006101b18e61132d565b90506101cf6101bf8e611377565b6101c990836138ac565b826113a5565b6101d8896113e4565b6101e4576101e4611444565b60006101ef8a61145d565b90508061020f57604051638bdf918d60e01b815260040160405180910390fd5b505061022d565b610220868961146a565b955061022b8861145d565b505b600061023a878a8d61154b565b90508b81101561025d5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61026d600288610c73565b61027a60208301836138e1565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102b86040890160208a0161390c565b6102cc8a6102c68d8f613899565b906115e5565b8d6102da60408c018c613929565b6040516102ee989796959493929190613999565b60405180910390a450939c505050505050505050505050506100846001600055565b600061031a61054f565b61032382610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156103645760405163211ddda360e11b815260040160405180910390fd5b600061036e6105b2565b9050854210156103895761038361010d6105ca565b50610399565b6103978682600460016105f6565b505b6103a761013b600188610c73565b6000806000806000806103bb8b888e6115fa565b95509550955095509550955060008c90508c42101561046e5782600960008282546103e69190613899565b909155506103f790506101926105ca565b6104048c888787856117e5565b600061040f8261132d565b905061042761041d8e611377565b6101c990836139e1565b610430896113e4565b61043c5761043c611444565b60006104478a61145d565b90508061046757604051638bdf918d60e01b815260040160405180910390fd5b5050610485565b610478868961146a565b95506104838861145d565b505b6000610492878a8d61154b565b90508b8110156104b55760405163c972651760e01b815260040160405180910390fd5b8c898c6104c3600186610c73565b6104d060208301836138e1565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee526788888761050e6040890160208a0161390c565b8a61051c60408b018b613929565b60405161052f9796959493929190613a09565b60405180910390a450919a50505050505050505050506100846001600055565b60026000540361057257604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600061058860208301836138e1565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b60006105c5670de0b6b3a76400006119d6565b905090565b60006105c5427f0000000000000000000000000000000000000000000000000000000000000000611ad1565b600084815260086020526040812060018101546001600160801b031615158061061e57504286115b1561063757600101546001600160801b03169050610084565b60008060006106446105ca565b905060006106727f00000000000000000000000000000000000000000000000000000000000000008b613899565b90505b818110156106e8576000818152600860205260409020600101546001600160801b031680156106c0576000828152600860205260409020549094506001600160801b031692506106e8565b507f000000000000000000000000000000000000000000000000000000000000000001610675565b8360000361075b578893506107586106fe611ae7565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b92505b5061076583611b1f565b6001850180546001600160801b0319166001600160801b03929092169190911790556107bb6107b47f00000000000000000000000000000000000000000000000000000000000000008b613a4a565b8a84611075565b6107f9896107f36107ec7f000000000000000000000000000000000000000000000000000000000000000083613899565b4290611b49565b84611075565b61080288611b5e565b50600090506008816108347f00000000000000000000000000000000000000000000000000000000000000008d613a4a565b815260208101919091526040016000908120600101546001600160801b0316915061086060028c610c73565b6000818152600b60205260408120549192508c8c83156109a6576001925060008061088f86898d866000611d02565b9150915080600960008282546108a59190613899565b909155506108c19050866000846108bb81611377565b886111b3565b6108cb8183613899565b91506108fb86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611dd1565b915061090f61090a83856115e5565b611e1b565b600680546002906109309084906201000090046001600160701b0316613a5d565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061095d82611b1f565b6006805460109061097f908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b60006109b3600184610c73565b6000818152600b60205260409020549091508015610ac257600194506000806109e0838b8f886001611d02565b9150915080600960008282546109f69190613899565b90915550610a12905083600084610a0c81611377565b8a6117e5565b610a1c8183613a4a565b9150610a2b61090a83876115e5565b60068054600290610a4c9084906201000090046001600160701b0316613a5d565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7982611b1f565b60068054601090610a9b908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610afc57610aee610ad487611377565b610add83611377565b610ae791906138ac565b60006113a5565b8e610af98482611e45565b50505b6000610b078461203f565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190613a9d565b90506001600160a01b03811615610c5a57610c575a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061218b565b50505b509b9d5050505050505050505050505050949350505050565b60006001600160f81b03821115610c9d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610ceb57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610d2e908490613a4a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600080600080600080600080610d95611ae7565b90506000610da28a612216565b6002549091508c908c90610e0c908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f0000000000000000000000000000000000000000000000000000000000000000612267565b600254919d509a50909550610e74908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b9550610eaa858c610ea5897f00000000000000000000000000000000000000000000000000000000000000006122d7565b612307565b15610eb757610eb7611444565b6000806000610ec885878b87612349565b9c5091945092509050610edb8184613a4a565b610ee59089613899565b9750610ef18284613899565b610efb908d613899565b9b505050505050506000600860007f00000000000000000000000000000000000000000000000000000000000000008c610f359190613a4a565b815260208101919091526040016000908120600101546001600160801b03169150428b11610f7d5760008b8152600860205260409020600101546001600160801b0316610f7f565b8b5b90508b610fb08e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611dd1565b9950610fbc878a613a4a565b9850670de0b6b3a7640000611039610fd48787613899565b600254610ff2908f90600160801b90046001600160801b0316613a4a565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b111561104757611047611444565b6110578a8a878a8787600061245d565b939d50919b5090995090975050505050505093975093979195509350565b600083815260086020526040902054600160801b90046001600160801b03168083036110a15750505050565b6000848152600860205260408120546001600160801b0316908190036110fb576110ca83611b1f565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611179565b61114c611147670de0b6b3a76400006111148886613a4a565b61111e9190613aba565b85670de0b6b3a7640000611132878a613a4a565b61113c9190613aba565b8592919060016124fc565b611b1f565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61118284611b1f565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111fc611147826111df670de0b6b3a764000086613aba565b600554600160801b90046001600160801b031691908a60006124fc565b600580546001600160801b03928316600160801b02921691909117905561122286611b1f565b61122c9082613ad1565b600480546001600160801b03928316600160801b02921691909117905561125284611b1f565b6002805460009061126d9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061129a836125a6565b600480546000906112af908490600f0b613af1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506112df85611b1f565b60028054601090611301908490600160801b90046001600160801b0316613ad1565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000611355600b6000611341600286610c73565b815260200190815260200160002054611377565b611367600b6000611341600187610c73565b61137191906138ac565b92915050565b60006001600160ff1b038211156113a15760405163396ea70160e11b815260040160405180910390fd5b5090565b6003546113c090611147906001600160801b031684846125e2565b600380546001600160801b0319166001600160801b03929092169190911790555050565b60006114107f000000000000000000000000000000000000000000000000000000000000000083612649565b60035461142691906001600160801b0316613899565b60025461143c906001600160801b0316846115e5565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000611371826004611e45565b600080600061147884611b5e565b9092509050600061148986866115e5565b9050818311156114a15761149e86838561265e565b95505b828110156114b35780830392506114b8565b600092505b6114c183611e1b565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b909104168087101561151457869003611518565b5060005b61152181611b1f565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b60008061155885856115e5565b90506115638161267c565b9450846000036115775760009150506115de565b84915061158a604084016020850161390c565b156115b9576115b2856115a060208601866138e1565b6115ad6040870187613929565b612765565b91506115dc565b6115dc856115ca60208601866138e1565b6115d76040870187613929565b6128ff565b505b9392505050565b60006115de8383670de0b6b3a764000061265e565b60008060008060008060008061160e611ae7565b9050600061161b8a612216565b6002549091508b908d90611685908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f0000000000000000000000000000000000000000000000000000000000000000612a95565b600254919d509b50909550600090819081906116f4908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b985061170284878b88612349565b9c5091945090925090506117168284613a4a565b6117209089613a4a565b975061172c8184613899565b611736908e613a4a565b9c506117428a8e613899565b9b50505050505050506117cf86868386600860007f00000000000000000000000000000000000000000000000000000000000000008f6117829190613a4a565b81526020810191909152604001600020600101546001600160801b0316428e116117c65760008e8152600860205260409020600101546001600160801b03166117c8565b8e5b600161245d565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b03168381108061182757507f00000000000000000000000000000000000000000000000000000000000000006118258583613a4a565b105b1561183457611834611444565b6004549084900390600f0b61184984826138ac565b90508361185586611377565b13801561188a57507f00000000000000000000000000000000000000000000000000000000000000006118888383612ae9565b105b1561189757611897611444565b600354600160801b90046001600160801b03166118d9611147826118c3670de0b6b3a764000088613aba565b6005546001600160801b031691908c60006124fc565b600580546001600160801b0319166001600160801b03929092169190911790556119038882613a4a565b905061190e81611b1f565b600380546001600160801b03928316600160801b02921691909117905561193483611b1f565b600280546001600160801b0319166001600160801b039290921691909117905561195d826125a6565b600480546001600160801b0319166001600160801b039290921691909117905561198687611b1f565b600280546010906119a8908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a25575047611ab0565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad9190613b1e565b90505b600f54600003611ac15760006115de565b600f546115de908490839061265e565b6000611add8284613b4d565b6115de9084613a4a565b6002546004546000916105c5916001600160801b0390911690600f0b612ae9565b600061008182611b1985888861265e565b90612b0f565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611b5857826115de565b50919050565b6006546000908190611b81908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611cfd576000611bab8383613a4a565b9050611bba6111478286612b84565b60068054601090611bdc908490600160801b90046001600160801b0316613ad1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611c158583612b9990919063ffffffff16565b90506000611c43827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611c579190613899565b90915550611c6790508183613a4a565b9150611c7282611b1f565b60028054600090611c8d9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611cba82612bae565b60048054600090611ccf908490600f0b613af1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611d0f8785612b99565b91506000611d3d837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611d69817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611d8c57611d7b8282613a4a565b611d859084613a4a565b9250611da3565b611d968282613a4a565b611da09084613899565b92505b86861015611dc657611db683878961265e565b9250611dc382878961265e565b91505b509550959350505050565b600080611de984611de38a888a61265e565b90612b99565b9050611df688848661265e565b611e009082613899565b905086811115611e105786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611e90916001600160801b031690613a4a565b905080600003611ea4576001915050611371565b6000611eaf85612bd8565b905080600003611ec457600192505050611371565b600080611ed2838589612c74565b9150915080611ee8576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611f24929190613bdf565b6040805180830381865af4158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190613c55565b91509150611f82611f7482611377565b611f7d90613c79565b612def565b925082611f985760009650505050505050611371565b611fa182611b1f565b60078054600090611fbc9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611fe981611b1f565b6007805460109061200b908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61206887612f87565b6040518263ffffffff1660e01b81526004016120849190613c95565b6040805180830381865af41580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190613ca4565b91509150806120da575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161214091613899565b61214a9190613a4a565b90508060000361216257506000958695509350505050565b600080871161217257600061217d565b61217d84888461265e565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156121b1576121b1613cd4565b6040519080825280601f01601f1916602001820160405280156121db576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156121fc578692505b828152826000602083013e90999098509650505050505050565b6000806122216105ca565b905080831161223157600061223b565b61223b8184613a4a565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612b99565b6000808061228861228088670de0b6b3a7640000613a4a565b8990876130c1565b905086156122ca5761229a8888612649565b91506122bb8a8a846122b48a670de0b6b3a7640000613a4a565b89896130e7565b92506122c78382613899565b90505b9750975097945050505050565b60006122f56122ee84670de0b6b3a7640000613a4a565b8390612649565b6115de90670de0b6b3a7640000613a4a565b60008061233e85612316611ae7565b6123209190613899565b600254610ff2908790600160801b90046001600160801b0316613a4a565b909210949350505050565b60008080806123a087866123998b61239361236c8c670de0b6b3a7640000613a4a565b7f000000000000000000000000000000000000000000000000000000000000000090612649565b90612649565b91906130c1565b93506123cc847f00000000000000000000000000000000000000000000000000000000000000006115e5565b915060006123ed6123e589670de0b6b3a7640000613a4a565b8a90886130c1565b9050612419817f0000000000000000000000000000000000000000000000000000000000000000612649565b9350612445847f00000000000000000000000000000000000000000000000000000000000000006115e5565b61244f9084613899565b915050945094509450949050565b600080600080600080888810156124cc5786156124825761247f8d898b61265e565b9c505b61248d8c898b61265e565b9b506124988b611377565b6124a18d611377565b6124ab91906138ac565b90506124b88b898b61265e565b9a506124c58a898b61265e565b99506124eb565b6124d58b611377565b6124de8d611377565b6124e891906138ac565b90505b9b9c9a9b999a975050505050505050565b60008260000361250d57508461259d565b81156125605761253e6125208487613899565b61252a85876115e5565b612534888a6115e5565b611de39190613899565b9050600061254c8588611b49565b90508082101561255a578091505b5061259d565b82850361256f5750600061259d565b61259a61257c8487613a4a565b6125868587612649565b612590888a6115e5565b611de39190613a4a565b90505b95945050505050565b600060016001607f1b03198212806125c4575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b6000806125f084600061310a565b6125fb84600061310a565b61260591906138ac565b905060008113156126215761261a8186613899565b9450612640565b60008112156126405761263381613c79565b61263d9086613a4a565b94505b50929392505050565b60006115de8383670de0b6b3a76400006130c1565b600082600019048411830215820261267557600080fd5b5091020490565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016126cb575047612756565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561272f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127539190613b1e565b90505b600f546115de9084908361265e565b6000600f548511612776578461277a565b600f545b94506000612787866119d6565b905085600f600082825461279b9190613a4a565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612841576040516001600160a01b038716908390600081818185875af1925050503d8060008114612831576040519150601f19603f3d011682016040523d82523d6000602084013e612836565b606091505b5050809150506128d7565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190613cea565b90505b806128f5576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f54841161290e5783612912565b600f545b9350600061291f856119d6565b905084600f60008282546129339190613a4a565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016129d9576040516001600160a01b038616908390600081818185875af1925050503d80600081146129c9576040519150601f19603f3d011682016040523d82523d6000602084013e6129ce565b606091505b505080915050612a6f565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190613cea565b90505b80612a8d576040516312171d8360e31b815260040160405180910390fd5b505050505050565b60008080612ab6612aae88670de0b6b3a7640000613a4a565b89908761265e565b905086156122ca57612ac888886115e5565b91506122bb8a8a84612ae28a670de0b6b3a7640000613a4a565b8989613120565b600080612af68484613131565b909250905080612b0857612b08611444565b5092915050565b600081600003612b285750670de0b6b3a7640000611371565b82600003612b3857506000611371565b6000612b4383611377565b90506000612b58612b5386611377565b613170565b9050818102612b6f670de0b6b3a764000082613d07565b9050612b7a81613396565b9695505050505050565b60006115de83670de0b6b3a7640000846130c1565b60006115de83670de0b6b3a76400008461265e565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612bf3906001600160801b031684612b84565b9050612c1f7f000000000000000000000000000000000000000000000000000000000000000082613899565b6002546001600160801b03161115611b58576002547f000000000000000000000000000000000000000000000000000000000000000090612c6a9083906001600160801b0316613a4a565b6115de9190613a4a565b612c7c613771565b600080612c8884612f87565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612cc39190613c95565b6040805180830381865af4158015612cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d039190613ca4565b9350905082612d18575060009150612de79050565b6000612d3f612d3a8461016001518561014001516115e590919063ffffffff16565b611377565b612d5f612d3a85610120015186610100015161264990919063ffffffff16565b612d6991906138ac565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecc9190613d35565b935093509350935080612ee85750600098975050505050505050565b868414612f1957612ef884611b1f565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612f4a57612f29836125a6565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612f7857612f5a82611b1f565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612f8f6137c3565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191613087911661352b565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926130b99290041661352b565b905292915050565b60008260001904841183021582026130d857600080fd5b50910281810615159190040190565b6000806130f88888888888886135a1565b909250905080611e1057611e10611444565b600081831361311957816115de565b5090919050565b6000806130f8888888888888613682565b60008060008361314086611377565b61314a91906138ac565b90506000811215613162576000809250925050613169565b9150600190505b9250929050565b60008082136131925760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132159084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133b157506000919050565b680755bf798b4a1bf1e582126133da576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612b7a74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a764000061353f6105ca565b6135499190613aba565b9050808311613559576000613563565b6135638184613a4a565b91506115de61359a670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613aba565b8390612b99565b60008060006135b38989888888613742565b9050868810156135ca576000809250925050613677565b96869003966135d98887612b0f565b9750878110156135f0576000809250925050613677565b8781036135fe8186886130c1565b9050670de0b6b3a764000081106136325761362b613624670de0b6b3a764000089612b84565b8290612b0f565b905061364a565b613647613624670de0b6b3a764000089612b99565b90505b6136548186612b84565b90508981101561366c57600080935093505050613677565b899003925060019150505b965096945050505050565b60008060006136948989888888613742565b90506136a486611b19898b613899565b9750878110156136bb576000809250925050613677565b8781036136c98186886130c1565b9050670de0b6b3a764000081106136f6576136ef613624670de0b6b3a764000089612b84565b905061370e565b61370b613624670de0b6b3a764000089612b99565b90505b6137188186612b84565b9050808a101561373057600080935093505050613677565b90980398600198509650505050505050565b600061374e8585612b0f565b61376761375f86611b19868b612649565b8590856130c1565b61259a9190613899565b6040518061012001604052806137856137c3565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561383a57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561386657600080fd5b85016060818803121561387857600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561137157611371613883565b8181036000831280158383131683831282161715612b0857612b08613883565b6001600160a01b03811681146105af57600080fd5b6000602082840312156138f357600080fd5b81356115de816138cc565b80151581146105af57600080fd5b60006020828403121561391e57600080fd5b81356115de816138fe565b6000808335601e1984360301811261394057600080fd5b83018035915067ffffffffffffffff82111561395b57600080fd5b60200191503681900382131561316957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c082015260006139d360e083018486613970565b9a9950505050505050505050565b8082018281126000831280158216821582161715613a0157613a01613883565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613a3d60c083018486613970565b9998505050505050505050565b8181038181111561137157611371613883565b6001600160701b03818116838216019080821115612b0857612b08613883565b6001600160801b03818116838216019080821115612b0857612b08613883565b600060208284031215613aaf57600080fd5b81516115de816138cc565b808202811582820484141761137157611371613883565b6001600160801b03828116828216039080821115612b0857612b08613883565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561137157611371613883565b600060208284031215613b3057600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613b5c57613b5c613b37565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613bf3828551613b61565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613c6857600080fd5b505080516020909101519092909150565b6000600160ff1b8201613c8e57613c8e613883565b5060000390565b61018081016113718284613b61565b60008060408385031215613cb757600080fd5b825191506020830151613cc9816138fe565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613cfc57600080fd5b81516115de816138fe565b600082613d1657613d16613b37565b600160ff1b821460001984141615613d3057613d30613883565b500590565b60008060008060808587031215613d4b57600080fd5b8451935060208501519250604085015191506060850151613878816138fe56fea2646970667358221220f9ef548db7c21532cc739261166f101bdecf1359ce98920f224ede3dbee2f56464736f6c634300081600336102806040523480156200001257600080fd5b50604051620044da380380620044da8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613fe6620004f460003960005050600050506000610cab0152600050506000818161010001528181610310015261322a01526000818161164f01528181612175015281816121d80152818161298a01528181612e0f01528181612e4b01528181613043015261320401526000818161085901528181610e0b01528181610e4d01528181610f3f015281816113b501528181611414015281816119fb01528181611a8e01526131de01526000611d94015260008181611eba01528181612a7f01528181612af80152613344015260008181610a1d01528181610ec0015281816114af01528181611e8e0152612acc015260008181610e9f01528181612a4b015261330001526000818161087a01528181610de901528181610e6e01528181610f60015281816113930152818161143501526132500152600081816101de015281816103a80152818161095501526137d40152600081816107130152818161079301528181610809015281816108d5015261090d015260005050600081816105750152818161151a01528181611563015281816117f901528181611842015281816118d40152818161195501528181611afc01528181611b7d01528181612be70152612c300152613fe66000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c366004613a69565b61006d565b6040805192835260208301919091520160405180910390f35b610041610068366004613a69565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a4610549565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610573565b6100de836105df565b6000806100eb8886610618565b909250905060006100fc83836106ed565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a61070b565b905061017a81846004600161073c565b50600080600061018a8787610dba565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c89190613ade565b909155506101d99050844283610f9c565b6102037f000000000000000000000000000000000000000000000000000000000000000085613ade565b98506102118389888c6110da565b600061021e60018b611274565b90506102378161023160208e018e613b06565b8b6112a9565b8d8a8a898e8561024a6020830183613b06565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a8688866102876040880160208901613b31565b8961029560408a018a613b4e565b6040516102a89796959493929190613bbe565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d4610549565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610573565b61030e836105df565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b6000610359611351565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b600061038661070b565b9050600061039f61039561070b565b846004600161073c565b905060006103cd7f000000000000000000000000000000000000000000000000000000000000000084613ade565b90506000806000806103e08e8988611364565b60098054949850929650909450925083916000906103ff908490613ade565b909155506104109050874283610f9c565b61042261041d858a6114ea565b6114ff565b61042d906001613ade565b935050600061043d84898d611601565b9050808d10156104605760405163c972651760e01b815260040160405180910390fd5b61046a818c610618565b508e905061047a81858b89611629565b6000610487600288611274565b90508c6104a18261049b6020840184613b06565b856112a9565b858b86846104b26020860186613b06565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104ef60408b0160208c01613b31565b610503896104fd8a8d613bff565b906106ed565b8d61051160408e018e613b4e565b604051610525989796959493929190613c12565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361056c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015906105bf57503415155b156105dd57604051631574f9f360e01b815260040160405180910390fd5b565b60006105ee6020830183613b06565b6001600160a01b0316036106155760405163f0dd15fd60e01b815260040160405180910390fd5b50565b8160008061062c6040850160208601613b31565b1561065157610647856106426040870187613b4e565b6117dd565b9093509050610669565b5034610669856106646040870187613b4e565b611a71565b610671611351565b915080156106e457604051600090339083908381818185875af1925050503d80600081146106bb576040519150601f19603f3d011682016040523d82523d6000602084013e6106c0565b606091505b50509050806106e2576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006107028383670de0b6b3a7640000611c1b565b90505b92915050565b6000610737427f0000000000000000000000000000000000000000000000000000000000000000611c39565b905090565b600084815260086020526040812060018101546001600160801b031615158061076457504286115b1561077d57600101546001600160801b03169050610db2565b600080600061078a61070b565b905060006107b87f00000000000000000000000000000000000000000000000000000000000000008b613ade565b90505b8181101561082e576000818152600860205260409020600101546001600160801b03168015610806576000828152600860205260409020549094506001600160801b0316925061082e565b507f0000000000000000000000000000000000000000000000000000000000000000016107bb565b836000036108a15788935061089e610844611c4f565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b92505b506108ab83611c90565b6001850180546001600160801b0319166001600160801b03929092169190911790556109016108fa7f00000000000000000000000000000000000000000000000000000000000000008b613bff565b8a84610f9c565b61093f896109396109327f000000000000000000000000000000000000000000000000000000000000000083613ade565b4290611cbe565b84610f9c565b61094888611cd3565b506000905060088161097a7f00000000000000000000000000000000000000000000000000000000000000008d613bff565b815260208101919091526040016000908120600101546001600160801b031691506109a660028c611274565b6000818152600b60205260408120549192508c8c8315610aec57600192506000806109d586898d866000611e77565b9150915080600960008282546109eb9190613ade565b90915550610a07905086600084610a0181611f46565b88611f70565b610a118183613ade565b9150610a4186838a8e877f00000000000000000000000000000000000000000000000000000000000000006120ea565b9150610a55610a5083856106ed565b612134565b60068054600290610a769084906201000090046001600160701b0316613c5a565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610aa382611c90565b60068054601090610ac5908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610af9600184611274565b6000818152600b60205260409020549091508015610c085760019450600080610b26838b8f886001611e77565b915091508060096000828254610b3c9190613ade565b90915550610b58905083600084610b5281611f46565b8a61215e565b610b628183613bff565b9150610b71610a5083876106ed565b60068054600290610b929084906201000090046001600160701b0316613c5a565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610bbf82611c90565b60068054601090610be1908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610c4257610c34610c1a87611f46565b610c2383611f46565b610c2d9190613c9a565b600061234f565b8e610c3f848261238e565b50505b6000610c4d84612588565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190613cba565b90506001600160a01b03811615610da057610d9d5a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906126d4565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610dca611c4f565b600254909150610e2f908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f000000000000000000000000000000000000000000000000000000000000000061275f565b600254909450610e92908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b9150610ee98785610ee4857f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061278b565b6127f0565b15610ef657610ef6612832565b610f028785888561284b565b91965094509250670de0b6b3a7640000610f84610f1f8784613ade565b600254610f3d908890600160801b90046001600160801b0316613bff565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b1115610f9257610f92612832565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610fc85750505050565b6000848152600860205260408120546001600160801b03169081900361102257610ff183611c90565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790556110a0565b61107361106e670de0b6b3a764000061103b8886613bff565b6110459190613cd7565b85670de0b6b3a7640000611059878a613bff565b6110639190613cd7565b859291906001612897565b611c90565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6110a984611c90565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b031661111c61106e82611106670de0b6b3a764000086613cd7565b6005546001600160801b03169190886001612897565b600580546001600160801b0319166001600160801b039290921691909117905561114585611c90565b600280546000906111609084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061118d84611c90565b600280546010906111af908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506111dc84611c90565b6111e69082613c7a565b600380546001600160801b03808416600160801b0291161790559050600061120d8361293f565b905061122b8161121c87611f46565b6112269084613d0e565b61234f565b61123484612983565b61124057611240612832565b600061124b856129e3565b90508061126b57604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b0382111561129e5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906112db908490613ade565b90915550506000838152600b6020526040812080548392906112fe908490613ade565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b6000610737670de0b6b3a76400006114ff565b6000806000806000611374611c4f565b6002549091506113d9908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f00000000000000000000000000000000000000000000000000000000000000006129f0565b9350876113e68589612a11565b11156113f4576113f4612832565b6002546000908190611459908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b935061146f8a670de0b6b3a7640000868c612a26565b5091935090915061148290508183613bff565b61148c9087613bff565b9550886114d9816114d38d6114a1868c613bff565b8d6114ac8782612b34565b877f0000000000000000000000000000000000000000000000000000000000000000612b4a565b90612a11565b975090945050505093509350935093565b600061070283670de0b6b3a764000084612b6b565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161154e5750476115d9565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156115b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d69190613d36565b90505b600f546000036115ea5760006115fa565b600f546115fa9084908390611c1b565b9392505050565b60006116136040830160208401613b31565b1561161f5750826115fa565b610db28484612b91565b6002546001600160801b03168381101561164557611645612832565b60045490849003907f00000000000000000000000000000000000000000000000000000000000000009061167d908390600f0b612ba6565b101561168b5761168b612832565b6004546116d59061106e90600160801b90046001600160801b03166116b8670de0b6b3a764000086613cd7565b600554600160801b90046001600160801b03169190896001612897565b600580546001600160801b03928316600160801b0292169190911790556116fb81611c90565b600280546001600160801b0319166001600160801b039290921691909117905561172485611c90565b60028054601090611746908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061177385611c90565b60048054601090611795908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006117c48361293f565b905061122b816117d388611f46565b6112269084613c9a565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161182d5750476118b8565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b59190613d36565b90505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016119335787341015611922576040516312171d8360e31b815260040160405180910390fd5b61192c8834613bff565b90506119cd565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190613d4f565b91505b816119eb576040516312171d8360e31b815260040160405180910390fd5b600f54600003611a3057611a1f887f0000000000000000000000000000000000000000000000000000000000000000612b91565b600f81905594509250611a69915050565b600f54600090611a42908a9086611c1b565b905080600f6000828254611a569190613ade565b90915550909550909350611a6992505050565b935093915050565b6000611a7c846114ff565b9050600f54600003611aba57611ab2817f0000000000000000000000000000000000000000000000000000000000000000612b91565b600f55611ae0565b6000611ac582612bcc565b905080600f6000828254611ad99190613ade565b9091555050505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611b5b5782341015611b4a576040516312171d8360e31b815260040160405180910390fd5b611b548334613bff565b9050611bf5565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf29190613d4f565b91505b81611c13576040516312171d8360e31b815260040160405180910390fd5b505050505050565b6000826000190484118302158202611c3257600080fd5b5091020490565b6000611c458284613d82565b6107029084613bff565b600254600454600091610737916001600160801b0390911690600f0b612ba6565b6000611c8782611c81858888611c1b565b90612cb5565b95945050505050565b60006001600160801b03821115611cba57604051630f0af95160e11b815260040160405180910390fd5b5090565b6000818311611ccd5782610702565b50919050565b6006546000908190611cf6908490600160801b90046001600160801b03166106ed565b6006546201000090046001600160701b03169250905081811115611e72576000611d208383613bff565b9050611d2f61106e82866114ea565b60068054601090611d51908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611d8a8583612b9190919063ffffffff16565b90506000611db8827f00000000000000000000000000000000000000000000000000000000000000006106ed565b90508060096000828254611dcc9190613ade565b90915550611ddc90508183613bff565b9150611de782611c90565b60028054600090611e029084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611e2f82612d20565b60048054600090611e44908490600f0b613d96565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611e848785612b91565b91506000611eb2837f00000000000000000000000000000000000000000000000000000000000000006106ed565b9050611ede817f00000000000000000000000000000000000000000000000000000000000000006106ed565b91508315611f0157611ef08282613bff565b611efa9084613bff565b9250611f18565b611f0b8282613bff565b611f159084613ade565b92505b86861015611f3b57611f2b838789611c1b565b9250611f38828789611c1b565b91505b509550959350505050565b60006001600160ff1b03821115611cba5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611fb961106e82611f9c670de0b6b3a764000086613cd7565b600554600160801b90046001600160801b031691908a6000612897565b600580546001600160801b03928316600160801b029216919091179055611fdf86611c90565b611fe99082613cee565b600480546001600160801b03928316600160801b02921691909117905561200f84611c90565b6002805460009061202a9084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061205783612d4a565b6004805460009061206c908490600f0b613d96565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061209c85611c90565b600280546010906120be908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080612102846120fc8a888a611c1b565b90612b91565b905061210f888486611c1b565b6121199082613ade565b9050868111156121295786810391505b509695505050505050565b60006001600160701b03821115611cba5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806121a057507f000000000000000000000000000000000000000000000000000000000000000061219e8583613bff565b105b156121ad576121ad612832565b6004549084900390600f0b6121c28482613c9a565b9050836121ce86611f46565b13801561220357507f00000000000000000000000000000000000000000000000000000000000000006122018383612ba6565b105b1561221057612210612832565b600354600160801b90046001600160801b031661225261106e8261223c670de0b6b3a764000088613cd7565b6005546001600160801b031691908c6000612897565b600580546001600160801b0319166001600160801b039290921691909117905561227c8882613bff565b905061228781611c90565b600380546001600160801b03928316600160801b0292169190911790556122ad83611c90565b600280546001600160801b0319166001600160801b03929092169190911790556122d682612d4a565b600480546001600160801b0319166001600160801b03929092169190911790556122ff87611c90565b60028054601090612321908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461236a9061106e906001600160801b03168484612d86565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e754354909182916123d9916001600160801b031690613bff565b9050806000036123ed576001915050610705565b60006123f885612ded565b90508060000361240d57600192505050610705565b60008061241b838589612e89565b9150915080612431576000945050505050610705565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161246d929190613e41565b6040805180830381865af4158015612489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ad9190613eb7565b915091506124cb6124bd82611f46565b6124c690613edb565b612ffd565b9250826124e15760009650505050505050610705565b6124ea82611c90565b600780546000906125059084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061253281611c90565b60078054601090612554908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125b187613195565b6040518263ffffffff1660e01b81526004016125cd9190613ef7565b6040805180830381865af41580156125e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260d9190613f06565b9150915080612623575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161268991613ade565b6126939190613bff565b9050806000036126ab57506000958695509350505050565b60008087116126bb5760006126c6565b6126c6848884611c1b565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126fa576126fa613f36565b6040519080825280601f01601f191660200182016040528015612724576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612745578692505b828152826000602083013e90999098509650505050505050565b600061278087878761277988670de0b6b3a7640000613bff565b87876132cf565b979650505050505050565b6000610db26127cc6127a584670de0b6b3a7640000613bff565b6114d3670de0b6b3a76400006127bb818a6114ea565b6127c59190613bff565b8790612a11565b6127de90670de0b6b3a7640000613ade565b6120fc84670de0b6b3a7640000613bff565b600080612827856127ff611c4f565b6128099190613ade565b600254610f3d908790600160801b90046001600160801b0316613bff565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061285e8987896132f2565b909250905061286d8289613bff565b9750600061287c82888a611c1b565b9050612888818b613bff565b9a989950979650505050505050565b6000826000036128a8575084611c87565b81156128fb576128d96128bb8487613ade565b6128c585876106ed565b6128cf888a6106ed565b6120fc9190613ade565b905060006128e78588611cbe565b9050808210156128f5578091505b50611c87565b82850361290a57506000611c87565b6129356129178487613bff565b6129218587612a11565b61292b888a6106ed565b6120fc9190613bff565b9695505050505050565b6000612967600b6000612953600286611274565b815260200190815260200160002054611f46565b612979600b6000612953600187611274565b6107059190613c9a565b60006129af7f000000000000000000000000000000000000000000000000000000000000000083612a11565b6003546129c591906001600160801b0316613ade565b6002546129db906001600160801b0316846106ed565b101592915050565b600061070582600461238e565b6000612780878787612a0a88670de0b6b3a7640000613bff565b8787613372565b60006107028383670de0b6b3a7640000612b6b565b6000808080612a778786612a708b6114d3612a498c670de0b6b3a7640000613bff565b7f000000000000000000000000000000000000000000000000000000000000000090612a11565b9190612b6b565b9350612aa3847f00000000000000000000000000000000000000000000000000000000000000006106ed565b91506000612ac4612abc89670de0b6b3a7640000613bff565b8a9088612b6b565b9050612af0817f0000000000000000000000000000000000000000000000000000000000000000612a11565b9350612b1c847f00000000000000000000000000000000000000000000000000000000000000006106ed565b612b269084613ade565b915050945094509450949050565b6000818311612b435781610702565b5090919050565b600080612b6284612b5c8a888a612b6b565b906114ea565b905061210f8884865b6000826000190484118302158202612b8257600080fd5b50910281810615159190040190565b600061070283670de0b6b3a764000084611c1b565b600080612bb38484613383565b909250905080612bc557612bc5612832565b5092915050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612c1b575047612ca6565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca39190613d36565b90505b600f546115fa90849083611c1b565b600081600003612cce5750670de0b6b3a7640000610705565b82600003612cde57506000610705565b6000612ce983611f46565b90506000612cfe612cf986611f46565b6133bf565b9050818102612d15670de0b6b3a764000082613f4c565b9050612935816135e5565b600060016001607f1b03821115611cba5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612d68575060016001607f1b0382135b15611cba5760405163a5353be560e01b815260040160405180910390fd5b600080612d9484600061377a565b612d9f84600061377a565b612da99190613c9a565b90506000811315612dc557612dbe8186613ade565b9450612de4565b6000811215612de457612dd781613edb565b612de19086613bff565b94505b50929392505050565b6003546000908190612e08906001600160801b0316846114ea565b9050612e347f000000000000000000000000000000000000000000000000000000000000000082613ade565b6002546001600160801b03161115611ccd576002547f000000000000000000000000000000000000000000000000000000000000000090612e7f9083906001600160801b0316613bff565b6115fa9190613bff565b612e916139b6565b600080612e9d84613195565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612ed89190613ef7565b6040805180830381865af4158015612ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f189190613f06565b9350905082612f2d575060009150611a699050565b6000612f54612f4f8461016001518561014001516106ed90919063ffffffff16565b611f46565b612f74612f4f856101200151866101000151612a1190919063ffffffff16565b612f7e9190613c9a565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af41580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190613f7a565b9350935093509350806130f65750600098975050505050505050565b8684146131275761310684611c90565b600280546001600160801b0319166001600160801b03929092169190911790555b8583146131585761313783612d4a565b600480546001600160801b0319166001600160801b03929092169190911790555b8482146131865761316882611c90565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b61319d613a08565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916132959116613789565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926132c792900416613789565b905292915050565b6000806132e08888888888886137ff565b90925090508061212957612129612832565b60008061333c856114d385817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613332818c6114ea565b6114d39190613bff565b9150613368827f00000000000000000000000000000000000000000000000000000000000000006106ed565b9050935093915050565b6000806132e08888888888886138c7565b60008060008361339286611f46565b61339c9190613c9a565b905060008112156133b45760008092509250506106e6565b946001945092505050565b60008082136133e15760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906134649084901c611f46565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361360057506000919050565b680755bf798b4a1bf1e58212613629576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061293574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611f46565b6000818313612b435781610702565b600080670de0b6b3a764000061379d61070b565b6137a79190613cd7565b90508083116137b75760006137c1565b6137c18184613bff565b91506115fa6137f8670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613cd7565b8390612b91565b60008060006138118989888888613987565b905061382b86611c816138248a8d613ade565b87906106ed565b9850613838858a86611c1b565b98508881101561384f5760008092509250506138bc565b888103670de0b6b3a764000081106138845761387d613876670de0b6b3a7640000896114ea565b8290612cb5565b905061389c565b613899613876670de0b6b3a764000089612b91565b90505b808910156138b2576000809350935050506138bc565b8803925060019150505b965096945050505050565b60008060006138d98989888888613987565b90506138e986611c81898b613ade565b9750878110156139005760008092509250506138bc565b87810361390e818688612b6b565b9050670de0b6b3a7640000811061393b57613934613876670de0b6b3a7640000896114ea565b9050613953565b613950613876670de0b6b3a764000089612b91565b90505b61395d81866114ea565b9050808a1015613975576000809350935050506138bc565b90980398600198509650505050505050565b60006139938585612cb5565b6139ac6139a486611c81868b612a11565b859085612b6b565b6129359190613ade565b6040518061012001604052806139ca613a08565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060008060808587031215613a7f57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613aab57600080fd5b850160608188031215613abd57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561070557610705613ac8565b6001600160a01b038116811461061557600080fd5b600060208284031215613b1857600080fd5b81356115fa81613af1565b801515811461061557600080fd5b600060208284031215613b4357600080fd5b81356115fa81613b23565b6000808335601e19843603018112613b6557600080fd5b83018035915067ffffffffffffffff821115613b8057600080fd5b6020019150368190038213156106e657600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613bf260c083018486613b95565b9998505050505050505050565b8181038181111561070557610705613ac8565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613c4c60e083018486613b95565b9a9950505050505050505050565b6001600160701b03818116838216019080821115612bc557612bc5613ac8565b6001600160801b03818116838216019080821115612bc557612bc5613ac8565b8181036000831280158383131683831282161715612bc557612bc5613ac8565b600060208284031215613ccc57600080fd5b81516115fa81613af1565b808202811582820484141761070557610705613ac8565b6001600160801b03828116828216039080821115612bc557612bc5613ac8565b8082018281126000831280158216821582161715613d2e57613d2e613ac8565b505092915050565b600060208284031215613d4857600080fd5b5051919050565b600060208284031215613d6157600080fd5b81516115fa81613b23565b634e487b7160e01b600052601260045260246000fd5b600082613d9157613d91613d6c565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561070557610705613ac8565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613e55828551613dc3565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613eca57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ef057613ef0613ac8565b5060000390565b61018081016107058284613dc3565b60008060408385031215613f1957600080fd5b825191506020830151613f2b81613b23565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613f5b57613f5b613d6c565b600160ff1b821460001984141615613f7557613f75613ac8565b500590565b60008060008060808587031215613f9057600080fd5b8451935060208501519250604085015191506060850151613abd81613b2356fea2646970667358221220fb7a66d46205e232b0da254da366eea72f07f76b944c3a356b67d4d40b49401f64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004483380380620044838339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613f7f620005046000396000505060005050600061134401526000818161030301528181610332015261035f01526000818160de015281816105a9015261176b01526000818161085601528181610941015281816109d401528181610add0152818161163c0152818161174501528181612474015281816124d701528181612db60152818161327901526132b501526000818161013f015281816108c601528181610ef20152818161150001528181611564015281816115ab0152818161171f01528181611c220152611cb5015260006120790152600081816121d4015261350e0152600081816110b601526121a8015260006134c40152600081816101810152818161091901528181610f13015281816114d001528181611534015281816115cc015261179101526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fee0152612d4c01526000818161029701528181610db101528181610e2c01528181610ea201528181610f6e0152610fa601526000505060008181610be501528181611a2001528181611a6901528181611afb01528181611b7c01528181611d2301528181611da401528181612fb101528181612ffa015281816130ac01526130f50152613f7f6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c3660046139d2565b610066565b60405190815260200160405180910390f35b610041610061366004613a36565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c4f565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c88565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610cae565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610cd4565b9150915060006101ed610da9565b90506101fd818360046001610dd5565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b613a9c565b611453565b61149d565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f000000000000000000000000000000000000000000000000000000000000000089613aaf565b81526020810191909152604001600020546001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006116aa565b90506103287f000000000000000000000000000000000000000000000000000000000000000082613a9c565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f000000000000000000000000000000000000000000000000000000000000000082613aaf565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b0390911690613aaf565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c908390613a9c565b9050600080600061043c8a6116d6565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa15690610476908490600401613b40565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190613b4f565b91506104ca6104c58c611810565b61183e565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b91859101613b40565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190613b4f565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613aaf565b9190611864565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611882565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613b7d565b8e611897565b61063a8961193f565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d9190613a9c565b9b5090508a158061073757506107348c600061194c565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611864565b610770565b60005b905061077f6020850185613b7d565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613ba8565b866107ca60408c018c613bc5565b6040516107dd9796959493929190613c0c565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c4f565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610cd4565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613c60565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063b29e1d1e9060c401606060405180830381865af41580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190613c77565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006109fd8484611961565b1015610a1c5760405163216f4ab160e21b815260040160405180910390fd5b600080610a2e8585858960008061149d565b91509150801580610a3f5750600082125b15610a5d57604051630552b01360e31b815260040160405180910390fd5b610a6685611987565b600280546001600160801b0319166001600160801b0392909216919091179055610a8f846119b1565b600480546001600160801b0319166001600160801b0392909216919091179055610ab883611987565b600280546001600160801b03928316600160801b029216919091179055610b016000807f0000000000000000000000000000000000000000000000000000000000000000611897565b610b196000610b1360208c018c613b7d565b8a611897565b610b2e610b24610da9565b8760046001610dd5565b508a8a8a610b3f6020820182613b7d565b6001600160a01b03167f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af38c858c610b7c6040870160208801613ba8565b87610b8a6040890189613bc5565b604051610b9d9796959493929190613c0c565b60405180910390a2505050505050505050506100916001600055565b600260005403610bdc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14801590610c2f57503415155b15610c4d57604051631574f9f360e01b815260040160405180910390fd5b565b6000610c5e6020830183613b7d565b6001600160a01b031603610c855760405163f0dd15fd60e01b815260040160405180910390fd5b50565b600254600454600091610ca9916001600160801b0390911690600f0b611961565b905090565b600080610cbd878787866119ed565b9050610cc981856116aa565b979650505050505050565b81600080610ce86040850160208601613ba8565b15610d0d57610d0385610cfe6040870187613bc5565b611a04565b9093509050610d25565b5034610d2585610d206040870187613bc5565b611c98565b610d2d611e42565b91508015610da057604051600090339083908381818185875af1925050503d8060008114610d77576040519150601f19603f3d011682016040523d82523d6000602084013e610d7c565b606091505b5050905080610d9e576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b6000610ca9427f0000000000000000000000000000000000000000000000000000000000000000611e55565b600084815260086020526040812060018101546001600160801b0316151580610dfd57504286115b15610e1657600101546001600160801b0316905061144b565b6000806000610e23610da9565b90506000610e517f00000000000000000000000000000000000000000000000000000000000000008b613a9c565b90505b81811015610ec7576000818152600860205260409020600101546001600160801b03168015610e9f576000828152600860205260409020549094506001600160801b03169250610ec7565b507f000000000000000000000000000000000000000000000000000000000000000001610e54565b83600003610f3a57889350610f37610edd610c88565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ed565b92505b50610f4483611987565b6001850180546001600160801b0319166001600160801b0392909216919091179055610f9a610f937f00000000000000000000000000000000000000000000000000000000000000008b613aaf565b8a84611e6b565b610fd889610fd2610fcb7f000000000000000000000000000000000000000000000000000000000000000083613a9c565b4290611fa9565b84611e6b565b610fe188611fb8565b50600090506008816110137f00000000000000000000000000000000000000000000000000000000000000008d613aaf565b815260208101919091526040016000908120600101546001600160801b0316915061103f60028c61215c565b6000818152600b60205260408120549192508c8c8315611185576001925060008061106e86898d866000612191565b9150915080600960008282546110849190613a9c565b909155506110a090508660008461109a81611810565b88612260565b6110aa8183613a9c565b91506110da86838a8e877f00000000000000000000000000000000000000000000000000000000000000006123da565b91506110ee6110e9838561241e565b612433565b6006805460029061110f9084906201000090046001600160701b0316613ca5565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061113c82611987565b6006805460109061115e908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061119260018461215c565b6000818152600b602052604090205490915080156112a157600194506000806111bf838b8f886001612191565b9150915080600960008282546111d59190613a9c565b909155506111f19050836000846111eb81611810565b8a61245d565b6111fb8183613aaf565b915061120a6110e9838761241e565b6006805460029061122b9084906201000090046001600160701b0316613ca5565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061125882611987565b6006805460109061127a908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156112db576112cd6112b387611810565b6112bc83611810565b6112c69190613ce5565b600061264e565b8e6112d8848261268d565b50505b60006112e684612887565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c49190613d05565b90506001600160a01b03811615611439576114365a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906129d3565b50505b509b9d50505050505050505050505050505b949350505050565b600061147b600b600061146760028661215c565b815260200190815260200160002054611810565b61148d600b600061146760018761215c565b6114979190613ce5565b92915050565b6000806000806114ad8a8a612a60565b91509150806114c45760008093509350505061169f565b6000611524838a6114fd7f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613aaf565b8b7f0000000000000000000000000000000000000000000000000000000000000000612a9c565b5090506000611588848b846115617f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613aaf565b8d7f0000000000000000000000000000000000000000000000000000000000000000612b59565b509050811580611596575080155b156115a2575060009050805b60006115f0858c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ed565b90506115fe83838c84612c17565b5090935060009050611610848f613a9c565b905060006116318b8b61162287611810565b61162c908e613d22565b612c63565b90508b6116666116617f000000000000000000000000000000000000000000000000000000000000000083612cca565b611810565b61166f83611810565b61167c611661868561241e565b6116869190613ce5565b6116909190613ce5565b60019950995050505050505050505b965096945050505050565b60006100916116be84846301e13380612cdb565b6116d085670de0b6b3a7640000613aaf565b90611882565b6116de61390d565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916117d69116612d01565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261180892900416612d01565b905292915050565b60006001600160ff1b0382111561183a5760405163396ea70160e11b815260040160405180910390fd5b5090565b61184781612d70565b610c8557604051635044b7f560e01b815260040160405180910390fd5b600082600019048411830215820261187b57600080fd5b5091020490565b600061009183670de0b6b3a764000084611864565b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906118c9908490613a9c565b90915550506000838152600b6020526040812080548392906118ec908490613a9c565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600061149782600461268d565b600081831361195b5782610091565b50919050565b60008061196e8484612a60565b90925090508061198057611980612f08565b5092915050565b60006001600160801b0382111561183a57604051630f0af95160e11b815260040160405180910390fd5b600060016001607f1b03198212806119cf575060016001607f1b0382135b1561183a5760405163a5353be560e01b815260040160405180910390fd5b6000610078826119fe858888611864565b90612f21565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a54575047611adf565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190613b4f565b90505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611b5a5787341015611b49576040516312171d8360e31b815260040160405180910390fd5b611b538834613aaf565b9050611bf4565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190613d4a565b91505b81611c12576040516312171d8360e31b815260040160405180910390fd5b600f54600003611c5757611c46887f0000000000000000000000000000000000000000000000000000000000000000611882565b600f81905594509250611c90915050565b600f54600090611c69908a9086611864565b905080600f6000828254611c7d9190613a9c565b90915550909550909350611c9092505050565b935093915050565b6000611ca384612f96565b9050600f54600003611ce157611cd9817f0000000000000000000000000000000000000000000000000000000000000000611882565b600f55611d07565b6000611cec82613091565b905080600f6000828254611d009190613a9c565b9091555050505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611d825782341015611d71576040516312171d8360e31b815260040160405180910390fd5b611d7b8334613aaf565b9050611e1c565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613d4a565b91505b81611e3a576040516312171d8360e31b815260040160405180910390fd5b505050505050565b6000610ca9670de0b6b3a7640000612f96565b6000611e618284613d7d565b6100919084613aaf565b600083815260086020526040902054600160801b90046001600160801b0316808303611e975750505050565b6000848152600860205260408120546001600160801b031690819003611ef157611ec083611987565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611f6f565b611f42611f3d670de0b6b3a7640000611f0a8886613aaf565b611f149190613c60565b85670de0b6b3a7640000611f28878a613aaf565b611f329190613c60565b85929190600161317a565b611987565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b611f7884611987565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600081831161195b5782610091565b6006546000908190611fdb908490600160801b90046001600160801b031661241e565b6006546201000090046001600160701b031692509050818111156121575760006120058383613aaf565b9050612014611f3d8286613218565b60068054601090612036908490600160801b90046001600160801b0316613d91565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061206f858361188290919063ffffffff16565b9050600061209d827f000000000000000000000000000000000000000000000000000000000000000061241e565b905080600960008282546120b19190613a9c565b909155506120c190508183613aaf565b91506120cc82611987565b600280546000906120e79084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506121148261322d565b60048054600090612129908490600f0b613db1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156121865760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60008061219e8785611882565b915060006121cc837f000000000000000000000000000000000000000000000000000000000000000061241e565b90506121f8817f000000000000000000000000000000000000000000000000000000000000000061241e565b9150831561221b5761220a8282613aaf565b6122149084613aaf565b9250612232565b6122258282613aaf565b61222f9084613a9c565b92505b8686101561225557612245838789611864565b9250612252828789611864565b91505b509550959350505050565b600454600160801b90046001600160801b03166122a9611f3d8261228c670de0b6b3a764000086613c60565b600554600160801b90046001600160801b031691908a600061317a565b600580546001600160801b03928316600160801b0292169190911790556122cf86611987565b6122d99082613d91565b600480546001600160801b03928316600160801b0292169190911790556122ff84611987565b6002805460009061231a9084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612347836119b1565b6004805460009061235c908490600f0b613db1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061238c85611987565b600280546010906123ae908490600160801b90046001600160801b0316613d91565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806123ec846116d08a888a611864565b90506123f9888486611864565b6124039082613a9c565b9050868111156124135786810391505b509695505050505050565b60006100918383670de0b6b3a7640000611864565b60006001600160701b0382111561183a5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061249f57507f000000000000000000000000000000000000000000000000000000000000000061249d8583613aaf565b105b156124ac576124ac612f08565b6004549084900390600f0b6124c18482613ce5565b9050836124cd86611810565b13801561250257507f00000000000000000000000000000000000000000000000000000000000000006125008383611961565b105b1561250f5761250f612f08565b600354600160801b90046001600160801b0316612551611f3d8261253b670de0b6b3a764000088613c60565b6005546001600160801b031691908c600061317a565b600580546001600160801b0319166001600160801b039290921691909117905561257b8882613aaf565b905061258681611987565b600380546001600160801b03928316600160801b0292169190911790556125ac83611987565b600280546001600160801b0319166001600160801b03929092169190911790556125d5826119b1565b600480546001600160801b0319166001600160801b03929092169190911790556125fe87611987565b60028054601090612620908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461266990611f3d906001600160801b03168484612c63565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e754354909182916126d8916001600160801b031690613aaf565b9050806000036126ec576001915050611497565b60006126f785613257565b90508060000361270c57600192505050611497565b60008061271a8385896132f3565b9150915080612730576000945050505050611497565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161276c929190613dde565b6040805180830381865af4158015612788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ac9190613e54565b915091506127ca6127bc82611810565b6127c590613e78565b612d70565b9250826127e05760009650505050505050611497565b6127e982611987565b600780546000906128049084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061283181611987565b60078054601090612853908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6128b0876116d6565b6040518263ffffffff1660e01b81526004016128cc9190613b40565b6040805180830381865af41580156128e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290c9190613e94565b9150915080612922575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161298891613a9c565b6129929190613aaf565b9050806000036129aa57506000958695509350505050565b60008087116129ba5760006129c5565b6129c5848884611864565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156129f9576129f9613ec4565b6040519080825280601f01601f191660200182016040528015612a23576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612a44578692505b828152826000602083013e9093509150505b9550959350505050565b600080600083612a6f86611810565b612a799190613ce5565b90506000811215612a91576000809250925050610da2565b946001945092505050565b6000806000612aae8888888888613462565b90506000612ad9670de0b6b3a7640000612ac88888613218565b612ad29190613a9c565b8390611882565b9050670de0b6b3a76400008110612b0d57612b06612aff670de0b6b3a764000089611882565b8290612f21565b9050612b25565b612b22612aff670de0b6b3a764000089613218565b90505b612b2f8186611882565b905088811015612b4757600080935093505050612a56565b97909703976001975095505050505050565b6000806000612b6b8989888888613491565b9050612b85866119fe612b7e8a8d613a9c565b879061241e565b9850612b92858a86611864565b985088811015612ba957600080925092505061169f565b888103670de0b6b3a76400008110612bd757612bd0612aff670de0b6b3a764000089613218565b9050612bef565b612bec612aff670de0b6b3a764000089611882565b90505b80891015612c055760008093509350505061169f565b90970398600198509650505050505050565b6000806000806000612c2a8987896134b6565b9092509050612c398289613aaf565b97506000612c4882888a611864565b9050612c54818b613aaf565b9a989950979650505050505050565b600080612c7184600061353c565b612c7c84600061353c565b612c869190613ce5565b90506000811315612ca257612c9b8186613a9c565b9450612cc1565b6000811215612cc157612cb481613e78565b612cbe9086613aaf565b94505b50929392505050565b60006100918383670de0b6b3a76400005b6000826000190484118302158202612cf257600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612d15610da9565b612d1f9190613c60565b9050808311612d2f576000612d39565b612d398184613aaf565b9150610091612ad2670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613c60565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4d9190613eda565b935093509350935080612e695750600098975050505050505050565b868414612e9a57612e7984611987565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612ecb57612eaa836119b1565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612ef957612edb82611987565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612f3a5750670de0b6b3a7640000611497565b82600003612f4a57506000611497565b6000612f5583611810565b90506000612f6a612f6586611810565b613552565b9050818102612f81670de0b6b3a764000082613f1b565b9050612f8c81613778565b9695505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612fe5575047613070565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306d9190613b4f565b90505b600f54600003613081576000610091565b600f546100919084908390611864565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016130e057504761316b565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131689190613b4f565b90505b600f5461009190849083611864565b60008260000361318b575084610078565b81156131de576131bc61319e8487613a9c565b6131a8858761241e565b6131b2888a61241e565b6116d09190613a9c565b905060006131ca8588611fa9565b9050808210156131d8578091505b50610078565b8285036131ed57506000610078565b6100756131fa8487613aaf565b6132048587612cca565b61320e888a61241e565b6116d09190613aaf565b600061009183670de0b6b3a764000084612cdb565b600060016001607f1b0382111561183a5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190613272906001600160801b031684613218565b905061329e7f000000000000000000000000000000000000000000000000000000000000000082613a9c565b6002546001600160801b0316111561195b576002547f0000000000000000000000000000000000000000000000000000000000000000906132e99083906001600160801b0316613aaf565b6100919190613aaf565b6132fb61396e565b600080613307846116d6565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016133429190613b40565b6040805180830381865af415801561335e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133829190613e94565b9350905082613397575060009150611c909050565b60006133b961166184610160015185610140015161241e90919063ffffffff16565b6133d9611661856101200151866101000151612cca90919063ffffffff16565b6133e39190613ce5565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b600061346e8585612f21565b61348761347f866119fe868b61241e565b859085611864565b6100759190613a9c565b600061349d8585612f21565b6134876134ae866119fe868b612cca565b859085612cdb565b6000806135068561350085817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006134f6818c613218565b6135009190613aaf565b90612cca565b9150613532827f000000000000000000000000000000000000000000000000000000000000000061241e565b9050935093915050565b600081831361354b5781610091565b5090919050565b60008082136135745760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906135f79084901c611810565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361379357506000919050565b680755bf798b4a1bf1e582126137bc576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612f8c74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611810565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610120016040528061398261390d565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561195b57600080fd5b600080600080600060a086880312156139ea57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115613a1d57600080fd5b613a29888289016139c0565b9150509295509295909350565b600080600060608486031215613a4b57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613a7057600080fd5b613a7c868287016139c0565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561149757611497613a86565b8181038181111561149757611497613a86565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b61018081016114978284613ac2565b600060208284031215613b6157600080fd5b5051919050565b6001600160a01b0381168114610c8557600080fd5b600060208284031215613b8f57600080fd5b813561009181613b68565b8015158114610c8557600080fd5b600060208284031215613bba57600080fd5b813561009181613b9a565b6000808335601e19843603018112613bdc57600080fd5b83018035915067ffffffffffffffff821115613bf757600080fd5b602001915036819003821315610da257600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761149757611497613a86565b600080600060608486031215613c8c57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561198057611980613a86565b6001600160801b0381811683821601908082111561198057611980613a86565b818103600083128015838313168383128216171561198057611980613a86565b600060208284031215613d1757600080fd5b815161009181613b68565b8082018281126000831280158216821582161715613d4257613d42613a86565b505092915050565b600060208284031215613d5c57600080fd5b815161009181613b9a565b634e487b7160e01b600052601260045260246000fd5b600082613d8c57613d8c613d67565b500690565b6001600160801b0382811682821603908082111561198057611980613a86565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561149757611497613a86565b60006102a082019050613df2828551613ac2565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613e6757600080fd5b505080516020909101519092909150565b6000600160ff1b8201613e8d57613e8d613a86565b5060000390565b60008060408385031215613ea757600080fd5b825191506020830151613eb981613b9a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613ef057600080fd5b8451935060208501519250604085015191506060850151613f1081613b9a565b939692955090935050565b600082613f2a57613f2a613d67565b600160ff1b821460001984141615613f4457613f44613a86565b50059056fea2646970667358221220541f9e554db40562ff6b861912e73df93593ecf212647e656b5b9f9472f1664364736f6c634300081600336102806040523480156200001257600080fd5b5060405162003661380380620036618339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161322d62000434600039600050506000505060006109c10152600050506000818161026d015261205401526000818161189a015281816118fd01528181611c3901528181611c7501528181611e6d015261202e01526000818161056f01526120080152600061146f015260006115ca015260008181610733015261159e01526000505060008181610590015261207a01526000818161066b01526127cc0152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb0152610623015260005050600081816110ef015281816111380152818161235d015281816123a6015281816124810152818161252d0152818161261901526126c5015261322d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612cba565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612d11565b6100b5565b005b610059610095366004612cba565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612d48565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612d73565b61017160408c018c612d90565b60405161018396959493929190612e00565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612e50565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612d48565b88610ee8565b60006103066102fd6020870187612d48565b88848989610ad0565b90945090506103158188612e7a565b9250600061032283610f88565b5090506103326020870187612d48565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612d73565b8a888e80604001906103829190612d90565b604051610396989796959493929190612e8d565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612d48565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f00000000000000000000000000000000000000000000000000000000000000006111d6565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612ed5565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a6111ec565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061120d565b92505b506105c18361122d565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612e7a565b8a8461125b565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612ed5565b4290611399565b8461125b565b61065e886113ae565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612e7a565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c611552565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d866000611587565b9150915080600960008282546107019190612ed5565b9091555061071d90508660008461071781611656565b88611680565b6107278183612ed5565b915061075786838a8e877f00000000000000000000000000000000000000000000000000000000000000006117fa565b915061076b6107668385611844565b611859565b6006805460029061078c9084906201000090046001600160701b0316612ee8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261122d565b600680546010906107db908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f600184611552565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f886001611587565b9150915080600960008282546108529190612ed5565b9091555061086e90508360008461086881611656565b8a611883565b6108788183612e7a565b91506108876107668387611844565b600680546002906108a89084906201000090046001600160701b0316612ee8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261122d565b600680546010906108f7908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a61093087611656565b61093983611656565b6109439190612f28565b6000611a74565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612f48565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611ab3565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611b3e565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611b4b565b9050610b568361122d565b610b609083612f65565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161122d565b60078054601090610bab908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611b69565b9350610be68684611c02565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612e7a565b905080600003610c72576001915050610e08565b6000610c7d85611c17565b905080600003610c9257600192505050610e08565b600080610ca0838589611cb3565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190613003565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190613079565b91509150610d50610d4282611656565b610d4b9061309d565b611e27565b925082610d665760009650505050505050610e08565b610d6f8261122d565b60078054600090610d8a9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161122d565b60078054601090610dd9908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612e7a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612ed5565b90915550506000838152600b602052604081208054839290610f3d908490612ed5565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611fbf565b6040518263ffffffff1660e01b8152600401610fcd91906130b9565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d91906130c8565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612ed5565b6110939190612e7a565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611b4b565b976001975095505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016111235750476111ae565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab91906130f8565b90505b600f546000036111bf5760006111cf565b600f546111cf9084908390611b4b565b9392505050565b60006111e28284612e50565b6111cf9084612e7a565b600254600454600091610421916001600160801b0390911690600f0b6120f9565b60006112248261121e858888611b4b565b9061211f565b95945050505050565b60006001600160801b0382111561125757604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036112875750505050565b6000848152600860205260408120546001600160801b0316908190036112e1576112b08361122d565b600086815260086020526040902080546001600160801b0319166001600160801b039290921691909117905561135f565b61133261132d670de0b6b3a76400006112fa8886612e7a565b6113049190613111565b85670de0b6b3a7640000611318878a612e7a565b6113229190613111565b859291906001612194565b61122d565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6113688461122d565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116113a857826111cf565b50919050565b60065460009081906113d1908490600160801b90046001600160801b0316611844565b6006546201000090046001600160701b0316925090508181111561154d5760006113fb8383612e7a565b905061140a61132d8286612232565b6006805460109061142c908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611465858361224790919063ffffffff16565b90506000611493827f0000000000000000000000000000000000000000000000000000000000000000611844565b905080600960008282546114a79190612ed5565b909155506114b790508183612e7a565b91506114c28261122d565b600280546000906114dd9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061150a8261225c565b6004805460009061151f908490600f0b613128565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b0382111561157c5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806115948785612247565b915060006115c2837f0000000000000000000000000000000000000000000000000000000000000000611844565b90506115ee817f0000000000000000000000000000000000000000000000000000000000000000611844565b91508315611611576116008282612e7a565b61160a9084612e7a565b9250611628565b61161b8282612e7a565b6116259084612ed5565b92505b8686101561164b5761163b838789611b4b565b9250611648828789611b4b565b91505b509550959350505050565b60006001600160ff1b038211156112575760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166116c961132d826116ac670de0b6b3a764000086613111565b600554600160801b90046001600160801b031691908a6000612194565b600580546001600160801b03928316600160801b0292169190911790556116ef8661122d565b6116f99082612f65565b600480546001600160801b03928316600160801b02921691909117905561171f8461122d565b6002805460009061173a9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061176783612286565b6004805460009061177c908490600f0b613128565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506117ac8561122d565b600280546010906117ce908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806118128461180c8a888a611b4b565b90612247565b905061181f888486611b4b565b6118299082612ed5565b9050868111156118395786810391505b509695505050505050565b60006111cf8383670de0b6b3a7640000611b4b565b60006001600160701b038211156112575760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806118c557507f00000000000000000000000000000000000000000000000000000000000000006118c38583612e7a565b105b156118d2576118d26122c2565b6004549084900390600f0b6118e78482612f28565b9050836118f386611656565b13801561192857507f000000000000000000000000000000000000000000000000000000000000000061192683836120f9565b105b15611935576119356122c2565b600354600160801b90046001600160801b031661197761132d82611961670de0b6b3a764000088613111565b6005546001600160801b031691908c6000612194565b600580546001600160801b0319166001600160801b03929092169190911790556119a18882612e7a565b90506119ac8161122d565b600380546001600160801b03928316600160801b0292169190911790556119d28361122d565b600280546001600160801b0319166001600160801b03929092169190911790556119fb82612286565b600480546001600160801b0319166001600160801b0392909216919091179055611a248761122d565b60028054601090611a46908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a8f9061132d906001600160801b031684846122db565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611ad957611ad9613155565b6040519080825280601f01601f191660200182016040528015611b03576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611b24578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611b6257600080fd5b5091020490565b600080611b768585611844565b9050611b8181612342565b945084600003611b955760009150506111cf565b849150611ba86040840160208501612d73565b15611bd757611bd085611bbe6020860186612d48565b611bcb6040870187612d90565b61242b565b9150611bfa565b611bfa85611be86020860186612d48565b611bf56040870187612d90565b6125c5565b509392505050565b60006111cf8383670de0b6b3a764000061275b565b6003546000908190611c32906001600160801b031684612232565b9050611c5e7f000000000000000000000000000000000000000000000000000000000000000082612ed5565b6002546001600160801b031611156113a8576002547f000000000000000000000000000000000000000000000000000000000000000090611ca99083906001600160801b0316612e7a565b6111cf9190612e7a565b611cbb612c07565b600080611cc784611fbf565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611d0291906130b9565b6040805180830381865af4158015611d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4291906130c8565b9350905082611d575750600091506100ad9050565b6000611d7e611d7984610160015185610140015161184490919063ffffffff16565b611656565b611d9e611d79856101200151866101000151611c0290919063ffffffff16565b611da89190612f28565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = AaveL2HyperdriveTestContractFunctions(aavel2hyperdrivetest_abi, self.w3, address)  # type: ignore
        self.events = AaveL2HyperdriveTestContractEvents(aavel2hyperdrivetest_abi, self.w3, address)  # type: ignore
        self.errors = AaveL2HyperdriveTestContractErrors()

    events: AaveL2HyperdriveTestContractEvents

    errors: AaveL2HyperdriveTestContractErrors = (
        AaveL2HyperdriveTestContractErrors()
    )

    functions: AaveL2HyperdriveTestContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = AaveL2HyperdriveTestContractFunctions(
            aavel2hyperdrivetest_abi, w3, None
        )
        contract.errors = AaveL2HyperdriveTestContractErrors()

        return contract
