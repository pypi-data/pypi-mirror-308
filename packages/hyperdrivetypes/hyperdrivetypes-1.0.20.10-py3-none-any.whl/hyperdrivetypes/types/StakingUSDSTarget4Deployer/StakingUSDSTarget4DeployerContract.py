"""A web3.py Contract class for the StakingUSDSTarget4Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract
from ..StakingUSDSConversions import StakingUSDSConversionsContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

stakingusdstarget4deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        }
    ],
)


class StakingUSDSTarget4DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the StakingUSDSTarget4Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class StakingUSDSTarget4DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )
    _error_class = StakingUSDSTarget4DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSTarget4DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, _extraData: bytes, _salt: bytes) -> StakingUSDSTarget4DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSTarget4DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StakingUSDSTarget4DeployerDeployTargetContractFunction0._type_signature: StakingUSDSTarget4DeployerDeployTargetContractFunction0.factory(
                "StakingUSDSTarget4DeployerDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class StakingUSDSTarget4DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the StakingUSDSTarget4Deployer contract."""

    deployTarget: StakingUSDSTarget4DeployerDeployTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            StakingUSDSTarget4DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )


class StakingUSDSTarget4DeployerContract(Contract):
    """A web3.py Contract class for the StakingUSDSTarget4Deployer contract."""

    abi: ABI = stakingusdstarget4deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612e2e565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190612ea4565b91509150610d50610d42826115d3565b610d4b90612ec8565b611da4565b925082610d665760009650505050505050610e08565b610d6f826111aa565b60078054600090610d8a9084906001600160801b0316612d33565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db7816111aa565b60078054601090610dd9908490600160801b90046001600160801b0316612d33565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612ca5565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612d00565b90915550506000838152600b602052604081208054839290610f3d908490612d00565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611f3c565b6040518263ffffffff1660e01b8152600401610fcd9190612ee4565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612ef3565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612d00565b6110939190612ca5565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611ac8565b976001975095505050505050565b60405163b88fed9f60e01b81526004810182905260009073__$27b302b103d10b9a6b3339aabd1a10a718$__9063b88fed9f906024015b602060405180830381865af4158015611128573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190612f23565b60006111588284612c7b565b6111629084612ca5565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b612076565b60006111a18261119b858888611ac8565b9061209c565b95945050505050565b60006001600160801b038211156111d457604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036112045750505050565b6000848152600860205260408120546001600160801b03169081900361125e5761122d836111aa565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790556112dc565b6112af6112aa670de0b6b3a76400006112778886612ca5565b6112819190612f3c565b85670de0b6b3a7640000611295878a612ca5565b61129f9190612f3c565b859291906001612111565b6111aa565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112e5846111aa565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116113255782611162565b50919050565b600654600090819061134e908490600160801b90046001600160801b03166117c1565b6006546201000090046001600160701b031692509050818111156114ca5760006113788383612ca5565b90506113876112aa82866121af565b600680546010906113a9908490600160801b90046001600160801b0316612d90565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006113e285836121c490919063ffffffff16565b90506000611410827f00000000000000000000000000000000000000000000000000000000000000006117c1565b905080600960008282546114249190612d00565b9091555061143490508183612ca5565b915061143f826111aa565b6002805460009061145a9084906001600160801b0316612d33565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611487826121d9565b6004805460009061149c908490600f0b612f53565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156114f95760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60008061151187856121c4565b9150600061153f837f00000000000000000000000000000000000000000000000000000000000000006117c1565b905061156b817f00000000000000000000000000000000000000000000000000000000000000006117c1565b9150831561158e5761157d8282612ca5565b6115879084612ca5565b92506115a5565b6115988282612ca5565b6115a29084612d00565b92505b868610156115c8576115b8838789611ac8565b92506115c5828789611ac8565b91505b509550959350505050565b60006001600160ff1b038211156111d45760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166116466112aa82611629670de0b6b3a764000086612f3c565b600554600160801b90046001600160801b031691908a6000612111565b600580546001600160801b03928316600160801b02921691909117905561166c866111aa565b6116769082612d90565b600480546001600160801b03928316600160801b02921691909117905561169c846111aa565b600280546000906116b79084906001600160801b0316612d33565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116e483612203565b600480546000906116f9908490600f0b612f53565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611729856111aa565b6002805460109061174b908490600160801b90046001600160801b0316612d90565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b60008061178f846117898a888a611ac8565b906121c4565b905061179c888486611ac8565b6117a69082612d00565b9050868111156117b65786810391505b509695505050505050565b60006111628383670de0b6b3a7640000611ac8565b60006001600160701b038211156111d45760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061184257507f00000000000000000000000000000000000000000000000000000000000000006118408583612ca5565b105b1561184f5761184f61223f565b6004549084900390600f0b6118648482612d53565b905083611870866115d3565b1380156118a557507f00000000000000000000000000000000000000000000000000000000000000006118a38383612076565b105b156118b2576118b261223f565b600354600160801b90046001600160801b03166118f46112aa826118de670de0b6b3a764000088612f3c565b6005546001600160801b031691908c6000612111565b600580546001600160801b0319166001600160801b039290921691909117905561191e8882612ca5565b9050611929816111aa565b600380546001600160801b03928316600160801b02921691909117905561194f836111aa565b600280546001600160801b0319166001600160801b039290921691909117905561197882612203565b600480546001600160801b0319166001600160801b03929092169190911790556119a1876111aa565b600280546010906119c3908490600160801b90046001600160801b0316612d33565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a0c906112aa906001600160801b03168484612258565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a5657611a56612f80565b6040519080825280601f01601f191660200182016040528015611a80576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611aa1578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611adf57600080fd5b5091020490565b600080611af385856117c1565b9050611afe816122bf565b945084600003611b12576000915050611162565b849150611b256040840160208501612b9e565b15611b5457611b4d85611b3b6020860186612b73565b611b486040870187612bbb565b6122fa565b9150611b77565b611b7785611b656020860186612b73565b611b726040870187612bbb565b6123b6565b509392505050565b60006111628383670de0b6b3a76400006123cf565b6003546000908190611baf906001600160801b0316846121af565b9050611bdb7f000000000000000000000000000000000000000000000000000000000000000082612d00565b6002546001600160801b03161115611325576002547f000000000000000000000000000000000000000000000000000000000000000090611c269083906001600160801b0316612ca5565b6111629190612ca5565b611c38612a32565b600080611c4484611f3c565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c7f9190612ee4565b6040805180830381865af4158015611c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbf9190612ef3565b9350905082611cd45750600091506100ad9050565b6000611cfb611cf68461016001518561014001516117c190919063ffffffff16565b6115d3565b611d1b611cf6856101200151866101000151611b7f90919063ffffffff16565b611d259190612d53565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e819190612f96565b935093509350935080611e9d5750600098975050505050505050565b868414611ece57611ead846111aa565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611eff57611ede83612203565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611f2d57611f0f826111aa565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b611f44612a84565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161203c91166123f5565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261206e929004166123f5565b905292915050565b600080612083848461246b565b9092509050806120955761209561223f565b5092915050565b6000816000036120b55750670de0b6b3a7640000610e08565b826000036120c557506000610e08565b60006120d0836115d3565b905060006120e56120e0866115d3565b6124aa565b90508181026120fc670de0b6b3a764000082612fd7565b9050612107816126d0565b9695505050505050565b6000826000036121225750846111a1565b8115612175576121536121358487612d00565b61213f85876117c1565b612149888a6117c1565b6117899190612d00565b905060006121618588611316565b90508082101561216f578091505b506111a1565b828503612184575060006111a1565b6121076121918487612ca5565b61219b8587611b7f565b6121a5888a6117c1565b6117899190612ca5565b600061116283670de0b6b3a7640000846123cf565b600061116283670de0b6b3a764000084611ac8565b600060016001607f1b038211156111d45760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612221575060016001607f1b0382135b156111d45760405163a5353be560e01b815260040160405180910390fd5b60405163bb55fd2760e01b815260040160405180910390fd5b600080612266846000612865565b612271846000612865565b61227b9190612d53565b90506000811315612297576122908186612d00565b94506122b6565b60008112156122b6576122a981612ec8565b6122b39086612ca5565b94505b50929392505050565b6040516363737ac960e11b81526004810182905260009073__$27b302b103d10b9a6b3339aabd1a10a718$__9063c6e6f5929060240161110b565b604051632e1a7d4d60e01b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561235f57600080fd5b505af1158015612373573d6000803e3d6000fd5b50505050612380856110d4565b9050610ac86001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858361287b565b60405163350b944160e11b815260040160405180910390fd5b60008260001904841183021582026123e657600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612409610426565b6124139190612f3c565b905080831161242357600061242d565b61242d8184612ca5565b9150611162612464670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000612f3c565b83906121c4565b60008060008361247a866115d3565b6124849190612d53565b9050600081121561249c5760008092509250506124a3565b9150600190505b9250929050565b60008082136124cc5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019061254f9084901c6115d3565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136126eb57506000919050565b680755bf798b4a1bf1e58212612714576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061210774029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6115d3565b60008183136128745781611162565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526128cd9084906128d2565b505050565b60006128e76001600160a01b0384168361293a565b9050805160001415801561290c57508080602001905181019061290a9190613005565b155b156128cd57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b60606111628383600084600080856001600160a01b031684866040516129609190613022565b60006040518083038185875af1925050503d806000811461299d576040519150601f19603f3d011682016040523d82523d6000602084013e6129a2565b606091505b50915091506121078683836060826129c2576129bd82612a09565b611162565b81511580156129d957506001600160a01b0384163b155b15612a0257604051639996b31560e01b81526001600160a01b0385166004820152602401612931565b5080611162565b805115612a195780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806101200160405280612a46612a84565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215612afa57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612b1f57600080fd5b840160608187031215612b3157600080fd5b809150509250925092565b60008060408385031215612b4f57600080fd5b50508035926020909101359150565b6001600160a01b038116811461040b57600080fd5b600060208284031215612b8557600080fd5b813561116281612b5e565b801515811461040b57600080fd5b600060208284031215612bb057600080fd5b813561116281612b90565b6000808335601e19843603018112612bd257600080fd5b83018035915067ffffffffffffffff821115612bed57600080fd5b6020019150368190038213156124a357600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b868152856020820152846040820152831515606082015260a060808201526000612c5960a083018486612c02565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b600082612c8a57612c8a612c65565b500690565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e0857610e08612c8f565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000612cf260e083018486612c02565b9a9950505050505050505050565b80820180821115610e0857610e08612c8f565b6001600160701b0381811683821601908082111561209557612095612c8f565b6001600160801b0381811683821601908082111561209557612095612c8f565b818103600083128015838313168383128216171561209557612095612c8f565b600060208284031215612d8557600080fd5b815161116281612b5e565b6001600160801b0382811682821603908082111561209557612095612c8f565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050612e42828551612db0565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215612eb757600080fd5b505080516020909101519092909150565b6000600160ff1b8201612edd57612edd612c8f565b5060000390565b6101808101610e088284612db0565b60008060408385031215612f0657600080fd5b825191506020830151612f1881612b90565b809150509250929050565b600060208284031215612f3557600080fd5b5051919050565b8082028115828204841417610e0857610e08612c8f565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715610e0857610e08612c8f565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612fac57600080fd5b8451935060208501519250604085015191506060850151612fcc81612b90565b939692955090935050565b600082612fe657612fe6612c65565b600160ff1b82146000198414161561300057613000612c8f565b500590565b60006020828403121561301757600080fd5b815161116281612b90565b6000825160005b818110156130435760208186018101518583015201613029565b50600092019182525091905056fea264697066735822122022cdcbd78186b2c27b0537b24740f394df6b85115aa232aaa8681908cd1a01e064736f6c63430008160033a26469706673582212204f40dcd72d1c05c275651c2c18c5619ab57c777e23bb8ebc3a258b22cc45cafb64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = StakingUSDSTarget4DeployerContractFunctions(stakingusdstarget4deployer_abi, self.w3, address)  # type: ignore

    functions: StakingUSDSTarget4DeployerContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        StakingUSDSConversions: StakingUSDSConversionsContract

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "StakingUSDSConversions": "__$27b302b103d10b9a6b3339aabd1a10a718$__",
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup[
                    "StakingUSDSConversions"
                ],
                link_references.StakingUSDSConversions.address[2:].lower(),
            )

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = StakingUSDSTarget4DeployerContractFunctions(
            stakingusdstarget4deployer_abi, w3, None
        )

        return contract
