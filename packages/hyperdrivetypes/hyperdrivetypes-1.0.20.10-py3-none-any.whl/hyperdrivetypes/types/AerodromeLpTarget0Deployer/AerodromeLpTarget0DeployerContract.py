"""A web3.py Contract class for the AerodromeLpTarget0Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..AerodromeLpConversions import AerodromeLpConversionsContract
from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

aerodromelptarget0deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        }
    ],
)


class AerodromeLpTarget0DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the AerodromeLpTarget0Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class AerodromeLpTarget0DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )
    _error_class = AerodromeLpTarget0DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class AerodromeLpTarget0DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, _extraData: bytes, _salt: bytes) -> AerodromeLpTarget0DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AerodromeLpTarget0DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AerodromeLpTarget0DeployerDeployTargetContractFunction0._type_signature: AerodromeLpTarget0DeployerDeployTargetContractFunction0.factory(
                "AerodromeLpTarget0DeployerDeployTargetContractFunction0",
                **kwargs,
            ),
        }
        return out


class AerodromeLpTarget0DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the AerodromeLpTarget0Deployer contract."""

    deployTarget: AerodromeLpTarget0DeployerDeployTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            AerodromeLpTarget0DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )


class AerodromeLpTarget0DeployerContract(Contract):
    """A web3.py Contract class for the AerodromeLpTarget0Deployer contract."""

    abi: ABI = aerodromelptarget0deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b50614479806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e3660046102aa565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60006014835110156100b75760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964205f657874726144617461206c656e67746800000000000000604482015260640160405180910390fd5b6000838060200190518101906100cd9190610406565b604080513360208201529081018590529091506060016040516020818303038152906040528051906020012086868360405161010890610141565b6101149392919061042a565b8190604051809103906000f5905080158015610134573d6000803e3d6000fd5b509150505b949350505050565b613ee5806200055f83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156101895761018961014f565b60405290565b6001600160a01b03811681146101a457600080fd5b50565b80356101b28161018f565b919050565b6000608082840312156101c957600080fd5b6040516080810181811067ffffffffffffffff821117156101ec576101ec61014f565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f83011261022e57600080fd5b813567ffffffffffffffff808211156102495761024961014f565b604051601f8301601f19908116603f011681019082821181831017156102715761027161014f565b8160405283815286602085880101111561028a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156102c257600080fd5b610260808212156102d257600080fd5b6102da610165565b91506102e5876101a7565b82526102f3602088016101a7565b6020830152610304604088016101a7565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e083015261010080880135818401525061012080880135818401525061014080880135818401525061016061036d8189016101a7565b9083015261018061037f8882016101a7565b908301526101a06103918882016101a7565b908301526101c06103a38882016101a7565b908301526101e06103b6898983016101b7565b81840152508195506103c98188016101a7565b9450505061028085013567ffffffffffffffff8111156103e857600080fd5b6103f48782880161021d565b949793965093946102a0013593505050565b60006020828403121561041857600080fd5b81516104238161018f565b9392505050565b83516001600160a01b031681526102a08101602085015161045660208401826001600160a01b03169052565b50604085015161047160408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e0830152610100808601518184015250610120808601518184015250610140808601518184015250610160808601516104e3828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e0808701518051918501919091526020810151610200850152604081015161022085015260600151610240840152848116610260840152831661028083015261013956fe6102a06040523480156200001257600080fd5b5060405162003ee538038062003ee58339810160408190526200003591620001b5565b600160005582516001600160a01b039081166080908152602080860151831660a0908152918601516101a052908501516101c05260c0808601516101e090815260e0808801516102005261012080890151909352610100808901519091526101408089015190915290870180515190925281519092015190915280516040908101516101605290516060908101516101805290850151821661024052909301516102605290821661022052166102805262000305565b60405161020081016001600160401b03811182821017156200011d57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013b57600080fd5b919050565b6000608082840312156200015357600080fd5b604051608081016001600160401b03811182821017156200018457634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008060008385036102a0811215620001cd57600080fd5b61026080821215620001de57600080fd5b620001e8620000eb565b9150620001f58662000123565b8252620002056020870162000123565b6020830152620002186040870162000123565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e08301526101008087015181840152506101208087015181840152506101408087015181840152506101606200028381880162000123565b908301526101806200029787820162000123565b908301526101a0620002ab87820162000123565b908301526101c0620002bf87820162000123565b908301526101e0620002d48888830162000140565b8184015250819450620002e981870162000123565b93505050620002fc610280850162000123565b90509250925092565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613a686200047d60003960008181610d0801528181611ed80152612ad9015260008181610de001526123ed015260008181610db101526123b0015260008181610c4b01528181610f1001528181610fa001528181611030015281816110c0015281816116db015281816117730152818161193c01528181611f670152818161203d015261219401526000610e78015260008181610e5201526125a0015260008181610e2c015261257a015260008181610e060152612554015260006111cd015260006111a7015260006111810152600061115b015260008181610eea01526125c6015260008181610e9e0152818161136201526129b1015260008181610ec40152612b9d01526000818161062a0152610d8201526000818161075a01528181610d53015281816112fb0152612b4a0152613a686000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c806360246c881161013b578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104f9578063d81657431461050c578063e44808bc14610521578063e985e9c514610534578063fba560081461054757600080fd5b8063bd85b039146104a3578063becee9c3146104b6578063c55dae63146104d6578063c69e16ad146104de578063c6e6f592146104e657600080fd5b8063a22cb465116100ff578063a22cb4651461044f578063a6f19c8414610462578063ab033ea91461046a578063b0d965801461047b578063b88fed9f1461049057600080fd5b806360246c88146103fa5780637180c8ca1461040f5780637ecebe0014610421578063950c5d03146104345780639cd241af1461043c57600080fd5b806320fc4881116101c95780633e691db91161018d5780633e691db91461039657806346fbf68e146103a95780634e41a1fb146103cc5780634ed2d6ac146103df57806354fd4d50146103f257600080fd5b806320fc4881146102fb57806321ff32a914610340578063313ce567146103615780633656eec21461037b5780633a98ef391461038e57600080fd5b806306fdde031161021057806306fdde031461029a5780630a4e1493146102a257806314e5f07b146102c257806317fad7fc146102d55780631c0f12b6146102e857600080fd5b8062ad800c1461024157806301681a621461026a57806302329a291461027f57806304baa00b14610292575b600080fd5b61025461024f366004612dee565b610576565b6040516102619190612e57565b60405180910390f35b61027d610278366004612e7f565b6105ad565b005b61027d61028d366004612eaa565b6105b6565b6102546105bf565b610254610605565b6102aa61061c565b6040516001600160a01b039091168152602001610261565b61027d6102d0366004612ed6565b61065c565b61027d6102e3366004612fb1565b610678565b61027d6102f6366004613046565b61068e565b61030e610309366004612dee565b6106a1565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610261565b61035361034e36600461308e565b61070d565b604051908152602001610261565b610369610753565b60405160ff9091168152602001610261565b6103536103893660046130d0565b6107ee565b610353610827565b6103536103a4366004613100565b610846565b6103bc6103b7366004612e7f565b610851565b6040519015158152602001610261565b6102546103da366004612dee565b610871565b61027d6103ed36600461313b565b61087f565b6102546108cd565b610402610902565b6040516102619190613185565b61027d61041d366004613226565b5050565b61035361042f366004612e7f565b610c11565b6102aa610c3d565b61027d61044a366004613254565b610c7d565b61027d61045d366004613226565b610c8e565b6102aa610cfa565b61027d610478366004612e7f565b50565b610483610d3a565b604051610261919061328c565b61035361049e366004612dee565b611202565b6103536104b1366004612dee565b611210565b6104c96104c43660046133b2565b611232565b60405161026191906133f4565b6102aa6112ed565b61035361132d565b6103536104f4366004612dee565b611347565b610353610507366004612dee565b611355565b61051461138c565b6040516102619190613438565b61027d61052f366004613549565b611498565b6103bc6105423660046135a8565b6114e0565b61054f611524565b6040805182516001600160801b039081168252602093840151169281019290925201610261565b60606105a861058483611583565b6040516020016105949190612e57565b6040516020818303038152906040526116ab565b919050565b610478816116cf565b6104788161193a565b6060610602604051806040016040528060158152602001744165726f64726f6d654c704879706572647269766560581b8152506040516020016105949190612e57565b90565b6060610602600160405160200161059491906135d6565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916106029101610594565b61066d898989898989898989611a54565b505050505050505050565b610686868686868686611c4b565b505050505050565b61069b8484848433611cff565b50505050565b60408051606081018252600080825260208201819052918101919091526105a860086000848152602001908152602001600020604051602001610594919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b038681168552908352818420908516845282528083205481519283015261074c9101610594565b9392505050565b60006106027f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190613687565b6040805160ff909216602083015201610594565b6000828152600a602090815260408083206001600160a01b03851684528252808320548151928301526108219101610594565b92915050565b6000610602610834611ec0565b60405160200161059491815260200190565b600061082182611f50565b60006105a861085f8361218f565b60408051911515602083015201610594565b60606105a861058483612274565b8361088981612372565b6001600160a01b0316336001600160a01b0316146108ba57604051632aab8bd360e01b815260040160405180910390fd5b6108c68585858561242f565b5050505050565b606061060260405180604001604052806007815260200166076312e302e32360cc1b8152506040516020016105949190612e57565b61097b604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061098561249c565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109f091906136d0565b6109fa91906136e3565b905060008215610b0c5773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a27856124af565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc91906136f6565b509050610b098184612645565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bdd57610bd8848661265a565b610be0565b60005b81526003546001600160801b0316602091820152604051919250610c0a9161059491849101613185565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105a89101610594565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916106029101610594565b610c898383833361242f565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916106029101610594565b610d42612d07565b6106026040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190613726565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110209190613726565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b09190613726565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa15801561111c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111409190613726565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f0000000000000000000000000000000000000000000000000000000000000000815250815250604051602001610594919061328c565b60006105a86108348361266f565b6000818152600b60209081526040808320548151928301526105a89101610594565b606060008267ffffffffffffffff81111561124f5761124f613743565b604051908082528060200260200182016040528015611278578160200160208202803683370190505b50905060005b838110156112d157600085858381811061129a5761129a613759565b905060200201359050600081549050808484815181106112bc576112bc613759565b6020908102919091010152505060010161127e565b506112e68160405160200161059491906133f4565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916106029101610594565b600061060260095460405160200161059491815260200190565b60006105a8610834836126e7565b60006105a86108346113877f0000000000000000000000000000000000000000000000000000000000000000856136d0565b612722565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526106026002604051602001610594919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b846114a281612372565b6001600160a01b0316336001600160a01b0316146114d357604051632aab8bd360e01b815260040160405180910390fd5b6106868686868686611cff565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff90911615159181019190915290916108219101610594565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b909204811660209384019081528451938401929092529051169181019190915261060290606001610594565b606060f882901c6001600160f81b038316600061159f82612766565b905060008360038111156115b5576115b56136a4565b036115e7576040518060400160405280600d81526020016c048797065726472697665204c5609c1b81525093506116a3565b60018360038111156115fb576115fb6136a4565b036116275780604051602001611611919061376f565b60405160208183030381529060405293506116a3565b600283600381111561163b5761163b6136a4565b03611651578060405160200161161191906137a8565b6003836003811115611665576116656136a4565b036116a3576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b81526004016116c69190612e57565b60405180910390fd5b6116d761281b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b9190613726565b9050336001600160a01b0382161480159061180957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f39190613726565b6001600160a01b0316336001600160a01b031614155b801561181b57506118193361218f565b155b15611838576040516282b42960e81b815260040160405180910390fd5b6000611842611ec0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561188c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b091906137e2565b90506118c66001600160a01b0385168483612845565b816118cf611ec0565b146118ed576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104786001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190613726565b6001600160a01b0316336001600160a01b0316141580156119e357506119e13361218f565b155b15611a00576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a590611a4990831515815260200190565b60405180910390a150565b83421115611a755760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a9c5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b8a573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611bc857604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c6857506001600160a01b038516155b15611c865760405163f0dd15fd60e01b815260040160405180910390fd5b828114611ca65760405163174861a760e31b815260040160405180910390fd5b60005b83811015611cf657611cee858583818110611cc657611cc6613759565b905060200201358888868686818110611ce157611ce1613759565b9050602002013533611cff565b600101611ca9565b50505050505050565b6001600160a01b0384161580611d1c57506001600160a01b038316155b15611d3a5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611dfe576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611dfe576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611dfc576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611df69084906136e3565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611e309084906136e3565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e679084906136d0565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4b91906137e2565b905090565b6000611f5a61281b565b611f6382612897565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe79190613726565b90506001600160a01b0381166120006020850185612e7f565b6001600160a01b03161461202757604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b038216148015906120d357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bd9190613726565b6001600160a01b0316336001600160a01b031614155b80156120e557506120e33361218f565b155b15612102576040516282b42960e81b815260040160405180910390fd5b600061210c61249c565b6009805460009091559091506121238183876128cd565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461216260408a0160208b01612eaa565b60408051938452602084019290925215159082015260600160405180910390a25050506105a86001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261221891908101906137fb565b905060005b815181101561226a57836001600160a01b031682828151811061224257612242613759565b60200260200101516001600160a01b031603612262575060019392505050565b60010161221d565b5060009392505050565b606060f882901c6001600160f81b038316600061229082612766565b905060008360038111156122a6576122a66136a4565b036122d8576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b81525093506116a3565b60018360038111156122ec576122ec6136a4565b03612302578060405160200161161191906138c0565b6002836003811115612316576123166136a4565b0361232c578060405160200161161191906138f8565b6003836003811115612340576123406136a4565b036116a357505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611f4b670de0b6b3a764000061266f565b6125136040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161260b9116612966565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261263d92900416612966565b905292915050565b600061074c8383670de0b6b3a76400006129dc565b600061074c83670de0b6b3a7640000846129dc565b60405163b88fed9f60e01b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$__9063b88fed9f906024015b602060405180830381865af41580156126c3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906137e2565b6040516363737ac960e11b81526004810182905260009073__$2547229b0150c03f930e3c2db66c5de7b3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = AerodromeLpTarget0DeployerContractFunctions(aerodromelptarget0deployer_abi, self.w3, address)  # type: ignore

    functions: AerodromeLpTarget0DeployerContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        AerodromeLpConversions: AerodromeLpConversionsContract

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "AerodromeLpConversions": "__$2547229b0150c03f930e3c2db66c5de7b3$__",
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup[
                    "AerodromeLpConversions"
                ],
                link_references.AerodromeLpConversions.address[2:].lower(),
            )

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = AerodromeLpTarget0DeployerContractFunctions(
            aerodromelptarget0deployer_abi, w3, None
        )

        return contract
