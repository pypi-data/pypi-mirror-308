"""A web3.py Contract class for the MockHyperdriveAdminController contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

mockhyperdriveadmincontroller_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_hyperdriveGovernance",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_feeCollector",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_sweepCollector",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_checkpointRewarder",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "__defaultPausers",
                    "type": "address[]",
                    "internalType": "address[]",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "checkpointRewarder",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "defaultPausers",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "feeCollector",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "hyperdriveGovernance",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "sweepCollector",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "updateCheckpointRewarder",
            "inputs": [
                {
                    "name": "_checkpointRewarder",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFeeCollector",
            "inputs": [
                {
                    "name": "_feeCollector",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateHyperdriveGovernance",
            "inputs": [
                {
                    "name": "_hyperdriveGovernance",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateSweepCollector",
            "inputs": [
                {
                    "name": "_sweepCollector",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class MockHyperdriveAdminControllerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the MockHyperdriveAdminController contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class MockHyperdriveAdminControllerCheckpointRewarderContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the checkpointRewarder() method."""

    _function_name = "checkpointRewarder"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockHyperdriveAdminControllerCheckpointRewarderContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the checkpointRewarder method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "checkpointRewarder"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockHyperdriveAdminControllerCheckpointRewarderContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerCheckpointRewarderContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerCheckpointRewarderContractFunction0._type_signature: MockHyperdriveAdminControllerCheckpointRewarderContractFunction0.factory(
                "MockHyperdriveAdminControllerCheckpointRewarderContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerDefaultPausersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the defaultPausers() method."""

    _function_name = "defaultPausers"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class MockHyperdriveAdminControllerDefaultPausersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the defaultPausers method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "defaultPausers"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockHyperdriveAdminControllerDefaultPausersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerDefaultPausersContractFunction0._type_signature: MockHyperdriveAdminControllerDefaultPausersContractFunction0.factory(
                "MockHyperdriveAdminControllerDefaultPausersContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerFeeCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the feeCollector() method."""

    _function_name = "feeCollector"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockHyperdriveAdminControllerFeeCollectorContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the feeCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "feeCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockHyperdriveAdminControllerFeeCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerFeeCollectorContractFunction0._type_signature: MockHyperdriveAdminControllerFeeCollectorContractFunction0.factory(
                "MockHyperdriveAdminControllerFeeCollectorContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the hyperdriveGovernance() method."""

    _function_name = "hyperdriveGovernance"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the hyperdriveGovernance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "hyperdriveGovernance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction0._type_signature: MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction0.factory(
                "MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerSweepCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the sweepCollector() method."""

    _function_name = "sweepCollector"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockHyperdriveAdminControllerSweepCollectorContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the sweepCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "sweepCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockHyperdriveAdminControllerSweepCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerSweepCollectorContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerSweepCollectorContractFunction0._type_signature: MockHyperdriveAdminControllerSweepCollectorContractFunction0.factory(
                "MockHyperdriveAdminControllerSweepCollectorContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateCheckpointRewarder(str) method."""

    _function_name = "updateCheckpointRewarder"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateCheckpointRewarder method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateCheckpointRewarder"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _checkpointRewarder: str) -> MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction0._type_signature: MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction0.factory(
                "MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateFeeCollector(str) method."""

    _function_name = "updateFeeCollector"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateFeeCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateFeeCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _feeCollector: str) -> MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction0._type_signature: MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction0.factory(
                "MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateHyperdriveGovernance(str) method."""

    _function_name = "updateHyperdriveGovernance"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateHyperdriveGovernance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateHyperdriveGovernance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdriveGovernance: str) -> MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction0._type_signature: MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction0.factory(
                "MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateSweepCollector(str) method."""

    _function_name = "updateSweepCollector"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = MockHyperdriveAdminControllerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateSweepCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateSweepCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _sweepCollector: str) -> MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction0._type_signature: MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction0.factory(
                "MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction0",
                **kwargs,
            ),
        }
        return out


class MockHyperdriveAdminControllerContractFunctions(ContractFunctions):
    """ContractFunctions for the MockHyperdriveAdminController contract."""

    checkpointRewarder: (
        MockHyperdriveAdminControllerCheckpointRewarderContractFunction
    )

    defaultPausers: MockHyperdriveAdminControllerDefaultPausersContractFunction

    feeCollector: MockHyperdriveAdminControllerFeeCollectorContractFunction

    hyperdriveGovernance: (
        MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction
    )

    sweepCollector: MockHyperdriveAdminControllerSweepCollectorContractFunction

    updateCheckpointRewarder: (
        MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction
    )

    updateFeeCollector: (
        MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction
    )

    updateHyperdriveGovernance: (
        MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction
    )

    updateSweepCollector: (
        MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction
    )

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.checkpointRewarder = MockHyperdriveAdminControllerCheckpointRewarderContractFunction.factory(
            "checkpointRewarder",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="checkpointRewarder",
        )
        self.defaultPausers = (
            MockHyperdriveAdminControllerDefaultPausersContractFunction.factory(
                "defaultPausers",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="defaultPausers",
            )
        )
        self.feeCollector = (
            MockHyperdriveAdminControllerFeeCollectorContractFunction.factory(
                "feeCollector",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="feeCollector",
            )
        )
        self.hyperdriveGovernance = MockHyperdriveAdminControllerHyperdriveGovernanceContractFunction.factory(
            "hyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="hyperdriveGovernance",
        )
        self.sweepCollector = (
            MockHyperdriveAdminControllerSweepCollectorContractFunction.factory(
                "sweepCollector",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="sweepCollector",
            )
        )
        self.updateCheckpointRewarder = MockHyperdriveAdminControllerUpdateCheckpointRewarderContractFunction.factory(
            "updateCheckpointRewarder",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateCheckpointRewarder",
        )
        self.updateFeeCollector = MockHyperdriveAdminControllerUpdateFeeCollectorContractFunction.factory(
            "updateFeeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateFeeCollector",
        )
        self.updateHyperdriveGovernance = MockHyperdriveAdminControllerUpdateHyperdriveGovernanceContractFunction.factory(
            "updateHyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateHyperdriveGovernance",
        )
        self.updateSweepCollector = MockHyperdriveAdminControllerUpdateSweepCollectorContractFunction.factory(
            "updateSweepCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateSweepCollector",
        )


class MockHyperdriveAdminControllerContract(Contract):
    """A web3.py Contract class for the MockHyperdriveAdminController contract."""

    abi: ABI = mockhyperdriveadmincontroller_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b5060405161054938038061054983398101604081905261002f91610143565b600080546001600160a01b038088166001600160a01b03199283161790925560018054878416908316179055600280548684169083161790556003805492851692909116919091179055805161008c906004906020840190610097565b50505050505061024d565b8280548282559060005260206000209081019282156100ec579160200282015b828111156100ec57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906100b7565b506100f89291506100fc565b5090565b5b808211156100f857600081556001016100fd565b80516001600160a01b038116811461012857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561015b57600080fd5b61016486610111565b94506020610173818801610111565b945061018160408801610111565b935061018f60608801610111565b60808801519093506001600160401b03808211156101ac57600080fd5b818901915089601f8301126101c057600080fd5b8151818111156101d2576101d261012d565b8060051b604051601f19603f830116810181811085821117156101f7576101f761012d565b60405291825284820192508381018501918c83111561021557600080fd5b938501935b8285101561023a5761022b85610111565b8452938501939285019261021a565b8096505050505050509295509295909350565b6102ed8061025c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063c415b95c11610066578063c415b95c1461013f578063d2c35ce814610152578063dd2b8fbb14610182578063e3331555146101b2578063f2596458146101c557600080fd5b806310780f73146100985780633e2d2014146100c85780638627a4f0146100fa578063a64c90bf1461012a575b600080fd5b6002546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f86100d636600461023a565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100f861010836600461023a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6101326101d8565b6040516100bf919061026a565b6001546100ab906001600160a01b031681565b6100f861016036600461023a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6100f861019036600461023a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546100ab906001600160a01b031681565b6003546100ab906001600160a01b031681565b6060600480548060200260200160405190810160405280929190818152602001828054801561023057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610212575b5050505050905090565b60006020828403121561024c57600080fd5b81356001600160a01b038116811461026357600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156102ab5783516001600160a01b031683529284019291840191600101610286565b5090969550505050505056fea2646970667358221220ab96712e826406cc06c9e7af2950b27b2813cb638d1321f2efc68188e4cd721364736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MockHyperdriveAdminControllerContractFunctions(mockhyperdriveadmincontroller_abi, self.w3, address)  # type: ignore

    functions: MockHyperdriveAdminControllerContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        hyperdriveGovernance: str

        feeCollector: str

        sweepCollector: str

        checkpointRewarder: str

        defaultPausers: list[str]

    @classmethod
    def constructor(cls, hyperdriveGovernance: str, feeCollector: str, sweepCollector: str, checkpointRewarder: str, defaultPausers: list[str]) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(hyperdriveGovernance),
            dataclass_to_tuple(feeCollector),
            dataclass_to_tuple(sweepCollector),
            dataclass_to_tuple(checkpointRewarder),
            dataclass_to_tuple(defaultPausers),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockHyperdriveAdminControllerContractFunctions(
            mockhyperdriveadmincontroller_abi, w3, None
        )

        return contract
