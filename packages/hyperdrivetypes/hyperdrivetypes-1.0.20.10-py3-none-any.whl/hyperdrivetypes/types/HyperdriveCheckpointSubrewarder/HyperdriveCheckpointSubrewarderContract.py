"""A web3.py Contract class for the HyperdriveCheckpointSubrewarder contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from .HyperdriveCheckpointSubrewarderTypes import (
    AdminUpdatedEvent,
    MinterRewardAmountUpdatedEvent,
    RegistryUpdatedEvent,
    RewardTokenUpdatedEvent,
    SourceUpdatedEvent,
    TraderRewardAmountUpdatedEvent,
)

structs = {}

hyperdrivecheckpointsubrewarder_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_rewarder",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_source",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_registry",
                    "type": "address",
                    "internalType": "contract IHyperdriveRegistry",
                },
                {
                    "name": "_rewardToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_minterRewardAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_traderRewardAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "admin",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minterRewardAmount",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "processReward",
            "inputs": [
                {
                    "name": "_instance",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_claimant",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_checkpointTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_isTrader", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "registry",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IHyperdriveRegistry",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "rewardToken",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IERC20",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "rewarder",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "source",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "traderRewardAmount",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "updateAdmin",
            "inputs": [
                {"name": "_admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinterRewardAmount",
            "inputs": [
                {
                    "name": "_minterRewardAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateRegistry",
            "inputs": [
                {
                    "name": "_registry",
                    "type": "address",
                    "internalType": "contract IHyperdriveRegistry",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateRewardToken",
            "inputs": [
                {
                    "name": "_rewardToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateSource",
            "inputs": [
                {
                    "name": "_source",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateTraderRewardAmount",
            "inputs": [
                {
                    "name": "_traderRewardAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "AdminUpdated",
            "inputs": [
                {
                    "name": "admin",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinterRewardAmountUpdated",
            "inputs": [
                {
                    "name": "minterRewardAmount",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RegistryUpdated",
            "inputs": [
                {
                    "name": "registry",
                    "type": "address",
                    "indexed": True,
                    "internalType": "contract IHyperdriveRegistry",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RewardTokenUpdated",
            "inputs": [
                {
                    "name": "rewardToken",
                    "type": "address",
                    "indexed": True,
                    "internalType": "contract IERC20",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "SourceUpdated",
            "inputs": [
                {
                    "name": "source",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TraderRewardAmountUpdated",
            "inputs": [
                {
                    "name": "traderRewardAmount",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {"type": "error", "name": "Unauthorized", "inputs": []},
    ],
)


class HyperdriveCheckpointSubrewarderAddressEmptyCodeContractError(
    PypechainBaseError
):
    """ContractError for AddressEmptyCode."""

    # Error name
    name: str = "AddressEmptyCode"
    # 4 byte error selector
    selector: str = "0x9996b315"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressEmptyCode(address)"
    # Error input types
    abi: ABI = hyperdrivecheckpointsubrewarder_abi


class HyperdriveCheckpointSubrewarderAddressInsufficientBalanceContractError(
    PypechainBaseError
):
    """ContractError for AddressInsufficientBalance."""

    # Error name
    name: str = "AddressInsufficientBalance"
    # 4 byte error selector
    selector: str = "0xcd786059"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressInsufficientBalance(address)"
    # Error input types
    abi: ABI = hyperdrivecheckpointsubrewarder_abi


class HyperdriveCheckpointSubrewarderFailedInnerCallContractError(
    PypechainBaseError
):
    """ContractError for FailedInnerCall."""

    # Error name
    name: str = "FailedInnerCall"
    # 4 byte error selector
    selector: str = "0x1425ea42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "FailedInnerCall()"
    # Error input types
    abi: ABI = hyperdrivecheckpointsubrewarder_abi


class HyperdriveCheckpointSubrewarderSafeERC20FailedOperationContractError(
    PypechainBaseError
):
    """ContractError for SafeERC20FailedOperation."""

    # Error name
    name: str = "SafeERC20FailedOperation"
    # 4 byte error selector
    selector: str = "0x5274afe7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SafeERC20FailedOperation(address)"
    # Error input types
    abi: ABI = hyperdrivecheckpointsubrewarder_abi


class HyperdriveCheckpointSubrewarderUnauthorizedContractError(
    PypechainBaseError
):
    """ContractError for Unauthorized."""

    # Error name
    name: str = "Unauthorized"
    # 4 byte error selector
    selector: str = "0x82b42900"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "Unauthorized()"
    # Error input types
    abi: ABI = hyperdrivecheckpointsubrewarder_abi


class HyperdriveCheckpointSubrewarderContractErrors(
    PypechainBaseContractErrors
):
    """ContractErrors for the HyperdriveCheckpointSubrewarder contract."""

    AddressEmptyCode: (
        HyperdriveCheckpointSubrewarderAddressEmptyCodeContractError
    )

    AddressInsufficientBalance: (
        HyperdriveCheckpointSubrewarderAddressInsufficientBalanceContractError
    )

    FailedInnerCall: HyperdriveCheckpointSubrewarderFailedInnerCallContractError

    SafeERC20FailedOperation: (
        HyperdriveCheckpointSubrewarderSafeERC20FailedOperationContractError
    )

    Unauthorized: HyperdriveCheckpointSubrewarderUnauthorizedContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = (
            HyperdriveCheckpointSubrewarderAddressEmptyCodeContractError()
        )
        self.AddressInsufficientBalance = (
            HyperdriveCheckpointSubrewarderAddressInsufficientBalanceContractError()
        )
        self.FailedInnerCall = (
            HyperdriveCheckpointSubrewarderFailedInnerCallContractError()
        )
        self.SafeERC20FailedOperation = (
            HyperdriveCheckpointSubrewarderSafeERC20FailedOperationContractError()
        )
        self.Unauthorized = (
            HyperdriveCheckpointSubrewarderUnauthorizedContractError()
        )

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.FailedInnerCall,
            self.SafeERC20FailedOperation,
            self.Unauthorized,
        ]


class HyperdriveCheckpointSubrewarderAdminContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the admin() method."""

    _function_name = "admin"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderAdminContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the admin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "admin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderAdminContractFunction0._type_signature: HyperdriveCheckpointSubrewarderAdminContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderAdminContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderKindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderKindContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderKindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderKindContractFunction0._type_signature: HyperdriveCheckpointSubrewarderKindContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderKindContractFunction0", **kwargs
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the minterRewardAmount() method."""

    _function_name = "minterRewardAmount"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the minterRewardAmount method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "minterRewardAmount"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction0._type_signature: HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderNameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderNameContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderNameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderNameContractFunction0._type_signature: HyperdriveCheckpointSubrewarderNameContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderNameContractFunction0", **kwargs
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderProcessRewardContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the processReward(str,str,int,bool) method."""

    _function_name = "processReward"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "bool"]), structs
    )
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for ProcessReward."""

        arg1: str
        arg2: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [str, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderProcessRewardContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the processReward method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "processReward"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _instance: str, _claimant: str, _checkpointTime: int, _isTrader: bool) -> HyperdriveCheckpointSubrewarderProcessRewardContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderProcessRewardContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderProcessRewardContractFunction0._type_signature: HyperdriveCheckpointSubrewarderProcessRewardContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderProcessRewardContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderRegistryContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the registry() method."""

    _function_name = "registry"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderRegistryContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the registry method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "registry"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderRegistryContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderRegistryContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderRegistryContractFunction0._type_signature: HyperdriveCheckpointSubrewarderRegistryContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderRegistryContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderRewardTokenContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the rewardToken() method."""

    _function_name = "rewardToken"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderRewardTokenContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the rewardToken method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "rewardToken"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderRewardTokenContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderRewardTokenContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderRewardTokenContractFunction0._type_signature: HyperdriveCheckpointSubrewarderRewardTokenContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderRewardTokenContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderRewarderContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the rewarder() method."""

    _function_name = "rewarder"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderRewarderContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the rewarder method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "rewarder"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderRewarderContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderRewarderContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderRewarderContractFunction0._type_signature: HyperdriveCheckpointSubrewarderRewarderContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderRewarderContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderSourceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the source() method."""

    _function_name = "source"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderSourceContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the source method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "source"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderSourceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderSourceContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderSourceContractFunction0._type_signature: HyperdriveCheckpointSubrewarderSourceContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderSourceContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the traderRewardAmount() method."""

    _function_name = "traderRewardAmount"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the traderRewardAmount method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "traderRewardAmount"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction0._type_signature: HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderUpdateAdminContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateAdmin(str) method."""

    _function_name = "updateAdmin"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveCheckpointSubrewarderUpdateAdminContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateAdmin method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateAdmin"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _admin: str) -> HyperdriveCheckpointSubrewarderUpdateAdminContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderUpdateAdminContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderUpdateAdminContractFunction0._type_signature: HyperdriveCheckpointSubrewarderUpdateAdminContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderUpdateAdminContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMinterRewardAmount(int) method."""

    _function_name = "updateMinterRewardAmount"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateMinterRewardAmount method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMinterRewardAmount"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _minterRewardAmount: int) -> HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction0._type_signature: HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateRegistry(str) method."""

    _function_name = "updateRegistry"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateRegistry method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateRegistry"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _registry: str) -> HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction0._type_signature: HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateRewardToken(str) method."""

    _function_name = "updateRewardToken"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateRewardToken method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateRewardToken"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _rewardToken: str) -> HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction0._type_signature: HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderUpdateSourceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateSource(str) method."""

    _function_name = "updateSource"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveCheckpointSubrewarderUpdateSourceContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateSource method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateSource"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _source: str) -> HyperdriveCheckpointSubrewarderUpdateSourceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderUpdateSourceContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderUpdateSourceContractFunction0._type_signature: HyperdriveCheckpointSubrewarderUpdateSourceContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderUpdateSourceContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateTraderRewardAmount(int) method."""

    _function_name = "updateTraderRewardAmount"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the updateTraderRewardAmount method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateTraderRewardAmount"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _traderRewardAmount: int) -> HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction0._type_signature: HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderVersionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveCheckpointSubrewarderContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointSubrewarderVersionContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveCheckpointSubrewarderVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveCheckpointSubrewarderVersionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            HyperdriveCheckpointSubrewarderVersionContractFunction0._type_signature: HyperdriveCheckpointSubrewarderVersionContractFunction0.factory(
                "HyperdriveCheckpointSubrewarderVersionContractFunction0",
                **kwargs,
            ),
        }
        return out


class HyperdriveCheckpointSubrewarderContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveCheckpointSubrewarder contract."""

    admin: HyperdriveCheckpointSubrewarderAdminContractFunction

    kind: HyperdriveCheckpointSubrewarderKindContractFunction

    minterRewardAmount: (
        HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction
    )

    name: HyperdriveCheckpointSubrewarderNameContractFunction

    processReward: HyperdriveCheckpointSubrewarderProcessRewardContractFunction

    registry: HyperdriveCheckpointSubrewarderRegistryContractFunction

    rewardToken: HyperdriveCheckpointSubrewarderRewardTokenContractFunction

    rewarder: HyperdriveCheckpointSubrewarderRewarderContractFunction

    source: HyperdriveCheckpointSubrewarderSourceContractFunction

    traderRewardAmount: (
        HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction
    )

    updateAdmin: HyperdriveCheckpointSubrewarderUpdateAdminContractFunction

    updateMinterRewardAmount: (
        HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction
    )

    updateRegistry: (
        HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction
    )

    updateRewardToken: (
        HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction
    )

    updateSource: HyperdriveCheckpointSubrewarderUpdateSourceContractFunction

    updateTraderRewardAmount: (
        HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction
    )

    version: HyperdriveCheckpointSubrewarderVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.admin = (
            HyperdriveCheckpointSubrewarderAdminContractFunction.factory(
                "admin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="admin",
            )
        )
        self.kind = HyperdriveCheckpointSubrewarderKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kind",
        )
        self.minterRewardAmount = HyperdriveCheckpointSubrewarderMinterRewardAmountContractFunction.factory(
            "minterRewardAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="minterRewardAmount",
        )
        self.name = HyperdriveCheckpointSubrewarderNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="name",
        )
        self.processReward = HyperdriveCheckpointSubrewarderProcessRewardContractFunction.factory(
            "processReward",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="processReward",
        )
        self.registry = (
            HyperdriveCheckpointSubrewarderRegistryContractFunction.factory(
                "registry",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="registry",
            )
        )
        self.rewardToken = (
            HyperdriveCheckpointSubrewarderRewardTokenContractFunction.factory(
                "rewardToken",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="rewardToken",
            )
        )
        self.rewarder = (
            HyperdriveCheckpointSubrewarderRewarderContractFunction.factory(
                "rewarder",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="rewarder",
            )
        )
        self.source = (
            HyperdriveCheckpointSubrewarderSourceContractFunction.factory(
                "source",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="source",
            )
        )
        self.traderRewardAmount = HyperdriveCheckpointSubrewarderTraderRewardAmountContractFunction.factory(
            "traderRewardAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="traderRewardAmount",
        )
        self.updateAdmin = (
            HyperdriveCheckpointSubrewarderUpdateAdminContractFunction.factory(
                "updateAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateAdmin",
            )
        )
        self.updateMinterRewardAmount = HyperdriveCheckpointSubrewarderUpdateMinterRewardAmountContractFunction.factory(
            "updateMinterRewardAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateMinterRewardAmount",
        )
        self.updateRegistry = HyperdriveCheckpointSubrewarderUpdateRegistryContractFunction.factory(
            "updateRegistry",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateRegistry",
        )
        self.updateRewardToken = HyperdriveCheckpointSubrewarderUpdateRewardTokenContractFunction.factory(
            "updateRewardToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateRewardToken",
        )
        self.updateSource = (
            HyperdriveCheckpointSubrewarderUpdateSourceContractFunction.factory(
                "updateSource",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateSource",
            )
        )
        self.updateTraderRewardAmount = HyperdriveCheckpointSubrewarderUpdateTraderRewardAmountContractFunction.factory(
            "updateTraderRewardAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateTraderRewardAmount",
        )
        self.version = (
            HyperdriveCheckpointSubrewarderVersionContractFunction.factory(
                "version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="version",
            )
        )


class HyperdriveCheckpointSubrewarderAdminUpdatedContractEvent(ContractEvent):
    """ContractEvent for AdminUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AdminUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AdminUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AdminUpdatedEvent.AdminUpdatedEventArgs(
                    admin=abi_event.args["admin"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AdminUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AdminUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AdminUpdatedEvent.AdminUpdatedEventArgs(
                    admin=abi_event.args["admin"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointSubrewarderMinterRewardAmountUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MinterRewardAmountUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinterRewardAmountUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinterRewardAmountUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinterRewardAmountUpdatedEvent.MinterRewardAmountUpdatedEventArgs(
                    minterRewardAmount=abi_event.args["minterRewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinterRewardAmountUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinterRewardAmountUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinterRewardAmountUpdatedEvent.MinterRewardAmountUpdatedEventArgs(
                    minterRewardAmount=abi_event.args["minterRewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointSubrewarderRegistryUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for RegistryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RegistryUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RegistryUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RegistryUpdatedEvent.RegistryUpdatedEventArgs(
                    registry=abi_event.args["registry"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RegistryUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RegistryUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RegistryUpdatedEvent.RegistryUpdatedEventArgs(
                    registry=abi_event.args["registry"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointSubrewarderRewardTokenUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for RewardTokenUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RewardTokenUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RewardTokenUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RewardTokenUpdatedEvent.RewardTokenUpdatedEventArgs(
                    rewardToken=abi_event.args["rewardToken"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RewardTokenUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RewardTokenUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RewardTokenUpdatedEvent.RewardTokenUpdatedEventArgs(
                    rewardToken=abi_event.args["rewardToken"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointSubrewarderSourceUpdatedContractEvent(ContractEvent):
    """ContractEvent for SourceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SourceUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SourceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SourceUpdatedEvent.SourceUpdatedEventArgs(
                    source=abi_event.args["source"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SourceUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SourceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SourceUpdatedEvent.SourceUpdatedEventArgs(
                    source=abi_event.args["source"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointSubrewarderTraderRewardAmountUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for TraderRewardAmountUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TraderRewardAmountUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TraderRewardAmountUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TraderRewardAmountUpdatedEvent.TraderRewardAmountUpdatedEventArgs(
                    traderRewardAmount=abi_event.args["traderRewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TraderRewardAmountUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TraderRewardAmountUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TraderRewardAmountUpdatedEvent.TraderRewardAmountUpdatedEventArgs(
                    traderRewardAmount=abi_event.args["traderRewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointSubrewarderContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveCheckpointSubrewarder contract."""

    AdminUpdated: Type[HyperdriveCheckpointSubrewarderAdminUpdatedContractEvent]

    MinterRewardAmountUpdated: Type[
        HyperdriveCheckpointSubrewarderMinterRewardAmountUpdatedContractEvent
    ]

    RegistryUpdated: Type[
        HyperdriveCheckpointSubrewarderRegistryUpdatedContractEvent
    ]

    RewardTokenUpdated: Type[
        HyperdriveCheckpointSubrewarderRewardTokenUpdatedContractEvent
    ]

    SourceUpdated: Type[
        HyperdriveCheckpointSubrewarderSourceUpdatedContractEvent
    ]

    TraderRewardAmountUpdated: Type[
        HyperdriveCheckpointSubrewarderTraderRewardAmountUpdatedContractEvent
    ]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AdminUpdated = cast(
            Type[HyperdriveCheckpointSubrewarderAdminUpdatedContractEvent],
            HyperdriveCheckpointSubrewarderAdminUpdatedContractEvent.factory(
                "AdminUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AdminUpdated",
            ),
        )
        self.MinterRewardAmountUpdated = cast(
            Type[
                HyperdriveCheckpointSubrewarderMinterRewardAmountUpdatedContractEvent
            ],
            HyperdriveCheckpointSubrewarderMinterRewardAmountUpdatedContractEvent.factory(
                "MinterRewardAmountUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinterRewardAmountUpdated",
            ),
        )
        self.RegistryUpdated = cast(
            Type[HyperdriveCheckpointSubrewarderRegistryUpdatedContractEvent],
            HyperdriveCheckpointSubrewarderRegistryUpdatedContractEvent.factory(
                "RegistryUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RegistryUpdated",
            ),
        )
        self.RewardTokenUpdated = cast(
            Type[
                HyperdriveCheckpointSubrewarderRewardTokenUpdatedContractEvent
            ],
            HyperdriveCheckpointSubrewarderRewardTokenUpdatedContractEvent.factory(
                "RewardTokenUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RewardTokenUpdated",
            ),
        )
        self.SourceUpdated = cast(
            Type[HyperdriveCheckpointSubrewarderSourceUpdatedContractEvent],
            HyperdriveCheckpointSubrewarderSourceUpdatedContractEvent.factory(
                "SourceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="SourceUpdated",
            ),
        )
        self.TraderRewardAmountUpdated = cast(
            Type[
                HyperdriveCheckpointSubrewarderTraderRewardAmountUpdatedContractEvent
            ],
            HyperdriveCheckpointSubrewarderTraderRewardAmountUpdatedContractEvent.factory(
                "TraderRewardAmountUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TraderRewardAmountUpdated",
            ),
        )


class HyperdriveCheckpointSubrewarderContract(Contract):
    """A web3.py Contract class for the HyperdriveCheckpointSubrewarder contract."""

    abi: ABI = hyperdrivecheckpointsubrewarder_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60a06040523480156200001157600080fd5b5060405162001137380380620011378339810160408190526200003491620000d8565b60006200004288826200029c565b50600180546001600160a01b031990811633179091556001600160a01b0396871660805260028054968816968216969096179095556003805494871694861694909417909355600480549290951691909316179092556005556006555062000368565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000d357600080fd5b919050565b600080600080600080600060e0888a031215620000f457600080fd5b87516001600160401b03808211156200010c57600080fd5b818a0191508a601f8301126200012157600080fd5b815181811115620001365762000136620000a5565b604051601f8201601f19908116603f01168101908382118183101715620001615762000161620000a5565b81604052828152602093508d848487010111156200017e57600080fd5b600091505b82821015620001a2578482018401518183018501529083019062000183565b6000848483010152809b50505050620001bd818b01620000bb565b97505050620001cf60408901620000bb565b9450620001df60608901620000bb565b9350620001ef60808901620000bb565b925060a0880151915060c0880151905092959891949750929550565b600181811c908216806200022057607f821691505b6020821081036200024157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000297576000816000526020600020601f850160051c81016020861015620002725750805b601f850160051c820191505b8181101562000293578281556001016200027e565b5050505b505050565b81516001600160401b03811115620002b857620002b8620000a5565b620002d081620002c984546200020b565b8462000247565b602080601f831160018114620003085760008415620002ef5750858301515b600019600386901b1c1916600185901b17855562000293565b600085815260208120601f198616915b82811015620003395788860151825594840194600190910190840162000318565b5085821015620003585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610dac6200038b6000396000818161022e015261051f0152610dac6000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80637b103999116100a2578063e9f4604111610071578063e9f4604114610263578063f24bab6514610295578063f7c618c1146102a8578063f851a440146102bb578063f8cf31cb146102ce57600080fd5b80637b103999146102035780639183219f14610216578063dcc3e06e14610229578063e2f273bd1461025057600080fd5b806354fd4d50116100de57806354fd4d50146101925780635b338e07146101b857806362498576146101cf57806367e828bf146101d857600080fd5b806304baa00b1461011057806306fdde03146101625780631a5da6c81461016a5780632057b1c71461017f575b600080fd5b61014c6040518060400160405280601f81526020017f48797065726472697665436865636b706f696e7453756272657761726465720081525081565b60405161015991906109c1565b60405180910390f35b61014c6102e1565b61017d610178366004610a09565b61036f565b005b61017d61018d366004610a26565b6103e3565b61014c60405180604001604052806007815260200166076312e302e32360cc1b81525081565b6101c160065481565b604051908152602001610159565b6101c160055481565b6002546101eb906001600160a01b031681565b6040516001600160a01b039091168152602001610159565b6003546101eb906001600160a01b031681565b61017d610224366004610a26565b610440565b6101eb7f000000000000000000000000000000000000000000000000000000000000000081565b61017d61025e366004610a09565b61049d565b610276610271366004610a4d565b610511565b604080516001600160a01b039093168352602083019190915201610159565b61017d6102a3366004610a09565b6106bd565b6004546101eb906001600160a01b031681565b6001546101eb906001600160a01b031681565b61017d6102dc366004610a09565b610731565b600080546102ee90610aa0565b80601f016020809104026020016040519081016040528092919081815260200182805461031a90610aa0565b80156103675780601f1061033c57610100808354040283529160200191610367565b820191906000526020600020905b81548152906001019060200180831161034a57829003601f168201915b505050505081565b6001546001600160a01b03163314610399576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517fd6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd90600090a250565b6001546001600160a01b0316331461040d576040516282b42960e81b815260040160405180910390fd5b600581905560405181907faa8ae98398382187f26cba5014456be39e5486e84a5347fc41a234a6c4f03d2590600090a250565b6001546001600160a01b0316331461046a576040516282b42960e81b815260040160405180910390fd5b600681905560405181907fcbfc476043808accf425b48e528723c20dfc23e022fc8b6b63247ba91f9ee39690600090a250565b6001546001600160a01b031633146104c7576040516282b42960e81b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d90600090a250565b600080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461055c576040516282b42960e81b815260040160405180910390fd5b6000600460009054906101000a90046001600160a01b031690506105e742886001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190610b96565b61012001516107a5565b85146105f8579150600090506106b4565b60035460405163062eced560e21b81526001600160a01b038981166004830152909116906318bb3b54906024016040805180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610c96565b51600114610678579150600090506106b4565b6000846106875760055461068b565b6006545b905080156106ae576002546106ae906001600160a01b03848116911689846107c4565b90925090505b94509492505050565b6001546001600160a01b031633146106e7576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517ff2d025ce2c36cbd78cd7a2dd4607f7c5ef6b207ee59dfceb74aa73b80c1c53ae90600090a250565b6001546001600160a01b0316331461075b576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517fa5289ba11778999f4dfb9415023783188d42bbb5db0612cbfbe55999069612a090600090a250565b60006107b18284610cfa565b6107bb9084610d1c565b90505b92915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261081e908590610824565b50505050565b60006108396001600160a01b03841683610891565b9050805160001415801561085e57508080602001905181019061085c9190610d3d565b155b1561088c57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b60606107bb8383600084600080856001600160a01b031684866040516108b79190610d5a565b60006040518083038185875af1925050503d80600081146108f4576040519150601f19603f3d011682016040523d82523d6000602084013e6108f9565b606091505b5091509150610909868383610915565b925050505b9392505050565b60608261092a5761092582610971565b61090e565b815115801561094157506001600160a01b0384163b155b1561096a57604051639996b31560e01b81526001600160a01b0385166004820152602401610883565b508061090e565b8051156109815780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60005b838110156109b85781810151838201526020016109a0565b50506000910152565b60208152600082518060208401526109e081604085016020870161099d565b601f01601f19169190910160400192915050565b6001600160a01b038116811461099a57600080fd5b600060208284031215610a1b57600080fd5b813561090e816109f4565b600060208284031215610a3857600080fd5b5035919050565b801515811461099a57600080fd5b60008060008060808587031215610a6357600080fd5b8435610a6e816109f4565b93506020850135610a7e816109f4565b9250604085013591506060850135610a9581610a3f565b939692955090935050565b600181811c90821680610ab457607f821691505b602082108103610ad457634e487b7160e01b600052602260045260246000fd5b50919050565b604051610200810167ffffffffffffffff81118282101715610b0c57634e487b7160e01b600052604160045260246000fd5b60405290565b8051610b1d816109f4565b919050565b600060808284031215610b3457600080fd5b6040516080810181811067ffffffffffffffff82111715610b6557634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006102608284031215610ba957600080fd5b610bb1610ada565b610bba83610b12565b8152610bc860208401610b12565b6020820152610bd960408401610b12565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518183015250610160610c42818501610b12565b90820152610180610c54848201610b12565b908201526101a0610c66848201610b12565b908201526101c0610c78848201610b12565b908201526101e0610c8b85858301610b22565b908201529392505050565b600060408284031215610ca857600080fd5b6040516040810181811067ffffffffffffffff82111715610cd957634e487b7160e01b600052604160045260246000fd5b604052825181526020830151610cee816109f4565b60208201529392505050565b600082610d1757634e487b7160e01b600052601260045260246000fd5b500690565b818103818111156107be57634e487b7160e01b600052601160045260246000fd5b600060208284031215610d4f57600080fd5b815161090e81610a3f565b60008251610d6c81846020870161099d565b919091019291505056fea264697066735822122092103bd221174cc4f8103e2daad462b17546bd165ce1dd671b31223f3cdc26c264736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = HyperdriveCheckpointSubrewarderContractFunctions(hyperdrivecheckpointsubrewarder_abi, self.w3, address)  # type: ignore
        self.events = HyperdriveCheckpointSubrewarderContractEvents(hyperdrivecheckpointsubrewarder_abi, self.w3, address)  # type: ignore
        self.errors = HyperdriveCheckpointSubrewarderContractErrors()

    events: HyperdriveCheckpointSubrewarderContractEvents

    errors: HyperdriveCheckpointSubrewarderContractErrors = (
        HyperdriveCheckpointSubrewarderContractErrors()
    )

    functions: HyperdriveCheckpointSubrewarderContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        rewarder: str

        source: str

        registry: str

        rewardToken: str

        minterRewardAmount: int

        traderRewardAmount: int

    @classmethod
    def constructor(cls, name: str, rewarder: str, source: str, registry: str, rewardToken: str, minterRewardAmount: int, traderRewardAmount: int) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(rewarder),
            dataclass_to_tuple(source),
            dataclass_to_tuple(registry),
            dataclass_to_tuple(rewardToken),
            dataclass_to_tuple(minterRewardAmount),
            dataclass_to_tuple(traderRewardAmount),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveCheckpointSubrewarderContractFunctions(
            hyperdrivecheckpointsubrewarder_abi, w3, None
        )
        contract.errors = HyperdriveCheckpointSubrewarderContractErrors()

        return contract
