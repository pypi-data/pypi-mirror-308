"""A web3.py Contract class for the StkWellTarget0Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

stkwelltarget0deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {"name": "", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        }
    ],
)


class StkWellTarget0DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the StkWellTarget0Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class StkWellTarget0DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )
    _error_class = StkWellTarget0DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class StkWellTarget0DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, arg3: bytes, _salt: bytes) -> StkWellTarget0DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellTarget0DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellTarget0DeployerDeployTargetContractFunction0._type_signature: StkWellTarget0DeployerDeployTargetContractFunction0.factory(
                "StkWellTarget0DeployerDeployTargetContractFunction0", **kwargs
            ),
        }
        return out


class StkWellTarget0DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the StkWellTarget0Deployer contract."""

    deployTarget: StkWellTarget0DeployerDeployTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            StkWellTarget0DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )


class StkWellTarget0DeployerContract(Contract):
    """A web3.py Contract class for the StkWellTarget0Deployer contract."""

    abi: ABI = stkwelltarget0deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b506141fd806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b613d10806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b5060405162003d1038038062003d108339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205161024051610260516138bf6200045160003960008181610d760152612375015260008181610d470152612338015260008181610c2101528181610ea601528181610f3601528181610fc60152818161105601528181611663015281816116fb015281816118c401528181611eef01528181611fc5015261211c01526000610e0e015260008181610de80152612528015260008181610dc20152612502015260008181610d9c01526124dc015260006111630152600061113d01526000611117015260006110f1015260008181610e80015261254e015260008181610e34015281816112ea015261288e015260008181610e5a01526129f401526000818161060001528181610d1801528181611e6001526129c501526000818161073001528181610ce9015261129101526138bf6000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c806360246c8811610130578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104d3578063d8165743146104e6578063e44808bc146104fb578063e985e9c51461050e578063fba560081461052157600080fd5b8063bd85b03914610490578063becee9c3146104a3578063c55dae63146104c3578063c69e16ad146104cb578063c6e6f5921461047d57600080fd5b80639cd241af116100ff5780639cd241af14610431578063a22cb46514610444578063ab033ea914610457578063b0d9658014610468578063b88fed9f1461047d57600080fd5b806360246c88146103ef5780637180c8ca146104045780637ecebe0014610416578063950c5d031461042957600080fd5b806320fc4881116101be5780633e691db9116101825780633e691db91461038b57806346fbf68e1461039e5780634e41a1fb146103c15780634ed2d6ac146103d457806354fd4d50146103e757600080fd5b806320fc4881146102f057806321ff32a914610335578063313ce567146103565780633656eec2146103705780633a98ef391461038357600080fd5b806306fdde031161020557806306fdde031461028f5780630a4e14931461029757806314e5f07b146102b757806317fad7fc146102ca5780631c0f12b6146102dd57600080fd5b8062ad800c1461023657806301681a621461025f57806302329a291461027457806304baa00b14610287575b600080fd5b610249610244366004612c45565b610550565b6040516102569190612cae565b60405180910390f35b61027261026d366004612cd6565b610587565b005b610272610282366004612d01565b610590565b610249610599565b6102496105db565b61029f6105f2565b6040516001600160a01b039091168152602001610256565b6102726102c5366004612d2d565b610632565b6102726102d8366004612e08565b61064e565b6102726102eb366004612e9d565b610664565b6103036102fe366004612c45565b610677565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610256565b610348610343366004612ee5565b6106e3565b604051908152602001610256565b61035e610729565b60405160ff9091168152602001610256565b61034861037e366004612f27565b6107c4565b6103486107fd565b610348610399366004612f57565b61081c565b6103b16103ac366004612cd6565b610827565b6040519015158152602001610256565b6102496103cf366004612c45565b610847565b6102726103e2366004612f92565b610855565b6102496108a3565b6103f76108d8565b6040516102569190612fdc565b61027261041236600461307d565b5050565b610348610424366004612cd6565b610be7565b61029f610c13565b61027261043f3660046130ab565b610c53565b61027261045236600461307d565b610c64565b610272610465366004612cd6565b50565b610470610cd0565b60405161025691906130e3565b61034861048b366004612c45565b611198565b61034861049e366004612c45565b6111a6565b6104b66104b1366004613209565b6111c8565b604051610256919061324b565b61029f611283565b6103486112c3565b6103486104e1366004612c45565b6112dd565b6104ee611314565b604051610256919061328f565b6102726105093660046133a0565b611420565b6103b161051c3660046133ff565b611468565b6105296114ac565b6040805182516001600160801b039081168252602093840151169281019290925201610256565b606061058261055e8361150b565b60405160200161056e9190612cae565b604051602081830303815290604052611633565b919050565b61046581611657565b610465816118c2565b60606105d86040518060400160405280601181526020017053746b57656c6c4879706572647269766560781b81525060405160200161056e9190612cae565b90565b60606105d8600160405160200161056e919061342d565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105d8910161056e565b6106438989898989898989896119dc565b505050505050505050565b61065c868686868686611bd3565b505050505050565b6106718484848433611c87565b50505050565b60408051606081018252600080825260208201819052918101919091526105826008600084815260200190815260200160002060405160200161056e919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b0386811685529083528184209085168452825280832054815192830152610722910161056e565b9392505050565b60006105d87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b091906134de565b6040805160ff90921660208301520161056e565b6000828152600a602090815260408083206001600160a01b03851684528252808320548151928301526107f7910161056e565b92915050565b60006105d861080a611e48565b60405160200161056e91815260200190565b60006107f782611ed8565b600061058261083583612117565b6040805191151560208301520161056e565b606061058261055e836121fc565b8361085f816122fa565b6001600160a01b0316336001600160a01b03161461089057604051632aab8bd360e01b815260040160405180910390fd5b61089c858585856123b7565b5050505050565b60606105d860405180604001604052806007815260200166076312e302e32360cc1b81525060405160200161056e9190612cae565b610951604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061095b612424565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109c69190613527565b6109d0919061353a565b905060008215610ae25773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6109fd85612437565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad2919061354d565b509050610adf81846125cd565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bb357610bae84866125e2565b610bb6565b60005b81526003546001600160801b0316602091820152604051919250610be09161056e91849101612fdc565b5050505090565b6001600160a01b0381166000908152600e6020908152604080832054815192830152610582910161056e565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105d8910161056e565b610c5f838383336123b7565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610cd8612b5e565b6105d86040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f26919061357d565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb6919061357d565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611046919061357d565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d6919061357d565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161056e91906130e3565b600061058261080a836125f7565b6000818152600b6020908152604080832054815192830152610582910161056e565b606060008267ffffffffffffffff8111156111e5576111e561359a565b60405190808252806020026020018201604052801561120e578160200160208202803683370190505b50905060005b83811015611267576000858583818110611230576112306135b0565b90506020020135905060008154905080848481518110611252576112526135b0565b60209081029190910101525050600101611214565b5061127c8160405160200161056e919061324b565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105d8910161056e565b60006105d860095460405160200161056e91815260200190565b600061058261080a61130f7f000000000000000000000000000000000000000000000000000000000000000085613527565b6125ff565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105d8600260405160200161056e919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b8461142a816122fa565b6001600160a01b0316336001600160a01b03161461145b57604051632aab8bd360e01b815260040160405180910390fd5b61065c8686868686611c87565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff90911615159181019190915290916107f7910161056e565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105d89060600161056e565b606060f882901c6001600160f81b038316600061152782612643565b9050600083600381111561153d5761153d6134fb565b0361156f576040518060400160405280600d81526020016c048797065726472697665204c5609c1b815250935061162b565b6001836003811115611583576115836134fb565b036115af578060405160200161159991906135c6565b604051602081830303815290604052935061162b565b60028360038111156115c3576115c36134fb565b036115d9578060405160200161159991906135ff565b60038360038111156115ed576115ed6134fb565b0361162b576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b815260040161164e9190612cae565b60405180910390fd5b61165f6126f8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e3919061357d565b9050336001600160a01b0382161480159061179157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177b919061357d565b6001600160a01b0316336001600160a01b031614155b80156117a357506117a133612117565b155b156117c0576040516282b42960e81b815260040160405180910390fd5b60006117ca611e48565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118389190613639565b905061184e6001600160a01b0385168483612722565b81611857611e48565b14611875576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104656001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611920573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611944919061357d565b6001600160a01b0316336001600160a01b03161415801561196b575061196933612117565b155b15611988576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119d190831515815260200190565b60405180910390a150565b834211156119fd5760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a245760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b12573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b5057604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611bf057506001600160a01b038516155b15611c0e5760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c2e5760405163174861a760e31b815260040160405180910390fd5b60005b83811015611c7e57611c76858583818110611c4e57611c4e6135b0565b905060200201358888868686818110611c6957611c696135b0565b9050602002013533611c87565b600101611c31565b50505050505050565b6001600160a01b0384161580611ca457506001600160a01b038316155b15611cc25760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611d86576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611d86576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611d84576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611d7e90849061353a565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611db890849061353a565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611def908490613527565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190613639565b905090565b6000611ee26126f8565b611eeb82612774565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6f919061357d565b90506001600160a01b038116611f886020850185612cd6565b6001600160a01b031614611faf57604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061205b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612021573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612045919061357d565b6001600160a01b0316336001600160a01b031614155b801561206d575061206b33612117565b155b1561208a576040516282b42960e81b815260040160405180910390fd5b6000612094612424565b6009805460009091559091506120ab8183876127aa565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a603836185846120ea60408a0160208b01612d01565b60408051938452602084019290925215159082015260600160405180910390a25050506105826001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612178573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121a09190810190613652565b905060005b81518110156121f257836001600160a01b03168282815181106121ca576121ca6135b0565b60200260200101516001600160a01b0316036121ea575060019392505050565b6001016121a5565b5060009392505050565b606060f882901c6001600160f81b038316600061221882612643565b9050600083600381111561222e5761222e6134fb565b03612260576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b815250935061162b565b6001836003811115612274576122746134fb565b0361228a57806040516020016115999190613717565b600283600381111561229e5761229e6134fb565b036122b45780604051602001611599919061374f565b60038360038111156122c8576122c86134fb565b0361162b57505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611ed3670de0b6b3a76400006125f7565b61249b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125939116612843565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125c592900416612843565b905292915050565b60006107228383670de0b6b3a76400006128b9565b600061072283670de0b6b3a7640000846128b9565b6000816107f7565b6000612627600b60006126136002866128d7565b81526020019081526020016000205461290c565b612639600b60006126136001876128d7565b6107f7919061377b565b60408051604e80825260808201909252606091906000908260208201818036833701905050905060005b84156126ea5761267e600a866137b1565b612689906030613527565b60f81b826001612699848761353a565b6126a3919061353a565b815181106126b3576126b36135b0565b60200101906001600160f81b031916908160001a905350806126d4816137c5565b91506126e39050600a866137de565b945061266d565b918290030190815292915050565b60026000540361271b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c5f90849061293a565b60006127836020830183612cd6565b6001600160a01b0316036104655760405163f0dd15fd60e01b815260040160405180910390fd5b6000806127b785856125cd565b90506127c2816125f7565b9450846000036127d6576000915050610722565b8491506127e96040840160208501612d01565b1561281857612811856127ff6020860186612cd6565b61280c60408701876137f2565b61299d565b915061283b565b61283b856128296020860186612cd6565b61283660408701876137f2565b6129b8565b509392505050565b600080670de0b6b3a76400006128576129ec565b6128619190613839565b905080831161287157600061287b565b61287b818461353a565b91506107226128b2670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613839565b83906125e2565b60008260001904841183021582026128d057600080fd5b5091020490565b60006001600160f81b038211156129015760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60006001600160ff1b038211156129365760405163396ea70160e11b815260040160405180910390fd5b5090565b600061294f6001600160a01b03841683612a18565b905080516000141580156129745750808060200190518101906129729190613850565b155b15610c5f57604051635274afe760e01b81526001600160a01b038416600482015260240161164e565b600060405163350b944160e11b815260040160405180910390fd5b6106716001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612722565b6000611ed3427f0000000000000000000000000000000000000000000000000000000000000000612a26565b606061072283836000612a3c565b6000612a3282846137b1565b610722908461353a565b606081471015612a615760405163cd78605960e01b815230600482015260240161164e565b600080856001600160a01b03168486604051612a7d919061386d565b60006040518083038185875af1925050503d8060008114612aba576040519150601f19603f3d011682016040523d82523d6000602084013e612abf565b606091505b5091509150612acf868383612ad9565b9695505050505050565b606082612aee57612ae982612b35565b610722565b8151158015612b0557506001600160a01b0384163b155b15612b2e57604051639996b31560e01b81526001600160a01b038516600482015260240161164e565b5080610722565b805115612b455780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001612c406040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b600060208284031215612c5757600080fd5b5035919050565b60005b83811015612c79578181015183820152602001612c61565b50506000910152565b60008151808452612c9a816020860160208601612c5e565b601f01601f19169290920160200192915050565b6020815260006107226020830184612c82565b6001600160a01b038116811461046557600080fd5b600060208284031215612ce857600080fd5b813561072281612cc1565b801515811461046557600080fd5b600060208284031215612d1357600080fd5b813561072281612cf3565b60ff8116811461046557600080fd5b60008060008060008060008060006101208a8c031215612d4c57600080fd5b8935985060208a0135975060408a0135612d6581612cc1565b965060608a0135612d7581612cc1565b955060808a0135612d8581612cf3565b945060a08a0135935060c08a0135612d9c81612d1e565b8093505060e08a013591506101008a013590509295985092959850929598565b60008083601f840112612dce57600080fd5b50813567ffffffffffffffff811115612de657600080fd5b6020830191508360208260051b8501011115612e0157600080fd5b9250929050565b60008060008060008060808789031215612e2157600080fd5b8635612e2c81612cc1565b95506020870135612e3c81612cc1565b9450604087013567ffffffffffffffff80821115612e5957600080fd5b612e658a838b01612dbc565b90965094506060890135915080821115612e7e57600080fd5b50612e8b89828a01612dbc565b979a9699509497509295939492505050565b60008060008060808587031215612eb357600080fd5b843593506020850135612ec581612cc1565b92506040850135612ed581612cc1565b9396929550929360600135925050565b600080600060608486031215612efa57600080fd5b833592506020840135612f0c81612cc1565b91506040840135612f1c81612cc1565b809150509250925092565b60008060408385031215612f3a57600080fd5b823591506020830135612f4c81612cc1565b809150509250929050565b600060208284031215612f6957600080fd5b813567ffffffffffffffff811115612f8057600080fd5b82016060818503121561072257600080fd5b60008060008060808587031215612fa857600080fd5b843593506020850135612fba81612cc1565b9250604085013591506060850135612fd181612cc1565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b6000806040838503121561309057600080fd5b823561309b81612cc1565b91506020830135612f4c81612cf3565b6000806000606084860312156130c057600080fd5b8335925060208401356130d281612cc1565b929592945050506040919091013590565b81516001600160a01b031681526102608101602083015161310f60208401826001600160a01b03169052565b50604083015161312a60408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015181840152506101408084015181840152506101608084015161319c828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b6000806020838503121561321c57600080fd5b823567ffffffffffffffff81111561323357600080fd5b61323f85828601612dbc565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561328357835183529284019291840191600101613267565b50909695505050505050565b81516001600160801b03168152610180810160208301516132bb60208401826001600160801b03169052565b5060408301516132d660408401826001600160801b03169052565b5060608301516132f160608401826001600160801b03169052565b5060808301516133066080840182600f0b9052565b5060a083015161332160a08401826001600160801b03169052565b5060c083015161333c60c08401826001600160801b03169052565b5060e083015161335760e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b03811682850152613201565b600080600080600060a086880312156133b857600080fd5b8535945060208601356133ca81612cc1565b935060408601356133da81612cc1565b92506060860135915060808601356133f181612cc1565b809150509295509295909350565b6000806040838503121561341257600080fd5b823561341d81612cc1565b91506020830135612f4c81612cc1565b60006020808352600084548160018260011c9150600183168061345157607f831692505b60208310810361346f57634e487b7160e01b85526022600452602485fd5b602088018390526040880181801561348e57600181146134a4576134cf565b60ff198616825284151560051b820196506134cf565b60008b81526020902060005b868110156134c9578154848201529085019089016134b0565b83019750505b50949998505050505050505050565b6000602082840312156134f057600080fd5b815161072281612d1e565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156107f7576107f7613511565b818103818111156107f7576107f7613511565b6000806040838503121561356057600080fd5b825191506020830151612f4c81612cf3565b805161058281612cc1565b60006020828403121561358f57600080fd5b815161072281612cc1565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b700243cb832b9323934bb32902637b7339d1607d1b8152600082516135f2816011850160208701612c5e565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b81526000825161362c816012850160208701612c5e565b9190910160120192915050565b60006020828403121561364b57600080fd5b5051919050565b6000602080838503121561366557600080fd5b825167ffffffffffffffff8082111561367d57600080fd5b818501915085601f83011261369157600080fd5b8151818111156136a3576136a361359a565b8060051b604051601f19603f830116810181811085821117156136c8576136c861359a565b6040529182528482019250838101850191888311156136e657600080fd5b938501935b8285101561370b576136fc85613572565b845293850193928501926136eb565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b815260008251613742816010850160208701612c5e565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b8152600082516135f2816011850160208701612c5e565b818103600083128015838313168383128216171561127c5761127c613511565b634e487b7160e01b600052601260045260246000fd5b6000826137c0576137c061379b565b500690565b6000600182016137d7576137d7613511565b5060010190565b6000826137ed576137ed61379b565b500490565b6000808335601e1984360301811261380957600080fd5b83018035915067ffffffffffffffff82111561382457600080fd5b602001915036819003821315612e0157600080fd5b80820281158282048414176107f7576107f7613511565b60006020828403121561386257600080fd5b815161072281612cf3565b6000825161387f818460208701612c5e565b919091019291505056fea2646970667358221220a3f9119f5f4267545039459d4fba778f3d886ce385cd4d2e92b8481d74675db364736f6c63430008160033a2646970667358221220b7231c10a8272d3f4b9ef5e094e1c9f0bcdabe8b815d4aa6c2ee813f88e2b89564736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = StkWellTarget0DeployerContractFunctions(stkwelltarget0deployer_abi, self.w3, address)  # type: ignore

    functions: StkWellTarget0DeployerContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = StkWellTarget0DeployerContractFunctions(
            stkwelltarget0deployer_abi, w3, None
        )

        return contract
