"""A web3.py Contract class for the SweepTest contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..LPMath import LPMathContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from .SweepTestTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    InitializeEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SweepEvent,
    TransferSingleEvent,
)

structs = {
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}

sweeptest_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_direct_vaultToken",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_indirect_vaultToken",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_invalid_sweeper",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success_direct_baseToken",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success_governance",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success_indirect_baseToken",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success_pauser",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success_sweepCollector",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class SweepTestLnInvalidInputContractError(PypechainBaseError):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = sweeptest_abi


class SweepTestUnsafeCastToInt256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = sweeptest_abi


class SweepTestWhaleBalanceExceededContractError(PypechainBaseError):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = sweeptest_abi


class SweepTestWhaleIsContractContractError(PypechainBaseError):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = sweeptest_abi


class SweepTestContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the SweepTest contract."""

    LnInvalidInput: SweepTestLnInvalidInputContractError

    UnsafeCastToInt256: SweepTestUnsafeCastToInt256ContractError

    WhaleBalanceExceeded: SweepTestWhaleBalanceExceededContractError

    WhaleIsContract: SweepTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.LnInvalidInput = SweepTestLnInvalidInputContractError()
        self.UnsafeCastToInt256 = SweepTestUnsafeCastToInt256ContractError()
        self.WhaleBalanceExceeded = SweepTestWhaleBalanceExceededContractError()
        self.WhaleIsContract = SweepTestWhaleIsContractContractError()

        self._all = [
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class SweepTestIS_TESTContractFunction0(PypechainContractFunction):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestIS_TESTContractFunction(PypechainContractFunction):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestIS_TESTContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestIS_TESTContractFunction0._type_signature: SweepTestIS_TESTContractFunction0.factory(
                "SweepTestIS_TESTContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestCreateUserContractFunction0(PypechainContractFunction):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestCreateUserContractFunction(PypechainContractFunction):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, name: str) -> SweepTestCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestCreateUserContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestCreateUserContractFunction0._type_signature: SweepTestCreateUserContractFunction0.factory(
                "SweepTestCreateUserContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestExcludeArtifactsContractFunction0(PypechainContractFunction):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestExcludeArtifactsContractFunction(PypechainContractFunction):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestExcludeArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestExcludeArtifactsContractFunction0._type_signature: SweepTestExcludeArtifactsContractFunction0.factory(
                "SweepTestExcludeArtifactsContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestExcludeContractsContractFunction0(PypechainContractFunction):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestExcludeContractsContractFunction(PypechainContractFunction):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestExcludeContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestExcludeContractsContractFunction0._type_signature: SweepTestExcludeContractsContractFunction0.factory(
                "SweepTestExcludeContractsContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestExcludeSendersContractFunction0(PypechainContractFunction):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestExcludeSendersContractFunction(PypechainContractFunction):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestExcludeSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestExcludeSendersContractFunction0._type_signature: SweepTestExcludeSendersContractFunction0.factory(
                "SweepTestExcludeSendersContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestFailedContractFunction0(PypechainContractFunction):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestFailedContractFunction(PypechainContractFunction):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestFailedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestFailedContractFunction0._type_signature: SweepTestFailedContractFunction0.factory(
                "SweepTestFailedContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestSetUpContractFunction0(PypechainContractFunction):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestSetUpContractFunction(PypechainContractFunction):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestSetUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestSetUpContractFunction0._type_signature: SweepTestSetUpContractFunction0.factory(
                "SweepTestSetUpContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class SweepTestTargetArtifactSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTargetArtifactSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTargetArtifactSelectorsContractFunction0._type_signature: SweepTestTargetArtifactSelectorsContractFunction0.factory(
                "SweepTestTargetArtifactSelectorsContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestTargetArtifactsContractFunction0(PypechainContractFunction):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestTargetArtifactsContractFunction(PypechainContractFunction):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTargetArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTargetArtifactsContractFunction0._type_signature: SweepTestTargetArtifactsContractFunction0.factory(
                "SweepTestTargetArtifactsContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestTargetContractsContractFunction0(PypechainContractFunction):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestTargetContractsContractFunction(PypechainContractFunction):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTargetContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTargetContractsContractFunction0._type_signature: SweepTestTargetContractsContractFunction0.factory(
                "SweepTestTargetContractsContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestTargetInterfacesContractFunction0(PypechainContractFunction):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class SweepTestTargetInterfacesContractFunction(PypechainContractFunction):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTargetInterfacesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTargetInterfacesContractFunction0._type_signature: SweepTestTargetInterfacesContractFunction0.factory(
                "SweepTestTargetInterfacesContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestTargetSelectorsContractFunction0(PypechainContractFunction):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class SweepTestTargetSelectorsContractFunction(PypechainContractFunction):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTargetSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTargetSelectorsContractFunction0._type_signature: SweepTestTargetSelectorsContractFunction0.factory(
                "SweepTestTargetSelectorsContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestTargetSendersContractFunction0(PypechainContractFunction):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestTargetSendersContractFunction(PypechainContractFunction):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTargetSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTargetSendersContractFunction0._type_signature: SweepTestTargetSendersContractFunction0.factory(
                "SweepTestTargetSendersContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestTest_sweep_failure_direct_vaultTokenContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_direct_vaultToken() method."""

    _function_name = "test_sweep_failure_direct_vaultToken"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestTest_sweep_failure_direct_vaultTokenContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_direct_vaultToken method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_failure_direct_vaultToken"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTest_sweep_failure_direct_vaultTokenContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTest_sweep_failure_direct_vaultTokenContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTest_sweep_failure_direct_vaultTokenContractFunction0._type_signature: SweepTestTest_sweep_failure_direct_vaultTokenContractFunction0.factory(
                "SweepTestTest_sweep_failure_direct_vaultTokenContractFunction0",
                **kwargs,
            ),
        }
        return out


class SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_indirect_vaultToken() method."""

    _function_name = "test_sweep_failure_indirect_vaultToken"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_indirect_vaultToken method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_failure_indirect_vaultToken"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction0._type_signature: SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction0.factory(
                "SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction0",
                **kwargs,
            ),
        }
        return out


class SweepTestTest_sweep_failure_invalid_sweeperContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_invalid_sweeper() method."""

    _function_name = "test_sweep_failure_invalid_sweeper"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestTest_sweep_failure_invalid_sweeperContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_invalid_sweeper method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_failure_invalid_sweeper"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTest_sweep_failure_invalid_sweeperContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTest_sweep_failure_invalid_sweeperContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTest_sweep_failure_invalid_sweeperContractFunction0._type_signature: SweepTestTest_sweep_failure_invalid_sweeperContractFunction0.factory(
                "SweepTestTest_sweep_failure_invalid_sweeperContractFunction0",
                **kwargs,
            ),
        }
        return out


class SweepTestTest_sweep_success_direct_baseTokenContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_direct_baseToken() method."""

    _function_name = "test_sweep_success_direct_baseToken"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestTest_sweep_success_direct_baseTokenContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_direct_baseToken method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success_direct_baseToken"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTest_sweep_success_direct_baseTokenContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTest_sweep_success_direct_baseTokenContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTest_sweep_success_direct_baseTokenContractFunction0._type_signature: SweepTestTest_sweep_success_direct_baseTokenContractFunction0.factory(
                "SweepTestTest_sweep_success_direct_baseTokenContractFunction0",
                **kwargs,
            ),
        }
        return out


class SweepTestTest_sweep_success_governanceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_governance() method."""

    _function_name = "test_sweep_success_governance"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestTest_sweep_success_governanceContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_governance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success_governance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTest_sweep_success_governanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTest_sweep_success_governanceContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTest_sweep_success_governanceContractFunction0._type_signature: SweepTestTest_sweep_success_governanceContractFunction0.factory(
                "SweepTestTest_sweep_success_governanceContractFunction0",
                **kwargs,
            ),
        }
        return out


class SweepTestTest_sweep_success_indirect_baseTokenContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_indirect_baseToken() method."""

    _function_name = "test_sweep_success_indirect_baseToken"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestTest_sweep_success_indirect_baseTokenContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_indirect_baseToken method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success_indirect_baseToken"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTest_sweep_success_indirect_baseTokenContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTest_sweep_success_indirect_baseTokenContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTest_sweep_success_indirect_baseTokenContractFunction0._type_signature: SweepTestTest_sweep_success_indirect_baseTokenContractFunction0.factory(
                "SweepTestTest_sweep_success_indirect_baseTokenContractFunction0",
                **kwargs,
            ),
        }
        return out


class SweepTestTest_sweep_success_pauserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_pauser() method."""

    _function_name = "test_sweep_success_pauser"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestTest_sweep_success_pauserContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_pauser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success_pauser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTest_sweep_success_pauserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTest_sweep_success_pauserContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTest_sweep_success_pauserContractFunction0._type_signature: SweepTestTest_sweep_success_pauserContractFunction0.factory(
                "SweepTestTest_sweep_success_pauserContractFunction0", **kwargs
            ),
        }
        return out


class SweepTestTest_sweep_success_sweepCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_sweepCollector() method."""

    _function_name = "test_sweep_success_sweepCollector"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class SweepTestTest_sweep_success_sweepCollectorContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success_sweepCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success_sweepCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> SweepTestTest_sweep_success_sweepCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestTest_sweep_success_sweepCollectorContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestTest_sweep_success_sweepCollectorContractFunction0._type_signature: SweepTestTest_sweep_success_sweepCollectorContractFunction0.factory(
                "SweepTestTest_sweep_success_sweepCollectorContractFunction0",
                **kwargs,
            ),
        }
        return out


class SweepTestWhaleTransferContractFunction0(PypechainContractFunction):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestWhaleTransferContractFunction1(PypechainContractFunction):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )
    _error_class = SweepTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class SweepTestWhaleTransferContractFunction(PypechainContractFunction):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> SweepTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> SweepTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> SweepTestWhaleTransferContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            SweepTestWhaleTransferContractFunction0._type_signature: SweepTestWhaleTransferContractFunction0.factory(
                "SweepTestWhaleTransferContractFunction0", **kwargs
            ),
            SweepTestWhaleTransferContractFunction1._type_signature: SweepTestWhaleTransferContractFunction1.factory(
                "SweepTestWhaleTransferContractFunction1", **kwargs
            ),
        }
        return out


class SweepTestContractFunctions(ContractFunctions):
    """ContractFunctions for the SweepTest contract."""

    IS_TEST: SweepTestIS_TESTContractFunction

    createUser: SweepTestCreateUserContractFunction

    excludeArtifacts: SweepTestExcludeArtifactsContractFunction

    excludeContracts: SweepTestExcludeContractsContractFunction

    excludeSenders: SweepTestExcludeSendersContractFunction

    failed: SweepTestFailedContractFunction

    setUp: SweepTestSetUpContractFunction

    targetArtifactSelectors: SweepTestTargetArtifactSelectorsContractFunction

    targetArtifacts: SweepTestTargetArtifactsContractFunction

    targetContracts: SweepTestTargetContractsContractFunction

    targetInterfaces: SweepTestTargetInterfacesContractFunction

    targetSelectors: SweepTestTargetSelectorsContractFunction

    targetSenders: SweepTestTargetSendersContractFunction

    test_sweep_failure_direct_vaultToken: (
        SweepTestTest_sweep_failure_direct_vaultTokenContractFunction
    )

    test_sweep_failure_indirect_vaultToken: (
        SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction
    )

    test_sweep_failure_invalid_sweeper: (
        SweepTestTest_sweep_failure_invalid_sweeperContractFunction
    )

    test_sweep_success_direct_baseToken: (
        SweepTestTest_sweep_success_direct_baseTokenContractFunction
    )

    test_sweep_success_governance: (
        SweepTestTest_sweep_success_governanceContractFunction
    )

    test_sweep_success_indirect_baseToken: (
        SweepTestTest_sweep_success_indirect_baseTokenContractFunction
    )

    test_sweep_success_pauser: (
        SweepTestTest_sweep_success_pauserContractFunction
    )

    test_sweep_success_sweepCollector: (
        SweepTestTest_sweep_success_sweepCollectorContractFunction
    )

    whaleTransfer: SweepTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = SweepTestIS_TESTContractFunction.factory(
            "IS_TEST",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="IS_TEST",
        )
        self.createUser = SweepTestCreateUserContractFunction.factory(
            "createUser",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="createUser",
        )
        self.excludeArtifacts = (
            SweepTestExcludeArtifactsContractFunction.factory(
                "excludeArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeArtifacts",
            )
        )
        self.excludeContracts = (
            SweepTestExcludeContractsContractFunction.factory(
                "excludeContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeContracts",
            )
        )
        self.excludeSenders = SweepTestExcludeSendersContractFunction.factory(
            "excludeSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeSenders",
        )
        self.failed = SweepTestFailedContractFunction.factory(
            "failed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="failed",
        )
        self.setUp = SweepTestSetUpContractFunction.factory(
            "setUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setUp",
        )
        self.targetArtifactSelectors = (
            SweepTestTargetArtifactSelectorsContractFunction.factory(
                "targetArtifactSelectors",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetArtifactSelectors",
            )
        )
        self.targetArtifacts = SweepTestTargetArtifactsContractFunction.factory(
            "targetArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifacts",
        )
        self.targetContracts = SweepTestTargetContractsContractFunction.factory(
            "targetContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetContracts",
        )
        self.targetInterfaces = (
            SweepTestTargetInterfacesContractFunction.factory(
                "targetInterfaces",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetInterfaces",
            )
        )
        self.targetSelectors = SweepTestTargetSelectorsContractFunction.factory(
            "targetSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSelectors",
        )
        self.targetSenders = SweepTestTargetSendersContractFunction.factory(
            "targetSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSenders",
        )
        self.test_sweep_failure_direct_vaultToken = SweepTestTest_sweep_failure_direct_vaultTokenContractFunction.factory(
            "test_sweep_failure_direct_vaultToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_failure_direct_vaultToken",
        )
        self.test_sweep_failure_indirect_vaultToken = SweepTestTest_sweep_failure_indirect_vaultTokenContractFunction.factory(
            "test_sweep_failure_indirect_vaultToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_failure_indirect_vaultToken",
        )
        self.test_sweep_failure_invalid_sweeper = (
            SweepTestTest_sweep_failure_invalid_sweeperContractFunction.factory(
                "test_sweep_failure_invalid_sweeper",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_sweep_failure_invalid_sweeper",
            )
        )
        self.test_sweep_success_direct_baseToken = SweepTestTest_sweep_success_direct_baseTokenContractFunction.factory(
            "test_sweep_success_direct_baseToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_success_direct_baseToken",
        )
        self.test_sweep_success_governance = (
            SweepTestTest_sweep_success_governanceContractFunction.factory(
                "test_sweep_success_governance",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_sweep_success_governance",
            )
        )
        self.test_sweep_success_indirect_baseToken = SweepTestTest_sweep_success_indirect_baseTokenContractFunction.factory(
            "test_sweep_success_indirect_baseToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_success_indirect_baseToken",
        )
        self.test_sweep_success_pauser = (
            SweepTestTest_sweep_success_pauserContractFunction.factory(
                "test_sweep_success_pauser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_sweep_success_pauser",
            )
        )
        self.test_sweep_success_sweepCollector = (
            SweepTestTest_sweep_success_sweepCollectorContractFunction.factory(
                "test_sweep_success_sweepCollector",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_sweep_success_sweepCollector",
            )
        )
        self.whaleTransfer = SweepTestWhaleTransferContractFunction.factory(
            "whaleTransfer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="whaleTransfer",
        )


class SweepTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestCollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestPauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestRedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_addressContractEvent(ContractEvent):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_decimal_intContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_decimal_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_stringContractEvent(ContractEvent):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class SweepTestContractEvents(ContractEvents):
    """ContractEvents for the SweepTest contract."""

    AddLiquidity: Type[SweepTestAddLiquidityContractEvent]

    Approval: Type[SweepTestApprovalContractEvent]

    ApprovalForAll: Type[SweepTestApprovalForAllContractEvent]

    CloseLong: Type[SweepTestCloseLongContractEvent]

    CloseShort: Type[SweepTestCloseShortContractEvent]

    CollectGovernanceFee: Type[SweepTestCollectGovernanceFeeContractEvent]

    CreateCheckpoint: Type[SweepTestCreateCheckpointContractEvent]

    Initialize: Type[SweepTestInitializeContractEvent]

    OpenLong: Type[SweepTestOpenLongContractEvent]

    OpenShort: Type[SweepTestOpenShortContractEvent]

    PauseStatusUpdated: Type[SweepTestPauseStatusUpdatedContractEvent]

    RedeemWithdrawalShares: Type[SweepTestRedeemWithdrawalSharesContractEvent]

    RemoveLiquidity: Type[SweepTestRemoveLiquidityContractEvent]

    Sweep: Type[SweepTestSweepContractEvent]

    TransferSingle: Type[SweepTestTransferSingleContractEvent]

    log: Type[SweepTestLogContractEvent]

    log_address: Type[SweepTestLog_addressContractEvent]

    log_array: Type[SweepTestLog_arrayContractEvent]

    log_bytes: Type[SweepTestLog_bytesContractEvent]

    log_bytes32: Type[SweepTestLog_bytes32ContractEvent]

    log_int: Type[SweepTestLog_intContractEvent]

    log_named_address: Type[SweepTestLog_named_addressContractEvent]

    log_named_array: Type[SweepTestLog_named_arrayContractEvent]

    log_named_bytes: Type[SweepTestLog_named_bytesContractEvent]

    log_named_bytes32: Type[SweepTestLog_named_bytes32ContractEvent]

    log_named_decimal_int: Type[SweepTestLog_named_decimal_intContractEvent]

    log_named_decimal_uint: Type[SweepTestLog_named_decimal_uintContractEvent]

    log_named_int: Type[SweepTestLog_named_intContractEvent]

    log_named_string: Type[SweepTestLog_named_stringContractEvent]

    log_named_uint: Type[SweepTestLog_named_uintContractEvent]

    log_string: Type[SweepTestLog_stringContractEvent]

    log_uint: Type[SweepTestLog_uintContractEvent]

    logs: Type[SweepTestLogsContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            Type[SweepTestAddLiquidityContractEvent],
            SweepTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            Type[SweepTestApprovalContractEvent],
            SweepTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            Type[SweepTestApprovalForAllContractEvent],
            SweepTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            Type[SweepTestCloseLongContractEvent],
            SweepTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            Type[SweepTestCloseShortContractEvent],
            SweepTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            Type[SweepTestCollectGovernanceFeeContractEvent],
            SweepTestCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            Type[SweepTestCreateCheckpointContractEvent],
            SweepTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Initialize = cast(
            Type[SweepTestInitializeContractEvent],
            SweepTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            Type[SweepTestOpenLongContractEvent],
            SweepTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            Type[SweepTestOpenShortContractEvent],
            SweepTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            Type[SweepTestPauseStatusUpdatedContractEvent],
            SweepTestPauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            Type[SweepTestRedeemWithdrawalSharesContractEvent],
            SweepTestRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            Type[SweepTestRemoveLiquidityContractEvent],
            SweepTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            Type[SweepTestSweepContractEvent],
            SweepTestSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            Type[SweepTestTransferSingleContractEvent],
            SweepTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )
        self.log = cast(
            Type[SweepTestLogContractEvent],
            SweepTestLogContractEvent.factory(
                "log",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log",
            ),
        )
        self.log_address = cast(
            Type[SweepTestLog_addressContractEvent],
            SweepTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            ),
        )
        self.log_array = cast(
            Type[SweepTestLog_arrayContractEvent],
            SweepTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            ),
        )
        self.log_bytes = cast(
            Type[SweepTestLog_bytesContractEvent],
            SweepTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            ),
        )
        self.log_bytes32 = cast(
            Type[SweepTestLog_bytes32ContractEvent],
            SweepTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            ),
        )
        self.log_int = cast(
            Type[SweepTestLog_intContractEvent],
            SweepTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            ),
        )
        self.log_named_address = cast(
            Type[SweepTestLog_named_addressContractEvent],
            SweepTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            ),
        )
        self.log_named_array = cast(
            Type[SweepTestLog_named_arrayContractEvent],
            SweepTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            ),
        )
        self.log_named_bytes = cast(
            Type[SweepTestLog_named_bytesContractEvent],
            SweepTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            ),
        )
        self.log_named_bytes32 = cast(
            Type[SweepTestLog_named_bytes32ContractEvent],
            SweepTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            ),
        )
        self.log_named_decimal_int = cast(
            Type[SweepTestLog_named_decimal_intContractEvent],
            SweepTestLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            ),
        )
        self.log_named_decimal_uint = cast(
            Type[SweepTestLog_named_decimal_uintContractEvent],
            SweepTestLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            ),
        )
        self.log_named_int = cast(
            Type[SweepTestLog_named_intContractEvent],
            SweepTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            ),
        )
        self.log_named_string = cast(
            Type[SweepTestLog_named_stringContractEvent],
            SweepTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            ),
        )
        self.log_named_uint = cast(
            Type[SweepTestLog_named_uintContractEvent],
            SweepTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            ),
        )
        self.log_string = cast(
            Type[SweepTestLog_stringContractEvent],
            SweepTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            ),
        )
        self.log_uint = cast(
            Type[SweepTestLog_uintContractEvent],
            SweepTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            ),
        )
        self.logs = cast(
            Type[SweepTestLogsContractEvent],
            SweepTestLogsContractEvent.factory(
                "logs",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="logs",
            ),
        )


class SweepTestContract(Contract):
    """A web3.py Contract class for the SweepTest contract."""

    abi: ABI = sweeptest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60806040819052600c8054600160ff199182168117909255601e8054909116909117905563f877cb1960e01b90526020608452601060a4526f105490925514955357d49410d7d5549360821b60c4526000805160206202504683398151915263f877cb1960e4600060405180830381865afa15801562000083573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000ad919081019062000429565b602c90620000bc90826200058f565b5060405163f877cb1960e01b815260206004820152600c60248201526b109054d157d49410d7d5549360a21b6044820152600080516020620250468339815191529063f877cb1990606401600060405180830381865afa15801562000125573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200014f919081019062000429565b602d906200015e90826200058f565b5060405163f877cb1960e01b815260206004820152601460248201527f474e4f5349535f434841494e5f5250435f55524c0000000000000000000000006044820152600080516020620250468339815191529063f877cb1990606401600060405180830381865afa158015620001d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000202919081019062000429565b602e906200021190826200058f565b5060405163f877cb1960e01b815260206004820152600d60248201526c131253915057d49410d7d55493609a1b6044820152600080516020620250468339815191529063f877cb1990606401600060405180830381865afa1580156200027b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002a5919081019062000429565b602f90620002b490826200058f565b5060405163f877cb1960e01b815260206004820152600f60248201526e1350525393915517d49410d7d55493608a1b6044820152600080516020620250468339815191529063f877cb1990606401600060405180830381865afa15801562000320573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200034a919081019062000429565b6030906200035990826200058f565b5060405163f877cb1960e01b815260206004820152600f60248201526e14d15413d3125057d49410d7d55493608a1b6044820152600080516020620250468339815191529063f877cb1990606401600060405180830381865afa158015620003c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003ef919081019062000429565b603190620003fe90826200058f565b503480156200040c57600080fd5b506200065b565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200043d57600080fd5b82516001600160401b03808211156200045557600080fd5b818501915085601f8301126200046a57600080fd5b8151818111156200047f576200047f62000413565b604051601f8201601f19908116603f01168101908382118183101715620004aa57620004aa62000413565b816040528281528886848701011115620004c357600080fd5b600093505b82841015620004e75784840186015181850187015292850192620004c8565b600086848301015280965050505050505092915050565b600181811c908216806200051357607f821691505b6020821081036200053457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200058a576000816000526020600020601f850160051c81016020861015620005655750805b601f850160051c820191505b81811015620005865782815560010162000571565b5050505b505050565b81516001600160401b03811115620005ab57620005ab62000413565b620005c381620005bc8454620004fe565b846200053a565b602080601f831160018114620005fb5760008415620005e25750858301515b600019600386901b1c1916600185901b17855562000586565b600085815260208120601f198616915b828110156200062c578886015182559484019460019091019084016200060b565b50858210156200064b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b620249da806200066c6000396000f3fe60806040523480156200001157600080fd5b5060043610620001695760003560e01c80636f829b8c11620000d3578063a78079db1162000086578063a78079db14620002a9578063a8c8b4a514620002b3578063b5508aa914620002bd578063ba414fa614620002c7578063e20c9f7114620002e2578063fa7626d414620002ec57600080fd5b80636f829b8c146200025e57806381a89861146200026857806385226c811462000272578063916a17c6146200028b57806397bb1bb21462000295578063a0e2bb34146200029f57600080fd5b80633e5e0d26116200012c5780633e5e0d2614620001e05780633e5e3c2314620001f75780633f7286f414620002015780634f0032c9146200020b578063507ffba5146200021557806366d9a9a0146200024557600080fd5b80630a9254e4146200016e5780630da1f58e146200017a5780631071676014620001845780631ed7831c14620001ae5780632ade388014620001c7575b600080fd5b62000178620002fa565b005b6200017862000dc1565b6200019b6200019536600462002ff7565b6200135c565b6040519081526020015b60405180910390f35b620001b8620013e4565b604051620001a5919062003049565b620001d162001448565b604051620001a59190620030e0565b6200019b620001f1366004620031a6565b62001596565b620001b8620017f6565b620001b862001858565b62000178620018ba565b6200022c6200022636600462003243565b62001908565b6040516001600160a01b039091168152602001620001a5565b6200024f62001a1e565b604051620001a59190620032fe565b6200017862001b08565b6200017862001c2a565b6200027c62001de1565b604051620001a59190620033b7565b6200024f62001ebb565b6200017862001fa5565b6200017862002147565b62000178620022b7565b62000178620024a5565b6200027c620025b3565b620002d16200268d565b6040519015158152602001620001a5565b620001b862002730565b601e54620002d19060ff1681565b6200030462002792565b601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062024965833981519152906306447d5690602401600060405180830381600087803b1580156200035d57600080fd5b505af115801562000372573d6000803e3d6000fd5b5050505060126000806000196040516200038c9062002f47565b60c080825260099082015268537765657061626c6560b81b60e08201526101006020820181905260059082015264053574545560dc1b61012082015260ff90941660408501526001600160a01b0390921660608401521515608083015260a082015261014001604051809103906000f0801580156200040f573d6000803e3d6000fd5b50603480546001600160a01b0319166001600160a01b0392909216919091179055604051600090620004419062002f55565b604051809103906000f0801580156200045e573d6000803e3d6000fd5b509050600081604051620004729062002f63565b6001600160a01b039091168152602001604051809103906000f0801580156200049f573d6000803e3d6000fd5b50905081604051620004b19062002f71565b6001600160a01b039091168152602001604051809103906000f080158015620004de573d6000803e3d6000fd5b50603260016101000a8154816001600160a01b0302191690836001600160a01b0316021790555080604051620005149062002f71565b6001600160a01b039091168152602001604051809103906000f08015801562000541573d6000803e3d6000fd5b50603360006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000604051806102000160405280846001600160a01b03168152602001836001600160a01b0316815260200160006001600160a01b031681526020016000801b8152602001670de0b6b3a76400008152602001670de0b6b3a7640000815260200166038d7ea4c680008152602001670de0b6b3a764000081526020016301e1338081526020016201518081526020016200060e662386f26fc100006301e1338062002b62565b8152601e546001600160a01b036101009091048116602080840191909152601f5482166040808501919091528154909216606080850191909152600060808086018290528451908101855281815280840182905280850182905291820181905260a090940152815160018082528184019093529394509192918281019080368337505060285482519293506001600160a01b031691839150600090620006b857620006b86200341f565b60200260200101906001600160a01b031690816001600160a01b031681525050604051806102c001604052808361016001516001600160a01b03168152602001601e60019054906101000a90046001600160a01b03166001600160a01b031681526020018361016001516001600160a01b031681526020018281526020018361018001516001600160a01b03168152602001836101a001516001600160a01b03168152602001836101c001516001600160a01b03168152602001610e10815260200161708081526020016201518081526020016201518081526020016303c267008152602001662386f26fc100008152602001671bc16d674ec800008152602001662386f26fc1000081526020016706f05b59d3b200008152602001662386f26fc1000081526020016706f05b59d3b200008152602001604051806080016040528066038d7ea4c680008152602001655af3107a40008152602001670214e8348c4f00008152602001666a94d74f43000081525081526020016040518060800160405280662386f26fc10000815260200166038d7ea4c680008152602001670214e8348c4f00008152602001666a94d74f430000815250815260200183604001516001600160a01b0316815260200183606001518152506040516200089d9062002f7f565b620008a991906200347c565b604051809103906000f080158015620008c6573d6000803e3d6000fd5b50603680546001600160a01b0319166001600160a01b0392909216919091179055610100820151600080516020620249658339815191529063e5d6bf0290620009119060036200369c565b6040518263ffffffff1660e01b81526004016200093091815260200190565b600060405180830381600087803b1580156200094b57600080fd5b505af115801562000960573d6000803e3d6000fd5b50506036546040518593506001600160a01b03909116915082908290620009879062002f8d565b62000994929190620037d7565b604051809103906000f080158015620009b1573d6000803e3d6000fd5b5060365460405186916001600160a01b031690620009cf9062002f9b565b620009dc929190620037d7565b604051809103906000f080158015620009f9573d6000803e3d6000fd5b5060365460405187916001600160a01b03169062000a179062002fa9565b62000a24929190620037d7565b604051809103906000f08015801562000a41573d6000803e3d6000fd5b5060365460405188916001600160a01b03169062000a5f9062002fb7565b62000a6c929190620037d7565b604051809103906000f08015801562000a89573d6000803e3d6000fd5b5060365460405189916001600160a01b03169062000aa79062002fc5565b62000ab4929190620037d7565b604051809103906000f08015801562000ad1573d6000803e3d6000fd5b5060405162000ae09062002fd3565b62000af2979695949392919062003801565b604051809103906000f08015801562000b0f573d6000803e3d6000fd5b50603580546001600160a01b0319166001600160a01b03928316179055601e546040516340c10f1960e01b815261010090910482166004820152683635c9adc5dea000006024820152908516906340c10f1990604401600060405180830381600087803b15801562000b8057600080fd5b505af115801562000b95573d6000803e3d6000fd5b505060355460405163095ea7b360e01b81526001600160a01b039182166004820152683635c9adc5dea000006024820152908716925063095ea7b391506044016020604051808303816000875af115801562000bf5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c1b91906200387b565b5060355460408051606081018252601e5461010090046001600160a01b03908116825260016020808401919091528351600081529081018452828401529151631df417fd60e21b815291909216916377d05ff49162000c9291683635c9adc5dea000009166b1a2bc2ec5000091906004016200389f565b6020604051808303816000875af115801562000cb2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cd89190620038f1565b506035546040516340c10f1960e01b81526001600160a01b03918216600482015268056bc75e2d631000006024820152908516906340c10f1990604401600060405180830381600087803b15801562000d3057600080fd5b505af115801562000d45573d6000803e3d6000fd5b50506034546035546040516340c10f1960e01b81526001600160a01b03918216600482015268056bc75e2d631000006024820152911692506340c10f199150604401600060405180830381600087803b15801562000da257600080fd5b505af115801562000db7573d6000803e3d6000fd5b5050505050505050565b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000e0f57600080fd5b505af115801562000e24573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206202496583398151915292506306447d569150602401600060405180830381600087803b15801562000e8157600080fd5b505af115801562000e96573d6000803e3d6000fd5b50506035546020546040516338c0646560e11b81526001600160a01b0391821660048201526001602482015291169250637180c8ca9150604401600060405180830381600087803b15801562000eeb57600080fd5b505af115801562000f00573d6000803e3d6000fd5b505050506000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000f5257600080fd5b505af115801562000f67573d6000803e3d6000fd5b50506020546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202496583398151915292506306447d5691506024015b600060405180830381600087803b15801562000fc157600080fd5b505af115801562000fd6573d6000803e3d6000fd5b50506034546035546040516370a0823160e01b81526001600160a01b03918216600482015260009450911691506370a0823190602401602060405180830381865afa1580156200102a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010509190620038f1565b60405163248e63e160e11b815260016004820181905260248201819052604482018190526064820152909150600080516020620249658339815191529063491cc7c290608401600060405180830381600087803b158015620010b157600080fd5b505af1158015620010c6573d6000803e3d6000fd5b505060345460355460408051630161b2cb60e71b815290516001600160a01b03938416955092909116925063b0d96580916004808301926102609291908290030181865afa1580156200111d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001143919062003987565b6101a001516001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a360355460345460405162b40d3160e11b81526001600160a01b0391821660048201529116906301681a6290602401600060405180830381600087803b158015620011c657600080fd5b505af1158015620011db573d6000803e3d6000fd5b50506034546035546040516370a0823160e01b81526001600160a01b0391821660048201526200125f9450911691506370a0823190602401602060405180830381865afa15801562001231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012579190620038f1565b600062002c27565b60345460355460408051630161b2cb60e71b8152905162001359936001600160a01b03908116936370a082319391169163b0d9658091600480820192610260929091908290030181865afa158015620012bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012e2919062003987565b6101a001516040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156200132c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013529190620038f1565b8262002c27565b50565b6040516370a0823160e01b81526001600160a01b038085166004830152600091620013dc91869186918216906370a0823190602401602060405180830381865afa158015620013af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013d59190620038f1565b8562001596565b949350505050565b606060168054806020026020016040519081016040528092919081815260200182805480156200143e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200141f575b5050505050905090565b6060601d805480602002602001604051908101604052809291908181526020016000905b828210156200158d57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101562001575578382906000526020600020018054620014e19062003a9a565b80601f01602080910402602001604051908101604052809291908181526020018280546200150f9062003a9a565b8015620015605780601f10620015345761010080835404028352916020019162001560565b820191906000526020600020905b8154815290600101906020018083116200154257829003601f168201915b505050505081526020019060010190620014bf565b5050505081525050815260200190600101906200146c565b50505050905090565b6040516370a0823160e01b81526001600160a01b03858116600483015260009182918616906370a0823190602401602060405180830381865afa158015620015e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016089190620038f1565b9050808411156200162c5760405163188c93a560e31b815260040160405180910390fd5b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200167a57600080fd5b505af11580156200168f573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03891660048201526000805160206202496583398151915292506306447d569150602401600060405180830381600087803b158015620016e457600080fd5b505af1158015620016f9573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526001600160a01b0389166004820152670de0b6b3a7640000602482015260008051602062024965833981519152925063c88a5e6d9150604401600060405180830381600087803b1580156200175c57600080fd5b505af115801562001771573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890528816925063a9059cbb91506044016020604051808303816000875af1158015620017c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017eb91906200387b565b509295945050505050565b606060188054806020026020016040519081016040528092919081815260200182805480156200143e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116200141f575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156200143e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116200141f575050505050905090565b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000f5257600080fd5b6000816040516020016200191d919062003ad6565b60408051601f198184030181529082905280516020909101206318caf8e360e31b82529150600080516020620249658339815191529063c657c718906200196b908490869060040162003aeb565b600060405180830381600087803b1580156200198657600080fd5b505af11580156200199b573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526001600160a01b038416600482015269021e19e0c9bab2400000602482015260008051602062024965833981519152925063c88a5e6d9150604401600060405180830381600087803b15801562001a0057600080fd5b505af115801562001a15573d6000803e3d6000fd5b50505050919050565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156200158d5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562001aef57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162001ab05790505b5050505050815250508152602001906001019062001a42565b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001b5657600080fd5b505af115801562001b6b573d6000803e3d6000fd5b505060355460408051630161b2cb60e71b815290516000805160206202496583398151915294506306447d5693506001600160a01b039092169163b0d9658091600480820192610260929091908290030181865afa15801562001bd2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bf8919062003987565b61016001516040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240162000fa6565b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001c7857600080fd5b505af115801562001c8d573d6000803e3d6000fd5b50506020546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202496583398151915292506306447d569150602401600060405180830381600087803b15801562001ce657600080fd5b505af115801562001cfb573d6000803e3d6000fd5b505050506000603560009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001d55573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d7b919062003b11565b60355460405162b40d3160e11b81526001600160a01b0380841660048301529293509116906301681a62906024015b600060405180830381600087803b15801562001dc557600080fd5b505af115801562001dda573d6000803e3d6000fd5b5050505050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156200158d57838290600052602060002001805462001e279062003a9a565b80601f016020809104026020016040519081016040528092919081815260200182805462001e559062003a9a565b801562001ea65780601f1062001e7a5761010080835404028352916020019162001ea6565b820191906000526020600020905b81548152906001019060200180831162001e8857829003601f168201915b50505050508152602001906001019062001e05565b6060601c805480602002602001604051908101604052809291908181526020016000905b828210156200158d5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562001f8c57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162001f4d5790505b5050505050815250508152602001906001019062001edf565b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001ff357600080fd5b505af115801562002008573d6000803e3d6000fd5b50506020546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202496583398151915292506306447d569150602401600060405180830381600087803b1580156200206157600080fd5b505af115801562002076573d6000803e3d6000fd5b5050604051630618f58760e51b81526313dd85ff60e31b600482015260008051602062024965833981519152925063c31eb0e09150602401600060405180830381600087803b158015620020c957600080fd5b505af1158015620020de573d6000803e3d6000fd5b505060355460335460405162b40d3160e11b81526001600160a01b039182166004820152911692506301681a6291506024015b600060405180830381600087803b1580156200212c57600080fd5b505af115801562002141573d6000803e3d6000fd5b50505050565b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200219557600080fd5b505af1158015620021aa573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202496583398151915292506306447d569150602401600060405180830381600087803b1580156200220357600080fd5b505af115801562002218573d6000803e3d6000fd5b5050604051630618f58760e51b81526282b42960e81b600482015260008051602062024965833981519152925063c31eb0e09150602401600060405180830381600087803b1580156200226a57600080fd5b505af11580156200227f573d6000803e3d6000fd5b505060355460345460405162b40d3160e11b81526001600160a01b039182166004820152911692506301681a62915060240162002111565b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200230557600080fd5b505af11580156200231a573d6000803e3d6000fd5b50506020546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202496583398151915292506306447d569150602401600060405180830381600087803b1580156200237357600080fd5b505af115801562002388573d6000803e3d6000fd5b505050506000603560009054906101000a90046001600160a01b03166001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015620023e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002408919062003b11565b604051630618f58760e51b81526313dd85ff60e31b6004820152909150600080516020620249658339815191529063c31eb0e090602401600060405180830381600087803b1580156200245a57600080fd5b505af11580156200246f573d6000803e3d6000fd5b505060355460405162b40d3160e11b81526001600160a01b03858116600483015290911692506301681a62915060240162001daa565b6000805160206202498583398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620024f357600080fd5b505af115801562002508573d6000803e3d6000fd5b50506020546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206202496583398151915292506306447d569150602401600060405180830381600087803b1580156200256157600080fd5b505af115801562002576573d6000803e3d6000fd5b505060355460325460405162b40d3160e11b81526001600160a01b0361010090920482166004820152911692506301681a62915060240162002111565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156200158d578382906000526020600020018054620025f99062003a9a565b80601f0160208091040260200160405190810160405280929190818152602001828054620026279062003a9a565b8015620026785780601f106200264c5761010080835404028352916020019162002678565b820191906000526020600020905b8154815290600101906020018083116200265a57829003601f168201915b505050505081526020019060010190620025d7565b60085460009060ff1615620026a6575060085460ff1690565b604051630667f9d760e41b815260008051602062024965833981519152600482018190526519985a5b195960d21b602483015260009163667f9d7090604401602060405180830381865afa15801562002703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027299190620038f1565b1415905090565b606060158054806020026020016040519081016040528092919081815260200182805480156200143e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116200141f575050505050905090565b620027ba60405180604001604052806005815260200164616c69636560d81b81525062001908565b601e60016101000a8154816001600160a01b0302191690836001600160a01b0316021790555062002806604051806040016040528060038152602001623137b160e91b81525062001908565b601f80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526563656c696e6560d01b60208201526200284e9062001908565b602060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200289a604051806040016040528060038152602001623230b760e91b81525062001908565b602180546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600381526265766560e81b6020820152620028df9062001908565b602280546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260088152673232b83637bcb2b960c11b6020820152620029299062001908565b602480546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526536b4b73a32b960d11b6020820152620029719062001908565b602380546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b3332b2a1b7b63632b1ba37b960a11b6020820152620029bf9062001908565b602580546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600e81526d39bbb2b2b821b7b63632b1ba37b960911b602082015262002a0f9062001908565b602680546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600a815269676f7665726e616e636560b01b602082015262002a5b9062001908565b602780546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260068152653830bab9b2b960d11b602082015262002aa39062001908565b602880546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260098152683932b3b4b9ba3930b960b91b602082015262002aee9062001908565b602980546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b726577617264536f7572636560a01b602082015262002b3c9062001908565b602a80546001600160a01b0319166001600160a01b039290921691909117905542602b55565b60008062002b9962002b8962002b7a8660646200369c565b66a5bbed86c5a0009062002c92565b6748cd4072281e00009062002cb0565b905062002baf670de0b6b3a76400008262002cb0565b905062002c1d8162002c1662002be262002bdc62002bd689670de0b6b3a764000062003b31565b62002cc7565b62002cf6565b62002c0f62002bdc62002bfb8a8a6301e1338062002f28565b62002bd690670de0b6b3a764000062003b31565b9062002cb0565b9062002c92565b9150505b92915050565b60405163260a5b1560e21b8152600481018390526024810182905260008051602062024965833981519152906398296c549060440160006040518083038186803b15801562002c7557600080fd5b505afa15801562002c8a573d6000803e3d6000fd5b505050505050565b600062002ca98383670de0b6b3a764000062002f28565b9392505050565b600062002ca983670de0b6b3a76400008462002f28565b60006001600160ff1b0382111562002cf25760405163396ea70160e11b815260040160405180910390fd5b5090565b600080821362002d195760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019062002da79084901c62002cc7565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b600082600019048411830215820262002f4057600080fd5b5091020490565b6120358062003b4883390190565b611f7b8062005b7d83390190565b612fbe8062007af883390190565b6102e3806200aab683390190565b61412c806200ad9983390190565b614010806200eec583390190565b6142358062012ed583390190565b6143a1806201710a83390190565b61431e806201b4ab83390190565b61363a806201f7c983390190565b611b628062022e0383390190565b6001600160a01b03811681146200135957600080fd5b6000806000606084860312156200300d57600080fd5b83356200301a8162002fe1565b925060208401356200302c8162002fe1565b915060408401356200303e8162002fe1565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156200308c5783516001600160a01b03168352928401929184019160010162003065565b50909695505050505050565b6000815180845260005b81811015620030c057602081850181015186830182015201620030a2565b506000602082860101526020601f19601f83011685010191505092915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b858110156200319657603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b818110156200317f57605f198985030183526200316c84865162003098565b948e01949350918d01916001016200314d565b505050978a01979450509188019160010162003107565b50919a9950505050505050505050565b60008060008060808587031215620031bd57600080fd5b8435620031ca8162002fe1565b93506020850135620031dc8162002fe1565b9250604085013591506060850135620031f58162002fe1565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156200323d576200323d62003200565b60405290565b6000602082840312156200325657600080fd5b813567ffffffffffffffff808211156200326f57600080fd5b818401915084601f8301126200328457600080fd5b81358181111562003299576200329962003200565b604051601f8201601f19908116603f01168101908382118183101715620032c457620032c462003200565b81604052828152876020848701011115620032de57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b84811015620033a857898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015620033925783516001600160e01b0319168252928b019260019290920191908b019062003366565b50978a0197955050509187019160010162003328565b50919998505050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156200341257603f19888603018452620033ff85835162003098565b94509285019290850190600101620033e0565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b83811015620034715781516001600160a01b0316875295820195908201906001016200344a565b509495945050505050565b60408152620034976040820183516001600160a01b03169052565b60006020830151620034b460608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161038060a08401819052620034e76103c085018362003435565b915060808501516200350460c08601826001600160a01b03169052565b5060a08501516001600160a01b03811660e08601525060c085015161010062003537818701836001600160a01b03169052565b60e087015161012087810191909152908701516101408088019190915290870151610160808801919091529087015161018080880191909152908701516101a080880191909152908701516101c080880191909152908701516101e0808801919091529087015161020080880191909152908701516102208088019190915290870151610240808801919091529087015161026080880191909152908701519150610280906200360a82880184805182526020810151602083015260408101516040830152606081015160608301525050565b87015180516103008801526020808201516103208901526040808301516103408a0152606090920151610360890152918801516001600160a01b0316938701939093526102a08701516103a087015285840381870152601184527048797065726472697665466163746f727960781b9084015250810162002c1d565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141762002c215762002c2162003686565b80516001600160a01b031682526020810151620036de60208401826001600160a01b03169052565b506040810151620036fa60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201518184015250610160808201516200376d828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e08082015180518285015260208101516102008501526040810151610220850152606081015161024085015262002141565b6102808101620037e88285620036b6565b6001600160a01b03929092166102609190910152919050565b610340808252600a90820152694879706572647269766560b01b610360820152610380810162003835602083018a620036b6565b6001600160a01b039788166102808301529587166102a08201529386166102c08501529185166102e0840152841661030083015290921661032090920191909152919050565b6000602082840312156200388e57600080fd5b8151801515811462002ca957600080fd5b8381528260208201526060604082015260018060a01b03825116606082015260208201511515608082015260006040830151606060a0840152620038e760c084018262003098565b9695505050505050565b6000602082840312156200390457600080fd5b5051919050565b8051620039188162002fe1565b919050565b6000608082840312156200393057600080fd5b6040516080810181811067ffffffffffffffff8211171562003956576200395662003200565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600061026082840312156200399b57600080fd5b620039a562003216565b620039b0836200390b565b8152620039c0602084016200390b565b6020820152620039d3604084016200390b565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151818301525061012080840151818301525061014080840151818301525061016062003a3e8185016200390b565b9082015261018062003a528482016200390b565b908201526101a062003a668482016200390b565b908201526101c062003a7a8482016200390b565b908201526101e062003a8f858583016200391d565b908201529392505050565b600181811c9082168062003aaf57607f821691505b60208210810362003ad057634e487b7160e01b600052602260045260246000fd5b50919050565b60208152600062002ca9602083018462003098565b6001600160a01b0383168152604060208201819052600090620013dc9083018462003098565b60006020828403121562003b2457600080fd5b815162002ca98162002fe1565b8082018082111562002c215762002c216200368656fe6101006040523480156200001257600080fd5b506040516200203538038062002035833981016040819052620000359162000298565b8230818189898960006200004a8482620003e8565b506001620000598382620003e8565b5060ff81166080524660a0526200006f6200011e565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505090151560e052600c55506200053292505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001529190620004b4565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001e257600080fd5b81516001600160401b0380821115620001ff57620001ff620001ba565b604051601f8301601f19908116603f011681019082821181831017156200022a576200022a620001ba565b81604052838152602092508660208588010111156200024857600080fd5b600091505b838210156200026c57858201830151818301840152908201906200024d565b6000602085830101528094505050505092915050565b805180151581146200029357600080fd5b919050565b60008060008060008060c08789031215620002b257600080fd5b86516001600160401b0380821115620002ca57600080fd5b620002d88a838b01620001d0565b97506020890151915080821115620002ef57600080fd5b50620002fe89828a01620001d0565b955050604087015160ff811681146200031657600080fd5b60608801519094506001600160a01b03811681146200033457600080fd5b9250620003446080880162000282565b915060a087015190509295509295509295565b600181811c908216806200036c57607f821691505b6020821081036200038d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e3576000816000526020600020601f850160051c81016020861015620003be5750805b601f850160051c820191505b81811015620003df57828155600101620003ca565b5050505b505050565b81516001600160401b03811115620004045762000404620001ba565b6200041c8162000415845462000357565b8462000393565b602080601f8311600181146200045457600084156200043b5750858301515b600019600386901b1c1916600185901b178555620003df565b600085815260208120601f198616915b82811015620004855788860151825594840194600190910190840162000464565b5085821015620004a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620004c48162000357565b60018281168015620004df5760018114620004f55762000526565b60ff198416875282151583028701945062000526565b8760005260208060002060005b858110156200051d5781548a82015290840190820162000502565b50505082870194505b50929695505050505050565b60805160a05160c05160e051611a9f62000596600039600081816103d4015281816105e701528181610701015281816109e001528181610a7f01528181610dbe0152610e20015260006109bc01526000610987015260006103140152611a9f6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80637a8c63b511610125578063b7009613116100ad578063dd62ed3e1161007c578063dd62ed3e1461051a578063e688747b14610545578063ea7ca2761461057b578063ed0d0efb146105b2578063f2fde38b146105d257600080fd5b8063b7009613146104b8578063bf7e214f146104cb578063c53a3985146104de578063d505accf1461050757600080fd5b806395d89b41116100f457806395d89b41146104545780639dc29fac1461045c578063a0712d681461046f578063a9059cbb14610482578063aed307771461049557600080fd5b80637a8c63b5146103cf5780637a9e5e4b146103f65780637ecebe00146104095780638da5cb5b1461042957600080fd5b806323b872dd116101a857806342966c681161017757806342966c68146103635780634b5159da1461037657806367aff4841461038957806370a082311461039c578063728b952b146103bc57600080fd5b806323b872dd146102fc578063313ce5671461030f5780633644e5151461034857806340c10f191461035057600080fd5b8063095ea7b3116101ef578063095ea7b3146102915780630bade8a4146102b45780630ea9b75b146102d757806318160ddd146102ea578063239c70ae146102f357600080fd5b806305f05a941461022157806306a36aee1461023657806306fdde0314610269578063088a4ed01461027e575b600080fd5b61023461022f366004611502565b6105e5565b005b61025661024436600461153b565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b610271610671565b6040516102609190611558565b61023461028c3660046115a7565b6106ff565b6102a461029f3660046115c0565b61075c565b6040519015158152602001610260565b6102a46102c2366004611609565b600a6020526000908152604090205460ff1681565b6102346102e5366004611635565b6107c9565b61025660025481565b610256600c5481565b6102a461030a36600461167c565b6108a1565b6103367f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610260565b610256610983565b61023461035e3660046115c0565b6109de565b6102346103713660046115a7565b610a7d565b6102346103843660046116bd565b610ae2565b6102346103973660046116d9565b610b74565b6102566103aa36600461153b565b60036020526000908152604090205481565b6102346103ca366004611707565b610c3c565b6102a47f000000000000000000000000000000000000000000000000000000000000000081565b61023461040436600461153b565b610cc5565b61025661041736600461153b565b60056020526000908152604090205481565b60065461043c906001600160a01b031681565b6040516001600160a01b039091168152602001610260565b610271610daf565b61023461046a3660046115c0565b610dbc565b61023461047d3660046115a7565b610e1e565b6102a46104903660046115c0565b610eb9565b6102a46104a336600461153b565b600d6020526000908152604090205460ff1681565b6102a46104c6366004611735565b610f1f565b60075461043c906001600160a01b031681565b61043c6104ec36600461153b565b6008602052600090815260409020546001600160a01b031681565b61023461051536600461177c565b61101d565b610256610528366004611707565b600460209081526000928352604080842090915290825290205481565b6102a46105533660046117ea565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b6102a461058936600461181d565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b6102566105c0366004611609565b600b6020526000908152604090205481565b6102346105e036600461153b565b611261565b7f00000000000000000000000000000000000000000000000000000000000000001561064657610621336000356001600160e01b0319166112df565b6106465760405162461bcd60e51b815260040161063d90611849565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6000805461067e90611880565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa90611880565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b7f0000000000000000000000000000000000000000000000000000000000000000156107575761073b336000356001600160e01b0319166112df565b6107575760405162461bcd60e51b815260040161063d90611849565b600c55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107b79086815260200190565b60405180910390a35060015b92915050565b6107df336000356001600160e01b0319166112df565b6107fb5760405162461bcd60e51b815260040161063d906118ba565b801561082b576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610852565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610894911515815260200190565b60405180910390a3505050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146108fd576108d883826118f6565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906109259084906118f6565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020611a4a8339815191529061096e9087815260200190565b60405180910390a360019150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146109b9576109b4611389565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610a3657610a1a336000356001600160e01b0319166112df565b610a365760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610a6f57600c54811115610a6f5760405162461bcd60e51b815260040161063d90611909565b610a798282611423565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610ad557610ab9336000356001600160e01b0319166112df565b610ad55760405162461bcd60e51b815260040161063d90611849565b610adf338261147d565b50565b610af8336000356001600160e01b0319166112df565b610b145760405162461bcd60e51b815260040161063d906118ba565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610b8a336000356001600160e01b0319166112df565b610ba65760405162461bcd60e51b815260040161063d906118ba565b8015610bd5576001600160a01b03831660009081526009602052604090208054600160ff85161b179055610bfb565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610894911515815260200190565b610c52336000356001600160e01b0319166112df565b610c6e5760405162461bcd60e51b815260040161063d906118ba565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480610d5a575060075460405163b700961360e01b81526001600160a01b039091169063b700961390610d1990339030906001600160e01b0319600035169060040161194b565b602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611978565b610d6357600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b6001805461067e90611880565b7f000000000000000000000000000000000000000000000000000000000000000015610e1457610df8336000356001600160e01b0319166112df565b610e145760405162461bcd60e51b815260040161063d90611849565b610a79828261147d565b7f000000000000000000000000000000000000000000000000000000000000000015610e7657610e5a336000356001600160e01b0319166112df565b610e765760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610eaf57600c54811115610eaf5760405162461bcd60e51b815260040161063d90611909565b610adf3382611423565b33600090815260036020526040812080548391908390610eda9084906118f6565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020611a4a833981519152906107b79086815260200190565b6001600160a01b038083166000908152600860205260408120549091168015610fbb5760405163b700961360e01b81526001600160a01b0382169063b700961390610f729088908890889060040161194b565b602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190611978565b91505061097c565b6001600160e01b031983166000908152600a602052604090205460ff168061101457506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b4284101561106d5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161063d565b60006001611079610983565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611185573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111bb5750876001600160a01b0316816001600160a01b0316145b6111f85760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161063d565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b611277336000356001600160e01b0319166112df565b6112935760405162461bcd60e51b815260040161063d906118ba565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6007546000906001600160a01b03168015801590611369575060405163b700961360e01b81526001600160a01b0382169063b7009613906113289087903090889060040161194b565b602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190611978565b8061138157506006546001600160a01b038581169116145b949350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516113bb9190611995565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b80600260008282546114359190611a36565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020611a4a83398151915291015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906114a59084906118f6565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020611a4a83398151915290602001611471565b6001600160a01b0381168114610adf57600080fd5b8015158114610adf57600080fd5b6000806040838503121561151557600080fd5b8235611520816114df565b91506020830135611530816114f4565b809150509250929050565b60006020828403121561154d57600080fd5b813561097c816114df565b60006020808352835180602085015260005b818110156115865785810183015185820160400152820161156a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156115b957600080fd5b5035919050565b600080604083850312156115d357600080fd5b82356115de816114df565b946020939093013593505050565b80356001600160e01b03198116811461160457600080fd5b919050565b60006020828403121561161b57600080fd5b61097c826115ec565b803560ff8116811461160457600080fd5b60008060006060848603121561164a57600080fd5b61165384611624565b9250611661602085016115ec565b91506040840135611671816114f4565b809150509250925092565b60008060006060848603121561169157600080fd5b833561169c816114df565b925060208401356116ac816114df565b929592945050506040919091013590565b600080604083850312156116d057600080fd5b611520836115ec565b6000806000606084860312156116ee57600080fd5b83356116f9816114df565b925061166160208501611624565b6000806040838503121561171a57600080fd5b8235611725816114df565b91506020830135611530816114df565b60008060006060848603121561174a57600080fd5b8335611755816114df565b92506020840135611765816114df565b9150611773604085016115ec565b90509250925092565b600080600080600080600060e0888a03121561179757600080fd5b87356117a2816114df565b965060208801356117b2816114df565b955060408801359450606088013593506117ce60808901611624565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156117fd57600080fd5b61180683611624565b9150611814602084016115ec565b90509250929050565b6000806040838503121561183057600080fd5b823561183b816114df565b915061181460208401611624565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c9082168061189457607f821691505b6020821081036118b457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107c3576107c36118e0565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561198a57600080fd5b815161097c816114f4565b60008083548160018260011c915060018316806119b357607f831692505b602080841082036119d257634e487b7160e01b86526022600452602486fd5b8180156119e657600181146119fb57611a28565b60ff1986168952841515850289019650611a28565b60008a81526020902060005b86811015611a205781548b820152908501908301611a07565b505084890196505b509498975050505050505050565b808201808211156107c3576107c36118e056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bfa5831106ce09a23ad7aac9a09e02a9809dd79b0e0446958dd2bdec6da95de664736f6c634300081600336101006040523480156200001257600080fd5b506040518060400160405280600b81526020016a04c65616b792045524332360ac1b815250604051806040016040528060048152602001634c45414b60e01b81525060008060006000198230818189898982600090816200007491906200028b565b5060016200008383826200028b565b5060ff81166080524660a0526200009962000148565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505090151560e052600c5550620003d592505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516200017c919062000357565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200020f57607f821691505b6020821081036200023057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000286576000816000526020600020601f850160051c81016020861015620002615750805b601f850160051c820191505b8181101562000282578281556001016200026d565b5050505b505050565b81516001600160401b03811115620002a757620002a7620001e4565b620002bf81620002b88454620001fa565b8462000236565b602080601f831160018114620002f75760008415620002de5750858301515b600019600386901b1c1916600185901b17855562000282565b600085815260208120601f198616915b82811015620003285788860151825594840194600190910190840162000307565b5085821015620003475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008083546200036781620001fa565b600182811680156200038257600181146200039857620003c9565b60ff1984168752821515830287019450620003c9565b8760005260208060002060005b85811015620003c05781548a820152908401908201620003a5565b50505082870194505b50929695505050505050565b60805160a05160c05160e051611b4262000439600039600081816103df015281816106050152818161071f015281816109fe01528181610a9d01528181610ddc0152610e3e015260006109da015260006109a50152600061031f0152611b426000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80637a8c63b511610130578063b7009613116100b8578063dd62ed3e1161007c578063dd62ed3e14610538578063e688747b14610563578063ea7ca27614610599578063ed0d0efb146105d0578063f2fde38b146105f057600080fd5b8063b7009613146104c3578063bf7e214f146104d6578063c51ea9cc146104e9578063c53a3985146104fc578063d505accf1461052557600080fd5b806395d89b41116100ff57806395d89b411461045f5780639dc29fac14610467578063a0712d681461047a578063a9059cbb1461048d578063aed30777146104a057600080fd5b80637a8c63b5146103da5780637a9e5e4b146104015780637ecebe00146104145780638da5cb5b1461043457600080fd5b806323b872dd116101b357806342966c681161018257806342966c681461036e5780634b5159da1461038157806367aff4841461039457806370a08231146103a7578063728b952b146103c757600080fd5b806323b872dd14610307578063313ce5671461031a5780633644e5151461035357806340c10f191461035b57600080fd5b8063095ea7b3116101fa578063095ea7b31461029c5780630bade8a4146102bf5780630ea9b75b146102e257806318160ddd146102f5578063239c70ae146102fe57600080fd5b806305f05a941461022c57806306a36aee1461024157806306fdde0314610274578063088a4ed014610289575b600080fd5b61023f61023a3660046115a5565b610603565b005b61026161024f3660046115de565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b61027c61068f565b60405161026b91906115fb565b61023f61029736600461164a565b61071d565b6102af6102aa366004611663565b61077a565b604051901515815260200161026b565b6102af6102cd3660046116ac565b600a6020526000908152604090205460ff1681565b61023f6102f03660046116d8565b6107e7565b61026160025481565b610261600c5481565b6102af61031536600461171f565b6108bf565b6103417f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161026b565b6102616109a1565b61023f610369366004611663565b6109fc565b61023f61037c36600461164a565b610a9b565b61023f61038f366004611760565b610b00565b61023f6103a236600461177c565b610b92565b6102616103b53660046115de565b60036020526000908152604090205481565b61023f6103d53660046117aa565b610c5a565b6102af7f000000000000000000000000000000000000000000000000000000000000000081565b61023f61040f3660046115de565b610ce3565b6102616104223660046115de565b60056020526000908152604090205481565b600654610447906001600160a01b031681565b6040516001600160a01b03909116815260200161026b565b61027c610dcd565b61023f610475366004611663565b610dda565b61023f61048836600461164a565b610e3c565b6102af61049b366004611663565b610ed7565b6102af6104ae3660046115de565b600d6020526000908152604090205460ff1681565b6102af6104d13660046117d8565b610f3d565b600754610447906001600160a01b031681565b6102af6104f736600461171f565b61103b565b61044761050a3660046115de565b6008602052600090815260409020546001600160a01b031681565b61023f61053336600461181f565b6110c0565b6102616105463660046117aa565b600460209081526000928352604080842090915290825290205481565b6102af61057136600461188d565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b6102af6105a73660046118c0565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b6102616105de3660046116ac565b600b6020526000908152604090205481565b61023f6105fe3660046115de565b611304565b7f0000000000000000000000000000000000000000000000000000000000000000156106645761063f336000356001600160e01b031916611382565b6106645760405162461bcd60e51b815260040161065b906118ec565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6000805461069c90611923565b80601f01602080910402602001604051908101604052809291908181526020018280546106c890611923565b80156107155780601f106106ea57610100808354040283529160200191610715565b820191906000526020600020905b8154815290600101906020018083116106f857829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000001561077557610759336000356001600160e01b031916611382565b6107755760405162461bcd60e51b815260040161065b906118ec565b600c55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107d59086815260200190565b60405180910390a35060015b92915050565b6107fd336000356001600160e01b031916611382565b6108195760405162461bcd60e51b815260040161065b9061195d565b8015610849576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610870565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b151836040516108b2911515815260200190565b60405180910390a3505050565b6001600160a01b0383166000908152600460209081526040808320338452909152812054600019811461091b576108f68382611999565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610943908490611999565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020611aed8339815191529061098c9087815260200190565b60405180910390a360019150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146109d7576109d261142c565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610a5457610a38336000356001600160e01b031916611382565b610a545760405162461bcd60e51b815260040161065b906118ec565b336000908152600d602052604090205460ff16610a8d57600c54811115610a8d5760405162461bcd60e51b815260040161065b906119ac565b610a9782826114c6565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610af357610ad7336000356001600160e01b031916611382565b610af35760405162461bcd60e51b815260040161065b906118ec565b610afd3382611520565b50565b610b16336000356001600160e01b031916611382565b610b325760405162461bcd60e51b815260040161065b9061195d565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610ba8336000356001600160e01b031916611382565b610bc45760405162461bcd60e51b815260040161065b9061195d565b8015610bf3576001600160a01b03831660009081526009602052604090208054600160ff85161b179055610c19565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf2836040516108b2911515815260200190565b610c70336000356001600160e01b031916611382565b610c8c5760405162461bcd60e51b815260040161065b9061195d565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480610d78575060075460405163b700961360e01b81526001600160a01b039091169063b700961390610d3790339030906001600160e01b031960003516906004016119ee565b602060405180830381865afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190611a1b565b610d8157600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b6001805461069c90611923565b7f000000000000000000000000000000000000000000000000000000000000000015610e3257610e16336000356001600160e01b031916611382565b610e325760405162461bcd60e51b815260040161065b906118ec565b610a978282611520565b7f000000000000000000000000000000000000000000000000000000000000000015610e9457610e78336000356001600160e01b031916611382565b610e945760405162461bcd60e51b815260040161065b906118ec565b336000908152600d602052604090205460ff16610ecd57600c54811115610ecd5760405162461bcd60e51b815260040161065b906119ac565b610afd33826114c6565b33600090815260036020526040812080548391908390610ef8908490611999565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020611aed833981519152906107d59086815260200190565b6001600160a01b038083166000908152600860205260408120549091168015610fd95760405163b700961360e01b81526001600160a01b0382169063b700961390610f90908890889088906004016119ee565b602060405180830381865afa158015610fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd19190611a1b565b91505061099a565b6001600160e01b031983166000908152600a602052604090205460ff168061103257506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b6001600160a01b038316600090815260036020526040812080548391908390611065908490611999565b90915550506001600160a01b0380841660008181526003602052604090819020805486019055519091861690600080516020611aed833981519152906110ae9086815260200190565b60405180910390a35060019392505050565b428410156111105760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161065b565b6000600161111c6109a1565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611228573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061125e5750876001600160a01b0316816001600160a01b0316145b61129b5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161065b565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b61131a336000356001600160e01b031916611382565b6113365760405162461bcd60e51b815260040161065b9061195d565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6007546000906001600160a01b0316801580159061140c575060405163b700961360e01b81526001600160a01b0382169063b7009613906113cb908790309088906004016119ee565b602060405180830381865afa1580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190611a1b565b8061142457506006546001600160a01b038581169116145b949350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f600060405161145e9190611a38565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b80600260008282546114d89190611ad9565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020611aed83398151915291015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290611548908490611999565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020611aed83398151915290602001611514565b6001600160a01b0381168114610afd57600080fd5b8015158114610afd57600080fd5b600080604083850312156115b857600080fd5b82356115c381611582565b915060208301356115d381611597565b809150509250929050565b6000602082840312156115f057600080fd5b813561099a81611582565b60006020808352835180602085015260005b818110156116295785810183015185820160400152820161160d565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561165c57600080fd5b5035919050565b6000806040838503121561167657600080fd5b823561168181611582565b946020939093013593505050565b80356001600160e01b0319811681146116a757600080fd5b919050565b6000602082840312156116be57600080fd5b61099a8261168f565b803560ff811681146116a757600080fd5b6000806000606084860312156116ed57600080fd5b6116f6846116c7565b92506117046020850161168f565b9150604084013561171481611597565b809150509250925092565b60008060006060848603121561173457600080fd5b833561173f81611582565b9250602084013561174f81611582565b929592945050506040919091013590565b6000806040838503121561177357600080fd5b6115c38361168f565b60008060006060848603121561179157600080fd5b833561179c81611582565b9250611704602085016116c7565b600080604083850312156117bd57600080fd5b82356117c881611582565b915060208301356115d381611582565b6000806000606084860312156117ed57600080fd5b83356117f881611582565b9250602084013561180881611582565b91506118166040850161168f565b90509250925092565b600080600080600080600060e0888a03121561183a57600080fd5b873561184581611582565b9650602088013561185581611582565b95506040880135945060608801359350611871608089016116c7565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156118a057600080fd5b6118a9836116c7565b91506118b76020840161168f565b90509250929050565b600080604083850312156118d357600080fd5b82356118de81611582565b91506118b7602084016116c7565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c9082168061193757607f821691505b60208210810361195757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107e1576107e1611983565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b600060208284031215611a2d57600080fd5b815161099a81611597565b60008083548160018260011c91506001831680611a5657607f831692505b60208084108203611a7557634e487b7160e01b86526022600452602486fd5b818015611a895760018114611a9e57611acb565b60ff1986168952841515850289019650611acb565b60008a81526020902060005b86811015611ac35781548b820152908501908301611aaa565b505084890196505b509498975050505050505050565b808201808211156107e1576107e161198356feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220db731b4fedb7a23c53e6dec7a21b0f13646c4529e5266a80a5720291e291712e64736f6c634300081600336101206040523480156200001257600080fd5b5060405162002fbe38038062002fbe833981016040819052620000359162000281565b806040518060400160405280600b81526020016a1319585ade4815985d5b1d60aa1b815250604051806040016040528060048152602001634c45414b60e01b8152506000806000600019823081818a8a8a8181846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ed9190620002b3565b6000620000fb84826200037f565b5060016200010a83826200037f565b5060ff81166080524660a05262000120620001e5565b60c0525050506001600160a01b0392831660e0525050600680548483166001600160a01b0319918216811790925560078054938516939091169290921790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a3505050600c9490945542600d5590151561010052600e5550620004c9945050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516200021991906200044b565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000602082840312156200029457600080fd5b81516001600160a01b0381168114620002ac57600080fd5b9392505050565b600060208284031215620002c657600080fd5b815160ff81168114620002ac57600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200030357607f821691505b6020821081036200032457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200037a576000816000526020600020601f850160051c81016020861015620003555750805b601f850160051c820191505b81811015620003765782815560010162000361565b5050505b505050565b81516001600160401b038111156200039b576200039b620002d8565b620003b381620003ac8454620002ee565b846200032a565b602080601f831160018114620003eb5760008415620003d25750858301515b600019600386901b1c1916600185901b17855562000376565b600085815260208120601f198616915b828110156200041c57888601518255948401946001909101908401620003fb565b50858210156200043b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008083546200045b81620002ee565b600182811680156200047657600181146200048c57620004bd565b60ff1984168752821515830287019450620004bd565b8760005260208060002060005b85811015620004b45781548a82015290840190820162000499565b50505082870194505b50929695505050505050565b60805160a05160c05160e05161010051612a2b62000593600039600081816105f30152818161096401528181610aab01528181610d4d01528181610e0801528181610f5f015281816113f601526114e00152600081816104f2015281816108e001528181610ec901528181610fb7015281816113560152818161144e015281816115a101528181611bef01528181611d7e01528181611f98015281816120300152818161218201526122c401526000610de401526000610db40152600061049e0152612a2b6000f3fe608060405234801561001057600080fd5b50600436106103785760003560e01c80637a9e5e4b116101d3578063bf7e214f11610104578063d905777e116100a2578063ea7ca2761161007c578063ea7ca27614610843578063ed0d0efb1461087a578063ef8b30f71461089a578063f2fde38b146108ad57600080fd5b8063d905777e146107b9578063dd62ed3e146107e2578063e688747b1461080d57600080fd5b8063c63d75b6116100de578063c63d75b61461052c578063c6e6f59214610780578063ce96cb7714610793578063d505accf146107a657600080fd5b8063bf7e214f14610731578063c51ea9cc14610744578063c53a39851461075757600080fd5b8063a0712d6811610171578063b3d7f6b91161014b578063b3d7f6b9146106e5578063b460af94146106f8578063b70096131461070b578063ba0876521461071e57600080fd5b8063a0712d681461069c578063a9059cbb146106af578063aed30777146106c257600080fd5b806394605857116101ad578063946058571461065b57806394bf804d1461066e57806395d89b41146106815780639dc29fac1461068957600080fd5b80637a9e5e4b146106155780637ecebe00146106285780638da5cb5b1461064857600080fd5b806334fcf437116102ad5780634cdad5061161024b5780636e553f65116102255780636e553f65146105a857806370a08231146105bb578063728b952b146105db5780637a8c63b5146105ee57600080fd5b80634cdad5061461057a578063679aefce1461058d57806367aff4841461059557600080fd5b8063402d267d11610287578063402d267d1461052c57806340c10f191461054157806342966c68146105545780634b5159da1461056757600080fd5b806334fcf437146104d25780633644e515146104e557806338d52e0f146104ed57600080fd5b80630a28a4771161031a57806318160ddd116102f457806318160ddd14610474578063239c70ae1461047d57806323b872dd14610486578063313ce5671461049957600080fd5b80630a28a4771461042b5780630bade8a41461043e5780630ea9b75b1461046157600080fd5b806306fdde031161035657806306fdde03146103cd57806307a2d13a146103e2578063088a4ed0146103f5578063095ea7b31461040857600080fd5b806301e1d1141461037d57806305f05a941461039857806306a36aee146103ad575b600080fd5b6103856108c0565b6040519081526020015b60405180910390f35b6103ab6103a636600461245b565b610962565b005b6103856103bb366004612494565b60096020526000908152604090205481565b6103d56109ee565b60405161038f91906124b1565b6103856103f0366004612500565b610a7c565b6103ab610403366004612500565b610aa9565b61041b610416366004612519565b610b06565b604051901515815260200161038f565b610385610439366004612500565b610b73565b61041b61044c366004612562565b600a6020526000908152604090205460ff1681565b6103ab61046f36600461258e565b610b93565b61038560025481565b610385600e5481565b61041b6104943660046125d5565b610c6b565b6104c07f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161038f565b6103ab6104e0366004612500565b610d4b565b610385610db0565b6105147f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161038f565b61038561053a366004612494565b5060001990565b6103ab61054f366004612519565b610e06565b6103ab610562366004612500565b610f5d565b6103ab610575366004612616565b61104a565b610385610588366004612500565b6110dc565b600c54610385565b6103ab6105a3366004612632565b6110e7565b6103856105b6366004612660565b6111af565b6103856105c9366004612494565b60036020526000908152604090205481565b6103ab6105e9366004612685565b6111c3565b61041b7f000000000000000000000000000000000000000000000000000000000000000081565b6103ab610623366004612494565b61124c565b610385610636366004612494565b60056020526000908152604090205481565b600654610514906001600160a01b031681565b610385610669366004612500565b611336565b61038561067c366004612660565b6113d3565b6103d56113e7565b6103ab610697366004612519565b6113f4565b6103ab6106aa366004612500565b6114de565b61041b6106bd366004612519565b611631565b61041b6106d0366004612494565b600f6020526000908152604090205460ff1681565b6103856106f3366004612500565b611697565b6103856107063660046126b3565b6116b6565b61041b6107193660046126ea565b6116d3565b61038561072c3660046126b3565b6117d1565b600754610514906001600160a01b031681565b61041b6107523660046125d5565b6117e6565b610514610765366004612494565b6008602052600090815260409020546001600160a01b031681565b61038561078e366004612500565b61186b565b6103856107a1366004612494565b61188b565b6103ab6107b4366004612731565b6118ad565b6103856107c7366004612494565b6001600160a01b031660009081526003602052604090205490565b6103856107f0366004612685565b600460209081526000928352604080842090915290825290205481565b61041b61081b36600461279f565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b61041b6108513660046127d2565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b610385610888366004612562565b600b6020526000908152604090205481565b6103856108a8366004612500565b611af1565b6103ab6108bb366004612494565b611afc565b60006108cb42611b7a565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561092f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095391906127fe565b61095d919061282d565b905090565b7f0000000000000000000000000000000000000000000000000000000000000000156109c35761099e336000356001600160e01b031916611c68565b6109c35760405162461bcd60e51b81526004016109ba90612840565b60405180910390fd5b6001600160a01b03919091166000908152600f60205260409020805460ff1916911515919091179055565b600080546109fb90612877565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2790612877565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b505050505081565b6002546000908015610aa057610a9b610a936108c0565b849083611d11565b610aa2565b825b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000015610b0157610ae5336000356001600160e01b031916611c68565b610b015760405162461bcd60e51b81526004016109ba90612840565b600e55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b619086815260200190565b60405180910390a35060015b92915050565b6002546000908015610aa057610a9b81610b8b6108c0565b859190611d2f565b610ba9336000356001600160e01b031916611c68565b610bc55760405162461bcd60e51b81526004016109ba906128b1565b8015610bf5576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610c1c565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610c5e911515815260200190565b60405180910390a3505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610cc757610ca283826128d7565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610cef9084906128d7565b90915550506001600160a01b03808516600081815260036020526040908190208054870190555190918716906000805160206129d683398151915290610d389087815260200190565b60405180910390a3506001949350505050565b7f000000000000000000000000000000000000000000000000000000000000000015610da357610d87336000356001600160e01b031916611c68565b610da35760405162461bcd60e51b81526004016109ba90612840565b610dab611d55565b600c55565b60007f00000000000000000000000000000000000000000000000000000000000000004614610de15761095d611dea565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610e5e57610e42336000356001600160e01b031916611c68565b610e5e5760405162461bcd60e51b81526004016109ba90612840565b336000908152600f602052604090205460ff16610ec757600e54811115610ec75760405162461bcd60e51b815260206004820181905260248201527f4d6f636b455243343632363a20496e76616c6964206d696e7420616d6f756e7460448201526064016109ba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d68610eff83610a7c565b6040518263ffffffff1660e01b8152600401610f1d91815260200190565b600060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b50505050610f598282611e84565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610fb557610f99336000356001600160e01b031916611c68565b610fb55760405162461bcd60e51b81526004016109ba90612840565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c68610fed83610a7c565b6040518263ffffffff1660e01b815260040161100b91815260200190565b600060405180830381600087803b15801561102557600080fd5b505af1158015611039573d6000803e3d6000fd5b505050506110473382611ede565b50565b611060336000356001600160e01b031916611c68565b61107c5760405162461bcd60e51b81526004016109ba906128b1565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b6000610b6d82610a7c565b6110fd336000356001600160e01b031916611c68565b6111195760405162461bcd60e51b81526004016109ba906128b1565b8015611148576001600160a01b03831660009081526009602052604090208054600160ff85161b17905561116e565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610c5e911515815260200190565b60006111b9611d55565b610aa28383611f40565b6111d9336000356001600160e01b031916611c68565b6111f55760405162461bcd60e51b81526004016109ba906128b1565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b03163314806112e1575060075460405163b700961360e01b81526001600160a01b039091169063b7009613906112a090339030906001600160e01b031960003516906004016128ea565b602060405180830381865afa1580156112bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e19190612917565b6112ea57600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b600061134182611b7a565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c991906127fe565b610b6d919061282d565b60006113dd611d55565b610aa28383612016565b600180546109fb90612877565b7f00000000000000000000000000000000000000000000000000000000000000001561144c57611430336000356001600160e01b031916611c68565b61144c5760405162461bcd60e51b81526004016109ba90612840565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c6861148483610a7c565b6040518263ffffffff1660e01b81526004016114a291815260200190565b600060405180830381600087803b1580156114bc57600080fd5b505af11580156114d0573d6000803e3d6000fd5b50505050610f598282611ede565b7f0000000000000000000000000000000000000000000000000000000000000000156115365761151a336000356001600160e01b031916611c68565b6115365760405162461bcd60e51b81526004016109ba90612840565b336000908152600f602052604090205460ff1661159f57600e5481111561159f5760405162461bcd60e51b815260206004820181905260248201527f4d6f636b455243343632363a20496e76616c6964206d696e7420616d6f756e7460448201526064016109ba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d686115d783610a7c565b6040518263ffffffff1660e01b81526004016115f591815260200190565b600060405180830381600087803b15801561160f57600080fd5b505af1158015611623573d6000803e3d6000fd5b505050506110473382611e84565b336000908152600360205260408120805483919083906116529084906128d7565b90915550506001600160a01b038316600081815260036020526040908190208054850190555133906000805160206129d683398151915290610b619086815260200190565b6002546000908015610aa057610a9b6116ae6108c0565b849083611d2f565b60006116c0611d55565b6116cb8484846120a5565b949350505050565b6001600160a01b03808316600090815260086020526040812054909116801561176f5760405163b700961360e01b81526001600160a01b0382169063b700961390611726908890889088906004016128ea565b602060405180830381865afa158015611743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117679190612917565b915050610aa2565b6001600160e01b031983166000908152600a602052604090205460ff16806117c857506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b60006117db611d55565b6116cb8484846121a9565b6001600160a01b0383166000908152600360205260408120805483919083906118109084906128d7565b90915550506001600160a01b03808416600081815260036020526040908190208054860190555190918616906000805160206129d6833981519152906118599086815260200190565b60405180910390a35060019392505050565b6002546000908015610aa057610a9b816118836108c0565b859190611d11565b6001600160a01b038116600090815260036020526040812054610b6d90610a7c565b428410156118fd5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016109ba565b60006001611909610db0565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611a15573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611a4b5750876001600160a01b0316816001600160a01b0316145b611a885760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b60448201526064016109ba565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000610b6d8261186b565b611b12336000356001600160e01b031916611c68565b611b2e5760405162461bcd60e51b81526004016109ba906128b1565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6000600c54600003611b8e57506000919050565b600d54821015611ba057506000919050565b6000611bbe6301e13380600d5485611bb891906128d7565b906122eb565b905060006116cb611bda83600c5461230090919063ffffffff16565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6291906127fe565b90612300565b6007546000906001600160a01b03168015801590611cf2575060405163b700961360e01b81526001600160a01b0382169063b700961390611cb1908790309088906004016128ea565b602060405180830381865afa158015611cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf29190612917565b806116cb57506006546001600160a01b03858116911614949350505050565b6000826000190484118302158202611d2857600080fd5b5091020490565b6000826000190484118302158202611d4657600080fd5b50910281810615159190040190565b6000611d6042611b7a565b90508015611de35760405163140e25ad60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d6890602401600060405180830381600087803b158015611dca57600080fd5b505af1158015611dde573d6000803e3d6000fd5b505050505b5042600d55565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051611e1c9190612934565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8060026000828254611e96919061282d565b90915550506001600160a01b0382166000818152600360209081526040808320805486019055518481526000805160206129d683398151915291015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290611f069084906128d7565b90915550506002805482900390556040518181526000906001600160a01b038416906000805160206129d683398151915290602001611ed2565b6000611f4b83611af1565b905080600003611f8b5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b60448201526064016109ba565b611fc06001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612315565b611fca8282611e84565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a3610b6d565b600061202183611697565b90506120586001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612315565b6120628284611e84565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101612009565b60006120b084610b73565b9050336001600160a01b03831614612120576001600160a01b0382166000908152600460209081526040808320338452909152902054600019811461211e576120f982826128d7565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b61212a8282611ede565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610aa26001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684866123b1565b6000336001600160a01b03831614612219576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114612217576121f285826128d7565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b612222846110dc565b9050806000036122625760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b60448201526064016109ba565b61226c8285611ede565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610aa26001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684836123b1565b6000610aa283670de0b6b3a764000084611d11565b6000610aa28383670de0b6b3a7640000611d11565b60006040516323b872dd60e01b81526001600160a01b03851660048201526001600160a01b03841660248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806123aa5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016109ba565b5050505050565b600060405163a9059cbb60e01b81526001600160a01b0384166004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806124325760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016109ba565b50505050565b6001600160a01b038116811461104757600080fd5b801515811461104757600080fd5b6000806040838503121561246e57600080fd5b823561247981612438565b915060208301356124898161244d565b809150509250929050565b6000602082840312156124a657600080fd5b8135610aa281612438565b60006020808352835180602085015260005b818110156124df578581018301518582016040015282016124c3565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561251257600080fd5b5035919050565b6000806040838503121561252c57600080fd5b823561253781612438565b946020939093013593505050565b80356001600160e01b03198116811461255d57600080fd5b919050565b60006020828403121561257457600080fd5b610aa282612545565b803560ff8116811461255d57600080fd5b6000806000606084860312156125a357600080fd5b6125ac8461257d565b92506125ba60208501612545565b915060408401356125ca8161244d565b809150509250925092565b6000806000606084860312156125ea57600080fd5b83356125f581612438565b9250602084013561260581612438565b929592945050506040919091013590565b6000806040838503121561262957600080fd5b61247983612545565b60008060006060848603121561264757600080fd5b833561265281612438565b92506125ba6020850161257d565b6000806040838503121561267357600080fd5b82359150602083013561248981612438565b6000806040838503121561269857600080fd5b82356126a381612438565b9150602083013561248981612438565b6000806000606084860312156126c857600080fd5b8335925060208401356126da81612438565b915060408401356125ca81612438565b6000806000606084860312156126ff57600080fd5b833561270a81612438565b9250602084013561271a81612438565b915061272860408501612545565b90509250925092565b600080600080600080600060e0888a03121561274c57600080fd5b873561275781612438565b9650602088013561276781612438565b955060408801359450606088013593506127836080890161257d565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156127b257600080fd5b6127bb8361257d565b91506127c960208401612545565b90509250929050565b600080604083850312156127e557600080fd5b82356127f081612438565b91506127c96020840161257d565b60006020828403121561281057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b6d57610b6d612817565b6020808252601b908201527f4d6f636b455243343632363a206e6f7420617574686f72697a65640000000000604082015260600190565b600181811c9082168061288b57607f821691505b6020821081036128ab57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b81810381811115610b6d57610b6d612817565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561292957600080fd5b8151610aa28161244d565b60008083548160018260011c9150600183168061295257607f831692505b6020808410820361297157634e487b7160e01b86526022600452602486fd5b818015612985576001811461299a576129c7565b60ff19861689528415158502890196506129c7565b60008a81526020902060005b868110156129bf5781548b8201529085019083016129a6565b505084890196505b50949897505050505050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220f3102d08ef95848fed023e1423d80dcb08dc9602c2d6547c3248e3d9b4818e9364736f6c63430008160033608060405234801561001057600080fd5b506040516102e33803806102e383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610250806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806370a082311461003b578063a9059cbb14610061575b600080fd5b61004e61004936600461019a565b610084565b6040519081526020015b60405180910390f35b61007461006f3660046101b5565b6100f9565b6040519015158152602001610058565b600080546040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401602060405180830381865afa1580156100cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f391906101df565b92915050565b60008054604051633147aa7360e21b81523360048201526001600160a01b038581166024830152604482018590529091169063c51ea9cc906064016020604051808303816000875af1158015610153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017791906101f8565b9392505050565b80356001600160a01b038116811461019557600080fd5b919050565b6000602082840312156101ac57600080fd5b6101778261017e565b600080604083850312156101c857600080fd5b6101d18361017e565b946020939093013593505050565b6000602082840312156101f157600080fd5b5051919050565b60006020828403121561020a57600080fd5b8151801515811461017757600080fdfea2646970667358221220cb89af990cabddca89cef66f407b0ea6b8c9cbf1ccda69b7981a70c0d03f7e0e64736f6c63430008160033608060405260026001553480156200001657600080fd5b506040516200412c3803806200412c833981016040819052620000399162000708565b60006200004782826200096d565b508160e0015182610100015110806200007557508160e0015182610100015162000072919062000a39565b15155b156200009457604051630219d66360e11b815260040160405180910390fd5b610100820151600b8190556101208301511080620000c757508160e00151826101200151620000c4919062000a39565b15155b15620000e65760405163f9c0959d60e01b815260040160405180910390fd5b610120820151600c81905561014083015110806200011957508160e0015182610140015162000116919062000a39565b15155b156200013857604051633007ad0160e11b815260040160405180910390fd5b610140820151600d81905561016083015110806200016b57508160e0015182610160015162000168919062000a39565b15155b156200018a5760405163cfb699cb60e01b815260040160405180910390fd5b610160820151600e556101a08201516101808301511115620001bf5760405163ef9bc65f60e01b815260040160405180910390fd5b610180820151600f556101a08201516010556101e08201516101c08301511115620001fd576040516330554de160e01b815260040160405180910390fd5b6101c08201516011556101e082015160125561022082015161020083015111156200023b576040516383ebdfb760e01b815260040160405180910390fd5b61020082015160135561022082015160145561026082015151670de0b6b3a764000010806200027a5750670de0b6b3a764000082610260015160200151115b80620002965750670de0b6b3a764000082610260015160400151115b80620002b25750670de0b6b3a764000082610260015160600151115b15620002d15760405163161071fb60e11b815260040160405180910390fd5b610260820151805160198190556020820151601a556040820151601b55606090910151601c556102408301515111806200031c57508161026001516020015182610240015160200151115b806200033957508161026001516040015182610240015160400151115b806200035657508161026001516060015182610240015160600151115b1562000375576040516315b05a8f60e01b815260040160405180910390fd5b61024082015180516015556020808201516016556040808301516017556060928301516018558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a086015160088054841691831691909117905560c08601516009805490931691161790559083015180516200043192601d9201906200046e565b5050610280810151600580546001600160a01b0319166001600160a01b039092169190911790556102a081015160065560e00151600a5562000a5c565b828054828255906000526020600020908101928215620004c6579160200282015b82811115620004c657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200048f565b50620004d4929150620004d8565b5090565b5b80821115620004d45760008155600101620004d9565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b03811182821017156200052b576200052b620004ef565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200055c576200055c620004ef565b604052919050565b80516001600160a01b03811681146200057c57600080fd5b919050565b600082601f8301126200059357600080fd5b815160206001600160401b03821115620005b157620005b1620004ef565b8160051b620005c282820162000531565b9283528481018201928281019087851115620005dd57600080fd5b83870192505b848310156200060757620005f78362000564565b82529183019190830190620005e3565b979650505050505050565b6000608082840312156200062557600080fd5b604051608081016001600160401b03811182821017156200064a576200064a620004ef565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600082601f8301126200068d57600080fd5b81516001600160401b03811115620006a957620006a9620004ef565b6020620006bf601f8301601f1916820162000531565b8281528582848701011115620006d457600080fd5b60005b83811015620006f4578581018301518282018401528201620006d7565b506000928101909101919091529392505050565b600080604083850312156200071c57600080fd5b82516001600160401b03808211156200073457600080fd5b9084019061038082870312156200074a57600080fd5b6200075462000505565b6200075f8362000564565b81526200076f6020840162000564565b6020820152620007826040840162000564565b60408201526060830151828111156200079a57600080fd5b620007a88882860162000581565b606083015250620007bc6080840162000564565b6080820152620007cf60a0840162000564565b60a0820152620007e260c0840162000564565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240620008708882860162000612565b9082015262000884876102c0850162000612565b61026082015262000899610340840162000564565b61028082015261036092909201516102a0830152602085015191935080821115620008c357600080fd5b50620008d2858286016200067b565b9150509250929050565b600181811c90821680620008f157607f821691505b6020821081036200091257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000968576000816000526020600020601f850160051c81016020861015620009435750805b601f850160051c820191505b8181101562000964578281556001016200094f565b5050505b505050565b81516001600160401b03811115620009895762000989620004ef565b620009a1816200099a8454620008dc565b8462000918565b602080601f831160018114620009d95760008415620009c05750858301515b600019600386901b1c1916600185901b17855562000964565b600085815260208120601f198616915b8281101562000a0a57888601518255948401946001909101908401620009e9565b508582101562000a295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008262000a5757634e487b7160e01b600052601260045260246000fd5b500690565b6136c08062000a6c6000396000f3fe6080604052600436106103a65760003560e01c80638e127cf5116101e7578063d2c35ce81161010d578063e4e7148f116100a0578063ec895f111161006f578063ec895f1114610ae9578063f259645814610b09578063f8c09e5914610b29578063fe3d5aeb14610b5957600080fd5b8063e4e7148f14610a74578063e71f34b314610a94578063e83e34b114610ab4578063eb71f66c14610ac957600080fd5b8063dd2b8fbb116100dc578063dd2b8fbb14610a09578063e0e2daaa14610a29578063e1b39c8014610a3f578063e333155514610a5457600080fd5b8063d2c35ce81461099d578063d6f50169146109bd578063daac24da146109d3578063daf012e6146109f357600080fd5b8063b256126311610185578063c415b95c11610154578063c415b95c1461093b578063c905a4b51461095b578063d0f96b9214610971578063d23d7ea31461098757600080fd5b8063b2561263146108c3578063bc30e7a1146108e3578063bf9bd5cd14610903578063c17225631461091957600080fd5b806399623bb1116101c157806399623bb11461084e5780639af252621461086e578063a64c90bf1461088e578063a98a46db146108a357600080fd5b80638e127cf5146107f85780638efc09861461081857806397b0e8ce1461082e57600080fd5b80634554f9a9116102cc578063628027a31161026a57806383b361e81161023957806383b361e81461077857806384c19aab1461079857806385229785146107b85780638627a4f0146107d857600080fd5b8063628027a3146106e35780636b44e6be146107035780636e95d67c146107435780636f6d5c4a1461075857600080fd5b80634fbfee77116102a65780634fbfee771461065a57806354fd4d501461067a5780635720c9d5146106ad5780635aa6e675146106c357600080fd5b80634554f9a91461060e578063488007601461062457806349f13de71461063a57600080fd5b80631ecda0fe116103445780632e7cd971116103135780632e7cd9711461059b5780633e2d2014146105ae578063411c3035146105ce578063421caba8146105ee57600080fd5b80631ecda0fe146105025780632885e3ac146105265780632907d3dd146105465780632b58f4181461056657600080fd5b806310d1dc3e1161038057806310d1dc3e1461047557806311e77bfe146104955780631978ebcf146104b55780631b59be0c146104d557600080fd5b806304baa00b146103d557806306fdde031461042857806310780f731461043d57600080fd5b366103d0576002600154036103ce57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156103e157600080fd5b506104126040518060400160405280601181526020017048797065726472697665466163746f727960781b81525081565b60405161041f9190612cec565b60405180910390f35b34801561043457600080fd5b50610412610b79565b34801561044957600080fd5b5060085461045d906001600160a01b031681565b6040516001600160a01b03909116815260200161041f565b34801561048157600080fd5b506103ce610490366004612cff565b610c07565b3480156104a157600080fd5b506103ce6104b0366004612d11565b610d20565b3480156104c157600080fd5b506103ce6104d0366004612d11565b610df9565b3480156104e157600080fd5b506104f56104f0366004612d2a565b610e7b565b60405161041f9190612d9f565b34801561050e57600080fd5b50610518600f5481565b60405190815260200161041f565b34801561053257600080fd5b506103ce610541366004612cff565b610f56565b34801561055257600080fd5b506103ce610561366004612d11565b6110bc565b34801561057257600080fd5b5061045d610581366004612e14565b60208052600090815260409020546001600160a01b031681565b61045d6105a93660046130ee565b61113e565b3480156105ba57600080fd5b506103ce6105c9366004612e14565b611580565b3480156105da57600080fd5b506103ce6105e93660046131cf565b6115f4565b3480156105fa57600080fd5b506103ce610609366004612e14565b6117c5565b34801561061a57600080fd5b5061051860105481565b34801561063057600080fd5b5061051860145481565b34801561064657600080fd5b5061045d6106553660046131fb565b6118ce565b34801561066657600080fd5b506103ce610675366004612d11565b6119c0565b34801561068657600080fd5b5061041260405180604001604052806007815260200166076312e302e32360cc1b81525081565b3480156106b957600080fd5b50610518600b5481565b3480156106cf57600080fd5b5060025461045d906001600160a01b031681565b3480156106ef57600080fd5b506103ce6106fe366004612d11565b611a1d565b34801561070f57600080fd5b5061073361071e366004612e14565b60226020526000908152604090205460ff1681565b604051901515815260200161041f565b34801561074f57600080fd5b50602154610518565b34801561076457600080fd5b506103ce610773366004612d11565b611a9f565b34801561078457600080fd5b506103ce610793366004612d11565b611b43565b3480156107a457600080fd5b506103ce6107b3366004612d11565b611bc5565b3480156107c457600080fd5b506103ce6107d3366004612e14565b611c47565b3480156107e457600080fd5b506103ce6107f3366004612e14565b611cbb565b34801561080457600080fd5b506103ce610813366004612d11565b611d2f565b34801561082457600080fd5b50610518600e5481565b34801561083a57600080fd5b506103ce610849366004612d11565b611dd3565b34801561085a57600080fd5b5060055461045d906001600160a01b031681565b34801561087a57600080fd5b506103ce610889366004612d2a565b611e55565b34801561089a57600080fd5b506104f5611ebd565b3480156108af57600080fd5b506103ce6108be366004612e14565b611f1f565b3480156108cf57600080fd5b506103ce6108de366004612e14565b611f93565b3480156108ef57600080fd5b506104f56108fe36600461328f565b612007565b34801561090f57600080fd5b5061051860125481565b34801561092557600080fd5b5061092e612109565b60405161041f91906132b1565b34801561094757600080fd5b5060075461045d906001600160a01b031681565b34801561096757600080fd5b5061051860065481565b34801561097d57600080fd5b50610518600a5481565b34801561099357600080fd5b5061051860115481565b3480156109a957600080fd5b506103ce6109b8366004612e14565b612161565b3480156109c957600080fd5b5061051860135481565b3480156109df57600080fd5b5061045d6109ee366004612d11565b6121d5565b3480156109ff57600080fd5b50610518600d5481565b348015610a1557600080fd5b506103ce610a24366004612e14565b612205565b348015610a3557600080fd5b50610518600c5481565b348015610a4b57600080fd5b50601e54610518565b348015610a6057600080fd5b5060045461045d906001600160a01b031681565b348015610a8057600080fd5b5060035461045d906001600160a01b031681565b348015610aa057600080fd5b506103ce610aaf366004612d11565b612279565b348015610ac057600080fd5b5061092e61231d565b348015610ad557600080fd5b506103ce610ae4366004612d11565b612375565b348015610af557600080fd5b506104f5610b0436600461328f565b61240d565b348015610b1557600080fd5b5060095461045d906001600160a01b031681565b348015610b3557600080fd5b50610733610b44366004612e14565b601f6020526000908152604090205460ff1681565b348015610b6557600080fd5b5061045d610b74366004612d11565b61250f565b60008054610b86906132dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb2906132dc565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b505050505081565b6002546001600160a01b03163314610c31576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601954808252601a546020830152601b5492820192909252601c5460608201529082351180610c71575080602001518260200135115b80610c83575080604001518260400135115b80610c95575080606001518260600135115b15610cb3576040516315b05a8f60e01b815260040160405180910390fd5b81356015819055602080840135601681905560408086013560178190556060808801356018819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610d4a576040516282b42960e81b815260040160405180910390fd5b80600b54610d589190613310565b151580610d71575080600c54610d6e9190613310565b15155b80610d88575080600d54610d859190613310565b15155b80610d9f575080600e54610d9c9190613310565b15155b15610dbd576040516311b75c1560e31b815260040160405180910390fd5b600a8190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610e23576040516282b42960e81b815260040160405180910390fd5b601254811115610e4657604051631670f79760e01b815260040160405180910390fd5b60118190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610dee565b60215460609067ffffffffffffffff811115610e9957610e99612e31565b604051908082528060200260200182016040528015610ec2578160200160208202803683370190505b50905060005b82811015610f4e5760206000858584818110610ee657610ee6613332565b9050602002016020810190610efb9190612e14565b6001600160a01b0390811682526020820192909252604001600020548351911690839083908110610f2e57610f2e613332565b6001600160a01b0390921660209283029190910190910152600101610ec8565b505b92915050565b6002546001600160a01b03163314610f80576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260155481526016546020820152601754918101919091526018546060820152670de0b6b3a764000082351180610fcb5750670de0b6b3a76400008260200135115b80610fe15750670de0b6b3a76400008260400135115b80610ff75750670de0b6b3a76400008260600135115b80611003575080518235105b80611015575080602001518260200135105b80611027575080604001518260400135105b80611039575080606001518260600135105b156110575760405163161071fb60e11b815260040160405180910390fd5b81356019819055602080840135601a819055604080860135601b819055606080880135601c819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610d14565b6002546001600160a01b031633146110e6576040516282b42960e81b815260040160405180910390fd5b601054811115611109576040516328a2d9a960e01b815260040160405180910390fd5b600f8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610dee565b6001600160a01b0389166000908152601f602052604081205460ff1661117757604051636e623f0f60e01b815260040160405180910390fd5b611182888686612524565b60408051336020808301919091528183018e905282518083038401815260608301938490528051910120631d321d7560e31b9092526000916001600160a01b038d169163e990eba8916111df918e908e908e908a90606401613459565b6020604051808303816000875af11580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906134a9565b90508a60206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03168961014001906001600160a01b031690816001600160a01b0316815250508a6001600160a01b03167fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed234465828c8c8c6040516112e194939291906134c6565b60405180910390a26021805460018082019092557f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5700180546001600160a01b0319166001600160a01b03848116918217909255600090815260226020908152604091829020805460ff1916851790559280558051339381019390935282018e90528c16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b81526004016113aa959493929190613518565b60206040518083038185885af11580156113c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ed919061357b565b50600260015560005b601d5481101561149a57816001600160a01b0316637180c8ca601d838154811061142257611422613332565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050600190920191506113f69050565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea990602401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50479250508115905061157057604051600090339083908381818185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b505090508061156e576040516312171d8360e31b815260040160405180910390fd5b505b509b9a5050505050505050505050565b6002546001600160a01b031633146115aa576040516282b42960e81b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517fae062fb82c932c653cd44617343ecda1d13e375e0d6f20d969c944fbda1963d390600090a250565b6002546001600160a01b0316331480159061161a57506003546001600160a01b03163314155b15611637576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152601f602052604090205460ff1661167057604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601e828154811061168d5761168d613332565b6000918252602090912001546001600160a01b0316146116c057604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601f60205260409020805460ff19169055601e80546116f0906001906135aa565b8154811061170057611700613332565b600091825260209091200154601e80546001600160a01b03909216918390811061172c5761172c613332565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601e80548061176b5761176b6135bd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b031633148015906117eb57506003546001600160a01b03163314155b15611808576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16156118425760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020526040808220805460ff19166001908117909155601e8054918201815583527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6001600160a01b0387166000908152601f602052604081205460ff1661190757604051636e623f0f60e01b815260040160405180910390fd5b611912878686612524565b60408051336020808301919091528183018c90528251808303840181526060830193849052805191012063182a20c360e31b9092526000916001600160a01b038b169163c15106189161196f918c908c908a908a906064016135d3565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906134a9565b9a9950505050505050505050565b6002546001600160a01b031633146119ea576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6002546001600160a01b03163314611a47576040516282b42960e81b815260040160405180910390fd5b601354811015611a6a57604051630a35539d60e41b815260040160405180910390fd5b60148190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610dee565b6002546001600160a01b03163314611ac9576040516282b42960e81b815260040160405180910390fd5b600b54811080611ae45750600a54611ae19082613310565b15155b80611af05750600d5481115b15611b0e5760405163f9c0959d60e01b815260040160405180910390fd5b600c8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610dee565b6002546001600160a01b03163314611b6d576040516282b42960e81b815260040160405180910390fd5b601454811115611b9057604051635a8f655760e01b815260040160405180910390fd5b60138190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610dee565b6002546001600160a01b03163314611bef576040516282b42960e81b815260040160405180910390fd5b600f54811015611c1257604051637edc061360e11b815260040160405180910390fd5b60108190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610dee565b6002546001600160a01b03163314611c71576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6002546001600160a01b03163314611ce5576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b6002546001600160a01b03163314611d59576040516282b42960e81b815260040160405180910390fd5b600a54811080611d745750600a54611d719082613310565b15155b80611d805750600c5481115b15611d9e57604051630219d66360e11b815260040160405180910390fd5b600b8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610dee565b6002546001600160a01b03163314611dfd576040516282b42960e81b815260040160405180910390fd5b601154811015611e205760405163019cfb7b60e61b815260040160405180910390fd5b60128190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610dee565b6002546001600160a01b03163314611e7f576040516282b42960e81b815260040160405180910390fd5b611e8b601d8383612c37565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610d14929190613612565b6060601d805480602002602001604051908101604052809291908181526020018280548015611f1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ef7575b5050505050905090565b6002546001600160a01b03163314611f49576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a90600090a250565b6002546001600160a01b03163314611fbd576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90600090a250565b606081831061202957604051633b2735ab60e11b815260040160405180910390fd5b60215482111561204c5760405163e0f7becb60e01b815260040160405180910390fd5b61205683836135aa565b67ffffffffffffffff81111561206e5761206e612e31565b604051908082528060200260200182016040528015612097578160200160208202803683370190505b509050825b82811015610f4e57602181815481106120b7576120b7613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106120e9576120e9613332565b6001600160a01b039092166020928302919091019091015260010161209c565b6121346040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526015548152601654602082015260175491810191909152601854606082015290565b6002546001600160a01b0316331461218b576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000602182815481106121ea576121ea613332565b6000918252602090912001546001600160a01b031692915050565b6002546001600160a01b0316331461222f576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6002546001600160a01b031633146122a3576040516282b42960e81b815260040160405180910390fd5b600c548110806122be5750600a546122bb9082613310565b15155b806122ca5750600e5481115b156122e857604051633007ad0160e11b815260040160405180910390fd5b600d8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610dee565b6123486040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526019548152601a546020820152601b5491810191909152601c54606082015290565b6002546001600160a01b0316331461239f576040516282b42960e81b815260040160405180910390fd5b600d548110806123ba5750600a546123b79082613310565b15155b156123d85760405163cfb699cb60e01b815260040160405180910390fd5b600e8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610dee565b606081831061242f57604051633b2735ab60e11b815260040160405180910390fd5b601e548211156124525760405163e0f7becb60e01b815260040160405180910390fd5b61245c83836135aa565b67ffffffffffffffff81111561247457612474612e31565b60405190808252806020026020018201604052801561249d578160200160208202803683370190505b509050825b82811015610f4e57601e81815481106124bd576124bd613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106124ef576124ef613332565b6001600160a01b03909216602092830291909101909101526001016124a2565b6000601e82815481106121ea576121ea613332565b600b54836101000151108061253f5750600c54836101000151115b8061255b5750600a548361010001516125589190613310565b15155b1561257957604051635428734d60e01b815260040160405180910390fd5b600d548360e0015110806125925750600e548360e00151115b806125b057508261010001518360e001516125ad9190613310565b15155b156125ce5760405163253fffcf60e11b815260040160405180910390fd5b600f548360c0015110806125e757506010548360c00151115b156126055760405163ef9bc65f60e01b815260040160405180910390fd5b6019546101c08401515111806126395750601a5460e08401516101c085015160200151612637916301e1338090612895565b115b8061264e5750601b546101c084015160400151115b806126635750601c546101c084015160600151115b8061267557506015546101c084015151105b8061269e575060165460e08401516101c08501516020015161269c916301e13380906128bb565b105b806126b357506017546101c084015160400151105b806126c857506018546101c084015160600151105b156126e657604051632d8768f960e01b815260040160405180910390fd5b6011548210806126f7575060125482115b15612715576040516330554de160e01b815260040160405180910390fd5b600061273a6611c37937e0800061273485671bc16d674ec800006128d9565b906128f5565b60135490915061274a90826128f5565b82108061277d575061277a612771671bc16d674ec8000061276b86856128f5565b9061290b565b60145490612920565b82115b1561279b576040516383ebdfb760e01b815260040160405180910390fd5b60006127ab838660e00151612935565b60055460408701519192506001600160a01b0391821691161415806127d65750600654856060015114155b806127f557506007546101608601516001600160a01b03908116911614155b8061281457506008546101808601516001600160a01b03908116911614155b8061283357506009546101a08601516001600160a01b03908116911614155b8061285257506004546101408601516001600160a01b03908116911614155b80612861575061012085015115155b1561287f5760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b60008260001904841183021582026128ac57600080fd5b50910281810615159190040190565b60008260001904841183021582026128d257600080fd5b5091020490565b60006128ee83670de0b6b3a7640000846128bb565b9392505050565b600081831161290457816128ee565b5090919050565b60006128ee8383670de0b6b3a76400006128bb565b600081831161292f57826128ee565b50919050565b600080612966612957612949866064613660565b66a5bbed86c5a0009061290b565b6748cd4072281e0000906128d9565b905061297a670de0b6b3a7640000826128d9565b90506129d28161276b6129a56129a061299b89670de0b6b3a7640000613677565b6129da565b612a08565b6129cc6129a06129ba8a8a6301e133806128bb565b61299b90670de0b6b3a7640000613677565b906128d9565b949350505050565b60006001600160ff1b03821115612a045760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213612a2a5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ab69084901c6129da565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255906000526020600020908101928215612c8a579160200282015b82811115612c8a5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612c57565b50612a049291505b80821115612a045760008155600101612c92565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006128ee6020830184612ca6565b60006080828403121561292f57600080fd5b600060208284031215612d2357600080fd5b5035919050565b60008060208385031215612d3d57600080fd5b823567ffffffffffffffff80821115612d5557600080fd5b818501915085601f830112612d6957600080fd5b813581811115612d7857600080fd5b8660208260051b8501011115612d8d57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612de05783516001600160a01b031683529284019291840191600101612dbb565b50909695505050505050565b6001600160a01b0381168114612e0157600080fd5b50565b8035612e0f81612dec565b919050565b600060208284031215612e2657600080fd5b81356128ee81612dec565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715612e6b57612e6b612e31565b60405290565b600082601f830112612e8257600080fd5b813567ffffffffffffffff80821115612e9d57612e9d612e31565b604051601f8301601f19908116603f01168101908282118183101715612ec557612ec5612e31565b81604052838152866020858801011115612ede57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215612f1057600080fd5b6040516080810181811067ffffffffffffffff82111715612f3357612f33612e31565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102408284031215612f7757600080fd5b612f7f612e47565b9050612f8a82612e04565b8152612f9860208301612e04565b6020820152612fa960408301612e04565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140613006818401612e04565b90820152610160613018838201612e04565b9082015261018061302a838201612e04565b908201526101a061303c838201612e04565b908201526101c061304f84848301612efe565b9082015292915050565b60006060828403121561306b57600080fd5b6040516060810167ffffffffffffffff828210818311171561308f5761308f612e31565b81604052829350843591506130a382612dec565b90825260208401359081151582146130ba57600080fd5b81602084015260408501359150808211156130d457600080fd5b506130e185828601612e71565b6040830152505092915050565b6000806000806000806000806000806103608b8d03121561310e57600080fd5b8a35995061311e60208c01612e04565b985060408b013567ffffffffffffffff8082111561313b57600080fd5b6131478e838f01612e71565b99506131568e60608f01612f64565b98506102a08d013591508082111561316d57600080fd5b6131798e838f01612e71565b97506102c08d013596506102e08d013595506103008d013594506103208d01359150808211156131a857600080fd5b506131b58d828e01613059565b9250506103408b013590509295989b9194979a5092959850565b600080604083850312156131e257600080fd5b82356131ed81612dec565b946020939093013593505050565b600080600080600080600080610320898b03121561321857600080fd5b88359750602089013561322a81612dec565b96506132398a60408b01612f64565b955061028089013567ffffffffffffffff81111561325657600080fd5b6132628b828c01612e71565b989b979a5095986102a0810135976102c082013597506102e0820135965061030090910135945092505050565b600080604083850312156132a257600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610f50565b600181811c908216806132f057607f821691505b60208210810361292f57634e487b7160e01b600052602260045260246000fd5b60008261332d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b80516001600160a01b03168252602081015161336f60208401826001600160a01b03169052565b50604081015161338a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516133f0828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b60006102c087835280602084015261347381840188612ca6565b90506134826040840187613348565b8281036102808401526134958186612ca6565b915050826102a08301529695505050505050565b6000602082840312156134bb57600080fd5b81516128ee81612dec565b6001600160a01b03851681526102a0602082018190526000906134eb83820187612ca6565b90506134fa6040840186613348565b82810361028084015261350d8185612ca6565b979650505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e084015261356f610100840182612ca6565b98975050505050505050565b60006020828403121561358d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f5057610f50613594565b634e487b7160e01b600052603160045260246000fd5b60006102c08783526135e86020840188613348565b806102608401526135fb81840187612ca6565b61028084019590955250506102a001529392505050565b60208082528181018390526000908460408401835b8681101561365557823561363a81612dec565b6001600160a01b031682529183019190830190600101613627565b509695505050505050565b8082028115828204841417610f5057610f50613594565b80820180821115610f5057610f5061359456fea2646970667358221220be80dea5cc16b1535b83c7c3c215ffa84c788a86a6fd7a5c3e5b8bed638cb13e64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004010380380620040108339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613b9c6200047460003960008181610d890152612396015260008181610d5a0152612359015260008181610c3401528181610eb901528181610f4901528181610fd901528181611069015281816116840152818161171c015281816118e501528181611f1001528181611fe6015261213d01526000610e21015260008181610dfb0152612549015260008181610dd50152612523015260008181610daf01526124fd01526000611176015260006111500152600061112a01526000611104015260008181610e93015261256f015260008181610e470152818161130b01526128ff015260008181610e6d0152612cd101526000818161061301528181610d2b01528181611e810152818161261f0152818161264b01528181612b690152612ca201526000818161074301528181610cfc015281816112a401528181612acf0152612c030152613b9c6000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c806360246c8811610130578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104e6578063d8165743146104f9578063e44808bc1461050e578063e985e9c514610521578063fba560081461053457600080fd5b8063bd85b03914610490578063becee9c3146104a3578063c55dae63146104c3578063c69e16ad146104cb578063c6e6f592146104d357600080fd5b80639cd241af116100ff5780639cd241af14610431578063a22cb46514610444578063ab033ea914610457578063b0d9658014610468578063b88fed9f1461047d57600080fd5b806360246c88146103ef5780637180c8ca146104045780637ecebe0014610416578063950c5d031461042957600080fd5b806320fc4881116101be5780633e691db9116101825780633e691db91461038b57806346fbf68e1461039e5780634e41a1fb146103c15780634ed2d6ac146103d457806354fd4d50146103e757600080fd5b806320fc4881146102f057806321ff32a914610335578063313ce567146103565780633656eec2146103705780633a98ef391461038357600080fd5b806306fdde031161020557806306fdde031461028f5780630a4e14931461029757806314e5f07b146102b757806317fad7fc146102ca5780631c0f12b6146102dd57600080fd5b8062ad800c1461023657806301681a621461025f57806302329a291461027457806304baa00b14610287575b600080fd5b610249610244366004612f22565b610563565b6040516102569190612f8b565b60405180910390f35b61027261026d366004612fb3565b61059a565b005b610272610282366004612fde565b6105a3565b6102496105ac565b6102496105ee565b61029f610605565b6040516001600160a01b039091168152602001610256565b6102726102c536600461300a565b610645565b6102726102d83660046130e5565b610661565b6102726102eb36600461317a565b610677565b6103036102fe366004612f22565b61068a565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610256565b6103486103433660046131c2565b6106f6565b604051908152602001610256565b61035e61073c565b60405160ff9091168152602001610256565b61034861037e366004613204565b6107d7565b610348610810565b610348610399366004613234565b61082f565b6103b16103ac366004612fb3565b61083a565b6040519015158152602001610256565b6102496103cf366004612f22565b61085a565b6102726103e236600461326f565b610868565b6102496108b6565b6103f76108eb565b60405161025691906132b9565b61027261041236600461335a565b5050565b610348610424366004612fb3565b610bfa565b61029f610c26565b61027261043f366004613388565b610c66565b61027261045236600461335a565b610c77565b610272610465366004612fb3565b50565b610470610ce3565b60405161025691906133c0565b61034861048b366004612f22565b6111ab565b61034861049e366004612f22565b6111b9565b6104b66104b13660046134e6565b6111db565b6040516102569190613528565b61029f611296565b6103486112d6565b6103486104e1366004612f22565b6112f0565b6103486104f4366004612f22565b6112fe565b610501611335565b604051610256919061356c565b61027261051c36600461367d565b611441565b6103b161052f3660046136dc565b611489565b61053c6114cd565b6040805182516001600160801b039081168252602093840151169281019290925201610256565b60606105956105718361152c565b6040516020016105819190612f8b565b604051602081830303815290604052611654565b919050565b61046581611678565b610465816118e3565b60606105eb60405180604001604052806011815260200170455243343632364879706572647269766560781b8152506040516020016105819190612f8b565b90565b60606105eb6001604051602001610581919061370a565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b6106568989898989898989896119fd565b505050505050505050565b61066f868686868686611bf4565b505050505050565b6106848484848433611ca8565b50505050565b604080516060810182526000808252602082018190529181019190915261059560086000848152602001908152602001600020604051602001610581919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b03868116855290835281842090851684528252808320548151928301526107359101610581565b9392505050565b60006105eb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c391906137bb565b6040805160ff909216602083015201610581565b6000828152600a602090815260408083206001600160a01b038516845282528083205481519283015261080a9101610581565b92915050565b60006105eb61081d611e69565b60405160200161058191815260200190565b600061080a82611ef9565b600061059561084883612138565b60408051911515602083015201610581565b60606105956105718361221d565b836108728161231b565b6001600160a01b0316336001600160a01b0316146108a357604051632aab8bd360e01b815260040160405180910390fd5b6108af858585856123d8565b5050505050565b60606105eb60405180604001604052806007815260200166076312e302e32360cc1b8152506040516020016105819190612f8b565b610964604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061096e612445565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109d99190613804565b6109e39190613817565b905060008215610af55773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a1085612458565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae5919061382a565b509050610af281846125ee565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bc657610bc18486612603565b610bc9565b60005b81526003546001600160801b0316602091820152604051919250610bf391610581918491016132b9565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105959101610581565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b610c72838383336123d8565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ceb612e3b565b6105eb6040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f39919061385a565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc9919061385a565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611059919061385a565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e9919061385a565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161058191906133c0565b600061059561081d83612618565b6000818152600b60209081526040808320548151928301526105959101610581565b606060008267ffffffffffffffff8111156111f8576111f8613877565b604051908082528060200260200182016040528015611221578160200160208202803683370190505b50905060005b8381101561127a5760008585838181106112435761124361388d565b905060200201359050600081549050808484815181106112655761126561388d565b60209081029190910101525050600101611227565b5061128f816040516020016105819190613528565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b60006105eb60095460405160200161058191815260200190565b600061059561081d83612644565b600061059561081d6113307f000000000000000000000000000000000000000000000000000000000000000085613804565b612670565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105eb6002604051602001610581919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b8461144b8161231b565b6001600160a01b0316336001600160a01b03161461147c57604051632aab8bd360e01b815260040160405180910390fd5b61066f8686868686611ca8565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff909116151591810191909152909161080a9101610581565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105eb90606001610581565b606060f882901c6001600160f81b0383166000611548826126b4565b9050600083600381111561155e5761155e6137d8565b03611590576040518060400160405280600d81526020016c048797065726472697665204c5609c1b815250935061164c565b60018360038111156115a4576115a46137d8565b036115d057806040516020016115ba91906138a3565b604051602081830303815290604052935061164c565b60028360038111156115e4576115e46137d8565b036115fa57806040516020016115ba91906138dc565b600383600381111561160e5761160e6137d8565b0361164c576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b815260040161166f9190612f8b565b60405180910390fd5b611680612769565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611704919061385a565b9050336001600160a01b038216148015906117b257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c919061385a565b6001600160a01b0316336001600160a01b031614155b80156117c457506117c233612138565b155b156117e1576040516282b42960e81b815260040160405180910390fd5b60006117eb611e69565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118599190613916565b905061186f6001600160a01b0385168483612793565b81611878611e69565b14611896576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104656001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611941573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611965919061385a565b6001600160a01b0316336001600160a01b03161415801561198c575061198a33612138565b155b156119a9576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119f290831515815260200190565b60405180910390a150565b83421115611a1e5760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a455760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b33573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b7157604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c1157506001600160a01b038516155b15611c2f5760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c4f5760405163174861a760e31b815260040160405180910390fd5b60005b83811015611c9f57611c97858583818110611c6f57611c6f61388d565b905060200201358888868686818110611c8a57611c8a61388d565b9050602002013533611ca8565b600101611c52565b50505050505050565b6001600160a01b0384161580611cc557506001600160a01b038316155b15611ce35760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611da7576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611da7576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611da5576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611d9f908490613817565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611dd9908490613817565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e10908490613804565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef49190613916565b905090565b6000611f03612769565b611f0c826127e5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f90919061385a565b90506001600160a01b038116611fa96020850185612fb3565b6001600160a01b031614611fd057604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061207c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612042573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612066919061385a565b6001600160a01b0316336001600160a01b031614155b801561208e575061208c33612138565b155b156120ab576040516282b42960e81b815260040160405180910390fd5b60006120b5612445565b6009805460009091559091506120cc81838761281b565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461210b60408a0160208b01612fde565b60408051938452602084019290925215159082015260600160405180910390a25050506105956001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612199573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121c1919081019061392f565b905060005b815181101561221357836001600160a01b03168282815181106121eb576121eb61388d565b60200260200101516001600160a01b03160361220b575060019392505050565b6001016121c6565b5060009392505050565b606060f882901c6001600160f81b0383166000612239826126b4565b9050600083600381111561224f5761224f6137d8565b03612281576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b815250935061164c565b6001836003811115612295576122956137d8565b036122ab57806040516020016115ba91906139f4565b60028360038111156122bf576122bf6137d8565b036122d557806040516020016115ba9190613a2c565b60038360038111156122e9576122e96137d8565b0361164c57505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611ef4670de0b6b3a7640000612618565b6124bc6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125b491166128b4565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125e6929004166128b4565b905292915050565b60006107358383670de0b6b3a764000061292a565b600061073583670de0b6b3a76400008461292a565b600061080a7f000000000000000000000000000000000000000000000000000000000000000083612948565b600061080a7f0000000000000000000000000000000000000000000000000000000000000000836129b5565b6000612698600b60006126846002866129e5565b815260200190815260200160002054612a1a565b6126aa600b60006126846001876129e5565b61080a9190613a58565b60408051604e80825260808201909252606091906000908260208201818036833701905050905060005b841561275b576126ef600a86613a8e565b6126fa906030613804565b60f81b82600161270a8487613817565b6127149190613817565b815181106127245761272461388d565b60200101906001600160f81b031916908160001a9053508061274581613aa2565b91506127549050600a86613abb565b94506126de565b918290030190815292915050565b60026000540361278c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c72908490612a48565b60006127f46020830183612fb3565b6001600160a01b0316036104655760405163f0dd15fd60e01b815260040160405180910390fd5b60008061282885856125ee565b905061283381612644565b945084600003612847576000915050610735565b84915061285a6040840160208501612fde565b1561288957612882856128706020860186612fb3565b61287d6040870187613acf565b612aab565b91506128ac565b6128ac8561289a6020860186612fb3565b6128a76040870187613acf565b612c95565b509392505050565b600080670de0b6b3a76400006128c8612cc9565b6128d29190613b16565b90508083116128e25760006128ec565b6128ec8184613817565b9150610735612923670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b16565b8390612603565b600082600019048411830215820261294157600080fd5b5091020490565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a906024015b602060405180830381865afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190613916565b6040516363737ac960e11b8152600481018290526000906001600160a01b0384169063c6e6f59290602401612974565b60006001600160f81b03821115612a0f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60006001600160ff1b03821115612a445760405163396ea70160e11b815260040160405180910390fd5b5090565b6000612a5d6001600160a01b03841683612cf5565b90508051600014158015612a82575080806020019051810190612a809190613b2d565b155b15610c7257604051635274afe760e01b81526001600160a01b038416600482015260240161166f565b6040516370a0823160e01b81526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3a9190613916565b604051635d043b2960e11b8152600481018890526001600160a01b0387811660248301523060448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063ba087652906064016020604051808303816000875af1158015612bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd89190613916565b9150612be48282613804565b6040516370a0823160e01b81526001600160a01b0387811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6e9190613916565b14612c8c5760405163350b944160e11b815260040160405180910390fd5b50949350505050565b6106846001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612793565b6000611ef4427f0000000000000000000000000000000000000000000000000000000000000000612d03565b606061073583836000612d19565b6000612d0f8284613a8e565b6107359084613817565b606081471015612d3e5760405163cd78605960e01b815230600482015260240161166f565b600080856001600160a01b03168486604051612d5a9190613b4a565b60006040518083038185875af1925050503d8060008114612d97576040519150601f19603f3d011682016040523d82523d6000602084013e612d9c565b606091505b5091509150612dac868383612db6565b9695505050505050565b606082612dcb57612dc682612e12565b610735565b8151158015612de257506001600160a01b0384163b155b15612e0b57604051639996b31560e01b81526001600160a01b038516600482015260240161166f565b5080610735565b805115612e225780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001612f1d6040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b600060208284031215612f3457600080fd5b5035919050565b60005b83811015612f56578181015183820152602001612f3e565b50506000910152565b60008151808452612f77816020860160208601612f3b565b601f01601f19169290920160200192915050565b6020815260006107356020830184612f5f565b6001600160a01b038116811461046557600080fd5b600060208284031215612fc557600080fd5b813561073581612f9e565b801515811461046557600080fd5b600060208284031215612ff057600080fd5b813561073581612fd0565b60ff8116811461046557600080fd5b60008060008060008060008060006101208a8c03121561302957600080fd5b8935985060208a0135975060408a013561304281612f9e565b965060608a013561305281612f9e565b955060808a013561306281612fd0565b945060a08a0135935060c08a013561307981612ffb565b8093505060e08a013591506101008a013590509295985092959850929598565b60008083601f8401126130ab57600080fd5b50813567ffffffffffffffff8111156130c357600080fd5b6020830191508360208260051b85010111156130de57600080fd5b9250929050565b600080600080600080608087890312156130fe57600080fd5b863561310981612f9e565b9550602087013561311981612f9e565b9450604087013567ffffffffffffffff8082111561313657600080fd5b6131428a838b01613099565b9096509450606089013591508082111561315b57600080fd5b5061316889828a01613099565b979a9699509497509295939492505050565b6000806000806080858703121561319057600080fd5b8435935060208501356131a281612f9e565b925060408501356131b281612f9e565b9396929550929360600135925050565b6000806000606084860312156131d757600080fd5b8335925060208401356131e981612f9e565b915060408401356131f981612f9e565b809150509250925092565b6000806040838503121561321757600080fd5b82359150602083013561322981612f9e565b809150509250929050565b60006020828403121561324657600080fd5b813567ffffffffffffffff81111561325d57600080fd5b82016060818503121561073557600080fd5b6000806000806080858703121561328557600080fd5b84359350602085013561329781612f9e565b92506040850135915060608501356132ae81612f9e565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b6000806040838503121561336d57600080fd5b823561337881612f9e565b9150602083013561322981612fd0565b60008060006060848603121561339d57600080fd5b8335925060208401356133af81612f9e565b929592945050506040919091013590565b81516001600160a01b03168152610260810160208301516133ec60208401826001600160a01b03169052565b50604083015161340760408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151613479828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b600080602083850312156134f957600080fd5b823567ffffffffffffffff81111561351057600080fd5b61351c85828601613099565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561356057835183529284019291840191600101613544565b50909695505050505050565b81516001600160801b031681526101808101602083015161359860208401826001600160801b03169052565b5060408301516135b360408401826001600160801b03169052565b5060608301516135ce60608401826001600160801b03169052565b5060808301516135e36080840182600f0b9052565b5060a08301516135fe60a08401826001600160801b03169052565b5060c083015161361960c08401826001600160801b03169052565b5060e083015161363460e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b038116828501526134de565b600080600080600060a0868803121561369557600080fd5b8535945060208601356136a781612f9e565b935060408601356136b781612f9e565b92506060860135915060808601356136ce81612f9e565b809150509295509295909350565b600080604083850312156136ef57600080fd5b82356136fa81612f9e565b9150602083013561322981612f9e565b60006020808352600084548160018260011c9150600183168061372e57607f831692505b60208310810361374c57634e487b7160e01b85526022600452602485fd5b602088018390526040880181801561376b5760018114613781576137ac565b60ff198616825284151560051b820196506137ac565b60008b81526020902060005b868110156137a65781548482015290850190890161378d565b83019750505b50949998505050505050505050565b6000602082840312156137cd57600080fd5b815161073581612ffb565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561080a5761080a6137ee565b8181038181111561080a5761080a6137ee565b6000806040838503121561383d57600080fd5b82519150602083015161322981612fd0565b805161059581612f9e565b60006020828403121561386c57600080fd5b815161073581612f9e565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b700243cb832b9323934bb32902637b7339d1607d1b8152600082516138cf816011850160208701612f3b565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b815260008251613909816012850160208701612f3b565b9190910160120192915050565b60006020828403121561392857600080fd5b5051919050565b6000602080838503121561394257600080fd5b825167ffffffffffffffff8082111561395a57600080fd5b818501915085601f83011261396e57600080fd5b81518181111561398057613980613877565b8060051b604051601f19603f830116810181811085821117156139a5576139a5613877565b6040529182528482019250838101850191888311156139c357600080fd5b938501935b828510156139e8576139d98561384f565b845293850193928501926139c8565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b815260008251613a1f816010850160208701612f3b565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b8152600082516138cf816011850160208701612f3b565b818103600083128015838313168383128216171561128f5761128f6137ee565b634e487b7160e01b600052601260045260246000fd5b600082613a9d57613a9d613a78565b500690565b600060018201613ab457613ab46137ee565b5060010190565b600082613aca57613aca613a78565b500490565b6000808335601e19843603018112613ae657600080fd5b83018035915067ffffffffffffffff821115613b0157600080fd5b6020019150368190038213156130de57600080fd5b808202811582820484141761080a5761080a6137ee565b600060208284031215613b3f57600080fd5b815161073581612fd0565b60008251613b5c818460208701612f3b565b919091019291505056fea2646970667358221220a81b39a4619e0d7e29b50d876016a5c52bab3ee67ad20d7c16f5d4b24a925c6d64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004235380380620042358339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613d8c620004a960003960005050600050506000610b650152600050506000818160af015281816103250152612df10152600081816113eb015281816117fc0152818161185f015281816129cf01528181612a0b01528181612c0a0152612dcb01526000818161071301528181610de801528181610e2f01528181610ff401528181611661015281816116af0152612da501526000611b50015260008181611c76015281816122d901526123520152600081816108d701528181610f8c01528181611c4a0152612326015260008181610e81015261229f01526000818161073401528181610dc601528181610e50015281816110150152818161163f015281816116d00152612e1701526000818161080f01528181610f0b015281816117580152818161217401526133d20152600081816105d20152818161064d015281816106c30152818161078f01526107c70152600081816119dd015281816125b40152818161269701526127d00152600081816125fd01526127310152613d8c6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806329b23fc11461003b578063ded0623114610060575b600080fd5b61004e6100493660046137e0565b610073565b60405190815260200160405180910390f35b61004e61006e3660046137e0565b61008c565b60006100818585858561009a565b90505b949350505050565b600061008185858585610310565b60006100a461054f565b6100ad82610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156100ee5760405163211ddda360e11b815260040160405180910390fd5b60006100f86105b2565b90508542101561011d5761011761010d6105ca565b82600460016105f6565b5061012d565b61012b8682600460016105f6565b505b61014261013b600288610c73565b3387610ca8565b6000806000806000806101568b888e610d81565b95509550955095509550955060008c90508c4210156102165782600960008282546101819190613855565b9091555061019990506101926105ca565b4284611075565b6101a68c888787856111b3565b60006101b18e61132d565b90506101cf6101bf8e611377565b6101c99083613868565b826113a5565b6101d8896113e4565b6101e4576101e4611444565b60006101ef8a61145d565b90508061020f57604051638bdf918d60e01b815260040160405180910390fd5b505061022d565b610220868961146a565b955061022b8861145d565b505b600061023a878a8d61154b565b90508b81101561025d5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61026d600288610c73565b61027a602083018361389d565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102b86040890160208a016138c8565b6102cc8a6102c68d8f613855565b906115e5565b8d6102da60408c018c6138e5565b6040516102ee989796959493929190613955565b60405180910390a450939c505050505050505050505050506100846001600055565b600061031a61054f565b61032382610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156103645760405163211ddda360e11b815260040160405180910390fd5b600061036e6105b2565b9050854210156103895761038361010d6105ca565b50610399565b6103978682600460016105f6565b505b6103a761013b600188610c73565b6000806000806000806103bb8b888e6115fa565b95509550955095509550955060008c90508c42101561046e5782600960008282546103e69190613855565b909155506103f790506101926105ca565b6104048c888787856117e5565b600061040f8261132d565b905061042761041d8e611377565b6101c9908361399d565b610430896113e4565b61043c5761043c611444565b60006104478a61145d565b90508061046757604051638bdf918d60e01b815260040160405180910390fd5b5050610485565b610478868961146a565b95506104838861145d565b505b6000610492878a8d61154b565b90508b8110156104b55760405163c972651760e01b815260040160405180910390fd5b8c898c6104c3600186610c73565b6104d0602083018361389d565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee526788888761050e6040890160208a016138c8565b8a61051c60408b018b6138e5565b60405161052f97969594939291906139c5565b60405180910390a450919a50505050505050505050506100846001600055565b60026000540361057257604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000610588602083018361389d565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b60006105c5670de0b6b3a76400006119d6565b905090565b60006105c5427f0000000000000000000000000000000000000000000000000000000000000000611a02565b600084815260086020526040812060018101546001600160801b031615158061061e57504286115b1561063757600101546001600160801b03169050610084565b60008060006106446105ca565b905060006106727f00000000000000000000000000000000000000000000000000000000000000008b613855565b90505b818110156106e8576000818152600860205260409020600101546001600160801b031680156106c0576000828152600860205260409020549094506001600160801b031692506106e8565b507f000000000000000000000000000000000000000000000000000000000000000001610675565b8360000361075b578893506107586106fe611a18565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a39565b92505b5061076583611a50565b6001850180546001600160801b0319166001600160801b03929092169190911790556107bb6107b47f00000000000000000000000000000000000000000000000000000000000000008b613a06565b8a84611075565b6107f9896107f36107ec7f000000000000000000000000000000000000000000000000000000000000000083613855565b4290611a7a565b84611075565b61080288611a8f565b50600090506008816108347f00000000000000000000000000000000000000000000000000000000000000008d613a06565b815260208101919091526040016000908120600101546001600160801b0316915061086060028c610c73565b6000818152600b60205260408120549192508c8c83156109a6576001925060008061088f86898d866000611c33565b9150915080600960008282546108a59190613855565b909155506108c19050866000846108bb81611377565b886111b3565b6108cb8183613855565b91506108fb86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611d02565b915061090f61090a83856115e5565b611d4c565b600680546002906109309084906201000090046001600160701b0316613a19565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061095d82611a50565b6006805460109061097f908490600160801b90046001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b60006109b3600184610c73565b6000818152600b60205260409020549091508015610ac257600194506000806109e0838b8f886001611c33565b9150915080600960008282546109f69190613855565b90915550610a12905083600084610a0c81611377565b8a6117e5565b610a1c8183613a06565b9150610a2b61090a83876115e5565b60068054600290610a4c9084906201000090046001600160701b0316613a19565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7982611a50565b60068054601090610a9b908490600160801b90046001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610afc57610aee610ad487611377565b610add83611377565b610ae79190613868565b60006113a5565b8e610af98482611d76565b50505b6000610b0784611f70565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190613a59565b90506001600160a01b03811615610c5a57610c575a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906120bc565b50505b509b9d5050505050505050505050505050949350505050565b60006001600160f81b03821115610c9d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610ceb57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610d2e908490613a06565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600080600080600080600080610d95611a18565b90506000610da28a612147565b6002549091508c908c90610e0c908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f0000000000000000000000000000000000000000000000000000000000000000612198565b600254919d509a50909550610e74908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a39565b9550610eaa858c610ea5897f0000000000000000000000000000000000000000000000000000000000000000612208565b612238565b15610eb757610eb7611444565b6000806000610ec885878b8761227a565b9c5091945092509050610edb8184613a06565b610ee59089613855565b9750610ef18284613855565b610efb908d613855565b9b505050505050506000600860007f00000000000000000000000000000000000000000000000000000000000000008c610f359190613a06565b815260208101919091526040016000908120600101546001600160801b03169150428b11610f7d5760008b8152600860205260409020600101546001600160801b0316610f7f565b8b5b90508b610fb08e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611d02565b9950610fbc878a613a06565b9850670de0b6b3a7640000611039610fd48787613855565b600254610ff2908f90600160801b90046001600160801b0316613a06565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a39565b111561104757611047611444565b6110578a8a878a8787600061238e565b939d50919b5090995090975050505050505093975093979195509350565b600083815260086020526040902054600160801b90046001600160801b03168083036110a15750505050565b6000848152600860205260408120546001600160801b0316908190036110fb576110ca83611a50565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611179565b61114c611147670de0b6b3a76400006111148886613a06565b61111e9190613a76565b85670de0b6b3a7640000611132878a613a06565b61113c9190613a76565b85929190600161242d565b611a50565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61118284611a50565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111fc611147826111df670de0b6b3a764000086613a76565b600554600160801b90046001600160801b031691908a600061242d565b600580546001600160801b03928316600160801b02921691909117905561122286611a50565b61122c9082613a8d565b600480546001600160801b03928316600160801b02921691909117905561125284611a50565b6002805460009061126d9084906001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061129a836124d7565b600480546000906112af908490600f0b613aad565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506112df85611a50565b60028054601090611301908490600160801b90046001600160801b0316613a8d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000611355600b6000611341600286610c73565b815260200190815260200160002054611377565b611367600b6000611341600187610c73565b6113719190613868565b92915050565b60006001600160ff1b038211156113a15760405163396ea70160e11b815260040160405180910390fd5b5090565b6003546113c090611147906001600160801b03168484612513565b600380546001600160801b0319166001600160801b03929092169190911790555050565b60006114107f00000000000000000000000000000000000000000000000000000000000000008361257a565b60035461142691906001600160801b0316613855565b60025461143c906001600160801b0316846115e5565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000611371826004611d76565b600080600061147884611a8f565b9092509050600061148986866115e5565b9050818311156114a15761149e86838561258f565b95505b828110156114b35780830392506114b8565b600092505b6114c183611d4c565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b909104168087101561151457869003611518565b5060005b61152181611a50565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b60008061155885856115e5565b9050611563816125ad565b9450846000036115775760009150506115de565b84915061158a60408401602085016138c8565b156115b9576115b2856115a0602086018661389d565b6115ad60408701876138e5565b6125d9565b91506115dc565b6115dc856115ca602086018661389d565b6115d760408701876138e5565b6127c3565b505b9392505050565b60006115de8383670de0b6b3a764000061258f565b60008060008060008060008061160e611a18565b9050600061161b8a612147565b6002549091508b908d90611685908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f00000000000000000000000000000000000000000000000000000000000000006127fd565b600254919d509b50909550600090819081906116f4908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a39565b985061170284878b8861227a565b9c5091945090925090506117168284613a06565b6117209089613a06565b975061172c8184613855565b611736908e613a06565b9c506117428a8e613855565b9b50505050505050506117cf86868386600860007f00000000000000000000000000000000000000000000000000000000000000008f6117829190613a06565b81526020810191909152604001600020600101546001600160801b0316428e116117c65760008e8152600860205260409020600101546001600160801b03166117c8565b8e5b600161238e565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b03168381108061182757507f00000000000000000000000000000000000000000000000000000000000000006118258583613a06565b105b1561183457611834611444565b6004549084900390600f0b6118498482613868565b90508361185586611377565b13801561188a57507f00000000000000000000000000000000000000000000000000000000000000006118888383612851565b105b1561189757611897611444565b600354600160801b90046001600160801b03166118d9611147826118c3670de0b6b3a764000088613a76565b6005546001600160801b031691908c600061242d565b600580546001600160801b0319166001600160801b03929092169190911790556119038882613a06565b905061190e81611a50565b600380546001600160801b03928316600160801b02921691909117905561193483611a50565b600280546001600160801b0319166001600160801b039290921691909117905561195d826124d7565b600480546001600160801b0319166001600160801b039290921691909117905561198687611a50565b600280546010906119a8908490600160801b90046001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60006113717f000000000000000000000000000000000000000000000000000000000000000083612877565b6000611a0e8284613af0565b6115de9084613a06565b6002546004546000916105c5916001600160801b0390911690600f0b612851565b600061008182611a4a85888861258f565b906128e4565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611a8957826115de565b50919050565b6006546000908190611ab2908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611c2e576000611adc8383613a06565b9050611aeb6111478286612959565b60068054601090611b0d908490600160801b90046001600160801b0316613a8d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611b46858361296e90919063ffffffff16565b90506000611b74827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611b889190613855565b90915550611b9890508183613a06565b9150611ba382611a50565b60028054600090611bbe9084906001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611beb82612983565b60048054600090611c00908490600f0b613aad565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611c40878561296e565b91506000611c6e837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611c9a817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611cbd57611cac8282613a06565b611cb69084613a06565b9250611cd4565b611cc78282613a06565b611cd19084613855565b92505b86861015611cf757611ce783878961258f565b9250611cf482878961258f565b91505b509550959350505050565b600080611d1a84611d148a888a61258f565b9061296e565b9050611d2788848661258f565b611d319082613855565b905086811115611d415786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611dc1916001600160801b031690613a06565b905080600003611dd5576001915050611371565b6000611de0856129ad565b905080600003611df557600192505050611371565b600080611e03838589612a49565b9150915080611e19576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e55929190613b82565b6040805180830381865af4158015611e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e959190613bf8565b91509150611eb3611ea582611377565b611eae90613c1c565b612bc4565b925082611ec95760009650505050505050611371565b611ed282611a50565b60078054600090611eed9084906001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f1a81611a50565b60078054601090611f3c908490600160801b90046001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611f9987612d5c565b6040518263ffffffff1660e01b8152600401611fb59190613c38565b6040805180830381865af4158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff59190613c47565b915091508061200b575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161207191613855565b61207b9190613a06565b90508060000361209357506000958695509350505050565b60008087116120a35760006120ae565b6120ae84888461258f565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156120e2576120e2613c77565b6040519080825280601f01601f19166020018201604052801561210c576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561212d578692505b828152826000602083013e90999098509650505050505050565b6000806121526105ca565b905080831161216257600061216c565b61216c8184613a06565b91506115de827f000000000000000000000000000000000000000000000000000000000000000061296e565b600080806121b96121b188670de0b6b3a7640000613a06565b899087612e96565b905086156121fb576121cb888861257a565b91506121ec8a8a846121e58a670de0b6b3a7640000613a06565b8989612ebc565b92506121f88382613855565b90505b9750975097945050505050565b600061222661221f84670de0b6b3a7640000613a06565b839061257a565b6115de90670de0b6b3a7640000613a06565b60008061226f85612247611a18565b6122519190613855565b600254610ff2908790600160801b90046001600160801b0316613a06565b909210949350505050565b60008080806122d187866122ca8b6122c461229d8c670de0b6b3a7640000613a06565b7f00000000000000000000000000000000000000000000000000000000000000009061257a565b9061257a565b9190612e96565b93506122fd847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061231e61231689670de0b6b3a7640000613a06565b8a9088612e96565b905061234a817f000000000000000000000000000000000000000000000000000000000000000061257a565b9350612376847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123809084613855565b915050945094509450949050565b600080600080600080888810156123fd5786156123b3576123b08d898b61258f565b9c505b6123be8c898b61258f565b9b506123c98b611377565b6123d28d611377565b6123dc9190613868565b90506123e98b898b61258f565b9a506123f68a898b61258f565b995061241c565b6124068b611377565b61240f8d611377565b6124199190613868565b90505b9b9c9a9b999a975050505050505050565b60008260000361243e5750846124ce565b81156124915761246f6124518487613855565b61245b85876115e5565b612465888a6115e5565b611d149190613855565b9050600061247d8588611a7a565b90508082101561248b578091505b506124ce565b8285036124a0575060006124ce565b6124cb6124ad8487613a06565b6124b7858761257a565b6124c1888a6115e5565b611d149190613a06565b90505b95945050505050565b600060016001607f1b03198212806124f5575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b600080612521846000612edf565b61252c846000612edf565b6125369190613868565b905060008113156125525761254b8186613855565b9450612571565b60008112156125715761256481613c1c565b61256e9086613a06565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612e96565b60008260001904841183021582026125a657600080fd5b5091020490565b60006113717f000000000000000000000000000000000000000000000000000000000000000083612ef5565b6040516370a0823160e01b81526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126689190613c8d565b604051635d043b2960e11b8152600481018890526001600160a01b0387811660248301523060448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063ba087652906064016020604051808303816000875af11580156126e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127069190613c8d565b91506127128282613855565b6040516370a0823160e01b81526001600160a01b0387811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279c9190613c8d565b146127ba5760405163350b944160e11b815260040160405180910390fd5b50949350505050565b6127f76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612f25565b50505050565b6000808061281e61281688670de0b6b3a7640000613a06565b89908761258f565b905086156121fb5761283088886115e5565b91506121ec8a8a8461284a8a670de0b6b3a7640000613a06565b8989612f7c565b60008061285e8484612f8d565b90925090508061287057612870611444565b5092915050565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a906024015b602060405180830381865afa1580156128c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190613c8d565b6000816000036128fd5750670de0b6b3a7640000611371565b8260000361290d57506000611371565b600061291883611377565b9050600061292d61292886611377565b612fcc565b9050818102612944670de0b6b3a764000082613ca6565b905061294f816131f2565b9695505050505050565b60006115de83670de0b6b3a764000084612e96565b60006115de83670de0b6b3a76400008461258f565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b60035460009081906129c8906001600160801b031684612959565b90506129f47f000000000000000000000000000000000000000000000000000000000000000082613855565b6002546001600160801b03161115611a89576002547f000000000000000000000000000000000000000000000000000000000000000090612a3f9083906001600160801b0316613a06565b6115de9190613a06565b612a5161372d565b600080612a5d84612d5c565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612a989190613c38565b6040805180830381865af4158015612ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad89190613c47565b9350905082612aed575060009150612bbc9050565b6000612b14612b0f8461016001518561014001516115e590919063ffffffff16565b611377565b612b34612b0f85610120015186610100015161257a90919063ffffffff16565b612b3e9190613868565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161208e929190613cf1565b6040805180830381865af41580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce9190613d67565b915091506120ec6120de82611b67565b6120e790613d8b565b612c9e565b92508261210257600096505050505050506106ba565b61210b826118b1565b600780546000906121269084906001600160801b0316613b47565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612153816118b1565b60078054601090612175908490600160801b90046001600160801b0316613b47565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6121d287612e36565b6040518263ffffffff1660e01b81526004016121ee9190613da7565b6040805180830381865af415801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190613db6565b9150915080612244575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916122aa916139ab565b6122b49190613acc565b9050806000036122cc57506000958695509350505050565b60008087116122dc5760006122e7565b6122e784888461183c565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561231b5761231b613de6565b6040519080825280601f01601f191660200182016040528015612345576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612366578692505b828152826000602083013e90999098509650505050505050565b60006123a187878761239a88670de0b6b3a7640000613acc565b8787612f70565b979650505050505050565b60006115086123ed6123c684670de0b6b3a7640000613acc565b611488670de0b6b3a76400006123dc818a61149f565b6123e69190613acc565b8790612632565b6123ff90670de0b6b3a76400006139ab565b611d1d84670de0b6b3a7640000613acc565b60008061244885612420611870565b61242a91906139ab565b600254610ef2908790600160801b90046001600160801b0316613acc565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061247f898789612f93565b909250905061248e8289613acc565b9750600061249d82888a61183c565b90506124a9818b613acc565b9a989950979650505050505050565b6000826000036124c95750846118a8565b811561251c576124fa6124dc84876139ab565b6124e685876106a2565b6124f0888a6106a2565b611d1d91906139ab565b9050600061250885886118df565b905080821015612516578091505b506118a8565b82850361252b575060006118a8565b6125566125388487613acc565b6125428587612632565b61254c888a6106a2565b611d1d9190613acc565b9695505050505050565b6000612588600b6000612574600286611229565b815260200190815260200160002054611b67565b61259a600b6000612574600187611229565b6106ba9190613b67565b60006125d07f000000000000000000000000000000000000000000000000000000000000000083612632565b6003546125e691906001600160801b03166139ab565b6002546125fc906001600160801b0316846106a2565b101592915050565b60006106ba826004611faf565b60006123a187878761262b88670de0b6b3a7640000613acc565b8787613013565b60006106b78383670de0b6b3a764000061278c565b600080808061269887866126918b61148861266a8c670de0b6b3a7640000613acc565b7f000000000000000000000000000000000000000000000000000000000000000090612632565b919061278c565b93506126c4847f00000000000000000000000000000000000000000000000000000000000000006106a2565b915060006126e56126dd89670de0b6b3a7640000613acc565b8a908861278c565b9050612711817f0000000000000000000000000000000000000000000000000000000000000000612632565b935061273d847f00000000000000000000000000000000000000000000000000000000000000006106a2565b61274790846139ab565b915050945094509450949050565b600081831161276457816106b7565b5090919050565b6000806127838461277d8a888a61278c565b9061149f565b9050611d308884865b60008260001904841183021582026127a357600080fd5b50910281810615159190040190565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a90602401602060405180830381865afa1580156127fa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190613c03565b60006106b783670de0b6b3a76400008461183c565b6000806128408484613024565b90925090508061285257612852612453565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526128c09186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613060565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261291784826130c8565b6128c0576040516001600160a01b0384811660248301526000604483015261294c91869182169063095ea7b39060640161288e565b6128c08482613060565b60008160000361296f5750670de0b6b3a76400006106ba565b8260000361297f575060006106ba565b600061298a83611b67565b9050600061299f61299a86611b67565b61316b565b90508181026129b6670de0b6b3a764000082613dfc565b905061255681613391565b600060016001607f1b038211156118db5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612a09575060016001607f1b0382135b156118db5760405163a5353be560e01b815260040160405180910390fd5b600080612a35846000613526565b612a40846000613526565b612a4a9190613b67565b90506000811315612a6657612a5f81866139ab565b9450612a85565b6000811215612a8557612a7881613d8b565b612a829086613acc565b94505b50929392505050565b6003546000908190612aa9906001600160801b03168461149f565b9050612ad57f0000000000000000000000000000000000000000000000000000000000000000826139ab565b6002546001600160801b031611156118ee576002547f000000000000000000000000000000000000000000000000000000000000000090612b209083906001600160801b0316613acc565b61150b9190613acc565b612b32613883565b600080612b3e84612e36565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612b799190613da7565b6040805180830381865af4158015612b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb99190613db6565b9350905082612bce5750600091506117fa9050565b6000612bf5612bf08461016001518561014001516106a290919063ffffffff16565b611b67565b612c15612bf085610120015186610100015161263290919063ffffffff16565b612c1f9190613b67565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7b9190613e2a565b935093509350935080612d975750600098975050505050505050565b868414612dc857612da7846118b1565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612df957612dd8836129eb565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612e2757612e09826118b1565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612e3e6138d5565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612f369116613535565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612f6892900416613535565b905292915050565b600080612f818888888888886135ab565b909250905080611d4a57611d4a612453565b600080612fdd8561148885817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612fd3818c61149f565b6114889190613acc565b9150613009827f00000000000000000000000000000000000000000000000000000000000000006106a2565b9050935093915050565b600080612f81888888888888613673565b60008060008361303386611b67565b61303d9190613b67565b9050600081121561305557600080925092505061069b565b946001945092505050565b60006130756001600160a01b03841683613733565b9050805160001415801561309a5750808060200190518101906130989190613e60565b155b1561183757604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516130e59190613e7d565b6000604051808303816000865af19150503d8060008114613122576040519150601f19603f3d011682016040523d82523d6000602084013e613127565b606091505b50915091508180156131515750805115806131515750808060200190518101906131519190613e60565b80156118a85750505050506001600160a01b03163b151590565b600080821361318d5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132109084901c611b67565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133ac57506000919050565b680755bf798b4a1bf1e582126133d5576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061255674029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611b67565b600081831361276457816106b7565b600080670de0b6b3a76400006135496106c0565b6135539190613ba4565b905080831161356357600061356d565b61356d8184613acc565b915061150b6135a4670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613ba4565b839061281e565b60008060006135bd8989888888613741565b90506135d7866118a26135d08a8d6139ab565b87906106a2565b98506135e4858a8661183c565b9850888110156135fb576000809250925050613668565b888103670de0b6b3a7640000811061363057613629613622670de0b6b3a76400008961149f565b8290612956565b9050613648565b613645613622670de0b6b3a76400008961281e565b90505b8089101561365e57600080935093505050613668565b8803925060019150505b965096945050505050565b60008060006136858989888888613741565b9050613695866118a2898b6139ab565b9750878110156136ac576000809250925050613668565b8781036136ba81868861278c565b9050670de0b6b3a764000081106136e7576136e0613622670de0b6b3a76400008961149f565b90506136ff565b6136fc613622670de0b6b3a76400008961281e565b90505b613709818661149f565b9050808a101561372157600080935093505050613668565b90980398600198509650505050505050565b60606106b783836000613770565b600061374d8585612956565b61376661375e866118a2868b612632565b85908561278c565b61255691906139ab565b6060814710156137955760405163cd78605960e01b81523060048201526024016130bf565b600080856001600160a01b031684866040516137b19190613e7d565b60006040518083038185875af1925050503d80600081146137ee576040519150601f19603f3d011682016040523d82523d6000602084013e6137f3565b606091505b50915091506125568683836060826138135761380e8261385a565b61150b565b815115801561382a57506001600160a01b0384163b155b1561385357604051639996b31560e01b81526001600160a01b03851660048201526024016130bf565b508061150b565b80511561386a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806138976138d5565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561394c57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561397857600080fd5b85016060818803121561398a57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106ba576106ba613995565b6001600160a01b03811681146105ca57600080fd5b6000602082840312156139e557600080fd5b813561150b816139be565b80151581146105ca57600080fd5b600060208284031215613a1057600080fd5b813561150b816139f0565b6000808335601e19843603018112613a3257600080fd5b83018035915067ffffffffffffffff821115613a4d57600080fd5b60200191503681900382131561069b57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613abf60c083018486613a62565b9998505050505050505050565b818103818111156106ba576106ba613995565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613b1960e083018486613a62565b9a9950505050505050505050565b6001600160701b0381811683821601908082111561285257612852613995565b6001600160801b0381811683821601908082111561285257612852613995565b818103600083128015838313168383128216171561285257612852613995565b600060208284031215613b9957600080fd5b815161150b816139be565b80820281158282048414176106ba576106ba613995565b6001600160801b0382811682821603908082111561285257612852613995565b8082018281126000831280158216821582161715613bfb57613bfb613995565b505092915050565b600060208284031215613c1557600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613c4157613c41613c1c565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156106ba576106ba613995565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613d05828551613c73565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613d7a57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613da057613da0613995565b5060000390565b61018081016106ba8284613c73565b60008060408385031215613dc957600080fd5b825191506020830151613ddb816139f0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613e0b57613e0b613c1c565b600160ff1b821460001984141615613e2557613e25613995565b500590565b60008060008060808587031215613e4057600080fd5b845193506020850151925060408501519150606085015161398a816139f0565b600060208284031215613e7257600080fd5b815161150b816139f0565b6000825160005b81811015613e9e5760208186018101518583015201613e84565b50600092019182525091905056fea264697066735822122098988e8892e130e2d7270060dacd80f32f52670a2cbe1dcfc393f12ea51aadfa64736f6c634300081600336102806040523480156200001257600080fd5b506040516200431e3803806200431e8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613e4f620004cf600039600050506000505060006112f901526000818161030301528181610332015261035f01526000818160de015281816105a9015261172001526000818161085601528181610941015281816109d401528181610add015281816115f1015281816116fa01528181612161015281816121c401528181612aa301528181612eab0152612ee701526000818161013f015281816108c601528181610ea7015281816114b5015281816115190152818161156001526116d401526000611d66015260008181611ec1015261314001526000818161106b0152611e95015260006130f60152600081816101810152818161091901528181610ec801528181611485015281816114e901528181611581015261174601526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fa30152612a3901526000818161029701528181610d6601528181610de101528181610e5701528181610f230152610f5b0152600081816119f601528181611a7001528181611b020152612d870152600081816119c90152611a2a0152613e4f6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c366004613873565b610066565b60405190815260200160405180910390f35b6100416100613660046138d7565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c04565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c3d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c63565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610c89565b9150915060006101ed610d5e565b90506101fd818360046001610d8a565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b61393d565b611408565b611452565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f000000000000000000000000000000000000000000000000000000000000000089613950565b81526020810191909152604001600020546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061165f565b90506103287f00000000000000000000000000000000000000000000000000000000000000008261393d565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f000000000000000000000000000000000000000000000000000000000000000082613950565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b0390911690613950565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c90839061393d565b9050600080600061043c8a61168b565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa156906104769084906004016139e1565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b791906139f0565b91506104ca6104c58c6117c5565b6117f3565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b918591016139e1565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906139f0565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613950565b9190611819565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611837565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613a1e565b8e61184c565b61063a896118f4565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d919061393d565b9b5090508a158061073757506107348c6000611901565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611819565b610770565b60005b905061077f6020850185613a1e565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613a49565b866107ca60408c018c613a66565b6040516107dd9796959493929190613aad565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c04565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610c89565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613b01565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612459929190613c62565b6040805180830381865af4158015612475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124999190613cd8565b915091506124b76124a9826117c5565b6124b290613cfc565b612a5d565b9250826124cd576000965050505050505061144c565b6124d68261193c565b600780546000906124f19084906001600160801b0316613b66565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061251e8161193c565b60078054601090612540908490600160801b90046001600160801b0316613b66565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61259d8761168b565b6040518263ffffffff1660e01b81526004016125b991906139e1565b6040805180830381865af41580156125d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f99190613d18565b915091508061260f575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916126759161393d565b61267f9190613950565b90508060000361269757506000958695509350505050565b60008087116126a75760006126b2565b6126b2848884611819565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126e6576126e6613d48565b6040519080825280601f01601f191660200182016040528015612710576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612731578692505b828152826000602083013e9093509150505b9550959350505050565b60008060008361275c866117c5565b6127669190613b86565b9050600081121561277e576000809250925050610d57565b946001945092505050565b600080600061279b8888888888613094565b905060006127c6670de0b6b3a76400006127b58888612e4a565b6127bf919061393d565b8390611837565b9050670de0b6b3a764000081106127fa576127f36127ec670de0b6b3a764000089611837565b8290612c0e565b9050612812565b61280f6127ec670de0b6b3a764000089612e4a565b90505b61281c8186611837565b90508881101561283457600080935093505050612743565b97909703976001975095505050505050565b600080600061285889898888886130c3565b9050612872866119b361286b8a8d61393d565b879061210b565b985061287f858a86611819565b985088811015612896576000809250925050611654565b888103670de0b6b3a764000081106128c4576128bd6127ec670de0b6b3a764000089612e4a565b90506128dc565b6128d96127ec670de0b6b3a764000089611837565b90505b808910156128f257600080935093505050611654565b90970398600198509650505050505050565b60008060008060006129178987896130e8565b90925090506129268289613950565b9750600061293582888a611819565b9050612941818b613950565b9a989950979650505050505050565b60008061295e84600061316e565b61296984600061316e565b6129739190613b86565b9050600081131561298f57612988818661393d565b94506129ae565b60008112156129ae576129a181613cfc565b6129ab9086613950565b94505b50929392505050565b60006100918383670de0b6b3a76400005b60008260001904841183021582026129df57600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612a02610d5e565b612a0c9190613b01565b9050808311612a1c576000612a26565b612a268184613950565b91506100916127bf670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b01565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3a9190613d5e565b935093509350935080612b565750600098975050505050505050565b868414612b8757612b668461193c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bb857612b9783611966565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612be657612bc88261193c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612c275750670de0b6b3a764000061144c565b82600003612c375750600061144c565b6000612c42836117c5565b90506000612c57612c52866117c5565b613184565b9050818102612c6e670de0b6b3a764000082613d9f565b9050612c79816133aa565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052612cea9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061353f565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612d4184826135a7565b612cea576040516001600160a01b03848116602483015260006044830152612d7691869182169063095ea7b390606401612cb8565b612cea848261353f565b600061144c7f00000000000000000000000000000000000000000000000000000000000000008361364a565b600082600003612dbd575084610078565b8115612e1057612dee612dd0848761393d565b612dda858761210b565b612de4888a61210b565b611685919061393d565b90506000612dfc8588611c96565b905080821015612e0a578091505b50610078565b828503612e1f57506000610078565b610075612e2c8487613950565b612e3685876129b7565b612e40888a61210b565b6116859190613950565b600061009183670de0b6b3a7640000846129c8565b600060016001607f1b038211156117ef5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612ea4906001600160801b031684612e4a565b9050612ed07f00000000000000000000000000000000000000000000000000000000000000008261393d565b6002546001600160801b03161115611910576002547f000000000000000000000000000000000000000000000000000000000000000090612f1b9083906001600160801b0316613950565b6100919190613950565b612f2d61380f565b600080612f398461168b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612f7491906139e1565b6040805180830381865af4158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb49190613d18565b9350905082612fc9575060009150611aed9050565b6000612feb61161684610160015185610140015161210b90919063ffffffff16565b61300b6116168561012001518661010001516129b790919063ffffffff16565b6130159190613b86565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b60006130a08585612c0e565b6130b96130b1866119b3868b61210b565b859085611819565b610075919061393d565b60006130cf8585612c0e565b6130b96130e0866119b3868b6129b7565b8590856129c8565b6000806131388561313285817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613128818c612e4a565b6131329190613950565b906129b7565b9150613164827f000000000000000000000000000000000000000000000000000000000000000061210b565b9050935093915050565b600081831361317d5781610091565b5090919050565b60008082136131a65760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132299084901c6117c5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133c557506000919050565b680755bf798b4a1bf1e582126133ee576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612c7974029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117c5565b60006135546001600160a01b038416836136b6565b905080516000141580156135795750808060200190518101906135779190613dcd565b155b15611b2a57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516135c49190613dea565b6000604051808303816000865af19150503d8060008114613601576040519150601f19603f3d011682016040523d82523d6000602084013e613606565b606091505b50915091508180156136305750805115806136305750808060200190518101906136309190613dcd565b80156100785750505050506001600160a01b03163b151590565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a90602401602060405180830381865afa158015613692573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009191906139f0565b60606100918383600084600080856001600160a01b031684866040516136dc9190613dea565b60006040518083038185875af1925050503d8060008114613719576040519150601f19603f3d011682016040523d82523d6000602084013e61371e565b606091505b5091509150612c7986838360608261373e5761373982613785565b610091565b815115801561375557506001600160a01b0384163b155b1561377e57604051639996b31560e01b81526001600160a01b038516600482015260240161359e565b5080610091565b8051156137955780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061012001604052806138236137ae565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561191057600080fd5b600080600080600060a0868803121561388b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156138be57600080fd5b6138ca88828901613861565b9150509295509295909350565b6000806000606084860312156138ec57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561391157600080fd5b61391d86828701613861565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561144c5761144c613927565b8181038181111561144c5761144c613927565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144c8284613963565b600060208284031215613a0257600080fd5b5051919050565b6001600160a01b0381168114610c3a57600080fd5b600060208284031215613a3057600080fd5b813561009181613a09565b8015158114610c3a57600080fd5b600060208284031215613a5b57600080fd5b813561009181613a3b565b6000808335601e19843603018112613a7d57600080fd5b83018035915067ffffffffffffffff821115613a9857600080fd5b602001915036819003821315610d5757600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144c5761144c613927565b600080600060608486031215613b2d57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561193557611935613927565b6001600160801b0381811683821601908082111561193557611935613927565b818103600083128015838313168383128216171561193557611935613927565b600060208284031215613bb857600080fd5b815161009181613a09565b8082018281126000831280158216821582161715613be357613be3613927565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613c1057613c10613beb565b500690565b6001600160801b0382811682821603908082111561193557611935613927565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144c5761144c613927565b60006102a082019050613c76828551613963565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613ceb57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613d1157613d11613927565b5060000390565b60008060408385031215613d2b57600080fd5b825191506020830151613d3d81613a3b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613d7457600080fd5b8451935060208501519250604085015191506060850151613d9481613a3b565b939692955090935050565b600082613dae57613dae613beb565b600160ff1b821460001984141615613dc857613dc8613927565b500590565b600060208284031215613ddf57600080fd5b815161009181613a3b565b6000825160005b81811015613e0b5760208186018101518583015201613df1565b50600092019182525091905056fea26469706673582212206b20adff4f38938896bdf881759564d5a900f36fc30f97c304cf40612dbaeba764736f6c634300081600336102806040523480156200001257600080fd5b506040516200363a3803806200363a8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161321862000422600039600050506000505060006109c10152600050506000818161026d0152611f850152600081816117cb0152818161182e01528181611b6a01528181611ba601528181611d9e0152611f5f01526000818161056f0152611f39015260006113a0015260006114fb01526000818161073301526114cf015260005050600081816105900152611fab01526000818161066b01526125a10152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb01526106230152600081816110db015281816122e7015281816123ca0152612503015260008181612330015261246401526132186000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612c76565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612ccd565b6100b5565b005b610059610095366004612c76565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612d04565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612d2f565b61017160408c018c612d4c565b60405161018396959493929190612dbc565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612e0c565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612d04565b88610ee8565b60006103066102fd6020870187612d04565b88848989610ad0565b90945090506103158188612e36565b9250600061032283610f88565b5090506103326020870187612d04565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612d2f565b8a888e80604001906103829190612d4c565b604051610396989796959493929190612e49565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612d04565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f0000000000000000000000000000000000000000000000000000000000000000611100565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612e91565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a61111d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061113e565b92505b506105c18361115e565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612e36565b8a8461118c565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612e91565b42906112ca565b8461118c565b61065e886112df565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612e36565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c611483565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d8660006114b8565b9150915080600960008282546107019190612e91565b9091555061071d90508660008461071781611587565b886115b1565b6107278183612e91565b915061075786838a8e877f000000000000000000000000000000000000000000000000000000000000000061172b565b915061076b6107668385611775565b61178a565b6006805460029061078c9084906201000090046001600160701b0316612ea4565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261115e565b600680546010906107db908490600160801b90046001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f600184611483565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f8860016114b8565b9150915080600960008282546108529190612e91565b9091555061086e90508360008461086881611587565b8a6117b4565b6108788183612e36565b91506108876107668387611775565b600680546002906108a89084906201000090046001600160701b0316612ea4565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261115e565b600680546010906108f7908490600160801b90046001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a61093087611587565b61093983611587565b6109439190612ee4565b60006119a5565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612f04565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906119e4565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611a6f565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611a7c565b9050610b568361115e565b610b609083612f21565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161115e565b60078054601090610bab908490600160801b90046001600160801b0316612f21565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611a9a565b9350610be68684611b33565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612e36565b905080600003610c72576001915050610e08565b6000610c7d85611b48565b905080600003610c9257600192505050610e08565b600080610ca0838589611be4565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612fbf565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190613035565b91509150610d50610d4282611587565b610d4b90613059565b611d58565b925082610d665760009650505050505050610e08565b610d6f8261115e565b60078054600090610d8a9084906001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161115e565b60078054601090610dd9908490600160801b90046001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612e36565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612e91565b90915550506000838152600b602052604081208054839290610f3d908490612e91565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611ef0565b6040518263ffffffff1660e01b8152600401610fcd9190613075565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190613084565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612e91565b6110939190612e36565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611a7c565b976001975095505050505050565b6000610e087f00000000000000000000000000000000000000000000000000000000000000008361202a565b600061110c8284612e0c565b6111169084612e36565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b612097565b60006111558261114f858888611a7c565b906120bd565b95945050505050565b60006001600160801b0382111561118857604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036111b85750505050565b6000848152600860205260408120546001600160801b031690819003611212576111e18361115e565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611290565b61126361125e670de0b6b3a764000061122b8886612e36565b61123591906130b4565b85670de0b6b3a7640000611249878a612e36565b61125391906130b4565b859291906001612132565b61115e565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112998461115e565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116112d95782611116565b50919050565b6006546000908190611302908490600160801b90046001600160801b0316611775565b6006546201000090046001600160701b0316925090508181111561147e57600061132c8383612e36565b905061133b61125e82866121d0565b6006805460109061135d908490600160801b90046001600160801b0316612f21565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061139685836121e590919063ffffffff16565b905060006113c4827f0000000000000000000000000000000000000000000000000000000000000000611775565b905080600960008282546113d89190612e91565b909155506113e890508183612e36565b91506113f38261115e565b6002805460009061140e9084906001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061143b826121fa565b60048054600090611450908490600f0b6130cb565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156114ad5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806114c587856121e5565b915060006114f3837f0000000000000000000000000000000000000000000000000000000000000000611775565b905061151f817f0000000000000000000000000000000000000000000000000000000000000000611775565b91508315611542576115318282612e36565b61153b9084612e36565b9250611559565b61154c8282612e36565b6115569084612e91565b92505b8686101561157c5761156c838789611a7c565b9250611579828789611a7c565b91505b509550959350505050565b60006001600160ff1b038211156111885760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166115fa61125e826115dd670de0b6b3a7640000866130b4565b600554600160801b90046001600160801b031691908a6000612132565b600580546001600160801b03928316600160801b0292169190911790556116208661115e565b61162a9082612f21565b600480546001600160801b03928316600160801b0292169190911790556116508461115e565b6002805460009061166b9084906001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061169883612224565b600480546000906116ad908490600f0b6130cb565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506116dd8561115e565b600280546010906116ff908490600160801b90046001600160801b0316612f21565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806117438461173d8a888a611a7c565b906121e5565b9050611750888486611a7c565b61175a9082612e91565b90508681111561176a5786810391505b509695505050505050565b60006111168383670de0b6b3a7640000611a7c565b60006001600160701b038211156111885760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806117f657507f00000000000000000000000000000000000000000000000000000000000000006117f48583612e36565b105b1561180357611803612260565b6004549084900390600f0b6118188482612ee4565b90508361182486611587565b13801561185957507f00000000000000000000000000000000000000000000000000000000000000006118578383612097565b105b1561186657611866612260565b600354600160801b90046001600160801b03166118a861125e82611892670de0b6b3a7640000886130b4565b6005546001600160801b031691908c6000612132565b600580546001600160801b0319166001600160801b03929092169190911790556118d28882612e36565b90506118dd8161115e565b600380546001600160801b03928316600160801b0292169190911790556119038361115e565b600280546001600160801b0319166001600160801b039290921691909117905561192c82612224565b600480546001600160801b0319166001600160801b03929092169190911790556119558761115e565b60028054601090611977908490600160801b90046001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546119c09061125e906001600160801b03168484612279565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a0a57611a0a6130f8565b6040519080825280601f01601f191660200182016040528015611a34576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611a55578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611a9357600080fd5b5091020490565b600080611aa78585611775565b9050611ab2816122e0565b945084600003611ac6576000915050611116565b849150611ad96040840160208501612d2f565b15611b0857611b0185611aef6020860186612d04565b611afc6040870187612d4c565b61230c565b9150611b2b565b611b2b85611b196020860186612d04565b611b266040870187612d4c565b6124f6565b509392505050565b60006111168383670de0b6b3a7640000612530565b6003546000908190611b63906001600160801b0316846121d0565b9050611b8f7f000000000000000000000000000000000000000000000000000000000000000082612e91565b6002546001600160801b031611156112d9576002547f000000000000000000000000000000000000000000000000000000000000000090611bda9083906001600160801b0316612e36565b6111169190612e36565b611bec612bc3565b600080611bf884611ef0565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c339190613075565b6040805180830381865af4158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190613084565b9350905082611c885750600091506100ad9050565b6000611caf611caa84610160015185610140015161177590919063ffffffff16565b611587565b611ccf611caa856101200151866101000151611b3390919063ffffffff16565b611cd99190612ee4565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = SweepTestContractFunctions(sweeptest_abi, self.w3, address)  # type: ignore
        self.events = SweepTestContractEvents(sweeptest_abi, self.w3, address)  # type: ignore
        self.errors = SweepTestContractErrors()

    events: SweepTestContractEvents

    errors: SweepTestContractErrors = SweepTestContractErrors()

    functions: SweepTestContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = SweepTestContractFunctions(sweeptest_abi, w3, None)
        contract.errors = SweepTestContractErrors()

        return contract
