"""A web3.py Contract class for the ERC4626DeployerCoordinatorTest contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..LPMath import LPMathContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from .ERC4626DeployerCoordinatorTestTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    DeployedEvent,
    InitializeEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SweepEvent,
    TransferSingleEvent,
)

structs = {
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}

erc4626deployercoordinatortest_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_deploymentAlreadyExists",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_deploymentDoesNotExist",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_invalidCheckPoolConfigTarget0",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_invalidCheckPoolConfigTarget1",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_invalidSender",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_invalidTargetIndex",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_mismatchedConfig",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_mismatchedExtraData",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_target1AlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_target2AlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_target3AlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_target4AlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_success",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_deploymentDoesNotExist",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_hyperdriveAlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_incompleteDeploymentTarget1",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_incompleteDeploymentTarget2",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_incompleteDeploymentTarget3",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_incompleteDeploymentTarget4",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_invalidCheckPoolConfig",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_invalidSender",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_mismatchedConfig",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_mismatchedExtraData",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_success",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_failure_checkMessageValue",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_failure_hyperdriveIsNotDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_failure_invalidSender",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_success_asBase",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_success_asShares",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class ERC4626DeployerCoordinatorTestLnInvalidInputContractError(
    PypechainBaseError
):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = erc4626deployercoordinatortest_abi


class ERC4626DeployerCoordinatorTestUnsafeCastToInt256ContractError(
    PypechainBaseError
):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = erc4626deployercoordinatortest_abi


class ERC4626DeployerCoordinatorTestWhaleBalanceExceededContractError(
    PypechainBaseError
):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = erc4626deployercoordinatortest_abi


class ERC4626DeployerCoordinatorTestWhaleIsContractContractError(
    PypechainBaseError
):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = erc4626deployercoordinatortest_abi


class ERC4626DeployerCoordinatorTestContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the ERC4626DeployerCoordinatorTest contract."""

    LnInvalidInput: ERC4626DeployerCoordinatorTestLnInvalidInputContractError

    UnsafeCastToInt256: (
        ERC4626DeployerCoordinatorTestUnsafeCastToInt256ContractError
    )

    WhaleBalanceExceeded: (
        ERC4626DeployerCoordinatorTestWhaleBalanceExceededContractError
    )

    WhaleIsContract: ERC4626DeployerCoordinatorTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.LnInvalidInput = (
            ERC4626DeployerCoordinatorTestLnInvalidInputContractError()
        )
        self.UnsafeCastToInt256 = (
            ERC4626DeployerCoordinatorTestUnsafeCastToInt256ContractError()
        )
        self.WhaleBalanceExceeded = (
            ERC4626DeployerCoordinatorTestWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            ERC4626DeployerCoordinatorTestWhaleIsContractContractError()
        )

        self._all = [
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class ERC4626DeployerCoordinatorTestIS_TESTContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestIS_TESTContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestIS_TESTContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestIS_TESTContractFunction0._type_signature: ERC4626DeployerCoordinatorTestIS_TESTContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestIS_TESTContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestCreateUserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestCreateUserContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, name: str) -> ERC4626DeployerCoordinatorTestCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestCreateUserContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestCreateUserContractFunction0._type_signature: ERC4626DeployerCoordinatorTestCreateUserContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestCreateUserContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction0._type_signature: ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestExcludeContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestExcludeContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestExcludeContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestExcludeContractsContractFunction0._type_signature: ERC4626DeployerCoordinatorTestExcludeContractsContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestExcludeContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestExcludeSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestExcludeSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestExcludeSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestExcludeSendersContractFunction0._type_signature: ERC4626DeployerCoordinatorTestExcludeSendersContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestExcludeSendersContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestFailedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestFailedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestFailedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestFailedContractFunction0._type_signature: ERC4626DeployerCoordinatorTestFailedContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestFailedContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestSetUpContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestSetUpContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestSetUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestSetUpContractFunction0._type_signature: ERC4626DeployerCoordinatorTestSetUpContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestSetUpContractFunction0", **kwargs
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTargetContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestTargetContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTargetContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTargetContractsContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTargetContractsContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTargetContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTargetSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestTargetSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTargetSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTargetSendersContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTargetSendersContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTargetSendersContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_deploymentAlreadyExists() method."""

    _function_name = "test_deployTarget_failure_deploymentAlreadyExists"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_deploymentAlreadyExists method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_deploymentAlreadyExists"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_deploymentDoesNotExist() method."""

    _function_name = "test_deployTarget_failure_deploymentDoesNotExist"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_deploymentDoesNotExist method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_deploymentDoesNotExist"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidCheckPoolConfigTarget0() method."""

    _function_name = "test_deployTarget_failure_invalidCheckPoolConfigTarget0"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidCheckPoolConfigTarget0 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_invalidCheckPoolConfigTarget0"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidCheckPoolConfigTarget1() method."""

    _function_name = "test_deployTarget_failure_invalidCheckPoolConfigTarget1"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidCheckPoolConfigTarget1 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_invalidCheckPoolConfigTarget1"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidSender() method."""

    _function_name = "test_deployTarget_failure_invalidSender"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidSender method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_invalidSender"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidTargetIndex() method."""

    _function_name = "test_deployTarget_failure_invalidTargetIndex"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidTargetIndex method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_invalidTargetIndex"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_mismatchedConfig() method."""

    _function_name = "test_deployTarget_failure_mismatchedConfig"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_mismatchedConfig method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_mismatchedConfig"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_mismatchedExtraData() method."""

    _function_name = "test_deployTarget_failure_mismatchedExtraData"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_mismatchedExtraData method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_mismatchedExtraData"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target1AlreadyDeployed() method."""

    _function_name = "test_deployTarget_failure_target1AlreadyDeployed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target1AlreadyDeployed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_target1AlreadyDeployed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target2AlreadyDeployed() method."""

    _function_name = "test_deployTarget_failure_target2AlreadyDeployed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target2AlreadyDeployed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_target2AlreadyDeployed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target3AlreadyDeployed() method."""

    _function_name = "test_deployTarget_failure_target3AlreadyDeployed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target3AlreadyDeployed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_target3AlreadyDeployed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target4AlreadyDeployed() method."""

    _function_name = "test_deployTarget_failure_target4AlreadyDeployed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target4AlreadyDeployed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_failure_target4AlreadyDeployed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_success() method."""

    _function_name = "test_deployTarget_success"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTarget_success method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTarget_success"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_deploymentDoesNotExist() method."""

    _function_name = "test_deploy_failure_deploymentDoesNotExist"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_deploymentDoesNotExist method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_deploymentDoesNotExist"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_hyperdriveAlreadyDeployed() method."""

    _function_name = "test_deploy_failure_hyperdriveAlreadyDeployed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_hyperdriveAlreadyDeployed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_hyperdriveAlreadyDeployed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget1() method."""

    _function_name = "test_deploy_failure_incompleteDeploymentTarget1"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget1 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_incompleteDeploymentTarget1"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget2() method."""

    _function_name = "test_deploy_failure_incompleteDeploymentTarget2"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget2 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_incompleteDeploymentTarget2"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget3() method."""

    _function_name = "test_deploy_failure_incompleteDeploymentTarget3"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget3 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_incompleteDeploymentTarget3"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget4() method."""

    _function_name = "test_deploy_failure_incompleteDeploymentTarget4"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget4 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_incompleteDeploymentTarget4"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_invalidCheckPoolConfig() method."""

    _function_name = "test_deploy_failure_invalidCheckPoolConfig"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_invalidCheckPoolConfig method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_invalidCheckPoolConfig"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_invalidSender() method."""

    _function_name = "test_deploy_failure_invalidSender"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_invalidSender method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_invalidSender"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_mismatchedConfig() method."""

    _function_name = "test_deploy_failure_mismatchedConfig"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_mismatchedConfig method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_mismatchedConfig"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_mismatchedExtraData() method."""

    _function_name = "test_deploy_failure_mismatchedExtraData"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_failure_mismatchedExtraData method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_failure_mismatchedExtraData"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_success() method."""

    _function_name = "test_deploy_success"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_deploy_success method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deploy_success"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_failure_checkMessageValue() method."""

    _function_name = "test_initialize_failure_checkMessageValue"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_failure_checkMessageValue method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_initialize_failure_checkMessageValue"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_failure_hyperdriveIsNotDeployed() method."""

    _function_name = "test_initialize_failure_hyperdriveIsNotDeployed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_failure_hyperdriveIsNotDeployed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_initialize_failure_hyperdriveIsNotDeployed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_failure_invalidSender() method."""

    _function_name = "test_initialize_failure_invalidSender"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_failure_invalidSender method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_initialize_failure_invalidSender"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_success_asBase() method."""

    _function_name = "test_initialize_success_asBase"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_success_asBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_initialize_success_asBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_success_asShares() method."""

    _function_name = "test_initialize_success_asShares"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_initialize_success_asShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_initialize_success_asShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction0._type_signature: ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestWhaleTransferContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestWhaleTransferContractFunction1(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )
    _error_class = ERC4626DeployerCoordinatorTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626DeployerCoordinatorTestWhaleTransferContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> ERC4626DeployerCoordinatorTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> ERC4626DeployerCoordinatorTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626DeployerCoordinatorTestWhaleTransferContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626DeployerCoordinatorTestWhaleTransferContractFunction0._type_signature: ERC4626DeployerCoordinatorTestWhaleTransferContractFunction0.factory(
                "ERC4626DeployerCoordinatorTestWhaleTransferContractFunction0",
                **kwargs,
            ),
            ERC4626DeployerCoordinatorTestWhaleTransferContractFunction1._type_signature: ERC4626DeployerCoordinatorTestWhaleTransferContractFunction1.factory(
                "ERC4626DeployerCoordinatorTestWhaleTransferContractFunction1",
                **kwargs,
            ),
        }
        return out


class ERC4626DeployerCoordinatorTestContractFunctions(ContractFunctions):
    """ContractFunctions for the ERC4626DeployerCoordinatorTest contract."""

    IS_TEST: ERC4626DeployerCoordinatorTestIS_TESTContractFunction

    createUser: ERC4626DeployerCoordinatorTestCreateUserContractFunction

    excludeArtifacts: (
        ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction
    )

    excludeContracts: (
        ERC4626DeployerCoordinatorTestExcludeContractsContractFunction
    )

    excludeSenders: ERC4626DeployerCoordinatorTestExcludeSendersContractFunction

    failed: ERC4626DeployerCoordinatorTestFailedContractFunction

    setUp: ERC4626DeployerCoordinatorTestSetUpContractFunction

    targetArtifactSelectors: (
        ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: (
        ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction
    )

    targetContracts: (
        ERC4626DeployerCoordinatorTestTargetContractsContractFunction
    )

    targetInterfaces: (
        ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction
    )

    targetSelectors: (
        ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction
    )

    targetSenders: ERC4626DeployerCoordinatorTestTargetSendersContractFunction

    test_deployTarget_failure_deploymentAlreadyExists: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction

    test_deployTarget_failure_deploymentDoesNotExist: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction

    test_deployTarget_failure_invalidCheckPoolConfigTarget0: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction

    test_deployTarget_failure_invalidCheckPoolConfigTarget1: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction

    test_deployTarget_failure_invalidSender: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction

    test_deployTarget_failure_invalidTargetIndex: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction

    test_deployTarget_failure_mismatchedConfig: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction

    test_deployTarget_failure_mismatchedExtraData: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction

    test_deployTarget_failure_target1AlreadyDeployed: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction

    test_deployTarget_failure_target2AlreadyDeployed: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction

    test_deployTarget_failure_target3AlreadyDeployed: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction

    test_deployTarget_failure_target4AlreadyDeployed: ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction

    test_deployTarget_success: (
        ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction
    )

    test_deploy_failure_deploymentDoesNotExist: ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction

    test_deploy_failure_hyperdriveAlreadyDeployed: ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction

    test_deploy_failure_incompleteDeploymentTarget1: ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction

    test_deploy_failure_incompleteDeploymentTarget2: ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction

    test_deploy_failure_incompleteDeploymentTarget3: ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction

    test_deploy_failure_incompleteDeploymentTarget4: ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction

    test_deploy_failure_invalidCheckPoolConfig: ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction

    test_deploy_failure_invalidSender: ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction

    test_deploy_failure_mismatchedConfig: ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction

    test_deploy_failure_mismatchedExtraData: ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction

    test_deploy_success: (
        ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction
    )

    test_initialize_failure_checkMessageValue: ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction

    test_initialize_failure_hyperdriveIsNotDeployed: ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction

    test_initialize_failure_invalidSender: ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction

    test_initialize_success_asBase: ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction

    test_initialize_success_asShares: ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction

    whaleTransfer: ERC4626DeployerCoordinatorTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = (
            ERC4626DeployerCoordinatorTestIS_TESTContractFunction.factory(
                "IS_TEST",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="IS_TEST",
            )
        )
        self.createUser = (
            ERC4626DeployerCoordinatorTestCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createUser",
            )
        )
        self.excludeArtifacts = ERC4626DeployerCoordinatorTestExcludeArtifactsContractFunction.factory(
            "excludeArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeArtifacts",
        )
        self.excludeContracts = ERC4626DeployerCoordinatorTestExcludeContractsContractFunction.factory(
            "excludeContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeContracts",
        )
        self.excludeSenders = ERC4626DeployerCoordinatorTestExcludeSendersContractFunction.factory(
            "excludeSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeSenders",
        )
        self.failed = (
            ERC4626DeployerCoordinatorTestFailedContractFunction.factory(
                "failed",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="failed",
            )
        )
        self.setUp = (
            ERC4626DeployerCoordinatorTestSetUpContractFunction.factory(
                "setUp",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="setUp",
            )
        )
        self.targetArtifactSelectors = ERC4626DeployerCoordinatorTestTargetArtifactSelectorsContractFunction.factory(
            "targetArtifactSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifactSelectors",
        )
        self.targetArtifacts = ERC4626DeployerCoordinatorTestTargetArtifactsContractFunction.factory(
            "targetArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifacts",
        )
        self.targetContracts = ERC4626DeployerCoordinatorTestTargetContractsContractFunction.factory(
            "targetContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetContracts",
        )
        self.targetInterfaces = ERC4626DeployerCoordinatorTestTargetInterfacesContractFunction.factory(
            "targetInterfaces",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetInterfaces",
        )
        self.targetSelectors = ERC4626DeployerCoordinatorTestTargetSelectorsContractFunction.factory(
            "targetSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSelectors",
        )
        self.targetSenders = (
            ERC4626DeployerCoordinatorTestTargetSendersContractFunction.factory(
                "targetSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSenders",
            )
        )
        self.test_deployTarget_failure_deploymentAlreadyExists = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction.factory(
            "test_deployTarget_failure_deploymentAlreadyExists",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_deploymentAlreadyExists",
        )
        self.test_deployTarget_failure_deploymentDoesNotExist = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction.factory(
            "test_deployTarget_failure_deploymentDoesNotExist",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_deploymentDoesNotExist",
        )
        self.test_deployTarget_failure_invalidCheckPoolConfigTarget0 = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction.factory(
            "test_deployTarget_failure_invalidCheckPoolConfigTarget0",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_invalidCheckPoolConfigTarget0",
        )
        self.test_deployTarget_failure_invalidCheckPoolConfigTarget1 = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction.factory(
            "test_deployTarget_failure_invalidCheckPoolConfigTarget1",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_invalidCheckPoolConfigTarget1",
        )
        self.test_deployTarget_failure_invalidSender = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction.factory(
            "test_deployTarget_failure_invalidSender",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_invalidSender",
        )
        self.test_deployTarget_failure_invalidTargetIndex = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction.factory(
            "test_deployTarget_failure_invalidTargetIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_invalidTargetIndex",
        )
        self.test_deployTarget_failure_mismatchedConfig = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction.factory(
            "test_deployTarget_failure_mismatchedConfig",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_mismatchedConfig",
        )
        self.test_deployTarget_failure_mismatchedExtraData = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction.factory(
            "test_deployTarget_failure_mismatchedExtraData",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_mismatchedExtraData",
        )
        self.test_deployTarget_failure_target1AlreadyDeployed = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction.factory(
            "test_deployTarget_failure_target1AlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_target1AlreadyDeployed",
        )
        self.test_deployTarget_failure_target2AlreadyDeployed = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction.factory(
            "test_deployTarget_failure_target2AlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_target2AlreadyDeployed",
        )
        self.test_deployTarget_failure_target3AlreadyDeployed = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction.factory(
            "test_deployTarget_failure_target3AlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_target3AlreadyDeployed",
        )
        self.test_deployTarget_failure_target4AlreadyDeployed = ERC4626DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction.factory(
            "test_deployTarget_failure_target4AlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_failure_target4AlreadyDeployed",
        )
        self.test_deployTarget_success = ERC4626DeployerCoordinatorTestTest_deployTarget_successContractFunction.factory(
            "test_deployTarget_success",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTarget_success",
        )
        self.test_deploy_failure_deploymentDoesNotExist = ERC4626DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction.factory(
            "test_deploy_failure_deploymentDoesNotExist",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_deploymentDoesNotExist",
        )
        self.test_deploy_failure_hyperdriveAlreadyDeployed = ERC4626DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction.factory(
            "test_deploy_failure_hyperdriveAlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_hyperdriveAlreadyDeployed",
        )
        self.test_deploy_failure_incompleteDeploymentTarget1 = ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction.factory(
            "test_deploy_failure_incompleteDeploymentTarget1",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_incompleteDeploymentTarget1",
        )
        self.test_deploy_failure_incompleteDeploymentTarget2 = ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction.factory(
            "test_deploy_failure_incompleteDeploymentTarget2",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_incompleteDeploymentTarget2",
        )
        self.test_deploy_failure_incompleteDeploymentTarget3 = ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction.factory(
            "test_deploy_failure_incompleteDeploymentTarget3",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_incompleteDeploymentTarget3",
        )
        self.test_deploy_failure_incompleteDeploymentTarget4 = ERC4626DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction.factory(
            "test_deploy_failure_incompleteDeploymentTarget4",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_incompleteDeploymentTarget4",
        )
        self.test_deploy_failure_invalidCheckPoolConfig = ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction.factory(
            "test_deploy_failure_invalidCheckPoolConfig",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_invalidCheckPoolConfig",
        )
        self.test_deploy_failure_invalidSender = ERC4626DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction.factory(
            "test_deploy_failure_invalidSender",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_invalidSender",
        )
        self.test_deploy_failure_mismatchedConfig = ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction.factory(
            "test_deploy_failure_mismatchedConfig",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_mismatchedConfig",
        )
        self.test_deploy_failure_mismatchedExtraData = ERC4626DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction.factory(
            "test_deploy_failure_mismatchedExtraData",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_failure_mismatchedExtraData",
        )
        self.test_deploy_success = ERC4626DeployerCoordinatorTestTest_deploy_successContractFunction.factory(
            "test_deploy_success",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deploy_success",
        )
        self.test_initialize_failure_checkMessageValue = ERC4626DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction.factory(
            "test_initialize_failure_checkMessageValue",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_initialize_failure_checkMessageValue",
        )
        self.test_initialize_failure_hyperdriveIsNotDeployed = ERC4626DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction.factory(
            "test_initialize_failure_hyperdriveIsNotDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_initialize_failure_hyperdriveIsNotDeployed",
        )
        self.test_initialize_failure_invalidSender = ERC4626DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction.factory(
            "test_initialize_failure_invalidSender",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_initialize_failure_invalidSender",
        )
        self.test_initialize_success_asBase = ERC4626DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction.factory(
            "test_initialize_success_asBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_initialize_success_asBase",
        )
        self.test_initialize_success_asShares = ERC4626DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction.factory(
            "test_initialize_success_asShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_initialize_success_asShares",
        )
        self.whaleTransfer = (
            ERC4626DeployerCoordinatorTestWhaleTransferContractFunction.factory(
                "whaleTransfer",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="whaleTransfer",
            )
        )


class ERC4626DeployerCoordinatorTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestCollectGovernanceFeeContractEvent(
    ContractEvent
):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestCreateCheckpointContractEvent(
    ContractEvent
):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestPauseStatusUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent(
    ContractEvent
):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_addressContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_bytes32ContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_decimal_intContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_decimal_uintContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_stringContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626DeployerCoordinatorTestContractEvents(ContractEvents):
    """ContractEvents for the ERC4626DeployerCoordinatorTest contract."""

    AddLiquidity: Type[ERC4626DeployerCoordinatorTestAddLiquidityContractEvent]

    Approval: Type[ERC4626DeployerCoordinatorTestApprovalContractEvent]

    ApprovalForAll: Type[
        ERC4626DeployerCoordinatorTestApprovalForAllContractEvent
    ]

    CloseLong: Type[ERC4626DeployerCoordinatorTestCloseLongContractEvent]

    CloseShort: Type[ERC4626DeployerCoordinatorTestCloseShortContractEvent]

    CollectGovernanceFee: Type[
        ERC4626DeployerCoordinatorTestCollectGovernanceFeeContractEvent
    ]

    CreateCheckpoint: Type[
        ERC4626DeployerCoordinatorTestCreateCheckpointContractEvent
    ]

    Deployed: Type[ERC4626DeployerCoordinatorTestDeployedContractEvent]

    Initialize: Type[ERC4626DeployerCoordinatorTestInitializeContractEvent]

    OpenLong: Type[ERC4626DeployerCoordinatorTestOpenLongContractEvent]

    OpenShort: Type[ERC4626DeployerCoordinatorTestOpenShortContractEvent]

    PauseStatusUpdated: Type[
        ERC4626DeployerCoordinatorTestPauseStatusUpdatedContractEvent
    ]

    RedeemWithdrawalShares: Type[
        ERC4626DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent
    ]

    RemoveLiquidity: Type[
        ERC4626DeployerCoordinatorTestRemoveLiquidityContractEvent
    ]

    Sweep: Type[ERC4626DeployerCoordinatorTestSweepContractEvent]

    TransferSingle: Type[
        ERC4626DeployerCoordinatorTestTransferSingleContractEvent
    ]

    log: Type[ERC4626DeployerCoordinatorTestLogContractEvent]

    log_address: Type[ERC4626DeployerCoordinatorTestLog_addressContractEvent]

    log_array: Type[ERC4626DeployerCoordinatorTestLog_arrayContractEvent]

    log_bytes: Type[ERC4626DeployerCoordinatorTestLog_bytesContractEvent]

    log_bytes32: Type[ERC4626DeployerCoordinatorTestLog_bytes32ContractEvent]

    log_int: Type[ERC4626DeployerCoordinatorTestLog_intContractEvent]

    log_named_address: Type[
        ERC4626DeployerCoordinatorTestLog_named_addressContractEvent
    ]

    log_named_array: Type[
        ERC4626DeployerCoordinatorTestLog_named_arrayContractEvent
    ]

    log_named_bytes: Type[
        ERC4626DeployerCoordinatorTestLog_named_bytesContractEvent
    ]

    log_named_bytes32: Type[
        ERC4626DeployerCoordinatorTestLog_named_bytes32ContractEvent
    ]

    log_named_decimal_int: Type[
        ERC4626DeployerCoordinatorTestLog_named_decimal_intContractEvent
    ]

    log_named_decimal_uint: Type[
        ERC4626DeployerCoordinatorTestLog_named_decimal_uintContractEvent
    ]

    log_named_int: Type[
        ERC4626DeployerCoordinatorTestLog_named_intContractEvent
    ]

    log_named_string: Type[
        ERC4626DeployerCoordinatorTestLog_named_stringContractEvent
    ]

    log_named_uint: Type[
        ERC4626DeployerCoordinatorTestLog_named_uintContractEvent
    ]

    log_string: Type[ERC4626DeployerCoordinatorTestLog_stringContractEvent]

    log_uint: Type[ERC4626DeployerCoordinatorTestLog_uintContractEvent]

    logs: Type[ERC4626DeployerCoordinatorTestLogsContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            Type[ERC4626DeployerCoordinatorTestAddLiquidityContractEvent],
            ERC4626DeployerCoordinatorTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            Type[ERC4626DeployerCoordinatorTestApprovalContractEvent],
            ERC4626DeployerCoordinatorTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            Type[ERC4626DeployerCoordinatorTestApprovalForAllContractEvent],
            ERC4626DeployerCoordinatorTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            Type[ERC4626DeployerCoordinatorTestCloseLongContractEvent],
            ERC4626DeployerCoordinatorTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            Type[ERC4626DeployerCoordinatorTestCloseShortContractEvent],
            ERC4626DeployerCoordinatorTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            Type[
                ERC4626DeployerCoordinatorTestCollectGovernanceFeeContractEvent
            ],
            ERC4626DeployerCoordinatorTestCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            Type[ERC4626DeployerCoordinatorTestCreateCheckpointContractEvent],
            ERC4626DeployerCoordinatorTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Deployed = cast(
            Type[ERC4626DeployerCoordinatorTestDeployedContractEvent],
            ERC4626DeployerCoordinatorTestDeployedContractEvent.factory(
                "Deployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Deployed",
            ),
        )
        self.Initialize = cast(
            Type[ERC4626DeployerCoordinatorTestInitializeContractEvent],
            ERC4626DeployerCoordinatorTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            Type[ERC4626DeployerCoordinatorTestOpenLongContractEvent],
            ERC4626DeployerCoordinatorTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            Type[ERC4626DeployerCoordinatorTestOpenShortContractEvent],
            ERC4626DeployerCoordinatorTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            Type[ERC4626DeployerCoordinatorTestPauseStatusUpdatedContractEvent],
            ERC4626DeployerCoordinatorTestPauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            Type[
                ERC4626DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent
            ],
            ERC4626DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            Type[ERC4626DeployerCoordinatorTestRemoveLiquidityContractEvent],
            ERC4626DeployerCoordinatorTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            Type[ERC4626DeployerCoordinatorTestSweepContractEvent],
            ERC4626DeployerCoordinatorTestSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            Type[ERC4626DeployerCoordinatorTestTransferSingleContractEvent],
            ERC4626DeployerCoordinatorTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )
        self.log = cast(
            Type[ERC4626DeployerCoordinatorTestLogContractEvent],
            ERC4626DeployerCoordinatorTestLogContractEvent.factory(
                "log",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log",
            ),
        )
        self.log_address = cast(
            Type[ERC4626DeployerCoordinatorTestLog_addressContractEvent],
            ERC4626DeployerCoordinatorTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            ),
        )
        self.log_array = cast(
            Type[ERC4626DeployerCoordinatorTestLog_arrayContractEvent],
            ERC4626DeployerCoordinatorTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            ),
        )
        self.log_bytes = cast(
            Type[ERC4626DeployerCoordinatorTestLog_bytesContractEvent],
            ERC4626DeployerCoordinatorTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            ),
        )
        self.log_bytes32 = cast(
            Type[ERC4626DeployerCoordinatorTestLog_bytes32ContractEvent],
            ERC4626DeployerCoordinatorTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            ),
        )
        self.log_int = cast(
            Type[ERC4626DeployerCoordinatorTestLog_intContractEvent],
            ERC4626DeployerCoordinatorTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            ),
        )
        self.log_named_address = cast(
            Type[ERC4626DeployerCoordinatorTestLog_named_addressContractEvent],
            ERC4626DeployerCoordinatorTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            ),
        )
        self.log_named_array = cast(
            Type[ERC4626DeployerCoordinatorTestLog_named_arrayContractEvent],
            ERC4626DeployerCoordinatorTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            ),
        )
        self.log_named_bytes = cast(
            Type[ERC4626DeployerCoordinatorTestLog_named_bytesContractEvent],
            ERC4626DeployerCoordinatorTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            ),
        )
        self.log_named_bytes32 = cast(
            Type[ERC4626DeployerCoordinatorTestLog_named_bytes32ContractEvent],
            ERC4626DeployerCoordinatorTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            ),
        )
        self.log_named_decimal_int = cast(
            Type[
                ERC4626DeployerCoordinatorTestLog_named_decimal_intContractEvent
            ],
            ERC4626DeployerCoordinatorTestLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            ),
        )
        self.log_named_decimal_uint = cast(
            Type[
                ERC4626DeployerCoordinatorTestLog_named_decimal_uintContractEvent
            ],
            ERC4626DeployerCoordinatorTestLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            ),
        )
        self.log_named_int = cast(
            Type[ERC4626DeployerCoordinatorTestLog_named_intContractEvent],
            ERC4626DeployerCoordinatorTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            ),
        )
        self.log_named_string = cast(
            Type[ERC4626DeployerCoordinatorTestLog_named_stringContractEvent],
            ERC4626DeployerCoordinatorTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            ),
        )
        self.log_named_uint = cast(
            Type[ERC4626DeployerCoordinatorTestLog_named_uintContractEvent],
            ERC4626DeployerCoordinatorTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            ),
        )
        self.log_string = cast(
            Type[ERC4626DeployerCoordinatorTestLog_stringContractEvent],
            ERC4626DeployerCoordinatorTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            ),
        )
        self.log_uint = cast(
            Type[ERC4626DeployerCoordinatorTestLog_uintContractEvent],
            ERC4626DeployerCoordinatorTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            ),
        )
        self.logs = cast(
            Type[ERC4626DeployerCoordinatorTestLogsContractEvent],
            ERC4626DeployerCoordinatorTestLogsContractEvent.factory(
                "logs",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="logs",
            ),
        )


class ERC4626DeployerCoordinatorTestContract(Contract):
    """A web3.py Contract class for the ERC4626DeployerCoordinatorTest contract."""

    abi: ABI = erc4626deployercoordinatortest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60806040819052600c8054600160ff199182168117909255601e8054909116909117905563f877cb1960e01b90526020608452601060a4526f105490925514955357d49410d7d5549360821b60c4526000805160206204853383398151915263f877cb1960e4600060405180830381865afa15801562000083573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000ad919081019062000439565b602c90620000bc90826200059f565b5060405163f877cb1960e01b815260206004820152600c60248201526b109054d157d49410d7d5549360a21b6044820152600080516020620485338339815191529063f877cb1990606401600060405180830381865afa15801562000125573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200014f919081019062000439565b602d906200015e90826200059f565b5060405163f877cb1960e01b815260206004820152601460248201527f474e4f5349535f434841494e5f5250435f55524c0000000000000000000000006044820152600080516020620485338339815191529063f877cb1990606401600060405180830381865afa158015620001d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000202919081019062000439565b602e906200021190826200059f565b5060405163f877cb1960e01b815260206004820152600d60248201526c131253915057d49410d7d55493609a1b6044820152600080516020620485338339815191529063f877cb1990606401600060405180830381865afa1580156200027b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002a5919081019062000439565b602f90620002b490826200059f565b5060405163f877cb1960e01b815260206004820152600f60248201526e1350525393915517d49410d7d55493608a1b6044820152600080516020620485338339815191529063f877cb1990606401600060405180830381865afa15801562000320573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200034a919081019062000439565b6030906200035990826200059f565b5060405163f877cb1960e01b815260206004820152600f60248201526e14d15413d3125057d49410d7d55493608a1b6044820152600080516020620485338339815191529063f877cb1990606401600060405180830381865afa158015620003c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003ef919081019062000439565b603190620003fe90826200059f565b50603580546001600160a01b03191690553480156200041c57600080fd5b506200066b565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200044d57600080fd5b82516001600160401b03808211156200046557600080fd5b818501915085601f8301126200047a57600080fd5b8151818111156200048f576200048f62000423565b604051601f8201601f19908116603f01168101908382118183101715620004ba57620004ba62000423565b816040528281528886848701011115620004d357600080fd5b600093505b82841015620004f75784840186015181850187015292850192620004d8565b600086848301015280965050505050505092915050565b600181811c908216806200052357607f821691505b6020821081036200054457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200059a576000816000526020600020601f850160051c81016020861015620005755750805b601f850160051c820191505b81811015620005965782815560010162000581565b5050505b505050565b81516001600160401b03811115620005bb57620005bb62000423565b620005d381620005cc84546200050e565b846200054a565b602080601f8311600181146200060b5760008415620005f25750858301515b600019600386901b1c1916600185901b17855562000596565b600085815260208120601f198616915b828110156200063c578886015182559484019460019091019084016200061b565b50858210156200065b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b62047eb7806200067c6000396000f3fe60806040523480156200001157600080fd5b5060043610620002a95760003560e01c80637deb70f9116200016d578063b005b4d911620000d3578063dffd3db81162000092578063dffd3db814620004cc578063e0f6703514620004d6578063e20c9f7114620004e0578063f42aaeb614620004ea578063fa7626d414620004f4578063ffff6f97146200050257600080fd5b8063b005b4d91462000489578063b5508aa91462000493578063ba414fa6146200049d578063cb596d5414620004b8578063d3957d4014620004c257600080fd5b806399ea4ed4116200012c57806399ea4ed4146200044d5780639a220dae14620004575780639c688d491462000461578063a5d40480146200046b578063a69cf00c1462000475578063ae9ab85b146200047f57600080fd5b80637deb70f9146200040c57806385226c8114620004165780638ef3f8b8146200042f57806390c9ef931462000439578063916a17c6146200044357600080fd5b8063346ea5ea1162000213578063498184cf11620001d2578063498184cf146200039b578063507ffba514620003a557806360978b3e14620003d557806366d9a9a014620003df5780637c03b6a814620003f85780637ddc732c146200040257600080fd5b8063346ea5ea146200035c5780633e5e0d2614620003665780633e5e3c23146200037d5780633f7286f414620003875780634273bc46146200039157600080fd5b806321a597a7116200026c57806321a597a714620003115780632ade3880146200031b5780632afe66df14620003345780632f8dd15e146200033e5780632f932986146200034857806331ec9b06146200035257600080fd5b806308bb3c7e14620002ae5780630a9254e414620002ba5780631071676014620002c45780631256360214620002ee5780631ed7831c14620002f8575b600080fd5b620002b86200050c565b005b620002b8620006ee565b620002db620002d536600462007981565b62000e93565b6040519081526020015b60405180910390f35b620002b862000f1d565b62000302620015de565b604051620002e5919062007a1a565b620002b862001642565b620003256200179a565b604051620002e5919062007a77565b620002b8620018e8565b620002b862001d29565b620002b862001f41565b620002b862002159565b620002b862002c13565b620002db6200037736600462007b3d565b62002d79565b6200030262002fd9565b620003026200303b565b620002b86200309d565b620002b86200352c565b620003bc620003b636600462007c01565b620035ec565b6040516001600160a01b039091168152602001620002e5565b620002b862003702565b620003e962003b8f565b604051620002e5919062007cbc565b620002b862003c79565b620002b862003ef6565b620002b862004061565b6200042062004190565b604051620002e5919062007d75565b620002b86200426a565b620002b86200433d565b620003e962004467565b620002b862004551565b620002b8620047b1565b620002b862004969565b620002b862004a98565b620002b862004cd2565b620002b862004d0d565b620002b862005086565b6200042062005275565b620004a76200534f565b6040519015158152602001620002e5565b620002b8620053f2565b620002b862005521565b620002b862005604565b620002b8620057f3565b620003026200595d565b620002b8620059bf565b601e54620004a79060ff1681565b620002b862006074565b60008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200055a57600080fd5b505af11580156200056f573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b158015620005cc57600080fd5b505af1158015620005e1573d6000803e3d6000fd5b5050604051630618f58760e51b815260008051602062047e42833981519152925063c31eb0e091506200062090634084351160e01b9060040162007ddd565b600060405180830381600087803b1580156200063b57600080fd5b505af115801562000650573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c15106189250620006a59163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620006c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006eb919062007f35565b50565b620006f862006263565b60008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200074657600080fd5b505af11580156200075b573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b158015620007b857600080fd5b505af1158015620007cd573d6000803e3d6000fd5b505050506012600080600019604051620007e790620076e2565b620007f6949392919062007f55565b604051809103906000f08015801562000813573d6000803e3d6000fd5b50603380546001600160a01b0319166001600160a01b039290921691821790556040516012906000908190600019906200084d90620076f0565b6001600160a01b03958616815260e06020820181905260059082018190526415985d5b1d60da1b6101008301526101206040830181905282015264159055531560da1b6101408201526060810194909452939091166080830152151560a082015260c081019190915261016001604051809103906000f080158015620008d7573d6000803e3d6000fd5b50604d80546001600160a01b0319166001600160a01b03929092169190911790556200090f66b1a2bc2ec500006301e1338062006758565b6038805460398054604085810151603a80546001600160a01b03199081166001600160a01b0393841617909155606080890151603b556080890151603c5560a0890151603d5560c0890151603e5560e0890151603f55610100808a015185556101208a01516041556101408a01516042805485169186169190911790556101608a01516043805485169186169190911790556101808a01516044805485169186169190911790556101a08a01516045805485169186169190911790556101c0909901518051604655602080820151604755818601516048559082015160495560335497831697841697909717909755604d5493169281169290921790925581516102c081018352601e5495909504811685528254811685840152601f541684820152805160008082529281019091529183019190508152602001602560009054906101000a90046001600160a01b03166001600160a01b03168152602001602660009054906101000a90046001600160a01b03166001600160a01b0316815260200160006001600160a01b03168152602001610e108152602001617080815260200162015180815260200162093a8081526020016312cc03008152602001670214e8348c4f00008152602001670853a0d2313c0000815260200166038d7ea4c6800081526020016706f05b59d3b2000081526020016611c37937e0800081526020016706f05b59d3b200008152602001604051806080016040528066038d7ea4c680008152602001655af3107a40008152602001670214e8348c4f00008152602001666a94d74f4300008152508152602001604051806080016040528067016345785d8a00008152602001662386f26fc100008152602001670214e8348c4f00008152602001666a94d74f430000815250815260200163deadbeef6001600160a01b0316815260200163deadbabe60001b81525060405162000bd190620076fe565b62000bdd919062007fcb565b604051809103906000f08015801562000bfa573d6000803e3d6000fd5b50604c80546001600160a01b0319166001600160a01b03929092169182179055604080518082018252601d81527f487970657264726976654465706c6f796572436f6f7264696e61746f720000006020820152905190919062000c5d906200770c565b604051809103906000f08015801562000c7a573d6000803e3d6000fd5b5060405162000c89906200771a565b604051809103906000f08015801562000ca6573d6000803e3d6000fd5b5060405162000cb59062007728565b604051809103906000f08015801562000cd2573d6000803e3d6000fd5b5060405162000ce19062007736565b604051809103906000f08015801562000cfe573d6000803e3d6000fd5b5060405162000d0d9062007744565b604051809103906000f08015801562000d2a573d6000803e3d6000fd5b5060405162000d399062007752565b604051809103906000f08015801562000d56573d6000803e3d6000fd5b5060405162000d659062007760565b62000d78989796959493929190620081d5565b604051809103906000f08015801562000d95573d6000803e3d6000fd5b50604b60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000e0a57600080fd5b505af115801562000e1f573d6000803e3d6000fd5b5050604c546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b15801562000e7857600080fd5b505af115801562000e8d573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b81526001600160a01b03808516600483015260009162000f1391869186918216906370a0823190602401602060405180830381865afa15801562000ee6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f0c919062008235565b8562002d79565b90505b9392505050565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000f74573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f9a919062008235565b8110156200104257604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062000ff29063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562001012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001038919062007f35565b5060010162000f20565b50604b54604080518082018252600a8152694879706572647269766560b01b6020808301919091528251600080825291810193849052631d321d7560e31b909352926001600160a01b03169163e990eba891620010b49163deadbeef9190603890650decafc0ffee602482016200824f565b6020604051808303816000875af1158015620010d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010fa919062007f35565b905060008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200114a57600080fd5b505af11580156200115f573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b158015620011bc57600080fd5b505af1158015620011d1573d6000803e3d6000fd5b505060335460405163140e25ad60e31b815269152d02c7e14af68000006004820181905293506001600160a01b03909116915063a0712d6890602401600060405180830381600087803b1580156200122857600080fd5b505af11580156200123d573d6000803e3d6000fd5b5050603354604d5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529116925063095ea7b391506044016020604051808303816000875af115801562001297573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012bd9190620082a5565b50604d54601e54604051636e553f6560e01b8152600481018490526101009091046001600160a01b0390811660248301526000921690636e553f65906044016020604051808303816000875af11580156200131c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001342919062008235565b604d54604b5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b3906044016020604051808303816000875af11580156200139a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013c09190620082a5565b5060008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200140f57600080fd5b505af115801562001424573d6000803e3d6000fd5b5050604c546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b1580156200147d57600080fd5b505af115801562001492573d6000803e3d6000fd5b5050604b54601e54604080516060810182526101009092046001600160a01b03908116808452600060208086018290528451828152908101855285850152925163016abfc760e41b8152929650931693506316abfc7092620015089263deadbeef92889166b1a2bc2ec5000091600401620082c9565b6020604051808303816000875af115801562001528573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200154e919062008235565b905062000e8d81856001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001595573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015bb919062008398565b60a00151620015cc906002620084c1565b620015d89085620084db565b620068a7565b606060168054806020026020016040519081016040528092919081815260200182805480156200163857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001619575b5050505050905090565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c151061891620016939163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620016b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016d9919062007f35565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e0906200171590631d9f815960e11b9060040162007ddd565b600060405180830381600087803b1580156200173057600080fd5b505af115801562001745573d6000803e3d6000fd5b5050604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b03909116925063c15106189150620006a59063deadbeef906038906006650decafc0ffee6024830162007ee0565b6060601d805480602002602001604051908101604052809291908181526020016000905b82821015620018df57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b82821015620018c75783829060005260206000200180546200183390620084f1565b80601f01602080910402602001604051908101604052809291908181526020018280546200186190620084f1565b8015620018b25780601f106200188657610100808354040283529160200191620018b2565b820191906000526020600020905b8154815290600101906020018083116200189457829003601f168201915b50505050508152602001906001019062001811565b505050508152505081526020019060010190620017be565b50505050905090565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200193f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001965919062008235565b81101562001a0d57604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c151061890620019bd9063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620019dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a03919062007f35565b50600101620018eb565b50604b54604080518082018252600a8152694879706572647269766560b01b6020808301919091528251600080825291810193849052631d321d7560e31b909352926001600160a01b03169163e990eba89162001a7f9163deadbeef9190603890650decafc0ffee602482016200824f565b6020604051808303816000875af115801562001a9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ac5919062007f35565b604b54604051638a47460f60e01b8152600060048201529192506001600160a01b031690638a47460f90602401600060405180830381600087803b15801562001b0d57600080fd5b505af115801562001b22573d6000803e3d6000fd5b505060335460405163140e25ad60e31b815269152d02c7e14af68000006004820181905293506001600160a01b03909116915063a0712d6890602401600060405180830381600087803b15801562001b7957600080fd5b505af115801562001b8e573d6000803e3d6000fd5b505060335460405163095ea7b360e01b81526001600160a01b03868116600483015260248201869052909116925063095ea7b391506044016020604051808303816000875af115801562001be6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c0c9190620082a5565b5060008051602062047e6283398151915260001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001c5b57600080fd5b505af115801562001c70573d6000803e3d6000fd5b5050604b5460408051606081018252338082526001602080840191909152835160008152908101845282840152915163016abfc760e41b81526001600160a01b0390931694506316abfc70935062001cde9263deadbeef9291879166b1a2bc2ec500009190600401620082c9565b6020604051808303816000875af115801562001cfe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d24919062008235565b505050565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001d80573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001da6919062008235565b81101562001e4e57604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062001dfe9063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562001e1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e44919062007f35565b5060010162001d2c565b5060465462001e5f9060016200852d565b604655604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e09062001e9d9063332ee11f60e01b9060040162007ddd565b600060405180830381600087803b15801562001eb857600080fd5b505af115801562001ecd573d6000803e3d6000fd5b5050604b54604080518082018252600a8152694879706572647269766560b01b60208083019190915282516000815290810192839052631d321d7560e31b9092526001600160a01b03909216935063e990eba89250620006a59163deadbeef91603890650decafc0ffee602482016200824f565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001f98573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001fbe919062008235565b8110156200206657604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c151061890620020169063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002036573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200205c919062007f35565b5060010162001f44565b50604b54604080518082018252600a8152694879706572647269766560b01b60208083019190915282516000815290810192839052631d321d7560e31b9092526001600160a01b039092169163e990eba891620020d79163deadbeef91603890650decafc0ffee602482016200824f565b6020604051808303816000875af1158015620020f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200211d919062007f35565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e09062001e9d90632c95caeb60e01b9060040162007ddd565b604b54604051630aa3e0ed60e21b8152600060048201526001600160a01b0390911690632a8f83b490602401600060405180830381600087803b158015620021a057600080fd5b505af1158015620021b5573d6000803e3d6000fd5b505060405163f28dceb360e01b815260008051602062047e42833981519152925063f28dceb39150620021eb9060040162008543565b600060405180830381600087803b1580156200220657600080fd5b505af11580156200221b573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c15106189250620022709163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002290573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022b6919062007f35565b50604b54604051630aa3e0ed60e21b8152600160048201526001600160a01b0390911690632a8f83b490602401600060405180830381600087803b158015620022fe57600080fd5b505af115801562002313573d6000803e3d6000fd5b5050603c80546064909155604051630618f58760e51b815290925060008051602062047e42833981519152915063c31eb0e0906200235d906349db44f560e01b9060040162007ddd565b600060405180830381600087803b1580156200237857600080fd5b505af11580156200238d573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c15106189250620023e29163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002402573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002428919062007f35565b50603c5560408054600082559051630618f58760e51b815260008051602062047e428339815191529063c31eb0e0906200246e90635428734d60e01b9060040162007ddd565b600060405180830381600087803b1580156200248957600080fd5b505af11580156200249e573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c15106189250620024f39163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002539919062007f35565b506040819055603f54906200255190600190620084db565b603f55604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e0906200258f9063253fffcf60e11b9060040162007ddd565b600060405180830381600087803b158015620025aa57600080fd5b505af1158015620025bf573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c15106189250620026149163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200265a919062007f35565b50603f819055604054620026709060016200852d565b603f55604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e090620026ae9063253fffcf60e11b9060040162007ddd565b600060405180830381600087803b158015620026c957600080fd5b505af1158015620026de573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c15106189250620027339163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002753573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002779919062007f35565b50603f5560465462002795670de0b6b3a764000060016200852d565b604655604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e090620027d3906322f72cc360e11b9060040162007ddd565b600060405180830381600087803b158015620027ee57600080fd5b505af115801562002803573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c15106189250620028589163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002878573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200289e919062007f35565b50604655604754620028ba670de0b6b3a764000060016200852d565b604755604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e090620028f8906322f72cc360e11b9060040162007ddd565b600060405180830381600087803b1580156200291357600080fd5b505af115801562002928573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c151061892506200297d9163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af11580156200299d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029c3919062007f35565b50604755604854620029df670de0b6b3a764000060016200852d565b604855604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e09062002a1d906322f72cc360e11b9060040162007ddd565b600060405180830381600087803b15801562002a3857600080fd5b505af115801562002a4d573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c1510618925062002aa29163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002ac2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ae8919062007f35565b5060485560495462002b04670de0b6b3a764000060016200852d565b604955604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e09062002b42906322f72cc360e11b9060040162007ddd565b600060405180830381600087803b15801562002b5d57600080fd5b505af115801562002b72573d6000803e3d6000fd5b5050604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b03909216935063c1510618925062002bc79163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002be7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c0d919062007f35565b50604955565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c15106189162002c649163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562002c84573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002caa919062007f35565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e09062002ce690631a3272d160e31b9060040162007ddd565b600060405180830381600087803b15801562002d0157600080fd5b505af115801562002d16573d6000803e3d6000fd5b5050604b546040805163deadbeef6020808301829052835180840390910181528284019384905263182a20c360e31b9093526001600160a01b03909316945063c15106189350620006a59291603891600190650decafc0ffee9060440162007ee0565b6040516370a0823160e01b81526001600160a01b03858116600483015260009182918616906370a0823190602401602060405180830381865afa15801562002dc5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002deb919062008235565b90508084111562002e0f5760405163188c93a560e31b815260040160405180910390fd5b60008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002e5d57600080fd5b505af115801562002e72573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038916600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b15801562002ec757600080fd5b505af115801562002edc573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526001600160a01b0389166004820152670de0b6b3a7640000602482015260008051602062047e42833981519152925063c88a5e6d9150604401600060405180830381600087803b15801562002f3f57600080fd5b505af115801562002f54573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890528816925063a9059cbb91506044016020604051808303816000875af115801562002fa8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002fce9190620082a5565b509295945050505050565b6060601880548060200260200160405190810160405280929190818152602001828054801562001638576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001619575050505050905090565b6060601780548060200260200160405190810160405280929190818152602001828054801562001638576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001619575050505050905090565b604b54604080516374cdf1cb60e11b815290516000926001600160a01b03169163e99be3969160048083019260209291908290030181865afa158015620030e8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200310e919062008235565b67ffffffffffffffff81111562003129576200312962007b97565b60405190808252806020026020018201604052801562003153578160200160208202803683370190505b50905060005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa158015620031ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620031d3919062008235565b811015620032a757604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c1510618906200322b9063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af11580156200324b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003271919062007f35565b8282815181106200328657620032866200858a565b6001600160a01b039092166020928302919091019091015260010162003159565b50604b54604080518082018252600a8152694879706572647269766560b01b6020808301919091528251600080825291810193849052631d321d7560e31b909352926001600160a01b03169163e990eba891620033199163deadbeef9190603890650decafc0ffee602482016200824f565b6020604051808303816000875af115801562003339573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200335f919062007f35565b604b54604051633740401760e01b815263deadbeef60048201529192506000916001600160a01b039091169063374040179060240161012060405180830381865afa158015620033b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620033d99190620085a0565b90506200341481600001516038604051602001620033f8919062008645565b604051602081830303815290604052805190602001206200690b565b60208101516200345a9060005b6040519080825280601f01601f1916602001820160405280156200344c576020820181803683370190505b50805190602001206200690b565b620034728160400151670de0b6b3a7640000620068a7565b6200349f8160800151846000815181106200349157620034916200858a565b602002602001015162006946565b620034be8160a00151846001815181106200349157620034916200858a565b620034dd8160c00151846002815181106200349157620034916200858a565b620034fc8160e00151846003815181106200349157620034916200858a565b6200351c816101000151846004815181106200349157620034916200858a565b62001d2481606001518362006946565b604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e090620035679063398b1c0960e21b9060040162007ddd565b600060405180830381600087803b1580156200358257600080fd5b505af115801562003597573d6000803e3d6000fd5b5050604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b03909116925063c15106189150620006a59063deadbeef906038906001650decafc0ffee6024830162007ee0565b60008160405160200162003601919062008656565b60408051601f198184030181529082905280516020909101206318caf8e360e31b8252915060008051602062047e428339815191529063c657c718906200364f90849086906004016200866b565b600060405180830381600087803b1580156200366a57600080fd5b505af11580156200367f573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526001600160a01b038416600482015269021e19e0c9bab2400000602482015260008051602062047e42833981519152925063c88a5e6d9150604401600060405180830381600087803b158015620036e457600080fd5b505af1158015620036f9573d6000803e3d6000fd5b50505050919050565b604b54604080516000808252602082019283905263182a20c360e31b90925290916001600160a01b03169063c151061890620037539063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562003773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003799919062007f35565b604b54604051633740401760e01b815263deadbeef60048201529192506000916001600160a01b039091169063374040179060240161012060405180830381865afa158015620037ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620038139190620085a0565b90506200383281600001516038604051602001620033f8919062008645565b60208101516200384490600062003421565b6200385c8160400151670de0b6b3a7640000620068a7565b6200386c81608001518362006946565b60006001604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa158015620038c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620038ea919062008235565b620038f69190620084db565b67ffffffffffffffff81111562003911576200391162007b97565b6040519080825280602002602001820160405280156200393b578160200160208202803683370190505b50905060015b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003995573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620039bb919062008235565b81101562003a9b57604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062003a139063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562003a33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003a59919062007f35565b8262003a67600184620084db565b8151811062003a7a5762003a7a6200858a565b6001600160a01b039092166020928302919091019091015260010162003941565b50604b54604051633740401760e01b815263deadbeef60048201526001600160a01b039091169063374040179060240161012060405180830381865afa15801562003aea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b109190620085a0565b915062003b318260a00151826000815181106200349157620034916200858a565b62003b508260c00151826001815181106200349157620034916200858a565b62003b6f8260e00151826002815181106200349157620034916200858a565b62001d24826101000151826003815181106200349157620034916200858a565b6060601b805480602002602001604051908101604052809291908181526020016000905b82821015620018df5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562003c6057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162003c215790505b5050505050815250508152602001906001019062003bb3565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003cd0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003cf6919062008235565b81101562003d9e57604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062003d4e9063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562003d6e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003d94919062007f35565b5060010162003c7c565b50604051630618f58760e51b815269152d02c7e14af68000009060008051602062047e428339815191529063c31eb0e09062003de69063952b05cb60e01b9060040162007ddd565b600060405180830381600087803b15801562003e0157600080fd5b505af115801562003e16573d6000803e3d6000fd5b5050604b546040805160608101825233808252600160208301526001600160a01b0390931694506316abfc70935063deadbeef9291869166b1a2bc2ec5000091810160005b6040519080825280601f01601f19166020018201604052801562003e86576020820181803683370190505b508152506040518663ffffffff1660e01b815260040162003eac959493929190620082c9565b6020604051808303816000875af115801562003ecc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003ef2919062008235565b5050565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003f4d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003f73919062008235565b8110156200402557600481146200401c57604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062003fd49063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562003ff4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200401a919062007f35565b505b60010162003ef9565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e09062001e9d9063e97cc2bf60e01b9060040162007ddd565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa158015620040b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620040de919062008235565b8110156200402557600381146200418757604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c1510618906200413f9063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af11580156200415f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004185919062007f35565b505b60010162004064565b6060601a805480602002602001604051908101604052809291908181526020016000905b82821015620018df578382906000526020600020018054620041d690620084f1565b80601f01602080910402602001604051908101604052809291908181526020018280546200420490620084f1565b8015620042555780601f10620042295761010080835404028352916020019162004255565b820191906000526020600020905b8154815290600101906020018083116200423757829003601f168201915b505050505081526020019060010190620041b4565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c151061891620042bb9163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620042db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004301919062007f35565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e0906200062090633be1b34d60e11b9060040162007ddd565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c1510618916200438e9163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620043ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620043d4919062007f35565b50604b54604051630aa3e0ed60e21b8152600060048201526001600160a01b0390911690632a8f83b490602401600060405180830381600087803b1580156200441c57600080fd5b505af115801562004431573d6000803e3d6000fd5b505060405163f28dceb360e01b815260008051602062047e42833981519152925063f28dceb39150620035679060040162008543565b6060601c805480602002602001604051908101604052809291908181526020016000905b82821015620018df5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200453857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620044f95790505b505050505081525050815260200190600101906200448b565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa158015620045a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620045ce919062008235565b8110156200467657604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c151061890620046269063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562004646573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200466c919062007f35565b5060010162004554565b506040805163deadbeef60208201526000910160408051601f1981840301815290829052630618f58760e51b8252915060008051602062047e428339815191529063c31eb0e090620046d490631a3272d160e31b9060040162007ddd565b600060405180830381600087803b158015620046ef57600080fd5b505af115801562004704573d6000803e3d6000fd5b5050604b54604080518082018252600a8152694879706572647269766560b01b60208201529051631d321d7560e31b81526001600160a01b03909216935063e990eba892506200476b9163deadbeef91906038908790650decafc0ffee906004016200824f565b6020604051808303816000875af11580156200478b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003ef2919062007f35565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562004808573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200482e919062008235565b811015620048d657604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c151061890620048869063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620048a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620048cc919062007f35565b50600101620047b4565b50604b54604051630aa3e0ed60e21b8152600060048201526001600160a01b0390911690632a8f83b490602401600060405180830381600087803b1580156200491e57600080fd5b505af115801562004933573d6000803e3d6000fd5b505060405163f28dceb360e01b815260008051602062047e42833981519152925063f28dceb3915062001e9d9060040162008543565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa158015620049c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620049e6919062008235565b81101562004025576001811462004a8f57604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062004a479063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562004a67573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004a8d919062007f35565b505b6001016200496c565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562004aef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004b15919062008235565b81101562004bbd57604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062004b6d9063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562004b8d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004bb3919062007f35565b5060010162004a9b565b5060008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562004c0c57600080fd5b505af115801562004c21573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b15801562004c7e57600080fd5b505af115801562004c93573d6000803e3d6000fd5b5050604051630618f58760e51b815260008051602062047e42833981519152925063c31eb0e0915062001e9d90634084351160e01b9060040162007ddd565b604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e09062001e9d9063398b1c0960e21b9060040162007ddd565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562004d64573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004d8a919062008235565b81101562004e3257604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062004de29063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562004e02573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004e28919062007f35565b5060010162004d10565b50604b54604080518082018252600a8152694879706572647269766560b01b60208083019190915282516000815290810192839052631d321d7560e31b9092526001600160a01b039092169163e990eba89162004ea39163deadbeef91603890650decafc0ffee602482016200824f565b6020604051808303816000875af115801562004ec3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004ee9919062007f35565b5060008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562004f3857600080fd5b505af115801562004f4d573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b15801562004faa57600080fd5b505af115801562004fbf573d6000803e3d6000fd5b5050604051630618f58760e51b815260008051602062047e42833981519152925063c31eb0e0915062004ffe90634084351160e01b9060040162007ddd565b600060405180830381600087803b1580156200501957600080fd5b505af11580156200502e573d6000803e3d6000fd5b5050604b5460408051606081018252338082526001602083015269152d02c7e14af680000095506001600160a01b0390931693506316abfc709263deadbeef929091869166b1a2bc2ec5000091908101600062003e5b565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c151061891620050d79163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620050f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200511d919062007f35565b50604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c1510618906200516f9063deadbeef906038906003650decafc0ffee6024830162007ee0565b6020604051808303816000875af11580156200518f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620051b5919062007f35565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e090620051f09062e896af60e31b9060040162007ddd565b600060405180830381600087803b1580156200520b57600080fd5b505af115801562005220573d6000803e3d6000fd5b5050604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b03909116925063c15106189150620006a59063deadbeef906038906003650decafc0ffee6024830162007ee0565b60606019805480602002602001604051908101604052809291908181526020016000905b82821015620018df578382906000526020600020018054620052bb90620084f1565b80601f0160208091040260200160405190810160405280929190818152602001828054620052e990620084f1565b80156200533a5780601f106200530e576101008083540402835291602001916200533a565b820191906000526020600020905b8154815290600101906020018083116200531c57829003601f168201915b50505050508152602001906001019062005299565b60085460009060ff161562005368575060085460ff1690565b604051630667f9d760e41b815260008051602062047e42833981519152600482018190526519985a5b195960d21b602483015260009163667f9d7090604401602060405180830381865afa158015620053c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620053eb919062008235565b1415905090565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562005449573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200546f919062008235565b8110156200402557600281146200551857604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c151061890620054d09063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620054f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005516919062007f35565b505b600101620053f5565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c151061891620055729163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562005592573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620055b8919062007f35565b50603880546001600160a01b0319169055604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e090620035679063332ee11f60e01b9060040162007ddd565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c151061891620056559163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562005675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200569b919062007f35565b50604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c151061890620056ed9063deadbeef906038906004650decafc0ffee6024830162007ee0565b6020604051808303816000875af11580156200570d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005733919062007f35565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e0906200576e9062e896af60e31b9060040162007ddd565b600060405180830381600087803b1580156200578957600080fd5b505af11580156200579e573d6000803e3d6000fd5b5050604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b03909116925063c15106189150620006a59063deadbeef906038906004650decafc0ffee6024830162007ee0565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c151061891620058449163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562005864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200588a919062007f35565b50604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c151061890620058dc9063deadbeef906038906001650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620058fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005922919062007f35565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e090620035679062e896af60e31b9060040162007ddd565b6060601580548060200260200160405190810160405280929190818152602001828054801562001638576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001619575050505050905090565b60005b604b60009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562005a16573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005a3c919062008235565b81101562005ae457604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c15106189062005a949063deadbeef9060389086650decafc0ffee6024830162007ee0565b6020604051808303816000875af115801562005ab4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005ada919062007f35565b50600101620059c2565b50604b54604080518082018252600a8152694879706572647269766560b01b6020808301919091528251600080825291810193849052631d321d7560e31b909352926001600160a01b03169163e990eba89162005b569163deadbeef9190603890650decafc0ffee602482016200824f565b6020604051808303816000875af115801562005b76573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005b9c919062007f35565b905060008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562005bec57600080fd5b505af115801562005c01573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b15801562005c5e57600080fd5b505af115801562005c73573d6000803e3d6000fd5b505060335460405163140e25ad60e31b815269152d02c7e14af68000006004820181905293506001600160a01b03909116915063a0712d6890602401600060405180830381600087803b15801562005cca57600080fd5b505af115801562005cdf573d6000803e3d6000fd5b5050603354604b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529116925063095ea7b391506044016020604051808303816000875af115801562005d39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005d5f9190620082a5565b5060008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562005dae57600080fd5b505af115801562005dc3573d6000803e3d6000fd5b5050604c546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b15801562005e1c57600080fd5b505af115801562005e31573d6000803e3d6000fd5b5050604b54601e54604080516060810182526101009092046001600160a01b03908116808452600160208086019190915283516000808252918101855285850152925163016abfc760e41b8152929650931693506316abfc709262005eaa9263deadbeef92889166b1a2bc2ec5000091600401620082c9565b6020604051808303816000875af115801562005eca573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005ef0919062008235565b905062005ff081846001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562005f37573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005f5d919062008398565b60a0015162005f6e906002620084c1565b62005fe4866001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562005fb2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005fd8919062008398565b6080015186906200698a565b620015d89190620084db565b601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b03908116602483015262001d24918391861690633656eec290604401602060405180830381865afa1580156200604e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015d8919062008235565b604b54604080516000808252602082019283905263182a20c360e31b9092526001600160a01b039092169163c151061891620060c59163deadbeef9160389190650decafc0ffee6024830162007ee0565b6020604051808303816000875af1158015620060e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200610b919062007f35565b50604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b039091169063c1510618906200615d9063deadbeef906038906002650decafc0ffee6024830162007ee0565b6020604051808303816000875af11580156200617d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620061a3919062007f35565b50604051630618f58760e51b815260008051602062047e428339815191529063c31eb0e090620061de9062e896af60e31b9060040162007ddd565b600060405180830381600087803b158015620061f957600080fd5b505af11580156200620e573d6000803e3d6000fd5b5050604b546040805160008152602081019182905263182a20c360e31b9091526001600160a01b03909116925063c15106189150620006a59063deadbeef906038906002650decafc0ffee6024830162007ee0565b6200626d620069a1565b601e546040516303223eab60e11b81526101009091046001600160a01b0316600482015260008051602062047e42833981519152906306447d5690602401600060405180830381600087803b158015620062c657600080fd5b505af1158015620062db573d6000803e3d6000fd5b505050506012600080600019604051620062f590620076e2565b62006304949392919062008691565b604051809103906000f08015801562006321573d6000803e3d6000fd5b50603380546001600160a01b0319166001600160a01b039290921691909117905560405162006350906200776e565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103906000f08015801562006394573d6000803e3d6000fd5b50603260016101000a8154816001600160a01b0302191690836001600160a01b03160217905550604051620063c9906200777c565b604051809103906000f080158015620063e6573d6000803e3d6000fd5b50603480546001600160a01b0319166001600160a01b0392831690811790915560295460408051637ab4339d60e01b81526004810191909152601260448201527148797065726472697665526567697374727960701b60648201529216602483015290637ab4339d90608401600060405180830381600087803b1580156200646d57600080fd5b505af115801562006482573d6000803e3d6000fd5b5050505060006200649f66b1a2bc2ec500006301e1338062006d71565b6040805160018082528183019092529192506000919060208083019080368337505060285482519293506001600160a01b031691839150600090620064e857620064e86200858a565b60200260200101906001600160a01b031690816001600160a01b031681525050816101600151826101800151836101a00151846101c00151846040516200652f906200778a565b6200653f959493929190620086d2565b604051809103906000f0801580156200655c573d6000803e3d6000fd5b50603780546001600160a01b0319166001600160a01b03928316179055601e546200658f91610100909104168362006e63565b60008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620065dd57600080fd5b505af1158015620065f2573d6000803e3d6000fd5b50506027546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b1580156200664b57600080fd5b505af115801562006660573d6000803e3d6000fd5b50506036546028546040516338c0646560e11b81526001600160a01b0391821660048201526001602482015291169250637180c8ca9150604401600060405180830381600087803b158015620066b557600080fd5b505af1158015620066ca573d6000803e3d6000fd5b505060325460ff16915062003ef290505760008051602062047e4283398151915263e5d6bf02620067016301e133806003620084c1565b6040518263ffffffff1660e01b81526004016200672091815260200190565b600060405180830381600087803b1580156200673b57600080fd5b505af115801562006750573d6000803e3d6000fd5b505050505050565b6200676262007798565b6040805160808101825260008082526020808301829052828401829052606080840183905284516101e0810186526033546001600160a01b039081168252818401949094526032546101009004909316838601819052855163d13053bb60e01b815295519495939491850193909263d13053bb926004808401938290030181865afa158015620067f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200681c919062008235565b8152602001670de0b6b3a7640000815260200166038d7ea4c680008152602001671bc16d674ec80000815260200184815260200162015180815260200162006865868662007391565b81526027546001600160a01b039081166020830152602554811660408301526026548116606083015260355416608082015260a0019190915290505b92915050565b60405163260a5b1560e21b8152600481018390526024810182905260008051602062047e42833981519152906398296c54906044015b60006040518083038186803b158015620068f657600080fd5b505afa15801562006750573d6000803e3d6000fd5b604051637c84c69b60e01b8152600481018390526024810182905260008051602062047e4283398151915290637c84c69b90604401620068dd565b6040516328a9b0fb60e11b81526001600160a01b0380841660048301528216602482015260008051602062047e428339815191529063515361f690604401620068dd565b600062000f1683670de0b6b3a76400008462007454565b620069c960405180604001604052806005815260200164616c69636560d81b815250620035ec565b601e60016101000a8154816001600160a01b0302191690836001600160a01b0316021790555062006a15604051806040016040528060038152602001623137b160e91b815250620035ec565b601f80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526563656c696e6560d01b602082015262006a5d90620035ec565b602060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555062006aa9604051806040016040528060038152602001623230b760e91b815250620035ec565b602180546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600381526265766560e81b602082015262006aee90620035ec565b602280546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260088152673232b83637bcb2b960c11b602082015262006b3890620035ec565b602480546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526536b4b73a32b960d11b602082015262006b8090620035ec565b602380546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b3332b2a1b7b63632b1ba37b960a11b602082015262006bce90620035ec565b602580546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600e81526d39bbb2b2b821b7b63632b1ba37b960911b602082015262006c1e90620035ec565b602680546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600a815269676f7665726e616e636560b01b602082015262006c6a90620035ec565b602780546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260068152653830bab9b2b960d11b602082015262006cb290620035ec565b602880546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260098152683932b3b4b9ba3930b960b91b602082015262006cfd90620035ec565b602980546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b726577617264536f7572636560a01b602082015262006d4b90620035ec565b602a80546001600160a01b0319166001600160a01b039290921691909117905542602b55565b62006d7b62007879565b600062006d89848462006758565b80516001600160a01b0390811684526020808301518216908501526040808301518216908501526060808301519085015260808083015160a08087019190915283015160c08087019190915283015160e08087019190915283015161010080870191909152830151610120808701919091528301516101408087019190915283015182166101608087019190915283015182166101808087019190915283015182166101a0808701919091528301519091166101c080860191909152909101516101e0840152670de0b6b3a7640000908301525092915050565b60008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562006eb157600080fd5b505af115801562006ec6573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038516600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b15801562006f1b57600080fd5b505af115801562006f30573d6000803e3d6000fd5b50506037546040518493506001600160a01b03909116915062006f53906200795c565b62006f609291906200871b565b604051809103906000f08015801562006f7d573d6000803e3d6000fd5b50603680546001600160a01b0319166001600160a01b0392831617905560375461016083015160405163dd2b8fbb60e01b8152908316600482015291169063dd2b8fbb90602401600060405180830381600087803b15801562006fdf57600080fd5b505af115801562006ff4573d6000803e3d6000fd5b5050603754610180840151604051631a586b9d60e31b81526001600160a01b0391821660048201529116925063d2c35ce89150602401600060405180830381600087803b1580156200704557600080fd5b505af11580156200705a573d6000803e3d6000fd5b50506037546101808401516040516308627a4f60e41b81526001600160a01b03918216600482015291169250638627a4f09150602401600060405180830381600087803b158015620070ab57600080fd5b505af1158015620070c0573d6000803e3d6000fd5b50506037546101c0840151604051630f8b480560e21b81526001600160a01b03918216600482015291169250633e2d20149150602401600060405180830381600087803b1580156200711157600080fd5b505af115801562007126573d6000803e3d6000fd5b5050505060008051602062047e6283398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200717857600080fd5b505af11580156200718d573d6000803e3d6000fd5b50506029546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062047e4283398151915292506306447d569150602401600060405180830381600087803b158015620071e657600080fd5b505af1158015620071fb573d6000803e3d6000fd5b5060009250600191506200720c9050565b60405190808252806020026020018201604052801562007236578160200160208202803683370190505b5060408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060365485519293506001600160a01b031691859150600090620072a357620072a36200858a565b60200260200101906001600160a01b031690816001600160a01b031681525050600182600081518110620072db57620072db6200858a565b60200260200101906001600160801b031690816001600160801b0316815250506000816000815181106200731357620073136200858a565b6001600160a01b039283166020918202929092010152603454604051630ff9856960e11b8152911690631ff30ad29062007356908690869086906004016200884a565b600060405180830381600087803b1580156200737157600080fd5b505af115801562007386573d6000803e3d6000fd5b505050505050505050565b600080620073c8620073b8620073a9866064620084c1565b66a5bbed86c5a0009062007473565b6748cd4072281e0000906200698a565b9050620073de670de0b6b3a7640000826200698a565b90506200744c8162007445620074116200740b6200740589670de0b6b3a76400006200852d565b6200748a565b620074b9565b6200743e6200740b6200742a8a8a6301e1338062007454565b6200740590670de0b6b3a76400006200852d565b906200698a565b9062007473565b949350505050565b60008260001904841183021582026200746c57600080fd5b5091020490565b600062000f168383670de0b6b3a764000062007454565b60006001600160ff1b03821115620074b55760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213620074dc5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190620075619084901c6200748a565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b61203580620088b883390190565b613023806200a8ed83390190565b61412c806200d91083390190565b6121f38062011a3c83390190565b61451d8062013c2f83390190565b614742806201814c83390190565b6148ae806201c88e83390190565b61482b806202113c83390190565b613b47806202596783390190565b61271f80620294ae83390190565b6118f4806202bbcd83390190565b612963806202d4c183390190565b610549806202fe2483390190565b604051806101e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001620078746040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001620078746040518060800160405280600081526020016000815260200160008152602001600081525090565b62017ad5806203036d83390190565b6001600160a01b0381168114620006eb57600080fd5b6000806000606084860312156200799757600080fd5b8335620079a4816200796b565b92506020840135620079b6816200796b565b91506040840135620079c8816200796b565b809150509250925092565b60008151808452602080850194506020840160005b8381101562007a0f5781516001600160a01b031687529582019590820190600101620079e8565b509495945050505050565b60208152600062000f166020830184620079d3565b6000815180845260005b8181101562007a575760208185018101518683018201520162007a39565b506000602082860101526020601f19601f83011685010191505092915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101562007b2d57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101562007b1657605f1989850301835262007b0384865162007a2f565b948e01949350918d019160010162007ae4565b505050978a01979450509188019160010162007a9e565b50919a9950505050505050505050565b6000806000806080858703121562007b5457600080fd5b843562007b61816200796b565b9350602085013562007b73816200796b565b925060408501359150606085013562007b8c816200796b565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff8111828210171562007bd45762007bd462007b97565b60405290565b604051610120810167ffffffffffffffff8111828210171562007bd45762007bd462007b97565b60006020828403121562007c1457600080fd5b813567ffffffffffffffff8082111562007c2d57600080fd5b818401915084601f83011262007c4257600080fd5b81358181111562007c575762007c5762007b97565b604051601f8201601f19908116603f0116810190838211818310171562007c825762007c8262007b97565b8160405282815287602084870101111562007c9c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b8481101562007d6657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b8083101562007d505783516001600160e01b0319168252928b019260019290920191908b019062007d24565b50978a0197955050509187019160010162007ce6565b50919998505050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101562007dd057603f1988860301845262007dbd85835162007a2f565b9450928501929085019060010162007d9e565b5092979650505050505050565b6001600160e01b031991909116815260200190565b62007e168262007e0983546001600160a01b031690565b6001600160a01b03169052565b60018101546001600160a01b0390811660208401526002820154811660408401526003820154606084015260048201546080840152600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a8201548116610140840152600b8201548116610160840152600c8201548116610180840152600d820154166101a0830152600e8101546101c0830152600f8101546101e083015260108101546102008301526011015461022090910152565b60006102c087835262007ef7602084018862007df2565b8061026084015262007f0c8184018762007a2f565b61028084019590955250506102a001529392505050565b805162007f30816200796b565b919050565b60006020828403121562007f4857600080fd5b815162000f16816200796b565b60c08152600a60c0820152692130b9b2902a37b5b2b760b11b60e0820152600061010080602084015262007f9c81840160048152634241534560e01b602082015260400190565b60ff97909716604084015250506001600160a01b03939093166060840152901515608083015260a09091015290565b6040815262007fe66040820183516001600160a01b03169052565b600060208301516200800360608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161038060a08401819052620080366103c0850183620079d3565b915060808501516200805360c08601826001600160a01b03169052565b5060a08501516001600160a01b03811660e08601525060c085015161010062008086818701836001600160a01b03169052565b60e087015161012087810191909152908701516101408088019190915290870151610160808801919091529087015161018080880191909152908701516101a080880191909152908701516101c080880191909152908701516101e0808801919091529087015161020080880191909152908701516102208088019190915290870151610240808801919091529087015161026080880191909152908701519150610280906200815982880184805182526020810151602083015260408101516040830152606081015160608301525050565b87015180516103008801526020808201516103208901526040808301516103408a0152606090920151610360890152918801516001600160a01b0316938701939093526102a08701516103a087015285840381870152601184527048797065726472697665466163746f727960781b908401525081016200744c565b6000610100808352620081eb8184018c62007a2f565b6001600160a01b039a8b166020850152988a16604084015250509487166060860152928616608085015290851660a0840152841660c083015290921660e090920191909152919050565b6000602082840312156200824857600080fd5b5051919050565b60006102c08783528060208401526200826b8184018862007a2f565b90506200827c604084018762007df2565b82810361028084015262008291818662007a2f565b915050826102a08301529695505050505050565b600060208284031215620082b857600080fd5b8151801515811462000f1657600080fd5b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e08401526200832261010084018262007a2f565b98975050505050505050565b6000608082840312156200834157600080fd5b6040516080810181811067ffffffffffffffff8211171562008367576200836762007b97565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006102608284031215620083ac57600080fd5b620083b662007bad565b620083c18362007f23565b8152620083d16020840162007f23565b6020820152620083e46040840162007f23565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101606200844f81850162007f23565b908201526101806200846384820162007f23565b908201526101a06200847784820162007f23565b908201526101c06200848b84820162007f23565b908201526101e0620084a0858583016200832e565b908201529392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620068a157620068a1620084ab565b81810381811115620068a157620068a1620084ab565b600181811c908216806200850657607f821691505b6020821081036200852757634e487b7160e01b600052602260045260246000fd5b50919050565b80820180821115620068a157620068a1620084ab565b60208082526027908201527f4d6f636b4465706c6f796572436f6f7264696e61746f723a20696e76616c696460408201526620636f6e66696760c81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006101208284031215620085b457600080fd5b620085be62007bda565b825181526020830151602082015260408301516040820152620085e46060840162007f23565b6060820152620085f76080840162007f23565b60808201526200860a60a0840162007f23565b60a08201526200861d60c0840162007f23565b60c08201526200863060e0840162007f23565b60e0820152610100620084a081850162007f23565b6102408101620068a1828462007df2565b60208152600062000f16602083018462007a2f565b6001600160a01b038316815260406020820181905260009062000f139083018462007a2f565b60c08152600460c0820152634261736560e01b60e0820152600061010080602084015262007f9c81840160048152634241534560e01b602082015260400190565b6001600160a01b038681168252858116602083015284811660408301528316606082015260a0608082018190526000906200871090830184620079d3565b979650505050505050565b82516001600160a01b03168152610280810160208401516200874860208401826001600160a01b03169052565b5060408401516200876460408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e083015261010080850151818401525061012080850151818401525061014080850151818401525061016080850151620087d7828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0808601518051918501919091526020810151610200850152604081015161022085015260600151610240840152831661026083015262000f16565b6060815260006200885f6060830186620079d3565b82810360208481019190915285518083528682019282019060005b81811015620088a15784516001600160801b0316835293830193918301916001016200887a565b50508481036040860152620083228187620079d356fe6101006040523480156200001257600080fd5b506040516200203538038062002035833981016040819052620000359162000298565b8230818189898960006200004a8482620003e8565b506001620000598382620003e8565b5060ff81166080524660a0526200006f6200011e565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505090151560e052600c55506200053292505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001529190620004b4565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001e257600080fd5b81516001600160401b0380821115620001ff57620001ff620001ba565b604051601f8301601f19908116603f011681019082821181831017156200022a576200022a620001ba565b81604052838152602092508660208588010111156200024857600080fd5b600091505b838210156200026c57858201830151818301840152908201906200024d565b6000602085830101528094505050505092915050565b805180151581146200029357600080fd5b919050565b60008060008060008060c08789031215620002b257600080fd5b86516001600160401b0380821115620002ca57600080fd5b620002d88a838b01620001d0565b97506020890151915080821115620002ef57600080fd5b50620002fe89828a01620001d0565b955050604087015160ff811681146200031657600080fd5b60608801519094506001600160a01b03811681146200033457600080fd5b9250620003446080880162000282565b915060a087015190509295509295509295565b600181811c908216806200036c57607f821691505b6020821081036200038d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e3576000816000526020600020601f850160051c81016020861015620003be5750805b601f850160051c820191505b81811015620003df57828155600101620003ca565b5050505b505050565b81516001600160401b03811115620004045762000404620001ba565b6200041c8162000415845462000357565b8462000393565b602080601f8311600181146200045457600084156200043b5750858301515b600019600386901b1c1916600185901b178555620003df565b600085815260208120601f198616915b82811015620004855788860151825594840194600190910190840162000464565b5085821015620004a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620004c48162000357565b60018281168015620004df5760018114620004f55762000526565b60ff198416875282151583028701945062000526565b8760005260208060002060005b858110156200051d5781548a82015290840190820162000502565b50505082870194505b50929695505050505050565b60805160a05160c05160e051611a9f62000596600039600081816103d4015281816105e701528181610701015281816109e001528181610a7f01528181610dbe0152610e20015260006109bc01526000610987015260006103140152611a9f6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80637a8c63b511610125578063b7009613116100ad578063dd62ed3e1161007c578063dd62ed3e1461051a578063e688747b14610545578063ea7ca2761461057b578063ed0d0efb146105b2578063f2fde38b146105d257600080fd5b8063b7009613146104b8578063bf7e214f146104cb578063c53a3985146104de578063d505accf1461050757600080fd5b806395d89b41116100f457806395d89b41146104545780639dc29fac1461045c578063a0712d681461046f578063a9059cbb14610482578063aed307771461049557600080fd5b80637a8c63b5146103cf5780637a9e5e4b146103f65780637ecebe00146104095780638da5cb5b1461042957600080fd5b806323b872dd116101a857806342966c681161017757806342966c68146103635780634b5159da1461037657806367aff4841461038957806370a082311461039c578063728b952b146103bc57600080fd5b806323b872dd146102fc578063313ce5671461030f5780633644e5151461034857806340c10f191461035057600080fd5b8063095ea7b3116101ef578063095ea7b3146102915780630bade8a4146102b45780630ea9b75b146102d757806318160ddd146102ea578063239c70ae146102f357600080fd5b806305f05a941461022157806306a36aee1461023657806306fdde0314610269578063088a4ed01461027e575b600080fd5b61023461022f366004611502565b6105e5565b005b61025661024436600461153b565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b610271610671565b6040516102609190611558565b61023461028c3660046115a7565b6106ff565b6102a461029f3660046115c0565b61075c565b6040519015158152602001610260565b6102a46102c2366004611609565b600a6020526000908152604090205460ff1681565b6102346102e5366004611635565b6107c9565b61025660025481565b610256600c5481565b6102a461030a36600461167c565b6108a1565b6103367f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610260565b610256610983565b61023461035e3660046115c0565b6109de565b6102346103713660046115a7565b610a7d565b6102346103843660046116bd565b610ae2565b6102346103973660046116d9565b610b74565b6102566103aa36600461153b565b60036020526000908152604090205481565b6102346103ca366004611707565b610c3c565b6102a47f000000000000000000000000000000000000000000000000000000000000000081565b61023461040436600461153b565b610cc5565b61025661041736600461153b565b60056020526000908152604090205481565b60065461043c906001600160a01b031681565b6040516001600160a01b039091168152602001610260565b610271610daf565b61023461046a3660046115c0565b610dbc565b61023461047d3660046115a7565b610e1e565b6102a46104903660046115c0565b610eb9565b6102a46104a336600461153b565b600d6020526000908152604090205460ff1681565b6102a46104c6366004611735565b610f1f565b60075461043c906001600160a01b031681565b61043c6104ec36600461153b565b6008602052600090815260409020546001600160a01b031681565b61023461051536600461177c565b61101d565b610256610528366004611707565b600460209081526000928352604080842090915290825290205481565b6102a46105533660046117ea565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b6102a461058936600461181d565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b6102566105c0366004611609565b600b6020526000908152604090205481565b6102346105e036600461153b565b611261565b7f00000000000000000000000000000000000000000000000000000000000000001561064657610621336000356001600160e01b0319166112df565b6106465760405162461bcd60e51b815260040161063d90611849565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6000805461067e90611880565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa90611880565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b7f0000000000000000000000000000000000000000000000000000000000000000156107575761073b336000356001600160e01b0319166112df565b6107575760405162461bcd60e51b815260040161063d90611849565b600c55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107b79086815260200190565b60405180910390a35060015b92915050565b6107df336000356001600160e01b0319166112df565b6107fb5760405162461bcd60e51b815260040161063d906118ba565b801561082b576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610852565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610894911515815260200190565b60405180910390a3505050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146108fd576108d883826118f6565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906109259084906118f6565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020611a4a8339815191529061096e9087815260200190565b60405180910390a360019150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146109b9576109b4611389565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610a3657610a1a336000356001600160e01b0319166112df565b610a365760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610a6f57600c54811115610a6f5760405162461bcd60e51b815260040161063d90611909565b610a798282611423565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610ad557610ab9336000356001600160e01b0319166112df565b610ad55760405162461bcd60e51b815260040161063d90611849565b610adf338261147d565b50565b610af8336000356001600160e01b0319166112df565b610b145760405162461bcd60e51b815260040161063d906118ba565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610b8a336000356001600160e01b0319166112df565b610ba65760405162461bcd60e51b815260040161063d906118ba565b8015610bd5576001600160a01b03831660009081526009602052604090208054600160ff85161b179055610bfb565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610894911515815260200190565b610c52336000356001600160e01b0319166112df565b610c6e5760405162461bcd60e51b815260040161063d906118ba565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480610d5a575060075460405163b700961360e01b81526001600160a01b039091169063b700961390610d1990339030906001600160e01b0319600035169060040161194b565b602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611978565b610d6357600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b6001805461067e90611880565b7f000000000000000000000000000000000000000000000000000000000000000015610e1457610df8336000356001600160e01b0319166112df565b610e145760405162461bcd60e51b815260040161063d90611849565b610a79828261147d565b7f000000000000000000000000000000000000000000000000000000000000000015610e7657610e5a336000356001600160e01b0319166112df565b610e765760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610eaf57600c54811115610eaf5760405162461bcd60e51b815260040161063d90611909565b610adf3382611423565b33600090815260036020526040812080548391908390610eda9084906118f6565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020611a4a833981519152906107b79086815260200190565b6001600160a01b038083166000908152600860205260408120549091168015610fbb5760405163b700961360e01b81526001600160a01b0382169063b700961390610f729088908890889060040161194b565b602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190611978565b91505061097c565b6001600160e01b031983166000908152600a602052604090205460ff168061101457506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b4284101561106d5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161063d565b60006001611079610983565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611185573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111bb5750876001600160a01b0316816001600160a01b0316145b6111f85760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161063d565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b611277336000356001600160e01b0319166112df565b6112935760405162461bcd60e51b815260040161063d906118ba565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6007546000906001600160a01b03168015801590611369575060405163b700961360e01b81526001600160a01b0382169063b7009613906113289087903090889060040161194b565b602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190611978565b8061138157506006546001600160a01b038581169116145b949350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516113bb9190611995565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b80600260008282546114359190611a36565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020611a4a83398151915291015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906114a59084906118f6565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020611a4a83398151915290602001611471565b6001600160a01b0381168114610adf57600080fd5b8015158114610adf57600080fd5b6000806040838503121561151557600080fd5b8235611520816114df565b91506020830135611530816114f4565b809150509250929050565b60006020828403121561154d57600080fd5b813561097c816114df565b60006020808352835180602085015260005b818110156115865785810183015185820160400152820161156a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156115b957600080fd5b5035919050565b600080604083850312156115d357600080fd5b82356115de816114df565b946020939093013593505050565b80356001600160e01b03198116811461160457600080fd5b919050565b60006020828403121561161b57600080fd5b61097c826115ec565b803560ff8116811461160457600080fd5b60008060006060848603121561164a57600080fd5b61165384611624565b9250611661602085016115ec565b91506040840135611671816114f4565b809150509250925092565b60008060006060848603121561169157600080fd5b833561169c816114df565b925060208401356116ac816114df565b929592945050506040919091013590565b600080604083850312156116d057600080fd5b611520836115ec565b6000806000606084860312156116ee57600080fd5b83356116f9816114df565b925061166160208501611624565b6000806040838503121561171a57600080fd5b8235611725816114df565b91506020830135611530816114df565b60008060006060848603121561174a57600080fd5b8335611755816114df565b92506020840135611765816114df565b9150611773604085016115ec565b90509250925092565b600080600080600080600060e0888a03121561179757600080fd5b87356117a2816114df565b965060208801356117b2816114df565b955060408801359450606088013593506117ce60808901611624565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156117fd57600080fd5b61180683611624565b9150611814602084016115ec565b90509250929050565b6000806040838503121561183057600080fd5b823561183b816114df565b915061181460208401611624565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c9082168061189457607f821691505b6020821081036118b457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107c3576107c36118e0565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561198a57600080fd5b815161097c816114f4565b60008083548160018260011c915060018316806119b357607f831692505b602080841082036119d257634e487b7160e01b86526022600452602486fd5b8180156119e657600181146119fb57611a28565b60ff1986168952841515850289019650611a28565b60008a81526020902060005b86811015611a205781548b820152908501908301611a07565b505084890196505b509498975050505050505050565b808201808211156107c3576107c36118e056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bfa5831106ce09a23ad7aac9a09e02a9809dd79b0e0446958dd2bdec6da95de664736f6c634300081600336101206040523480156200001257600080fd5b506040516200302338038062003023833981016040819052620000359162000317565b823081818a8a8a8181846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200007d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a39190620003da565b6000620000b1848262000497565b506001620000c0838262000497565b5060ff81166080524660a052620000d66200019a565b60c0525050506001600160a01b0392831660e0525050600680548483166001600160a01b0319918216811790925560078054938516939091169290921790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a3505050600c9490945542600d5590151561010052600e5550620005e19350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001ce919062000563565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b03811681146200024c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200027757600080fd5b81516001600160401b03808211156200029457620002946200024f565b604051601f8301601f19908116603f01168101908282118183101715620002bf57620002bf6200024f565b8160405283815260209250866020858801011115620002dd57600080fd5b600091505b83821015620003015785820183015181830184015290820190620002e2565b6000602085830101528094505050505092915050565b600080600080600080600060e0888a0312156200033357600080fd5b8751620003408162000236565b60208901519097506001600160401b03808211156200035e57600080fd5b6200036c8b838c0162000265565b975060408a01519150808211156200038357600080fd5b50620003928a828b0162000265565b955050606088015193506080880151620003ac8162000236565b60a08901519093508015158114620003c357600080fd5b8092505060c0880151905092959891949750929550565b600060208284031215620003ed57600080fd5b815160ff81168114620003ff57600080fd5b9392505050565b600181811c908216806200041b57607f821691505b6020821081036200043c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000492576000816000526020600020601f850160051c810160208610156200046d5750805b601f850160051c820191505b818110156200048e5782815560010162000479565b5050505b505050565b81516001600160401b03811115620004b357620004b36200024f565b620004cb81620004c4845462000406565b8462000442565b602080601f831160018114620005035760008415620004ea5750858301515b600019600386901b1c1916600185901b1785556200048e565b600085815260208120601f198616915b82811015620005345788860151825594840194600190910190840162000513565b5085821015620005535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620005738162000406565b600182811680156200058e5760018114620005a457620005d5565b60ff1984168752821515830287019450620005d5565b8760005260208060002060005b85811015620005cc5781548a820152908401908201620005b1565b50505082870194505b50929695505050505050565b60805160a05160c05160e05161010051612978620006ab600039600081816105d80152818161093601528181610a7d01528181610d1f01528181610dda01528181610f31015281816113c801526114b20152600081816104d7015281816108b201528181610e9b01528181610f8901528181611328015281816114200152818161157301528181611b3c01528181611ccb01528181611ee501528181611f7d015281816120cf015261221101526000610db601526000610d860152600061048301526129786000f3fe608060405234801561001057600080fd5b506004361061035d5760003560e01c80637a8c63b5116101d3578063ba08765211610104578063d905777e116100a2578063ea7ca2761161007c578063ea7ca27614610815578063ed0d0efb1461084c578063ef8b30f71461086c578063f2fde38b1461087f57600080fd5b8063d905777e1461078b578063dd62ed3e146107b4578063e688747b146107df57600080fd5b8063c63d75b6116100de578063c63d75b614610511578063c6e6f59214610752578063ce96cb7714610765578063d505accf1461077857600080fd5b8063ba08765214610703578063bf7e214f14610716578063c53a39851461072957600080fd5b80639dc29fac11610171578063aed307771161014b578063aed30777146106a7578063b3d7f6b9146106ca578063b460af94146106dd578063b7009613146106f057600080fd5b80639dc29fac1461066e578063a0712d6814610681578063a9059cbb1461069457600080fd5b80638da5cb5b116101ad5780638da5cb5b1461062d578063946058571461064057806394bf804d1461065357806395d89b411461066657600080fd5b80637a8c63b5146105d35780637a9e5e4b146105fa5780637ecebe001461060d57600080fd5b8063313ce567116102ad5780634b5159da1161024b57806367aff4841161022557806367aff4841461057a5780636e553f651461058d57806370a08231146105a0578063728b952b146105c057600080fd5b80634b5159da1461054c5780634cdad5061461055f578063679aefce1461057257600080fd5b806338d52e0f1161028757806338d52e0f146104d2578063402d267d1461051157806340c10f191461052657806342966c681461053957600080fd5b8063313ce5671461047e57806334fcf437146104b75780633644e515146104ca57600080fd5b8063095ea7b31161031a5780630ea9b75b116102f45780630ea9b75b1461044657806318160ddd14610459578063239c70ae1461046257806323b872dd1461046b57600080fd5b8063095ea7b3146103ed5780630a28a477146104105780630bade8a41461042357600080fd5b806301e1d1141461036257806305f05a941461037d57806306a36aee1461039257806306fdde03146103b257806307a2d13a146103c7578063088a4ed0146103da575b600080fd5b61036a610892565b6040519081526020015b60405180910390f35b61039061038b3660046123a8565b610934565b005b61036a6103a03660046123e1565b60096020526000908152604090205481565b6103ba6109c0565b60405161037491906123fe565b61036a6103d536600461244d565b610a4e565b6103906103e836600461244d565b610a7b565b6104006103fb366004612466565b610ad8565b6040519015158152602001610374565b61036a61041e36600461244d565b610b45565b6104006104313660046124af565b600a6020526000908152604090205460ff1681565b6103906104543660046124db565b610b65565b61036a60025481565b61036a600e5481565b610400610479366004612522565b610c3d565b6104a57f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610374565b6103906104c536600461244d565b610d1d565b61036a610d82565b6104f97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610374565b61036a61051f3660046123e1565b5060001990565b610390610534366004612466565b610dd8565b61039061054736600461244d565b610f2f565b61039061055a366004612563565b61101c565b61036a61056d36600461244d565b6110ae565b600c5461036a565b61039061058836600461257f565b6110b9565b61036a61059b3660046125ad565b611181565b61036a6105ae3660046123e1565b60036020526000908152604090205481565b6103906105ce3660046125d2565b611195565b6104007f000000000000000000000000000000000000000000000000000000000000000081565b6103906106083660046123e1565b61121e565b61036a61061b3660046123e1565b60056020526000908152604090205481565b6006546104f9906001600160a01b031681565b61036a61064e36600461244d565b611308565b61036a6106613660046125ad565b6113a5565b6103ba6113b9565b61039061067c366004612466565b6113c6565b61039061068f36600461244d565b6114b0565b6104006106a2366004612466565b611603565b6104006106b53660046123e1565b600f6020526000908152604090205460ff1681565b61036a6106d836600461244d565b611669565b61036a6106eb366004612600565b611688565b6104006106fe366004612637565b6116a5565b61036a610711366004612600565b6117a3565b6007546104f9906001600160a01b031681565b6104f96107373660046123e1565b6008602052600090815260409020546001600160a01b031681565b61036a61076036600461244d565b6117b8565b61036a6107733660046123e1565b6117d8565b61039061078636600461267e565b6117fa565b61036a6107993660046123e1565b6001600160a01b031660009081526003602052604090205490565b61036a6107c23660046125d2565b600460209081526000928352604080842090915290825290205481565b6104006107ed3660046126ec565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b61040061082336600461271f565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b61036a61085a3660046124af565b600b6020526000908152604090205481565b61036a61087a36600461244d565b611a3e565b61039061088d3660046123e1565b611a49565b600061089d42611ac7565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610925919061274b565b61092f919061277a565b905090565b7f00000000000000000000000000000000000000000000000000000000000000001561099557610970336000356001600160e01b031916611bb5565b6109955760405162461bcd60e51b815260040161098c9061278d565b60405180910390fd5b6001600160a01b03919091166000908152600f60205260409020805460ff1916911515919091179055565b600080546109cd906127c4565b80601f01602080910402602001604051908101604052809291908181526020018280546109f9906127c4565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b505050505081565b6002546000908015610a7257610a6d610a65610892565b849083611c5e565b610a74565b825b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000015610ad357610ab7336000356001600160e01b031916611bb5565b610ad35760405162461bcd60e51b815260040161098c9061278d565b600e55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b339086815260200190565b60405180910390a35060015b92915050565b6002546000908015610a7257610a6d81610b5d610892565b859190611c7c565b610b7b336000356001600160e01b031916611bb5565b610b975760405162461bcd60e51b815260040161098c906127fe565b8015610bc7576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610bee565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610c30911515815260200190565b60405180910390a3505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610c9957610c748382612824565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610cc1908490612824565b90915550506001600160a01b038085166000818152600360205260409081902080548701905551909187169060008051602061292383398151915290610d0a9087815260200190565b60405180910390a3506001949350505050565b7f000000000000000000000000000000000000000000000000000000000000000015610d7557610d59336000356001600160e01b031916611bb5565b610d755760405162461bcd60e51b815260040161098c9061278d565b610d7d611ca2565b600c55565b60007f00000000000000000000000000000000000000000000000000000000000000004614610db35761092f611d37565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610e3057610e14336000356001600160e01b031916611bb5565b610e305760405162461bcd60e51b815260040161098c9061278d565b336000908152600f602052604090205460ff16610e9957600e54811115610e995760405162461bcd60e51b815260206004820181905260248201527f4d6f636b455243343632363a20496e76616c6964206d696e7420616d6f756e74604482015260640161098c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d68610ed183610a4e565b6040518263ffffffff1660e01b8152600401610eef91815260200190565b600060405180830381600087803b158015610f0957600080fd5b505af1158015610f1d573d6000803e3d6000fd5b50505050610f2b8282611dd1565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610f8757610f6b336000356001600160e01b031916611bb5565b610f875760405162461bcd60e51b815260040161098c9061278d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c68610fbf83610a4e565b6040518263ffffffff1660e01b8152600401610fdd91815260200190565b600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b505050506110193382611e2b565b50565b611032336000356001600160e01b031916611bb5565b61104e5760405162461bcd60e51b815260040161098c906127fe565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b6000610b3f82610a4e565b6110cf336000356001600160e01b031916611bb5565b6110eb5760405162461bcd60e51b815260040161098c906127fe565b801561111a576001600160a01b03831660009081526009602052604090208054600160ff85161b179055611140565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610c30911515815260200190565b600061118b611ca2565b610a748383611e8d565b6111ab336000356001600160e01b031916611bb5565b6111c75760405162461bcd60e51b815260040161098c906127fe565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b03163314806112b3575060075460405163b700961360e01b81526001600160a01b039091169063b70096139061127290339030906001600160e01b03196000351690600401612837565b602060405180830381865afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b39190612864565b6112bc57600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b600061131382611ac7565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b919061274b565b610b3f919061277a565b60006113af611ca2565b610a748383611f63565b600180546109cd906127c4565b7f00000000000000000000000000000000000000000000000000000000000000001561141e57611402336000356001600160e01b031916611bb5565b61141e5760405162461bcd60e51b815260040161098c9061278d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c6861145683610a4e565b6040518263ffffffff1660e01b815260040161147491815260200190565b600060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b50505050610f2b8282611e2b565b7f000000000000000000000000000000000000000000000000000000000000000015611508576114ec336000356001600160e01b031916611bb5565b6115085760405162461bcd60e51b815260040161098c9061278d565b336000908152600f602052604090205460ff1661157157600e548111156115715760405162461bcd60e51b815260206004820181905260248201527f4d6f636b455243343632363a20496e76616c6964206d696e7420616d6f756e74604482015260640161098c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d686115a983610a4e565b6040518263ffffffff1660e01b81526004016115c791815260200190565b600060405180830381600087803b1580156115e157600080fd5b505af11580156115f5573d6000803e3d6000fd5b505050506110193382611dd1565b33600090815260036020526040812080548391908390611624908490612824565b90915550506001600160a01b0383166000818152600360205260409081902080548501905551339060008051602061292383398151915290610b339086815260200190565b6002546000908015610a7257610a6d611680610892565b849083611c7c565b6000611692611ca2565b61169d848484611ff2565b949350505050565b6001600160a01b0380831660009081526008602052604081205490911680156117415760405163b700961360e01b81526001600160a01b0382169063b7009613906116f890889088908890600401612837565b602060405180830381865afa158015611715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117399190612864565b915050610a74565b6001600160e01b031983166000908152600a602052604090205460ff168061179a57506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b60006117ad611ca2565b61169d8484846120f6565b6002546000908015610a7257610a6d816117d0610892565b859190611c5e565b6001600160a01b038116600090815260036020526040812054610b3f90610a4e565b4284101561184a5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161098c565b60006001611856610d82565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611962573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906119985750876001600160a01b0316816001600160a01b0316145b6119d55760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161098c565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000610b3f826117b8565b611a5f336000356001600160e01b031916611bb5565b611a7b5760405162461bcd60e51b815260040161098c906127fe565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6000600c54600003611adb57506000919050565b600d54821015611aed57506000919050565b6000611b0b6301e13380600d5485611b059190612824565b90612238565b9050600061169d611b2783600c5461224d90919063ffffffff16565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf919061274b565b9061224d565b6007546000906001600160a01b03168015801590611c3f575060405163b700961360e01b81526001600160a01b0382169063b700961390611bfe90879030908890600401612837565b602060405180830381865afa158015611c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3f9190612864565b8061169d57506006546001600160a01b03858116911614949350505050565b6000826000190484118302158202611c7557600080fd5b5091020490565b6000826000190484118302158202611c9357600080fd5b50910281810615159190040190565b6000611cad42611ac7565b90508015611d305760405163140e25ad60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d6890602401600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050505b5042600d55565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051611d699190612881565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8060026000828254611de3919061277a565b90915550506001600160a01b03821660008181526003602090815260408083208054860190555184815260008051602061292383398151915291015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290611e53908490612824565b90915550506002805482900390556040518181526000906001600160a01b0384169060008051602061292383398151915290602001611e1f565b6000611e9883611a3e565b905080600003611ed85760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b604482015260640161098c565b611f0d6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612262565b611f178282611dd1565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a3610b3f565b6000611f6e83611669565b9050611fa56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612262565b611faf8284611dd1565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101611f56565b6000611ffd84610b45565b9050336001600160a01b0383161461206d576001600160a01b0382166000908152600460209081526040808320338452909152902054600019811461206b576120468282612824565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b6120778282611e2b565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610a746001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684866122fe565b6000336001600160a01b03831614612166576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146121645761213f8582612824565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b61216f846110ae565b9050806000036121af5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b604482015260640161098c565b6121b98285611e2b565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610a746001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684836122fe565b6000610a7483670de0b6b3a764000084611c5e565b6000610a748383670de0b6b3a7640000611c5e565b60006040516323b872dd60e01b81526001600160a01b03851660048201526001600160a01b03841660248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806122f75760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161098c565b5050505050565b600060405163a9059cbb60e01b81526001600160a01b0384166004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061237f5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161098c565b50505050565b6001600160a01b038116811461101957600080fd5b801515811461101957600080fd5b600080604083850312156123bb57600080fd5b82356123c681612385565b915060208301356123d68161239a565b809150509250929050565b6000602082840312156123f357600080fd5b8135610a7481612385565b60006020808352835180602085015260005b8181101561242c57858101830151858201604001528201612410565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561245f57600080fd5b5035919050565b6000806040838503121561247957600080fd5b823561248481612385565b946020939093013593505050565b80356001600160e01b0319811681146124aa57600080fd5b919050565b6000602082840312156124c157600080fd5b610a7482612492565b803560ff811681146124aa57600080fd5b6000806000606084860312156124f057600080fd5b6124f9846124ca565b925061250760208501612492565b915060408401356125178161239a565b809150509250925092565b60008060006060848603121561253757600080fd5b833561254281612385565b9250602084013561255281612385565b929592945050506040919091013590565b6000806040838503121561257657600080fd5b6123c683612492565b60008060006060848603121561259457600080fd5b833561259f81612385565b9250612507602085016124ca565b600080604083850312156125c057600080fd5b8235915060208301356123d681612385565b600080604083850312156125e557600080fd5b82356125f081612385565b915060208301356123d681612385565b60008060006060848603121561261557600080fd5b83359250602084013561262781612385565b9150604084013561251781612385565b60008060006060848603121561264c57600080fd5b833561265781612385565b9250602084013561266781612385565b915061267560408501612492565b90509250925092565b600080600080600080600060e0888a03121561269957600080fd5b87356126a481612385565b965060208801356126b481612385565b955060408801359450606088013593506126d0608089016124ca565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156126ff57600080fd5b612708836124ca565b915061271660208401612492565b90509250929050565b6000806040838503121561273257600080fd5b823561273d81612385565b9150612716602084016124ca565b60006020828403121561275d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b3f57610b3f612764565b6020808252601b908201527f4d6f636b455243343632363a206e6f7420617574686f72697a65640000000000604082015260600190565b600181811c908216806127d857607f821691505b6020821081036127f857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b81810381811115610b3f57610b3f612764565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561287657600080fd5b8151610a748161239a565b60008083548160018260011c9150600183168061289f57607f831692505b602080841082036128be57634e487b7160e01b86526022600452602486fd5b8180156128d257600181146128e757612914565b60ff1986168952841515850289019650612914565b60008a81526020902060005b8681101561290c5781548b8201529085019083016128f3565b505084890196505b50949897505050505050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209f9e241e33aa373a26fbfdb9dc4e59cf7b280eacf237142116c7e54a5be47cc364736f6c63430008160033608060405260026001553480156200001657600080fd5b506040516200412c3803806200412c833981016040819052620000399162000708565b60006200004782826200096d565b508160e0015182610100015110806200007557508160e0015182610100015162000072919062000a39565b15155b156200009457604051630219d66360e11b815260040160405180910390fd5b610100820151600b8190556101208301511080620000c757508160e00151826101200151620000c4919062000a39565b15155b15620000e65760405163f9c0959d60e01b815260040160405180910390fd5b610120820151600c81905561014083015110806200011957508160e0015182610140015162000116919062000a39565b15155b156200013857604051633007ad0160e11b815260040160405180910390fd5b610140820151600d81905561016083015110806200016b57508160e0015182610160015162000168919062000a39565b15155b156200018a5760405163cfb699cb60e01b815260040160405180910390fd5b610160820151600e556101a08201516101808301511115620001bf5760405163ef9bc65f60e01b815260040160405180910390fd5b610180820151600f556101a08201516010556101e08201516101c08301511115620001fd576040516330554de160e01b815260040160405180910390fd5b6101c08201516011556101e082015160125561022082015161020083015111156200023b576040516383ebdfb760e01b815260040160405180910390fd5b61020082015160135561022082015160145561026082015151670de0b6b3a764000010806200027a5750670de0b6b3a764000082610260015160200151115b80620002965750670de0b6b3a764000082610260015160400151115b80620002b25750670de0b6b3a764000082610260015160600151115b15620002d15760405163161071fb60e11b815260040160405180910390fd5b610260820151805160198190556020820151601a556040820151601b55606090910151601c556102408301515111806200031c57508161026001516020015182610240015160200151115b806200033957508161026001516040015182610240015160400151115b806200035657508161026001516060015182610240015160600151115b1562000375576040516315b05a8f60e01b815260040160405180910390fd5b61024082015180516015556020808201516016556040808301516017556060928301516018558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a086015160088054841691831691909117905560c08601516009805490931691161790559083015180516200043192601d9201906200046e565b5050610280810151600580546001600160a01b0319166001600160a01b039092169190911790556102a081015160065560e00151600a5562000a5c565b828054828255906000526020600020908101928215620004c6579160200282015b82811115620004c657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200048f565b50620004d4929150620004d8565b5090565b5b80821115620004d45760008155600101620004d9565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b03811182821017156200052b576200052b620004ef565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200055c576200055c620004ef565b604052919050565b80516001600160a01b03811681146200057c57600080fd5b919050565b600082601f8301126200059357600080fd5b815160206001600160401b03821115620005b157620005b1620004ef565b8160051b620005c282820162000531565b9283528481018201928281019087851115620005dd57600080fd5b83870192505b848310156200060757620005f78362000564565b82529183019190830190620005e3565b979650505050505050565b6000608082840312156200062557600080fd5b604051608081016001600160401b03811182821017156200064a576200064a620004ef565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600082601f8301126200068d57600080fd5b81516001600160401b03811115620006a957620006a9620004ef565b6020620006bf601f8301601f1916820162000531565b8281528582848701011115620006d457600080fd5b60005b83811015620006f4578581018301518282018401528201620006d7565b506000928101909101919091529392505050565b600080604083850312156200071c57600080fd5b82516001600160401b03808211156200073457600080fd5b9084019061038082870312156200074a57600080fd5b6200075462000505565b6200075f8362000564565b81526200076f6020840162000564565b6020820152620007826040840162000564565b60408201526060830151828111156200079a57600080fd5b620007a88882860162000581565b606083015250620007bc6080840162000564565b6080820152620007cf60a0840162000564565b60a0820152620007e260c0840162000564565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240620008708882860162000612565b9082015262000884876102c0850162000612565b61026082015262000899610340840162000564565b61028082015261036092909201516102a0830152602085015191935080821115620008c357600080fd5b50620008d2858286016200067b565b9150509250929050565b600181811c90821680620008f157607f821691505b6020821081036200091257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000968576000816000526020600020601f850160051c81016020861015620009435750805b601f850160051c820191505b8181101562000964578281556001016200094f565b5050505b505050565b81516001600160401b03811115620009895762000989620004ef565b620009a1816200099a8454620008dc565b8462000918565b602080601f831160018114620009d95760008415620009c05750858301515b600019600386901b1c1916600185901b17855562000964565b600085815260208120601f198616915b8281101562000a0a57888601518255948401946001909101908401620009e9565b508582101562000a295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008262000a5757634e487b7160e01b600052601260045260246000fd5b500690565b6136c08062000a6c6000396000f3fe6080604052600436106103a65760003560e01c80638e127cf5116101e7578063d2c35ce81161010d578063e4e7148f116100a0578063ec895f111161006f578063ec895f1114610ae9578063f259645814610b09578063f8c09e5914610b29578063fe3d5aeb14610b5957600080fd5b8063e4e7148f14610a74578063e71f34b314610a94578063e83e34b114610ab4578063eb71f66c14610ac957600080fd5b8063dd2b8fbb116100dc578063dd2b8fbb14610a09578063e0e2daaa14610a29578063e1b39c8014610a3f578063e333155514610a5457600080fd5b8063d2c35ce81461099d578063d6f50169146109bd578063daac24da146109d3578063daf012e6146109f357600080fd5b8063b256126311610185578063c415b95c11610154578063c415b95c1461093b578063c905a4b51461095b578063d0f96b9214610971578063d23d7ea31461098757600080fd5b8063b2561263146108c3578063bc30e7a1146108e3578063bf9bd5cd14610903578063c17225631461091957600080fd5b806399623bb1116101c157806399623bb11461084e5780639af252621461086e578063a64c90bf1461088e578063a98a46db146108a357600080fd5b80638e127cf5146107f85780638efc09861461081857806397b0e8ce1461082e57600080fd5b80634554f9a9116102cc578063628027a31161026a57806383b361e81161023957806383b361e81461077857806384c19aab1461079857806385229785146107b85780638627a4f0146107d857600080fd5b8063628027a3146106e35780636b44e6be146107035780636e95d67c146107435780636f6d5c4a1461075857600080fd5b80634fbfee77116102a65780634fbfee771461065a57806354fd4d501461067a5780635720c9d5146106ad5780635aa6e675146106c357600080fd5b80634554f9a91461060e578063488007601461062457806349f13de71461063a57600080fd5b80631ecda0fe116103445780632e7cd971116103135780632e7cd9711461059b5780633e2d2014146105ae578063411c3035146105ce578063421caba8146105ee57600080fd5b80631ecda0fe146105025780632885e3ac146105265780632907d3dd146105465780632b58f4181461056657600080fd5b806310d1dc3e1161038057806310d1dc3e1461047557806311e77bfe146104955780631978ebcf146104b55780631b59be0c146104d557600080fd5b806304baa00b146103d557806306fdde031461042857806310780f731461043d57600080fd5b366103d0576002600154036103ce57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156103e157600080fd5b506104126040518060400160405280601181526020017048797065726472697665466163746f727960781b81525081565b60405161041f9190612cec565b60405180910390f35b34801561043457600080fd5b50610412610b79565b34801561044957600080fd5b5060085461045d906001600160a01b031681565b6040516001600160a01b03909116815260200161041f565b34801561048157600080fd5b506103ce610490366004612cff565b610c07565b3480156104a157600080fd5b506103ce6104b0366004612d11565b610d20565b3480156104c157600080fd5b506103ce6104d0366004612d11565b610df9565b3480156104e157600080fd5b506104f56104f0366004612d2a565b610e7b565b60405161041f9190612d9f565b34801561050e57600080fd5b50610518600f5481565b60405190815260200161041f565b34801561053257600080fd5b506103ce610541366004612cff565b610f56565b34801561055257600080fd5b506103ce610561366004612d11565b6110bc565b34801561057257600080fd5b5061045d610581366004612e14565b60208052600090815260409020546001600160a01b031681565b61045d6105a93660046130ee565b61113e565b3480156105ba57600080fd5b506103ce6105c9366004612e14565b611580565b3480156105da57600080fd5b506103ce6105e93660046131cf565b6115f4565b3480156105fa57600080fd5b506103ce610609366004612e14565b6117c5565b34801561061a57600080fd5b5061051860105481565b34801561063057600080fd5b5061051860145481565b34801561064657600080fd5b5061045d6106553660046131fb565b6118ce565b34801561066657600080fd5b506103ce610675366004612d11565b6119c0565b34801561068657600080fd5b5061041260405180604001604052806007815260200166076312e302e32360cc1b81525081565b3480156106b957600080fd5b50610518600b5481565b3480156106cf57600080fd5b5060025461045d906001600160a01b031681565b3480156106ef57600080fd5b506103ce6106fe366004612d11565b611a1d565b34801561070f57600080fd5b5061073361071e366004612e14565b60226020526000908152604090205460ff1681565b604051901515815260200161041f565b34801561074f57600080fd5b50602154610518565b34801561076457600080fd5b506103ce610773366004612d11565b611a9f565b34801561078457600080fd5b506103ce610793366004612d11565b611b43565b3480156107a457600080fd5b506103ce6107b3366004612d11565b611bc5565b3480156107c457600080fd5b506103ce6107d3366004612e14565b611c47565b3480156107e457600080fd5b506103ce6107f3366004612e14565b611cbb565b34801561080457600080fd5b506103ce610813366004612d11565b611d2f565b34801561082457600080fd5b50610518600e5481565b34801561083a57600080fd5b506103ce610849366004612d11565b611dd3565b34801561085a57600080fd5b5060055461045d906001600160a01b031681565b34801561087a57600080fd5b506103ce610889366004612d2a565b611e55565b34801561089a57600080fd5b506104f5611ebd565b3480156108af57600080fd5b506103ce6108be366004612e14565b611f1f565b3480156108cf57600080fd5b506103ce6108de366004612e14565b611f93565b3480156108ef57600080fd5b506104f56108fe36600461328f565b612007565b34801561090f57600080fd5b5061051860125481565b34801561092557600080fd5b5061092e612109565b60405161041f91906132b1565b34801561094757600080fd5b5060075461045d906001600160a01b031681565b34801561096757600080fd5b5061051860065481565b34801561097d57600080fd5b50610518600a5481565b34801561099357600080fd5b5061051860115481565b3480156109a957600080fd5b506103ce6109b8366004612e14565b612161565b3480156109c957600080fd5b5061051860135481565b3480156109df57600080fd5b5061045d6109ee366004612d11565b6121d5565b3480156109ff57600080fd5b50610518600d5481565b348015610a1557600080fd5b506103ce610a24366004612e14565b612205565b348015610a3557600080fd5b50610518600c5481565b348015610a4b57600080fd5b50601e54610518565b348015610a6057600080fd5b5060045461045d906001600160a01b031681565b348015610a8057600080fd5b5060035461045d906001600160a01b031681565b348015610aa057600080fd5b506103ce610aaf366004612d11565b612279565b348015610ac057600080fd5b5061092e61231d565b348015610ad557600080fd5b506103ce610ae4366004612d11565b612375565b348015610af557600080fd5b506104f5610b0436600461328f565b61240d565b348015610b1557600080fd5b5060095461045d906001600160a01b031681565b348015610b3557600080fd5b50610733610b44366004612e14565b601f6020526000908152604090205460ff1681565b348015610b6557600080fd5b5061045d610b74366004612d11565b61250f565b60008054610b86906132dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb2906132dc565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b505050505081565b6002546001600160a01b03163314610c31576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601954808252601a546020830152601b5492820192909252601c5460608201529082351180610c71575080602001518260200135115b80610c83575080604001518260400135115b80610c95575080606001518260600135115b15610cb3576040516315b05a8f60e01b815260040160405180910390fd5b81356015819055602080840135601681905560408086013560178190556060808801356018819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610d4a576040516282b42960e81b815260040160405180910390fd5b80600b54610d589190613310565b151580610d71575080600c54610d6e9190613310565b15155b80610d88575080600d54610d859190613310565b15155b80610d9f575080600e54610d9c9190613310565b15155b15610dbd576040516311b75c1560e31b815260040160405180910390fd5b600a8190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610e23576040516282b42960e81b815260040160405180910390fd5b601254811115610e4657604051631670f79760e01b815260040160405180910390fd5b60118190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610dee565b60215460609067ffffffffffffffff811115610e9957610e99612e31565b604051908082528060200260200182016040528015610ec2578160200160208202803683370190505b50905060005b82811015610f4e5760206000858584818110610ee657610ee6613332565b9050602002016020810190610efb9190612e14565b6001600160a01b0390811682526020820192909252604001600020548351911690839083908110610f2e57610f2e613332565b6001600160a01b0390921660209283029190910190910152600101610ec8565b505b92915050565b6002546001600160a01b03163314610f80576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260155481526016546020820152601754918101919091526018546060820152670de0b6b3a764000082351180610fcb5750670de0b6b3a76400008260200135115b80610fe15750670de0b6b3a76400008260400135115b80610ff75750670de0b6b3a76400008260600135115b80611003575080518235105b80611015575080602001518260200135105b80611027575080604001518260400135105b80611039575080606001518260600135105b156110575760405163161071fb60e11b815260040160405180910390fd5b81356019819055602080840135601a819055604080860135601b819055606080880135601c819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610d14565b6002546001600160a01b031633146110e6576040516282b42960e81b815260040160405180910390fd5b601054811115611109576040516328a2d9a960e01b815260040160405180910390fd5b600f8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610dee565b6001600160a01b0389166000908152601f602052604081205460ff1661117757604051636e623f0f60e01b815260040160405180910390fd5b611182888686612524565b60408051336020808301919091528183018e905282518083038401815260608301938490528051910120631d321d7560e31b9092526000916001600160a01b038d169163e990eba8916111df918e908e908e908a90606401613459565b6020604051808303816000875af11580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906134a9565b90508a60206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03168961014001906001600160a01b031690816001600160a01b0316815250508a6001600160a01b03167fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed234465828c8c8c6040516112e194939291906134c6565b60405180910390a26021805460018082019092557f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5700180546001600160a01b0319166001600160a01b03848116918217909255600090815260226020908152604091829020805460ff1916851790559280558051339381019390935282018e90528c16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b81526004016113aa959493929190613518565b60206040518083038185885af11580156113c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ed919061357b565b50600260015560005b601d5481101561149a57816001600160a01b0316637180c8ca601d838154811061142257611422613332565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050600190920191506113f69050565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea990602401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50479250508115905061157057604051600090339083908381818185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b505090508061156e576040516312171d8360e31b815260040160405180910390fd5b505b509b9a5050505050505050505050565b6002546001600160a01b031633146115aa576040516282b42960e81b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517fae062fb82c932c653cd44617343ecda1d13e375e0d6f20d969c944fbda1963d390600090a250565b6002546001600160a01b0316331480159061161a57506003546001600160a01b03163314155b15611637576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152601f602052604090205460ff1661167057604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601e828154811061168d5761168d613332565b6000918252602090912001546001600160a01b0316146116c057604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601f60205260409020805460ff19169055601e80546116f0906001906135aa565b8154811061170057611700613332565b600091825260209091200154601e80546001600160a01b03909216918390811061172c5761172c613332565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601e80548061176b5761176b6135bd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b031633148015906117eb57506003546001600160a01b03163314155b15611808576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16156118425760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020526040808220805460ff19166001908117909155601e8054918201815583527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6001600160a01b0387166000908152601f602052604081205460ff1661190757604051636e623f0f60e01b815260040160405180910390fd5b611912878686612524565b60408051336020808301919091528183018c90528251808303840181526060830193849052805191012063182a20c360e31b9092526000916001600160a01b038b169163c15106189161196f918c908c908a908a906064016135d3565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906134a9565b9a9950505050505050505050565b6002546001600160a01b031633146119ea576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6002546001600160a01b03163314611a47576040516282b42960e81b815260040160405180910390fd5b601354811015611a6a57604051630a35539d60e41b815260040160405180910390fd5b60148190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610dee565b6002546001600160a01b03163314611ac9576040516282b42960e81b815260040160405180910390fd5b600b54811080611ae45750600a54611ae19082613310565b15155b80611af05750600d5481115b15611b0e5760405163f9c0959d60e01b815260040160405180910390fd5b600c8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610dee565b6002546001600160a01b03163314611b6d576040516282b42960e81b815260040160405180910390fd5b601454811115611b9057604051635a8f655760e01b815260040160405180910390fd5b60138190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610dee565b6002546001600160a01b03163314611bef576040516282b42960e81b815260040160405180910390fd5b600f54811015611c1257604051637edc061360e11b815260040160405180910390fd5b60108190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610dee565b6002546001600160a01b03163314611c71576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6002546001600160a01b03163314611ce5576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b6002546001600160a01b03163314611d59576040516282b42960e81b815260040160405180910390fd5b600a54811080611d745750600a54611d719082613310565b15155b80611d805750600c5481115b15611d9e57604051630219d66360e11b815260040160405180910390fd5b600b8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610dee565b6002546001600160a01b03163314611dfd576040516282b42960e81b815260040160405180910390fd5b601154811015611e205760405163019cfb7b60e61b815260040160405180910390fd5b60128190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610dee565b6002546001600160a01b03163314611e7f576040516282b42960e81b815260040160405180910390fd5b611e8b601d8383612c37565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610d14929190613612565b6060601d805480602002602001604051908101604052809291908181526020018280548015611f1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ef7575b5050505050905090565b6002546001600160a01b03163314611f49576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a90600090a250565b6002546001600160a01b03163314611fbd576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90600090a250565b606081831061202957604051633b2735ab60e11b815260040160405180910390fd5b60215482111561204c5760405163e0f7becb60e01b815260040160405180910390fd5b61205683836135aa565b67ffffffffffffffff81111561206e5761206e612e31565b604051908082528060200260200182016040528015612097578160200160208202803683370190505b509050825b82811015610f4e57602181815481106120b7576120b7613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106120e9576120e9613332565b6001600160a01b039092166020928302919091019091015260010161209c565b6121346040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526015548152601654602082015260175491810191909152601854606082015290565b6002546001600160a01b0316331461218b576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000602182815481106121ea576121ea613332565b6000918252602090912001546001600160a01b031692915050565b6002546001600160a01b0316331461222f576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6002546001600160a01b031633146122a3576040516282b42960e81b815260040160405180910390fd5b600c548110806122be5750600a546122bb9082613310565b15155b806122ca5750600e5481115b156122e857604051633007ad0160e11b815260040160405180910390fd5b600d8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610dee565b6123486040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526019548152601a546020820152601b5491810191909152601c54606082015290565b6002546001600160a01b0316331461239f576040516282b42960e81b815260040160405180910390fd5b600d548110806123ba5750600a546123b79082613310565b15155b156123d85760405163cfb699cb60e01b815260040160405180910390fd5b600e8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610dee565b606081831061242f57604051633b2735ab60e11b815260040160405180910390fd5b601e548211156124525760405163e0f7becb60e01b815260040160405180910390fd5b61245c83836135aa565b67ffffffffffffffff81111561247457612474612e31565b60405190808252806020026020018201604052801561249d578160200160208202803683370190505b509050825b82811015610f4e57601e81815481106124bd576124bd613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106124ef576124ef613332565b6001600160a01b03909216602092830291909101909101526001016124a2565b6000601e82815481106121ea576121ea613332565b600b54836101000151108061253f5750600c54836101000151115b8061255b5750600a548361010001516125589190613310565b15155b1561257957604051635428734d60e01b815260040160405180910390fd5b600d548360e0015110806125925750600e548360e00151115b806125b057508261010001518360e001516125ad9190613310565b15155b156125ce5760405163253fffcf60e11b815260040160405180910390fd5b600f548360c0015110806125e757506010548360c00151115b156126055760405163ef9bc65f60e01b815260040160405180910390fd5b6019546101c08401515111806126395750601a5460e08401516101c085015160200151612637916301e1338090612895565b115b8061264e5750601b546101c084015160400151115b806126635750601c546101c084015160600151115b8061267557506015546101c084015151105b8061269e575060165460e08401516101c08501516020015161269c916301e13380906128bb565b105b806126b357506017546101c084015160400151105b806126c857506018546101c084015160600151105b156126e657604051632d8768f960e01b815260040160405180910390fd5b6011548210806126f7575060125482115b15612715576040516330554de160e01b815260040160405180910390fd5b600061273a6611c37937e0800061273485671bc16d674ec800006128d9565b906128f5565b60135490915061274a90826128f5565b82108061277d575061277a612771671bc16d674ec8000061276b86856128f5565b9061290b565b60145490612920565b82115b1561279b576040516383ebdfb760e01b815260040160405180910390fd5b60006127ab838660e00151612935565b60055460408701519192506001600160a01b0391821691161415806127d65750600654856060015114155b806127f557506007546101608601516001600160a01b03908116911614155b8061281457506008546101808601516001600160a01b03908116911614155b8061283357506009546101a08601516001600160a01b03908116911614155b8061285257506004546101408601516001600160a01b03908116911614155b80612861575061012085015115155b1561287f5760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b60008260001904841183021582026128ac57600080fd5b50910281810615159190040190565b60008260001904841183021582026128d257600080fd5b5091020490565b60006128ee83670de0b6b3a7640000846128bb565b9392505050565b600081831161290457816128ee565b5090919050565b60006128ee8383670de0b6b3a76400006128bb565b600081831161292f57826128ee565b50919050565b600080612966612957612949866064613660565b66a5bbed86c5a0009061290b565b6748cd4072281e0000906128d9565b905061297a670de0b6b3a7640000826128d9565b90506129d28161276b6129a56129a061299b89670de0b6b3a7640000613677565b6129da565b612a08565b6129cc6129a06129ba8a8a6301e133806128bb565b61299b90670de0b6b3a7640000613677565b906128d9565b949350505050565b60006001600160ff1b03821115612a045760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213612a2a5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ab69084901c6129da565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255906000526020600020908101928215612c8a579160200282015b82811115612c8a5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612c57565b50612a049291505b80821115612a045760008155600101612c92565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006128ee6020830184612ca6565b60006080828403121561292f57600080fd5b600060208284031215612d2357600080fd5b5035919050565b60008060208385031215612d3d57600080fd5b823567ffffffffffffffff80821115612d5557600080fd5b818501915085601f830112612d6957600080fd5b813581811115612d7857600080fd5b8660208260051b8501011115612d8d57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612de05783516001600160a01b031683529284019291840191600101612dbb565b50909695505050505050565b6001600160a01b0381168114612e0157600080fd5b50565b8035612e0f81612dec565b919050565b600060208284031215612e2657600080fd5b81356128ee81612dec565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715612e6b57612e6b612e31565b60405290565b600082601f830112612e8257600080fd5b813567ffffffffffffffff80821115612e9d57612e9d612e31565b604051601f8301601f19908116603f01168101908282118183101715612ec557612ec5612e31565b81604052838152866020858801011115612ede57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215612f1057600080fd5b6040516080810181811067ffffffffffffffff82111715612f3357612f33612e31565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102408284031215612f7757600080fd5b612f7f612e47565b9050612f8a82612e04565b8152612f9860208301612e04565b6020820152612fa960408301612e04565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140613006818401612e04565b90820152610160613018838201612e04565b9082015261018061302a838201612e04565b908201526101a061303c838201612e04565b908201526101c061304f84848301612efe565b9082015292915050565b60006060828403121561306b57600080fd5b6040516060810167ffffffffffffffff828210818311171561308f5761308f612e31565b81604052829350843591506130a382612dec565b90825260208401359081151582146130ba57600080fd5b81602084015260408501359150808211156130d457600080fd5b506130e185828601612e71565b6040830152505092915050565b6000806000806000806000806000806103608b8d03121561310e57600080fd5b8a35995061311e60208c01612e04565b985060408b013567ffffffffffffffff8082111561313b57600080fd5b6131478e838f01612e71565b99506131568e60608f01612f64565b98506102a08d013591508082111561316d57600080fd5b6131798e838f01612e71565b97506102c08d013596506102e08d013595506103008d013594506103208d01359150808211156131a857600080fd5b506131b58d828e01613059565b9250506103408b013590509295989b9194979a5092959850565b600080604083850312156131e257600080fd5b82356131ed81612dec565b946020939093013593505050565b600080600080600080600080610320898b03121561321857600080fd5b88359750602089013561322a81612dec565b96506132398a60408b01612f64565b955061028089013567ffffffffffffffff81111561325657600080fd5b6132628b828c01612e71565b989b979a5095986102a0810135976102c082013597506102e0820135965061030090910135945092505050565b600080604083850312156132a257600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610f50565b600181811c908216806132f057607f821691505b60208210810361292f57634e487b7160e01b600052602260045260246000fd5b60008261332d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b80516001600160a01b03168252602081015161336f60208401826001600160a01b03169052565b50604081015161338a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516133f0828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b60006102c087835280602084015261347381840188612ca6565b90506134826040840187613348565b8281036102808401526134958186612ca6565b915050826102a08301529695505050505050565b6000602082840312156134bb57600080fd5b81516128ee81612dec565b6001600160a01b03851681526102a0602082018190526000906134eb83820187612ca6565b90506134fa6040840186613348565b82810361028084015261350d8185612ca6565b979650505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e084015261356f610100840182612ca6565b98975050505050505050565b60006020828403121561358d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f5057610f50613594565b634e487b7160e01b600052603160045260246000fd5b60006102c08783526135e86020840188613348565b806102608401526135fb81840187612ca6565b61028084019590955250506102a001529392505050565b60208082528181018390526000908460408401835b8681101561365557823561363a81612dec565b6001600160a01b031682529183019190830190600101613627565b509695505050505050565b8082028115828204841417610f5057610f50613594565b80820180821115610f5057610f5061359456fea2646970667358221220be80dea5cc16b1535b83c7c3c215ffa84c788a86a6fd7a5c3e5b8bed638cb13e64736f6c63430008160033608060405234801561001057600080fd5b506121d3806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638cc23ce01462000033575b600080fd5b6200004a6200004436600462000370565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290526000908190606001604051602081830303815290604052805190602001208c8c8c8b8b8b8b8b604051620000aa90620000ef565b620000bd98979695949392919062000590565b8190604051809103906000f5905080158015620000de573d6000803e3d6000fd5b509c9b505050505050505050505050565b611b62806200063c83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156200013a576200013a620000fd565b60405290565b600082601f8301126200015257600080fd5b813567ffffffffffffffff80821115620001705762000170620000fd565b604051601f8301601f19908116603f011681019082821181831017156200019b576200019b620000fd565b81604052838152866020858801011115620001b557600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114620001ed57600080fd5b919050565b6000608082840312156200020557600080fd5b6040516080810181811067ffffffffffffffff821117156200022b576200022b620000fd565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600061026082840312156200027057600080fd5b6200027a62000113565b90506200028782620001d5565b81526200029760208301620001d5565b6020820152620002aa60408301620001d5565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016062000315818401620001d5565b9082015261018062000329838201620001d5565b908201526101a06200033d838201620001d5565b908201526101c062000351838201620001d5565b908201526101e06200036684848301620001f2565b9082015292915050565b6000806000806000806000806000806103808b8d0312156200039157600080fd5b8a3567ffffffffffffffff80821115620003aa57600080fd5b620003b88e838f0162000140565b9b50620003c98e60208f016200025c565b9a50620003da6102808e01620001d5565b99506102a08d0135915080821115620003f257600080fd5b50620004018d828e0162000140565b975050620004136102c08c01620001d5565b9550620004246102e08c01620001d5565b9450620004356103008c01620001d5565b9350620004466103208c01620001d5565b9250620004576103408c01620001d5565b91506103608b013590509295989b9194979a5092959850565b80516001600160a01b0316825260208101516200049860208401826001600160a01b03169052565b506040810151620004b460408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015162000527828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b60006103408083528a518082850152600091505b80821015620005c8576020828d0101516103608386010152602082019150620005a4565b6103609150600082828601015281601f19601f83011685010192505050620005f4602083018a62000470565b6001600160a01b039788166102808301529587166102a08201529386166102c08501529185166102e08401528416610300830152909216610320909201919091529291505056fe6103206040523480156200001257600080fd5b5060405162001b6238038062001b628339810160408190526200003591620006c0565b6001600081905587516001600160a01b0390811660809081526020808b0151831660a0908152918b01516101a052908a01516101c05260c0808b01516101e090815260e0808d015161020052610120808e0151909352610100808e0151909152610140808e0151909152908c01805151909252815190920151909152805160409081015161016052905160609081015161018052908a01518216610240528901516102605287166102205288908890889088908890889088908890620000fc898262000879565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e05281166103005260208b01518b5162000142955090911692509050600162000150565b505050505050505062000987565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001aa90859083906200021c16565b6200021657604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200020a918691620002cd16565b620002168482620002cd565b50505050565b6000806000846001600160a01b0316846040516200023b919062000945565b6000604051808303816000865af19150503d80600081146200027a576040519150601f19603f3d011682016040523d82523d6000602084013e6200027f565b606091505b5091509150818015620002ad575080511580620002ad575080806020019051810190620002ad919062000963565b8015620002c457506000856001600160a01b03163b115b95945050505050565b6000620002e46001600160a01b0384168362000340565b905080516000141580156200030c5750808060200190518101906200030a919062000963565b155b156200033b57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060620003508383600062000357565b9392505050565b6060814710156200037e5760405163cd78605960e01b815230600482015260240162000332565b600080856001600160a01b031684866040516200039c919062000945565b60006040518083038185875af1925050503d8060008114620003db576040519150601f19603f3d011682016040523d82523d6000602084013e620003e0565b606091505b509092509050620003f3868383620003fd565b9695505050505050565b6060826200041657620004108262000461565b62000350565b81511580156200042e57506001600160a01b0384163b155b156200045957604051639996b31560e01b81526001600160a01b038516600482015260240162000332565b508062000350565b805115620004725780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b0381118282101715620004c757620004c76200048b565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004f857620004f86200048b565b604052919050565b60005b838110156200051d57818101518382015260200162000503565b50506000910152565b80516001600160a01b03811681146200053e57600080fd5b919050565b6000608082840312156200055657600080fd5b604051608081016001600160401b03811182821017156200057b576200057b6200048b565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006102608284031215620005c057600080fd5b620005ca620004a1565b9050620005d78262000526565b8152620005e76020830162000526565b6020820152620005fa6040830162000526565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101606200066581840162000526565b908201526101806200067983820162000526565b908201526101a06200068d83820162000526565b908201526101c0620006a183820162000526565b908201526101e0620006b68484830162000543565b9082015292915050565b600080600080600080600080610340898b031215620006de57600080fd5b88516001600160401b0380821115620006f657600080fd5b818b0191508b601f8301126200070b57600080fd5b8151818111156200072057620007206200048b565b62000735601f8201601f1916602001620004cd565b91508082528c60208285010111156200074d57600080fd5b6200076081602084016020860162000500565b5098506200077490508a60208b01620005ac565b9650620007856102808a0162000526565b9550620007966102a08a0162000526565b9450620007a76102c08a0162000526565b9350620007b86102e08a0162000526565b9250620007c96103008a0162000526565b9150620007da6103208a0162000526565b90509295985092959890939650565b600181811c90821680620007fe57607f821691505b6020821081036200081f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033b576000816000526020600020601f850160051c81016020861015620008505750805b601f850160051c820191505b8181101562000871578281556001016200085c565b505050505050565b81516001600160401b038111156200089557620008956200048b565b620008ad81620008a68454620007e9565b8462000825565b602080601f831160018114620008e55760008415620008cc5750858301515b600019600386901b1c1916600185901b17855562000871565b600085815260208120601f198616915b828110156200091657888601518255948401946001909101908401620008f5565b5085821015620009355787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516200095981846020870162000500565b9190910192915050565b6000602082840312156200097657600080fd5b815180151581146200035057600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516110ad62000ab5600039600081816105ee0152818161065a01526107530152600081816105660152818161078301526107e101526000818161051f015261097c0152600081816105ba01526106f00152600081816101ce015281816103900152818161062a0152818161068c015281816106be01528181610724015281816107b6015281816108120152818161094a01526109af0152600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506110ad6000f3fe6080604052600436106101b75760003560e01c80639032c726116100ec578063d899e1121161008a578063e44808bc11610064578063e44808bc14610588578063eac3e799146105a8578063f3f70707146105dc578063f698da2514610610576101b7565b8063d899e11214610554578063dbbe807014610541578063ded06231146103ca576101b7565b8063a6e8a859116100c6578063a6e8a8591461050d578063ab033ea9146102c7578063cba2e58d14610541578063cbc1343414610304576101b7565b80639032c726146104cd5780639cd241af146104ed578063a22cb4651461049a576101b7565b806330adf81f116101595780634c2ac1d9116101335780634c2ac1d91461046c5780634ed2d6ac1461047f5780637180c8ca1461049a57806377d05ff4146104ba576101b7565b806330adf81f146103f85780633e691db91461042c578063414f826d1461044c576101b7565b806317fad7fc1161019557806317fad7fc1461033e5780631c0f12b61461035e57806321b57d531461037e57806329b23fc1146103ca576101b7565b806301681a62146102c757806302329a29146102e9578063074a6de914610304575b3480156101c357600080fd5b5060003660606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051610206929190610a85565b600060405180830381855af49150503d8060008114610241576040519150601f19603f3d011682016040523d82523d6000602084013e610246565b606091505b5091509150811561026a57604051638bb0a34b60e01b815260040160405180910390fd5b600061027582610a95565b90506001600160e01b03198116636e64089360e11b1461029757815160208301fd5b8151600319810160048401908152926102b891810160200190602401610b06565b80519650602001945050505050f35b3480156102d357600080fd5b506102e76102e2366004610bcb565b610625565b005b3480156102f557600080fd5b506102e76102e2366004610c04565b34801561031057600080fd5b5061032461031f366004610c31565b610652565b604080519283526020830191909152015b60405180910390f35b34801561034a57600080fd5b506102e7610359366004610ccd565b610687565b34801561036a57600080fd5b506102e7610379366004610d62565b6106b9565b34801561038a57600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610335565b3480156103d657600080fd5b506103ea6103e5366004610daa565b6106e9565b604051908152602001610335565b34801561040457600080fd5b506103ea7f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b34801561043857600080fd5b506103ea610447366004610e04565b61071d565b34801561045857600080fd5b506102e7610467366004610e41565b61074e565b6103ea61047a366004610e63565b61077c565b34801561048b57600080fd5b506102e7610379366004610ec7565b3480156104a657600080fd5b506102e76104b5366004610f11565b6107b1565b6103ea6104c8366004610c31565b6107da565b3480156104d957600080fd5b506102e76104e8366004610f46565b61080d565b3480156104f957600080fd5b506102e7610508366004610fc4565b610945565b34801561051957600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b61032461054f366004610daa565b610974565b34801561056057600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561059457600080fd5b506102e76105a3366004610ffc565b6109aa565b3480156105b457600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e857600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561061c57600080fd5b506103ea6109db565b61064e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b5050565b60008061067e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b50935093915050565b6106b07f0000000000000000000000000000000000000000000000000000000000000000610a69565b50505050505050565b6106e27f0000000000000000000000000000000000000000000000000000000000000000610a69565b5050505050565b60006107147f0000000000000000000000000000000000000000000000000000000000000000610a69565b50949350505050565b60006107487f0000000000000000000000000000000000000000000000000000000000000000610a69565b50919050565b6107777f0000000000000000000000000000000000000000000000000000000000000000610a69565b505050565b60006107a77f0000000000000000000000000000000000000000000000000000000000000000610a69565b5095945050505050565b6107777f0000000000000000000000000000000000000000000000000000000000000000610a69565b60006108057f0000000000000000000000000000000000000000000000000000000000000000610a69565b509392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108426109db565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b179052516108eb919061105b565b600060405180830381855af49150503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b50915091508161093d57805160208201fd5b805160208201f35b61096e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b50505050565b6000806109a07f0000000000000000000000000000000000000000000000000000000000000000610a69565b5094509492505050565b6109d37f0000000000000000000000000000000000000000000000000000000000000000610a69565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6060600080836001600160a01b03166000366040516108eb9291905b8183823760009101908152919050565b805160208201516001600160e01b03198082169291906004831015610ac45780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610afd578181015183820152602001610ae5565b50506000910152565b600060208284031215610b1857600080fd5b815167ffffffffffffffff80821115610b3057600080fd5b818401915084601f830112610b4457600080fd5b815181811115610b5657610b56610acc565b604051601f8201601f19908116603f01168101908382118183101715610b7e57610b7e610acc565b81604052828152876020848701011115610b9757600080fd5b610ba8836020830160208801610ae2565b979650505050505050565b6001600160a01b0381168114610bc857600080fd5b50565b600060208284031215610bdd57600080fd5b8135610be881610bb3565b9392505050565b80358015158114610bff57600080fd5b919050565b600060208284031215610c1657600080fd5b610be882610bef565b60006060828403121561074857600080fd5b600080600060608486031215610c4657600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610c6b57600080fd5b610c7786828701610c1f565b9150509250925092565b60008083601f840112610c9357600080fd5b50813567ffffffffffffffff811115610cab57600080fd5b6020830191508360208260051b8501011115610cc657600080fd5b9250929050565b60008060008060008060808789031215610ce657600080fd5b8635610cf181610bb3565b95506020870135610d0181610bb3565b9450604087013567ffffffffffffffff80821115610d1e57600080fd5b610d2a8a838b01610c81565b90965094506060890135915080821115610d4357600080fd5b50610d5089828a01610c81565b979a9699509497509295939492505050565b60008060008060808587031215610d7857600080fd5b843593506020850135610d8a81610bb3565b92506040850135610d9a81610bb3565b9396929550929360600135925050565b60008060008060808587031215610dc057600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115610dec57600080fd5b610df887828801610c1f565b91505092959194509250565b600060208284031215610e1657600080fd5b813567ffffffffffffffff811115610e2d57600080fd5b610e3984828501610c1f565b949350505050565b60008060408385031215610e5457600080fd5b50508035926020909101359150565b600080600080600060a08688031215610e7b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610eae57600080fd5b610eba88828901610c1f565b9150509295509295909350565b60008060008060808587031215610edd57600080fd5b843593506020850135610eef81610bb3565b9250604085013591506060850135610f0681610bb3565b939692955090935050565b60008060408385031215610f2457600080fd5b8235610f2f81610bb3565b9150610f3d60208401610bef565b90509250929050565b600080600080600080600060e0888a031215610f6157600080fd5b8735610f6c81610bb3565b96506020880135610f7c81610bb3565b9550610f8a60408901610bef565b945060608801359350608088013560ff81168114610fa757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080600060608486031215610fd957600080fd5b833592506020840135610feb81610bb3565b929592945050506040919091013590565b600080600080600060a0868803121561101457600080fd5b85359450602086013561102681610bb3565b9350604086013561103681610bb3565b925060608601359150608086013561104d81610bb3565b809150509295509295909350565b6000825161106d818460208701610ae2565b919091019291505056fea2646970667358221220a3e4c64963a91ab98b875a0e3d32739c989c9c56ca28faf4b731a016df12d87764736f6c63430008160033a2646970667358221220c31048d918871477838892e87215a75d9b340488259f390b067e9a9ff3386abd64736f6c63430008160033608060405234801561001057600080fd5b506144fd806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b614010806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b5060405162004010380380620040108339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613b9c6200047460003960008181610d890152612396015260008181610d5a0152612359015260008181610c3401528181610eb901528181610f4901528181610fd901528181611069015281816116840152818161171c015281816118e501528181611f1001528181611fe6015261213d01526000610e21015260008181610dfb0152612549015260008181610dd50152612523015260008181610daf01526124fd01526000611176015260006111500152600061112a01526000611104015260008181610e93015261256f015260008181610e470152818161130b01526128ff015260008181610e6d0152612cd101526000818161061301528181610d2b01528181611e810152818161261f0152818161264b01528181612b690152612ca201526000818161074301528181610cfc015281816112a401528181612acf0152612c030152613b9c6000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c806360246c8811610130578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104e6578063d8165743146104f9578063e44808bc1461050e578063e985e9c514610521578063fba560081461053457600080fd5b8063bd85b03914610490578063becee9c3146104a3578063c55dae63146104c3578063c69e16ad146104cb578063c6e6f592146104d357600080fd5b80639cd241af116100ff5780639cd241af14610431578063a22cb46514610444578063ab033ea914610457578063b0d9658014610468578063b88fed9f1461047d57600080fd5b806360246c88146103ef5780637180c8ca146104045780637ecebe0014610416578063950c5d031461042957600080fd5b806320fc4881116101be5780633e691db9116101825780633e691db91461038b57806346fbf68e1461039e5780634e41a1fb146103c15780634ed2d6ac146103d457806354fd4d50146103e757600080fd5b806320fc4881146102f057806321ff32a914610335578063313ce567146103565780633656eec2146103705780633a98ef391461038357600080fd5b806306fdde031161020557806306fdde031461028f5780630a4e14931461029757806314e5f07b146102b757806317fad7fc146102ca5780631c0f12b6146102dd57600080fd5b8062ad800c1461023657806301681a621461025f57806302329a291461027457806304baa00b14610287575b600080fd5b610249610244366004612f22565b610563565b6040516102569190612f8b565b60405180910390f35b61027261026d366004612fb3565b61059a565b005b610272610282366004612fde565b6105a3565b6102496105ac565b6102496105ee565b61029f610605565b6040516001600160a01b039091168152602001610256565b6102726102c536600461300a565b610645565b6102726102d83660046130e5565b610661565b6102726102eb36600461317a565b610677565b6103036102fe366004612f22565b61068a565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610256565b6103486103433660046131c2565b6106f6565b604051908152602001610256565b61035e61073c565b60405160ff9091168152602001610256565b61034861037e366004613204565b6107d7565b610348610810565b610348610399366004613234565b61082f565b6103b16103ac366004612fb3565b61083a565b6040519015158152602001610256565b6102496103cf366004612f22565b61085a565b6102726103e236600461326f565b610868565b6102496108b6565b6103f76108eb565b60405161025691906132b9565b61027261041236600461335a565b5050565b610348610424366004612fb3565b610bfa565b61029f610c26565b61027261043f366004613388565b610c66565b61027261045236600461335a565b610c77565b610272610465366004612fb3565b50565b610470610ce3565b60405161025691906133c0565b61034861048b366004612f22565b6111ab565b61034861049e366004612f22565b6111b9565b6104b66104b13660046134e6565b6111db565b6040516102569190613528565b61029f611296565b6103486112d6565b6103486104e1366004612f22565b6112f0565b6103486104f4366004612f22565b6112fe565b610501611335565b604051610256919061356c565b61027261051c36600461367d565b611441565b6103b161052f3660046136dc565b611489565b61053c6114cd565b6040805182516001600160801b039081168252602093840151169281019290925201610256565b60606105956105718361152c565b6040516020016105819190612f8b565b604051602081830303815290604052611654565b919050565b61046581611678565b610465816118e3565b60606105eb60405180604001604052806011815260200170455243343632364879706572647269766560781b8152506040516020016105819190612f8b565b90565b60606105eb6001604051602001610581919061370a565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b6106568989898989898989896119fd565b505050505050505050565b61066f868686868686611bf4565b505050505050565b6106848484848433611ca8565b50505050565b604080516060810182526000808252602082018190529181019190915261059560086000848152602001908152602001600020604051602001610581919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b03868116855290835281842090851684528252808320548151928301526107359101610581565b9392505050565b60006105eb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c391906137bb565b6040805160ff909216602083015201610581565b6000828152600a602090815260408083206001600160a01b038516845282528083205481519283015261080a9101610581565b92915050565b60006105eb61081d611e69565b60405160200161058191815260200190565b600061080a82611ef9565b600061059561084883612138565b60408051911515602083015201610581565b60606105956105718361221d565b836108728161231b565b6001600160a01b0316336001600160a01b0316146108a357604051632aab8bd360e01b815260040160405180910390fd5b6108af858585856123d8565b5050505050565b60606105eb60405180604001604052806007815260200166076312e302e32360cc1b8152506040516020016105819190612f8b565b610964604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061096e612445565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109d99190613804565b6109e39190613817565b905060008215610af55773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a1085612458565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae5919061382a565b509050610af281846125ee565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bc657610bc18486612603565b610bc9565b60005b81526003546001600160801b0316602091820152604051919250610bf391610581918491016132b9565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105959101610581565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b610c72838383336123d8565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ceb612e3b565b6105eb6040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f39919061385a565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc9919061385a565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611059919061385a565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e9919061385a565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161058191906133c0565b600061059561081d83612618565b6000818152600b60209081526040808320548151928301526105959101610581565b606060008267ffffffffffffffff8111156111f8576111f8613877565b604051908082528060200260200182016040528015611221578160200160208202803683370190505b50905060005b8381101561127a5760008585838181106112435761124361388d565b905060200201359050600081549050808484815181106112655761126561388d565b60209081029190910101525050600101611227565b5061128f816040516020016105819190613528565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b60006105eb60095460405160200161058191815260200190565b600061059561081d83612644565b600061059561081d6113307f000000000000000000000000000000000000000000000000000000000000000085613804565b612670565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105eb6002604051602001610581919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b8461144b8161231b565b6001600160a01b0316336001600160a01b03161461147c57604051632aab8bd360e01b815260040160405180910390fd5b61066f8686868686611ca8565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff909116151591810191909152909161080a9101610581565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105eb90606001610581565b606060f882901c6001600160f81b0383166000611548826126b4565b9050600083600381111561155e5761155e6137d8565b03611590576040518060400160405280600d81526020016c048797065726472697665204c5609c1b815250935061164c565b60018360038111156115a4576115a46137d8565b036115d057806040516020016115ba91906138a3565b604051602081830303815290604052935061164c565b60028360038111156115e4576115e46137d8565b036115fa57806040516020016115ba91906138dc565b600383600381111561160e5761160e6137d8565b0361164c576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b815260040161166f9190612f8b565b60405180910390fd5b611680612769565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611704919061385a565b9050336001600160a01b038216148015906117b257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c919061385a565b6001600160a01b0316336001600160a01b031614155b80156117c457506117c233612138565b155b156117e1576040516282b42960e81b815260040160405180910390fd5b60006117eb611e69565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118599190613916565b905061186f6001600160a01b0385168483612793565b81611878611e69565b14611896576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104656001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611941573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611965919061385a565b6001600160a01b0316336001600160a01b03161415801561198c575061198a33612138565b155b156119a9576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119f290831515815260200190565b60405180910390a150565b83421115611a1e5760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a455760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b33573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b7157604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c1157506001600160a01b038516155b15611c2f5760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c4f5760405163174861a760e31b815260040160405180910390fd5b60005b83811015611c9f57611c97858583818110611c6f57611c6f61388d565b905060200201358888868686818110611c8a57611c8a61388d565b9050602002013533611ca8565b600101611c52565b50505050505050565b6001600160a01b0384161580611cc557506001600160a01b038316155b15611ce35760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611da7576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611da7576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611da5576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611d9f908490613817565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611dd9908490613817565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e10908490613804565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef49190613916565b905090565b6000611f03612769565b611f0c826127e5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f90919061385a565b90506001600160a01b038116611fa96020850185612fb3565b6001600160a01b031614611fd057604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061207c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612042573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612066919061385a565b6001600160a01b0316336001600160a01b031614155b801561208e575061208c33612138565b155b156120ab576040516282b42960e81b815260040160405180910390fd5b60006120b5612445565b6009805460009091559091506120cc81838761281b565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461210b60408a0160208b01612fde565b60408051938452602084019290925215159082015260600160405180910390a25050506105956001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612199573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121c1919081019061392f565b905060005b815181101561221357836001600160a01b03168282815181106121eb576121eb61388d565b60200260200101516001600160a01b03160361220b575060019392505050565b6001016121c6565b5060009392505050565b606060f882901c6001600160f81b0383166000612239826126b4565b9050600083600381111561224f5761224f6137d8565b03612281576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b815250935061164c565b6001836003811115612295576122956137d8565b036122ab57806040516020016115ba91906139f4565b60028360038111156122bf576122bf6137d8565b036122d557806040516020016115ba9190613a2c565b60038360038111156122e9576122e96137d8565b0361164c57505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611ef4670de0b6b3a7640000612618565b6124bc6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125b491166128b4565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125e6929004166128b4565b905292915050565b60006107358383670de0b6b3a764000061292a565b600061073583670de0b6b3a76400008461292a565b600061080a7f000000000000000000000000000000000000000000000000000000000000000083612948565b600061080a7f0000000000000000000000000000000000000000000000000000000000000000836129b5565b6000612698600b60006126846002866129e5565b815260200190815260200160002054612a1a565b6126aa600b60006126846001876129e5565b61080a9190613a58565b60408051604e80825260808201909252606091906000908260208201818036833701905050905060005b841561275b576126ef600a86613a8e565b6126fa906030613804565b60f81b82600161270a8487613817565b6127149190613817565b815181106127245761272461388d565b60200101906001600160f81b031916908160001a9053508061274581613aa2565b91506127549050600a86613abb565b94506126de565b918290030190815292915050565b60026000540361278c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c72908490612a48565b60006127f46020830183612fb3565b6001600160a01b0316036104655760405163f0dd15fd60e01b815260040160405180910390fd5b60008061282885856125ee565b905061283381612644565b945084600003612847576000915050610735565b84915061285a6040840160208501612fde565b1561288957612882856128706020860186612fb3565b61287d6040870187613acf565b612aab565b91506128ac565b6128ac8561289a6020860186612fb3565b6128a76040870187613acf565b612c95565b509392505050565b600080670de0b6b3a76400006128c8612cc9565b6128d29190613b16565b90508083116128e25760006128ec565b6128ec8184613817565b9150610735612923670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b16565b8390612603565b600082600019048411830215820261294157600080fd5b5091020490565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a906024015b602060405180830381865afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190613916565b6040516363737ac960e11b8152600481018290526000906001600160a01b0384169063c6e6f59290602401612974565b60006001600160f81b03821115612a0f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60006001600160ff1b03821115612a445760405163396ea70160e11b815260040160405180910390fd5b5090565b6000612a5d6001600160a01b03841683612cf5565b90508051600014158015612a82575080806020019051810190612a809190613b2d565b155b15610c7257604051635274afe760e01b81526001600160a01b038416600482015260240161166f565b6040516370a0823160e01b81526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3a9190613916565b604051635d043b2960e11b8152600481018890526001600160a01b0387811660248301523060448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063ba087652906064016020604051808303816000875af1158015612bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd89190613916565b9150612be48282613804565b6040516370a0823160e01b81526001600160a01b0387811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6e9190613916565b14612c8c5760405163350b944160e11b815260040160405180910390fd5b50949350505050565b6106846001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612793565b6000611ef4427f0000000000000000000000000000000000000000000000000000000000000000612d03565b606061073583836000612d19565b6000612d0f8284613a8e565b6107359084613817565b606081471015612d3e5760405163cd78605960e01b815230600482015260240161166f565b600080856001600160a01b03168486604051612d5a9190613b4a565b60006040518083038185875af1925050503d8060008114612d97576040519150601f19603f3d011682016040523d82523d6000602084013e612d9c565b606091505b5091509150612dac868383612db6565b9695505050505050565b606082612dcb57612dc682612e12565b610735565b8151158015612de257506001600160a01b0384163b155b15612e0b57604051639996b31560e01b81526001600160a01b038516600482015260240161166f565b5080610735565b805115612e225780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001612f1d6040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b600060208284031215612f3457600080fd5b5035919050565b60005b83811015612f56578181015183820152602001612f3e565b50506000910152565b60008151808452612f77816020860160208601612f3b565b601f01601f19169290920160200192915050565b6020815260006107356020830184612f5f565b6001600160a01b038116811461046557600080fd5b600060208284031215612fc557600080fd5b813561073581612f9e565b801515811461046557600080fd5b600060208284031215612ff057600080fd5b813561073581612fd0565b60ff8116811461046557600080fd5b60008060008060008060008060006101208a8c03121561302957600080fd5b8935985060208a0135975060408a013561304281612f9e565b965060608a013561305281612f9e565b955060808a013561306281612fd0565b945060a08a0135935060c08a013561307981612ffb565b8093505060e08a013591506101008a013590509295985092959850929598565b60008083601f8401126130ab57600080fd5b50813567ffffffffffffffff8111156130c357600080fd5b6020830191508360208260051b85010111156130de57600080fd5b9250929050565b600080600080600080608087890312156130fe57600080fd5b863561310981612f9e565b9550602087013561311981612f9e565b9450604087013567ffffffffffffffff8082111561313657600080fd5b6131428a838b01613099565b9096509450606089013591508082111561315b57600080fd5b5061316889828a01613099565b979a9699509497509295939492505050565b6000806000806080858703121561319057600080fd5b8435935060208501356131a281612f9e565b925060408501356131b281612f9e565b9396929550929360600135925050565b6000806000606084860312156131d757600080fd5b8335925060208401356131e981612f9e565b915060408401356131f981612f9e565b809150509250925092565b6000806040838503121561321757600080fd5b82359150602083013561322981612f9e565b809150509250929050565b60006020828403121561324657600080fd5b813567ffffffffffffffff81111561325d57600080fd5b82016060818503121561073557600080fd5b6000806000806080858703121561328557600080fd5b84359350602085013561329781612f9e565b92506040850135915060608501356132ae81612f9e565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b6000806040838503121561336d57600080fd5b823561337881612f9e565b9150602083013561322981612fd0565b60008060006060848603121561339d57600080fd5b8335925060208401356133af81612f9e565b929592945050506040919091013590565b81516001600160a01b03168152610260810160208301516133ec60208401826001600160a01b03169052565b50604083015161340760408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151613479828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b600080602083850312156134f957600080fd5b823567ffffffffffffffff81111561351057600080fd5b61351c85828601613099565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561356057835183529284019291840191600101613544565b50909695505050505050565b81516001600160801b031681526101808101602083015161359860208401826001600160801b03169052565b5060408301516135b360408401826001600160801b03169052565b5060608301516135ce60608401826001600160801b03169052565b5060808301516135e36080840182600f0b9052565b5060a08301516135fe60a08401826001600160801b03169052565b5060c083015161361960c08401826001600160801b03169052565b5060e083015161363460e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b038116828501526134de565b600080600080600060a0868803121561369557600080fd5b8535945060208601356136a781612f9e565b935060408601356136b781612f9e565b92506060860135915060808601356136ce81612f9e565b809150509295509295909350565b600080604083850312156136ef57600080fd5b82356136fa81612f9e565b9150602083013561322981612f9e565b60006020808352600084548160018260011c9150600183168061372e57607f831692505b60208310810361374c57634e487b7160e01b85526022600452602485fd5b602088018390526040880181801561376b5760018114613781576137ac565b60ff198616825284151560051b820196506137ac565b60008b81526020902060005b868110156137a65781548482015290850190890161378d565b83019750505b50949998505050505050505050565b6000602082840312156137cd57600080fd5b815161073581612ffb565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561080a5761080a6137ee565b8181038181111561080a5761080a6137ee565b6000806040838503121561383d57600080fd5b82519150602083015161322981612fd0565b805161059581612f9e565b60006020828403121561386c57600080fd5b815161073581612f9e565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b700243cb832b9323934bb32902637b7339d1607d1b8152600082516138cf816011850160208701612f3b565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b815260008251613909816012850160208701612f3b565b9190910160120192915050565b60006020828403121561392857600080fd5b5051919050565b6000602080838503121561394257600080fd5b825167ffffffffffffffff8082111561395a57600080fd5b818501915085601f83011261396e57600080fd5b81518181111561398057613980613877565b8060051b604051601f19603f830116810181811085821117156139a5576139a5613877565b6040529182528482019250838101850191888311156139c357600080fd5b938501935b828510156139e8576139d98561384f565b845293850193928501926139c8565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b815260008251613a1f816010850160208701612f3b565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b8152600082516138cf816011850160208701612f3b565b818103600083128015838313168383128216171561128f5761128f6137ee565b634e487b7160e01b600052601260045260246000fd5b600082613a9d57613a9d613a78565b500690565b600060018201613ab457613ab46137ee565b5060010190565b600082613aca57613aca613a78565b500490565b6000808335601e19843603018112613ae657600080fd5b83018035915067ffffffffffffffff821115613b0157600080fd5b6020019150368190038213156130de57600080fd5b808202811582820484141761080a5761080a6137ee565b600060208284031215613b3f57600080fd5b815161073581612fd0565b60008251613b5c818460208701612f3b565b919091019291505056fea2646970667358221220a81b39a4619e0d7e29b50d876016a5c52bab3ee67ad20d7c16f5d4b24a925c6d64736f6c63430008160033a26469706673582212209189997884ce74d902ff3e1a1a1496ccd305ddff687f929851378b7d874f1cf264736f6c63430008160033608060405234801561001057600080fd5b50614722806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b614235806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b5060405162004235380380620042358339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613d8c620004a960003960005050600050506000610b650152600050506000818160af015281816103250152612df10152600081816113eb015281816117fc0152818161185f015281816129cf01528181612a0b01528181612c0a0152612dcb01526000818161071301528181610de801528181610e2f01528181610ff401528181611661015281816116af0152612da501526000611b50015260008181611c76015281816122d901526123520152600081816108d701528181610f8c01528181611c4a0152612326015260008181610e81015261229f01526000818161073401528181610dc601528181610e50015281816110150152818161163f015281816116d00152612e1701526000818161080f01528181610f0b015281816117580152818161217401526133d20152600081816105d20152818161064d015281816106c30152818161078f01526107c70152600081816119dd015281816125b40152818161269701526127d00152600081816125fd01526127310152613d8c6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806329b23fc11461003b578063ded0623114610060575b600080fd5b61004e6100493660046137e0565b610073565b60405190815260200160405180910390f35b61004e61006e3660046137e0565b61008c565b60006100818585858561009a565b90505b949350505050565b600061008185858585610310565b60006100a461054f565b6100ad82610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156100ee5760405163211ddda360e11b815260040160405180910390fd5b60006100f86105b2565b90508542101561011d5761011761010d6105ca565b82600460016105f6565b5061012d565b61012b8682600460016105f6565b505b61014261013b600288610c73565b3387610ca8565b6000806000806000806101568b888e610d81565b95509550955095509550955060008c90508c4210156102165782600960008282546101819190613855565b9091555061019990506101926105ca565b4284611075565b6101a68c888787856111b3565b60006101b18e61132d565b90506101cf6101bf8e611377565b6101c99083613868565b826113a5565b6101d8896113e4565b6101e4576101e4611444565b60006101ef8a61145d565b90508061020f57604051638bdf918d60e01b815260040160405180910390fd5b505061022d565b610220868961146a565b955061022b8861145d565b505b600061023a878a8d61154b565b90508b81101561025d5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61026d600288610c73565b61027a602083018361389d565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102b86040890160208a016138c8565b6102cc8a6102c68d8f613855565b906115e5565b8d6102da60408c018c6138e5565b6040516102ee989796959493929190613955565b60405180910390a450939c505050505050505050505050506100846001600055565b600061031a61054f565b61032382610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156103645760405163211ddda360e11b815260040160405180910390fd5b600061036e6105b2565b9050854210156103895761038361010d6105ca565b50610399565b6103978682600460016105f6565b505b6103a761013b600188610c73565b6000806000806000806103bb8b888e6115fa565b95509550955095509550955060008c90508c42101561046e5782600960008282546103e69190613855565b909155506103f790506101926105ca565b6104048c888787856117e5565b600061040f8261132d565b905061042761041d8e611377565b6101c9908361399d565b610430896113e4565b61043c5761043c611444565b60006104478a61145d565b90508061046757604051638bdf918d60e01b815260040160405180910390fd5b5050610485565b610478868961146a565b95506104838861145d565b505b6000610492878a8d61154b565b90508b8110156104b55760405163c972651760e01b815260040160405180910390fd5b8c898c6104c3600186610c73565b6104d0602083018361389d565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee526788888761050e6040890160208a016138c8565b8a61051c60408b018b6138e5565b60405161052f97969594939291906139c5565b60405180910390a450919a50505050505050505050506100846001600055565b60026000540361057257604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000610588602083018361389d565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b60006105c5670de0b6b3a76400006119d6565b905090565b60006105c5427f0000000000000000000000000000000000000000000000000000000000000000611a02565b600084815260086020526040812060018101546001600160801b031615158061061e57504286115b1561063757600101546001600160801b03169050610084565b60008060006106446105ca565b905060006106727f00000000000000000000000000000000000000000000000000000000000000008b613855565b90505b818110156106e8576000818152600860205260409020600101546001600160801b031680156106c0576000828152600860205260409020549094506001600160801b031692506106e8565b507f000000000000000000000000000000000000000000000000000000000000000001610675565b8360000361075b578893506107586106fe611a18565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a39565b92505b5061076583611a50565b6001850180546001600160801b0319166001600160801b03929092169190911790556107bb6107b47f00000000000000000000000000000000000000000000000000000000000000008b613a06565b8a84611075565b6107f9896107f36107ec7f000000000000000000000000000000000000000000000000000000000000000083613855565b4290611a7a565b84611075565b61080288611a8f565b50600090506008816108347f00000000000000000000000000000000000000000000000000000000000000008d613a06565b815260208101919091526040016000908120600101546001600160801b0316915061086060028c610c73565b6000818152600b60205260408120549192508c8c83156109a6576001925060008061088f86898d866000611c33565b9150915080600960008282546108a59190613855565b909155506108c19050866000846108bb81611377565b886111b3565b6108cb8183613855565b91506108fb86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611d02565b915061090f61090a83856115e5565b611d4c565b600680546002906109309084906201000090046001600160701b0316613a19565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061095d82611a50565b6006805460109061097f908490600160801b90046001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b60006109b3600184610c73565b6000818152600b60205260409020549091508015610ac257600194506000806109e0838b8f886001611c33565b9150915080600960008282546109f69190613855565b90915550610a12905083600084610a0c81611377565b8a6117e5565b610a1c8183613a06565b9150610a2b61090a83876115e5565b60068054600290610a4c9084906201000090046001600160701b0316613a19565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7982611a50565b60068054601090610a9b908490600160801b90046001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610afc57610aee610ad487611377565b610add83611377565b610ae79190613868565b60006113a5565b8e610af98482611d76565b50505b6000610b0784611f70565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190613a59565b90506001600160a01b03811615610c5a57610c575a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906120bc565b50505b509b9d5050505050505050505050505050949350505050565b60006001600160f81b03821115610c9d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610ceb57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610d2e908490613a06565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600080600080600080600080610d95611a18565b90506000610da28a612147565b6002549091508c908c90610e0c908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f0000000000000000000000000000000000000000000000000000000000000000612198565b600254919d509a50909550610e74908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a39565b9550610eaa858c610ea5897f0000000000000000000000000000000000000000000000000000000000000000612208565b612238565b15610eb757610eb7611444565b6000806000610ec885878b8761227a565b9c5091945092509050610edb8184613a06565b610ee59089613855565b9750610ef18284613855565b610efb908d613855565b9b505050505050506000600860007f00000000000000000000000000000000000000000000000000000000000000008c610f359190613a06565b815260208101919091526040016000908120600101546001600160801b03169150428b11610f7d5760008b8152600860205260409020600101546001600160801b0316610f7f565b8b5b90508b610fb08e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611d02565b9950610fbc878a613a06565b9850670de0b6b3a7640000611039610fd48787613855565b600254610ff2908f90600160801b90046001600160801b0316613a06565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a39565b111561104757611047611444565b6110578a8a878a8787600061238e565b939d50919b5090995090975050505050505093975093979195509350565b600083815260086020526040902054600160801b90046001600160801b03168083036110a15750505050565b6000848152600860205260408120546001600160801b0316908190036110fb576110ca83611a50565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611179565b61114c611147670de0b6b3a76400006111148886613a06565b61111e9190613a76565b85670de0b6b3a7640000611132878a613a06565b61113c9190613a76565b85929190600161242d565b611a50565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61118284611a50565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111fc611147826111df670de0b6b3a764000086613a76565b600554600160801b90046001600160801b031691908a600061242d565b600580546001600160801b03928316600160801b02921691909117905561122286611a50565b61122c9082613a8d565b600480546001600160801b03928316600160801b02921691909117905561125284611a50565b6002805460009061126d9084906001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061129a836124d7565b600480546000906112af908490600f0b613aad565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506112df85611a50565b60028054601090611301908490600160801b90046001600160801b0316613a8d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000611355600b6000611341600286610c73565b815260200190815260200160002054611377565b611367600b6000611341600187610c73565b6113719190613868565b92915050565b60006001600160ff1b038211156113a15760405163396ea70160e11b815260040160405180910390fd5b5090565b6003546113c090611147906001600160801b03168484612513565b600380546001600160801b0319166001600160801b03929092169190911790555050565b60006114107f00000000000000000000000000000000000000000000000000000000000000008361257a565b60035461142691906001600160801b0316613855565b60025461143c906001600160801b0316846115e5565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000611371826004611d76565b600080600061147884611a8f565b9092509050600061148986866115e5565b9050818311156114a15761149e86838561258f565b95505b828110156114b35780830392506114b8565b600092505b6114c183611d4c565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b909104168087101561151457869003611518565b5060005b61152181611a50565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b60008061155885856115e5565b9050611563816125ad565b9450846000036115775760009150506115de565b84915061158a60408401602085016138c8565b156115b9576115b2856115a0602086018661389d565b6115ad60408701876138e5565b6125d9565b91506115dc565b6115dc856115ca602086018661389d565b6115d760408701876138e5565b6127c3565b505b9392505050565b60006115de8383670de0b6b3a764000061258f565b60008060008060008060008061160e611a18565b9050600061161b8a612147565b6002549091508b908d90611685908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f00000000000000000000000000000000000000000000000000000000000000006127fd565b600254919d509b50909550600090819081906116f4908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a39565b985061170284878b8861227a565b9c5091945090925090506117168284613a06565b6117209089613a06565b975061172c8184613855565b611736908e613a06565b9c506117428a8e613855565b9b50505050505050506117cf86868386600860007f00000000000000000000000000000000000000000000000000000000000000008f6117829190613a06565b81526020810191909152604001600020600101546001600160801b0316428e116117c65760008e8152600860205260409020600101546001600160801b03166117c8565b8e5b600161238e565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b03168381108061182757507f00000000000000000000000000000000000000000000000000000000000000006118258583613a06565b105b1561183457611834611444565b6004549084900390600f0b6118498482613868565b90508361185586611377565b13801561188a57507f00000000000000000000000000000000000000000000000000000000000000006118888383612851565b105b1561189757611897611444565b600354600160801b90046001600160801b03166118d9611147826118c3670de0b6b3a764000088613a76565b6005546001600160801b031691908c600061242d565b600580546001600160801b0319166001600160801b03929092169190911790556119038882613a06565b905061190e81611a50565b600380546001600160801b03928316600160801b02921691909117905561193483611a50565b600280546001600160801b0319166001600160801b039290921691909117905561195d826124d7565b600480546001600160801b0319166001600160801b039290921691909117905561198687611a50565b600280546010906119a8908490600160801b90046001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60006113717f000000000000000000000000000000000000000000000000000000000000000083612877565b6000611a0e8284613af0565b6115de9084613a06565b6002546004546000916105c5916001600160801b0390911690600f0b612851565b600061008182611a4a85888861258f565b906128e4565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611a8957826115de565b50919050565b6006546000908190611ab2908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611c2e576000611adc8383613a06565b9050611aeb6111478286612959565b60068054601090611b0d908490600160801b90046001600160801b0316613a8d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611b46858361296e90919063ffffffff16565b90506000611b74827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611b889190613855565b90915550611b9890508183613a06565b9150611ba382611a50565b60028054600090611bbe9084906001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611beb82612983565b60048054600090611c00908490600f0b613aad565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611c40878561296e565b91506000611c6e837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611c9a817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611cbd57611cac8282613a06565b611cb69084613a06565b9250611cd4565b611cc78282613a06565b611cd19084613855565b92505b86861015611cf757611ce783878961258f565b9250611cf482878961258f565b91505b509550959350505050565b600080611d1a84611d148a888a61258f565b9061296e565b9050611d2788848661258f565b611d319082613855565b905086811115611d415786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611dc1916001600160801b031690613a06565b905080600003611dd5576001915050611371565b6000611de0856129ad565b905080600003611df557600192505050611371565b600080611e03838589612a49565b9150915080611e19576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e55929190613b82565b6040805180830381865af4158015611e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e959190613bf8565b91509150611eb3611ea582611377565b611eae90613c1c565b612bc4565b925082611ec95760009650505050505050611371565b611ed282611a50565b60078054600090611eed9084906001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f1a81611a50565b60078054601090611f3c908490600160801b90046001600160801b0316613a39565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611f9987612d5c565b6040518263ffffffff1660e01b8152600401611fb59190613c38565b6040805180830381865af4158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff59190613c47565b915091508061200b575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161207191613855565b61207b9190613a06565b90508060000361209357506000958695509350505050565b60008087116120a35760006120ae565b6120ae84888461258f565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156120e2576120e2613c77565b6040519080825280601f01601f19166020018201604052801561210c576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561212d578692505b828152826000602083013e90999098509650505050505050565b6000806121526105ca565b905080831161216257600061216c565b61216c8184613a06565b91506115de827f000000000000000000000000000000000000000000000000000000000000000061296e565b600080806121b96121b188670de0b6b3a7640000613a06565b899087612e96565b905086156121fb576121cb888861257a565b91506121ec8a8a846121e58a670de0b6b3a7640000613a06565b8989612ebc565b92506121f88382613855565b90505b9750975097945050505050565b600061222661221f84670de0b6b3a7640000613a06565b839061257a565b6115de90670de0b6b3a7640000613a06565b60008061226f85612247611a18565b6122519190613855565b600254610ff2908790600160801b90046001600160801b0316613a06565b909210949350505050565b60008080806122d187866122ca8b6122c461229d8c670de0b6b3a7640000613a06565b7f00000000000000000000000000000000000000000000000000000000000000009061257a565b9061257a565b9190612e96565b93506122fd847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061231e61231689670de0b6b3a7640000613a06565b8a9088612e96565b905061234a817f000000000000000000000000000000000000000000000000000000000000000061257a565b9350612376847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123809084613855565b915050945094509450949050565b600080600080600080888810156123fd5786156123b3576123b08d898b61258f565b9c505b6123be8c898b61258f565b9b506123c98b611377565b6123d28d611377565b6123dc9190613868565b90506123e98b898b61258f565b9a506123f68a898b61258f565b995061241c565b6124068b611377565b61240f8d611377565b6124199190613868565b90505b9b9c9a9b999a975050505050505050565b60008260000361243e5750846124ce565b81156124915761246f6124518487613855565b61245b85876115e5565b612465888a6115e5565b611d149190613855565b9050600061247d8588611a7a565b90508082101561248b578091505b506124ce565b8285036124a0575060006124ce565b6124cb6124ad8487613a06565b6124b7858761257a565b6124c1888a6115e5565b611d149190613a06565b90505b95945050505050565b600060016001607f1b03198212806124f5575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b600080612521846000612edf565b61252c846000612edf565b6125369190613868565b905060008113156125525761254b8186613855565b9450612571565b60008112156125715761256481613c1c565b61256e9086613a06565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612e96565b60008260001904841183021582026125a657600080fd5b5091020490565b60006113717f000000000000000000000000000000000000000000000000000000000000000083612ef5565b6040516370a0823160e01b81526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126689190613c8d565b604051635d043b2960e11b8152600481018890526001600160a01b0387811660248301523060448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063ba087652906064016020604051808303816000875af11580156126e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127069190613c8d565b91506127128282613855565b6040516370a0823160e01b81526001600160a01b0387811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279c9190613c8d565b146127ba5760405163350b944160e11b815260040160405180910390fd5b50949350505050565b6127f76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612f25565b50505050565b6000808061281e61281688670de0b6b3a7640000613a06565b89908761258f565b905086156121fb5761283088886115e5565b91506121ec8a8a8461284a8a670de0b6b3a7640000613a06565b8989612f7c565b60008061285e8484612f8d565b90925090508061287057612870611444565b5092915050565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a906024015b602060405180830381865afa1580156128c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190613c8d565b6000816000036128fd5750670de0b6b3a7640000611371565b8260000361290d57506000611371565b600061291883611377565b9050600061292d61292886611377565b612fcc565b9050818102612944670de0b6b3a764000082613ca6565b905061294f816131f2565b9695505050505050565b60006115de83670de0b6b3a764000084612e96565b60006115de83670de0b6b3a76400008461258f565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b60035460009081906129c8906001600160801b031684612959565b90506129f47f000000000000000000000000000000000000000000000000000000000000000082613855565b6002546001600160801b03161115611a89576002547f000000000000000000000000000000000000000000000000000000000000000090612a3f9083906001600160801b0316613a06565b6115de9190613a06565b612a5161372d565b600080612a5d84612d5c565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612a989190613c38565b6040805180830381865af4158015612ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad89190613c47565b9350905082612aed575060009150612bbc9050565b6000612b14612b0f8461016001518561014001516115e590919063ffffffff16565b611377565b612b34612b0f85610120015186610100015161257a90919063ffffffff16565b612b3e9190613868565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161208e929190613cf1565b6040805180830381865af41580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce9190613d67565b915091506120ec6120de82611b67565b6120e790613d8b565b612c9e565b92508261210257600096505050505050506106ba565b61210b826118b1565b600780546000906121269084906001600160801b0316613b47565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612153816118b1565b60078054601090612175908490600160801b90046001600160801b0316613b47565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6121d287612e36565b6040518263ffffffff1660e01b81526004016121ee9190613da7565b6040805180830381865af415801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190613db6565b9150915080612244575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916122aa916139ab565b6122b49190613acc565b9050806000036122cc57506000958695509350505050565b60008087116122dc5760006122e7565b6122e784888461183c565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561231b5761231b613de6565b6040519080825280601f01601f191660200182016040528015612345576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612366578692505b828152826000602083013e90999098509650505050505050565b60006123a187878761239a88670de0b6b3a7640000613acc565b8787612f70565b979650505050505050565b60006115086123ed6123c684670de0b6b3a7640000613acc565b611488670de0b6b3a76400006123dc818a61149f565b6123e69190613acc565b8790612632565b6123ff90670de0b6b3a76400006139ab565b611d1d84670de0b6b3a7640000613acc565b60008061244885612420611870565b61242a91906139ab565b600254610ef2908790600160801b90046001600160801b0316613acc565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061247f898789612f93565b909250905061248e8289613acc565b9750600061249d82888a61183c565b90506124a9818b613acc565b9a989950979650505050505050565b6000826000036124c95750846118a8565b811561251c576124fa6124dc84876139ab565b6124e685876106a2565b6124f0888a6106a2565b611d1d91906139ab565b9050600061250885886118df565b905080821015612516578091505b506118a8565b82850361252b575060006118a8565b6125566125388487613acc565b6125428587612632565b61254c888a6106a2565b611d1d9190613acc565b9695505050505050565b6000612588600b6000612574600286611229565b815260200190815260200160002054611b67565b61259a600b6000612574600187611229565b6106ba9190613b67565b60006125d07f000000000000000000000000000000000000000000000000000000000000000083612632565b6003546125e691906001600160801b03166139ab565b6002546125fc906001600160801b0316846106a2565b101592915050565b60006106ba826004611faf565b60006123a187878761262b88670de0b6b3a7640000613acc565b8787613013565b60006106b78383670de0b6b3a764000061278c565b600080808061269887866126918b61148861266a8c670de0b6b3a7640000613acc565b7f000000000000000000000000000000000000000000000000000000000000000090612632565b919061278c565b93506126c4847f00000000000000000000000000000000000000000000000000000000000000006106a2565b915060006126e56126dd89670de0b6b3a7640000613acc565b8a908861278c565b9050612711817f0000000000000000000000000000000000000000000000000000000000000000612632565b935061273d847f00000000000000000000000000000000000000000000000000000000000000006106a2565b61274790846139ab565b915050945094509450949050565b600081831161276457816106b7565b5090919050565b6000806127838461277d8a888a61278c565b9061149f565b9050611d308884865b60008260001904841183021582026127a357600080fd5b50910281810615159190040190565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a90602401602060405180830381865afa1580156127fa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190613c03565b60006106b783670de0b6b3a76400008461183c565b6000806128408484613024565b90925090508061285257612852612453565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526128c09186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613060565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261291784826130c8565b6128c0576040516001600160a01b0384811660248301526000604483015261294c91869182169063095ea7b39060640161288e565b6128c08482613060565b60008160000361296f5750670de0b6b3a76400006106ba565b8260000361297f575060006106ba565b600061298a83611b67565b9050600061299f61299a86611b67565b61316b565b90508181026129b6670de0b6b3a764000082613dfc565b905061255681613391565b600060016001607f1b038211156118db5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612a09575060016001607f1b0382135b156118db5760405163a5353be560e01b815260040160405180910390fd5b600080612a35846000613526565b612a40846000613526565b612a4a9190613b67565b90506000811315612a6657612a5f81866139ab565b9450612a85565b6000811215612a8557612a7881613d8b565b612a829086613acc565b94505b50929392505050565b6003546000908190612aa9906001600160801b03168461149f565b9050612ad57f0000000000000000000000000000000000000000000000000000000000000000826139ab565b6002546001600160801b031611156118ee576002547f000000000000000000000000000000000000000000000000000000000000000090612b209083906001600160801b0316613acc565b61150b9190613acc565b612b32613883565b600080612b3e84612e36565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612b799190613da7565b6040805180830381865af4158015612b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb99190613db6565b9350905082612bce5750600091506117fa9050565b6000612bf5612bf08461016001518561014001516106a290919063ffffffff16565b611b67565b612c15612bf085610120015186610100015161263290919063ffffffff16565b612c1f9190613b67565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7b9190613e2a565b935093509350935080612d975750600098975050505050505050565b868414612dc857612da7846118b1565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612df957612dd8836129eb565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612e2757612e09826118b1565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612e3e6138d5565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612f369116613535565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612f6892900416613535565b905292915050565b600080612f818888888888886135ab565b909250905080611d4a57611d4a612453565b600080612fdd8561148885817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612fd3818c61149f565b6114889190613acc565b9150613009827f00000000000000000000000000000000000000000000000000000000000000006106a2565b9050935093915050565b600080612f81888888888888613673565b60008060008361303386611b67565b61303d9190613b67565b9050600081121561305557600080925092505061069b565b946001945092505050565b60006130756001600160a01b03841683613733565b9050805160001415801561309a5750808060200190518101906130989190613e60565b155b1561183757604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516130e59190613e7d565b6000604051808303816000865af19150503d8060008114613122576040519150601f19603f3d011682016040523d82523d6000602084013e613127565b606091505b50915091508180156131515750805115806131515750808060200190518101906131519190613e60565b80156118a85750505050506001600160a01b03163b151590565b600080821361318d5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132109084901c611b67565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133ac57506000919050565b680755bf798b4a1bf1e582126133d5576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061255674029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611b67565b600081831361276457816106b7565b600080670de0b6b3a76400006135496106c0565b6135539190613ba4565b905080831161356357600061356d565b61356d8184613acc565b915061150b6135a4670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613ba4565b839061281e565b60008060006135bd8989888888613741565b90506135d7866118a26135d08a8d6139ab565b87906106a2565b98506135e4858a8661183c565b9850888110156135fb576000809250925050613668565b888103670de0b6b3a7640000811061363057613629613622670de0b6b3a76400008961149f565b8290612956565b9050613648565b613645613622670de0b6b3a76400008961281e565b90505b8089101561365e57600080935093505050613668565b8803925060019150505b965096945050505050565b60008060006136858989888888613741565b9050613695866118a2898b6139ab565b9750878110156136ac576000809250925050613668565b8781036136ba81868861278c565b9050670de0b6b3a764000081106136e7576136e0613622670de0b6b3a76400008961149f565b90506136ff565b6136fc613622670de0b6b3a76400008961281e565b90505b613709818661149f565b9050808a101561372157600080935093505050613668565b90980398600198509650505050505050565b60606106b783836000613770565b600061374d8585612956565b61376661375e866118a2868b612632565b85908561278c565b61255691906139ab565b6060814710156137955760405163cd78605960e01b81523060048201526024016130bf565b600080856001600160a01b031684866040516137b19190613e7d565b60006040518083038185875af1925050503d80600081146137ee576040519150601f19603f3d011682016040523d82523d6000602084013e6137f3565b606091505b50915091506125568683836060826138135761380e8261385a565b61150b565b815115801561382a57506001600160a01b0384163b155b1561385357604051639996b31560e01b81526001600160a01b03851660048201526024016130bf565b508061150b565b80511561386a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806138976138d5565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561394c57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561397857600080fd5b85016060818803121561398a57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106ba576106ba613995565b6001600160a01b03811681146105ca57600080fd5b6000602082840312156139e557600080fd5b813561150b816139be565b80151581146105ca57600080fd5b600060208284031215613a1057600080fd5b813561150b816139f0565b6000808335601e19843603018112613a3257600080fd5b83018035915067ffffffffffffffff821115613a4d57600080fd5b60200191503681900382131561069b57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613abf60c083018486613a62565b9998505050505050505050565b818103818111156106ba576106ba613995565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613b1960e083018486613a62565b9a9950505050505050505050565b6001600160701b0381811683821601908082111561285257612852613995565b6001600160801b0381811683821601908082111561285257612852613995565b818103600083128015838313168383128216171561285257612852613995565b600060208284031215613b9957600080fd5b815161150b816139be565b80820281158282048414176106ba576106ba613995565b6001600160801b0382811682821603908082111561285257612852613995565b8082018281126000831280158216821582161715613bfb57613bfb613995565b505092915050565b600060208284031215613c1557600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613c4157613c41613c1c565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156106ba576106ba613995565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613d05828551613c73565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613d7a57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613da057613da0613995565b5060000390565b61018081016106ba8284613c73565b60008060408385031215613dc957600080fd5b825191506020830151613ddb816139f0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613e0b57613e0b613c1c565b600160ff1b821460001984141615613e2557613e25613995565b500590565b60008060008060808587031215613e4057600080fd5b845193506020850151925060408501519150606085015161398a816139f0565b600060208284031215613e7257600080fd5b815161150b816139f0565b6000825160005b81811015613e9e5760208186018101518583015201613e84565b50600092019182525091905056fea264697066735822122098988e8892e130e2d7270060dacd80f32f52670a2cbe1dcfc393f12ea51aadfa64736f6c63430008160033a2646970667358221220496ddded9bfaa77b10e94f8c82cb72b624e6f7b6d8faaea7af6f25d969bc3e0864736f6c63430008160033608060405234801561001057600080fd5b5061480b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b61431e806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b506040516200431e3803806200431e8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613e4f620004cf600039600050506000505060006112f901526000818161030301528181610332015261035f01526000818160de015281816105a9015261172001526000818161085601528181610941015281816109d401528181610add015281816115f1015281816116fa01528181612161015281816121c401528181612aa301528181612eab0152612ee701526000818161013f015281816108c601528181610ea7015281816114b5015281816115190152818161156001526116d401526000611d66015260008181611ec1015261314001526000818161106b0152611e95015260006130f60152600081816101810152818161091901528181610ec801528181611485015281816114e901528181611581015261174601526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fa30152612a3901526000818161029701528181610d6601528181610de101528181610e5701528181610f230152610f5b0152600081816119f601528181611a7001528181611b020152612d870152600081816119c90152611a2a0152613e4f6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c366004613873565b610066565b60405190815260200160405180910390f35b6100416100613660046138d7565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c04565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c3d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c63565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610c89565b9150915060006101ed610d5e565b90506101fd818360046001610d8a565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b61393d565b611408565b611452565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f000000000000000000000000000000000000000000000000000000000000000089613950565b81526020810191909152604001600020546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061165f565b90506103287f00000000000000000000000000000000000000000000000000000000000000008261393d565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f000000000000000000000000000000000000000000000000000000000000000082613950565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b0390911690613950565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c90839061393d565b9050600080600061043c8a61168b565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa156906104769084906004016139e1565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b791906139f0565b91506104ca6104c58c6117c5565b6117f3565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b918591016139e1565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906139f0565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613950565b9190611819565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611837565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613a1e565b8e61184c565b61063a896118f4565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d919061393d565b9b5090508a158061073757506107348c6000611901565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611819565b610770565b60005b905061077f6020850185613a1e565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613a49565b866107ca60408c018c613a66565b6040516107dd9796959493929190613aad565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c04565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610c89565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613b01565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612459929190613c62565b6040805180830381865af4158015612475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124999190613cd8565b915091506124b76124a9826117c5565b6124b290613cfc565b612a5d565b9250826124cd576000965050505050505061144c565b6124d68261193c565b600780546000906124f19084906001600160801b0316613b66565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061251e8161193c565b60078054601090612540908490600160801b90046001600160801b0316613b66565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61259d8761168b565b6040518263ffffffff1660e01b81526004016125b991906139e1565b6040805180830381865af41580156125d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f99190613d18565b915091508061260f575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916126759161393d565b61267f9190613950565b90508060000361269757506000958695509350505050565b60008087116126a75760006126b2565b6126b2848884611819565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126e6576126e6613d48565b6040519080825280601f01601f191660200182016040528015612710576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612731578692505b828152826000602083013e9093509150505b9550959350505050565b60008060008361275c866117c5565b6127669190613b86565b9050600081121561277e576000809250925050610d57565b946001945092505050565b600080600061279b8888888888613094565b905060006127c6670de0b6b3a76400006127b58888612e4a565b6127bf919061393d565b8390611837565b9050670de0b6b3a764000081106127fa576127f36127ec670de0b6b3a764000089611837565b8290612c0e565b9050612812565b61280f6127ec670de0b6b3a764000089612e4a565b90505b61281c8186611837565b90508881101561283457600080935093505050612743565b97909703976001975095505050505050565b600080600061285889898888886130c3565b9050612872866119b361286b8a8d61393d565b879061210b565b985061287f858a86611819565b985088811015612896576000809250925050611654565b888103670de0b6b3a764000081106128c4576128bd6127ec670de0b6b3a764000089612e4a565b90506128dc565b6128d96127ec670de0b6b3a764000089611837565b90505b808910156128f257600080935093505050611654565b90970398600198509650505050505050565b60008060008060006129178987896130e8565b90925090506129268289613950565b9750600061293582888a611819565b9050612941818b613950565b9a989950979650505050505050565b60008061295e84600061316e565b61296984600061316e565b6129739190613b86565b9050600081131561298f57612988818661393d565b94506129ae565b60008112156129ae576129a181613cfc565b6129ab9086613950565b94505b50929392505050565b60006100918383670de0b6b3a76400005b60008260001904841183021582026129df57600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612a02610d5e565b612a0c9190613b01565b9050808311612a1c576000612a26565b612a268184613950565b91506100916127bf670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b01565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3a9190613d5e565b935093509350935080612b565750600098975050505050505050565b868414612b8757612b668461193c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bb857612b9783611966565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612be657612bc88261193c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612c275750670de0b6b3a764000061144c565b82600003612c375750600061144c565b6000612c42836117c5565b90506000612c57612c52866117c5565b613184565b9050818102612c6e670de0b6b3a764000082613d9f565b9050612c79816133aa565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052612cea9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061353f565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612d4184826135a7565b612cea576040516001600160a01b03848116602483015260006044830152612d7691869182169063095ea7b390606401612cb8565b612cea848261353f565b600061144c7f00000000000000000000000000000000000000000000000000000000000000008361364a565b600082600003612dbd575084610078565b8115612e1057612dee612dd0848761393d565b612dda858761210b565b612de4888a61210b565b611685919061393d565b90506000612dfc8588611c96565b905080821015612e0a578091505b50610078565b828503612e1f57506000610078565b610075612e2c8487613950565b612e3685876129b7565b612e40888a61210b565b6116859190613950565b600061009183670de0b6b3a7640000846129c8565b600060016001607f1b038211156117ef5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612ea4906001600160801b031684612e4a565b9050612ed07f00000000000000000000000000000000000000000000000000000000000000008261393d565b6002546001600160801b03161115611910576002547f000000000000000000000000000000000000000000000000000000000000000090612f1b9083906001600160801b0316613950565b6100919190613950565b612f2d61380f565b600080612f398461168b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612f7491906139e1565b6040805180830381865af4158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb49190613d18565b9350905082612fc9575060009150611aed9050565b6000612feb61161684610160015185610140015161210b90919063ffffffff16565b61300b6116168561012001518661010001516129b790919063ffffffff16565b6130159190613b86565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b60006130a08585612c0e565b6130b96130b1866119b3868b61210b565b859085611819565b610075919061393d565b60006130cf8585612c0e565b6130b96130e0866119b3868b6129b7565b8590856129c8565b6000806131388561313285817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613128818c612e4a565b6131329190613950565b906129b7565b9150613164827f000000000000000000000000000000000000000000000000000000000000000061210b565b9050935093915050565b600081831361317d5781610091565b5090919050565b60008082136131a65760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132299084901c6117c5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133c557506000919050565b680755bf798b4a1bf1e582126133ee576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612c7974029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117c5565b60006135546001600160a01b038416836136b6565b905080516000141580156135795750808060200190518101906135779190613dcd565b155b15611b2a57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516135c49190613dea565b6000604051808303816000865af19150503d8060008114613601576040519150601f19603f3d011682016040523d82523d6000602084013e613606565b606091505b50915091508180156136305750805115806136305750808060200190518101906136309190613dcd565b80156100785750505050506001600160a01b03163b151590565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a90602401602060405180830381865afa158015613692573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009191906139f0565b60606100918383600084600080856001600160a01b031684866040516136dc9190613dea565b60006040518083038185875af1925050503d8060008114613719576040519150601f19603f3d011682016040523d82523d6000602084013e61371e565b606091505b5091509150612c7986838360608261373e5761373982613785565b610091565b815115801561375557506001600160a01b0384163b155b1561377e57604051639996b31560e01b81526001600160a01b038516600482015260240161359e565b5080610091565b8051156137955780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061012001604052806138236137ae565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561191057600080fd5b600080600080600060a0868803121561388b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156138be57600080fd5b6138ca88828901613861565b9150509295509295909350565b6000806000606084860312156138ec57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561391157600080fd5b61391d86828701613861565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561144c5761144c613927565b8181038181111561144c5761144c613927565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144c8284613963565b600060208284031215613a0257600080fd5b5051919050565b6001600160a01b0381168114610c3a57600080fd5b600060208284031215613a3057600080fd5b813561009181613a09565b8015158114610c3a57600080fd5b600060208284031215613a5b57600080fd5b813561009181613a3b565b6000808335601e19843603018112613a7d57600080fd5b83018035915067ffffffffffffffff821115613a9857600080fd5b602001915036819003821315610d5757600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144c5761144c613927565b600080600060608486031215613b2d57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561193557611935613927565b6001600160801b0381811683821601908082111561193557611935613927565b818103600083128015838313168383128216171561193557611935613927565b600060208284031215613bb857600080fd5b815161009181613a09565b8082018281126000831280158216821582161715613be357613be3613927565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613c1057613c10613beb565b500690565b6001600160801b0382811682821603908082111561193557611935613927565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144c5761144c613927565b60006102a082019050613c76828551613963565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613ceb57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613d1157613d11613927565b5060000390565b60008060408385031215613d2b57600080fd5b825191506020830151613d3d81613a3b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613d7457600080fd5b8451935060208501519250604085015191506060850151613d9481613a3b565b939692955090935050565b600082613dae57613dae613beb565b600160ff1b821460001984141615613dc857613dc8613927565b500590565b600060208284031215613ddf57600080fd5b815161009181613a3b565b6000825160005b81811015613e0b5760208186018101518583015201613df1565b50600092019182525091905056fea26469706673582212206b20adff4f38938896bdf881759564d5a900f36fc30f97c304cf40612dbaeba764736f6c63430008160033a26469706673582212203a47bd9d3ec775a61776c88ede03cef92aabb39fd58f39e11aad927e28e48c9564736f6c63430008160033608060405234801561001057600080fd5b50613b27806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b61363a806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b506040516200363a3803806200363a8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161321862000422600039600050506000505060006109c10152600050506000818161026d0152611f850152600081816117cb0152818161182e01528181611b6a01528181611ba601528181611d9e0152611f5f01526000818161056f0152611f39015260006113a0015260006114fb01526000818161073301526114cf015260005050600081816105900152611fab01526000818161066b01526125a10152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb01526106230152600081816110db015281816122e7015281816123ca0152612503015260008181612330015261246401526132186000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612c76565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612ccd565b6100b5565b005b610059610095366004612c76565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612d04565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612d2f565b61017160408c018c612d4c565b60405161018396959493929190612dbc565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612e0c565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612d04565b88610ee8565b60006103066102fd6020870187612d04565b88848989610ad0565b90945090506103158188612e36565b9250600061032283610f88565b5090506103326020870187612d04565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612d2f565b8a888e80604001906103829190612d4c565b604051610396989796959493929190612e49565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612d04565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f0000000000000000000000000000000000000000000000000000000000000000611100565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612e91565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a61111d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061113e565b92505b506105c18361115e565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612e36565b8a8461118c565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612e91565b42906112ca565b8461118c565b61065e886112df565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612e36565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c611483565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d8660006114b8565b9150915080600960008282546107019190612e91565b9091555061071d90508660008461071781611587565b886115b1565b6107278183612e91565b915061075786838a8e877f000000000000000000000000000000000000000000000000000000000000000061172b565b915061076b6107668385611775565b61178a565b6006805460029061078c9084906201000090046001600160701b0316612ea4565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261115e565b600680546010906107db908490600160801b90046001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f600184611483565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f8860016114b8565b9150915080600960008282546108529190612e91565b9091555061086e90508360008461086881611587565b8a6117b4565b6108788183612e36565b91506108876107668387611775565b600680546002906108a89084906201000090046001600160701b0316612ea4565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261115e565b600680546010906108f7908490600160801b90046001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a61093087611587565b61093983611587565b6109439190612ee4565b60006119a5565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612f04565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906119e4565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611a6f565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611a7c565b9050610b568361115e565b610b609083612f21565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161115e565b60078054601090610bab908490600160801b90046001600160801b0316612f21565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611a9a565b9350610be68684611b33565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612e36565b905080600003610c72576001915050610e08565b6000610c7d85611b48565b905080600003610c9257600192505050610e08565b600080610ca0838589611be4565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612fbf565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190613035565b91509150610d50610d4282611587565b610d4b90613059565b611d58565b925082610d665760009650505050505050610e08565b610d6f8261115e565b60078054600090610d8a9084906001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161115e565b60078054601090610dd9908490600160801b90046001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612e36565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612e91565b90915550506000838152600b602052604081208054839290610f3d908490612e91565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611ef0565b6040518263ffffffff1660e01b8152600401610fcd9190613075565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190613084565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612e91565b6110939190612e36565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611a7c565b976001975095505050505050565b6000610e087f00000000000000000000000000000000000000000000000000000000000000008361202a565b600061110c8284612e0c565b6111169084612e36565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b612097565b60006111558261114f858888611a7c565b906120bd565b95945050505050565b60006001600160801b0382111561118857604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036111b85750505050565b6000848152600860205260408120546001600160801b031690819003611212576111e18361115e565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611290565b61126361125e670de0b6b3a764000061122b8886612e36565b61123591906130b4565b85670de0b6b3a7640000611249878a612e36565b61125391906130b4565b859291906001612132565b61115e565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112998461115e565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116112d95782611116565b50919050565b6006546000908190611302908490600160801b90046001600160801b0316611775565b6006546201000090046001600160701b0316925090508181111561147e57600061132c8383612e36565b905061133b61125e82866121d0565b6006805460109061135d908490600160801b90046001600160801b0316612f21565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061139685836121e590919063ffffffff16565b905060006113c4827f0000000000000000000000000000000000000000000000000000000000000000611775565b905080600960008282546113d89190612e91565b909155506113e890508183612e36565b91506113f38261115e565b6002805460009061140e9084906001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061143b826121fa565b60048054600090611450908490600f0b6130cb565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156114ad5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806114c587856121e5565b915060006114f3837f0000000000000000000000000000000000000000000000000000000000000000611775565b905061151f817f0000000000000000000000000000000000000000000000000000000000000000611775565b91508315611542576115318282612e36565b61153b9084612e36565b9250611559565b61154c8282612e36565b6115569084612e91565b92505b8686101561157c5761156c838789611a7c565b9250611579828789611a7c565b91505b509550959350505050565b60006001600160ff1b038211156111885760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166115fa61125e826115dd670de0b6b3a7640000866130b4565b600554600160801b90046001600160801b031691908a6000612132565b600580546001600160801b03928316600160801b0292169190911790556116208661115e565b61162a9082612f21565b600480546001600160801b03928316600160801b0292169190911790556116508461115e565b6002805460009061166b9084906001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061169883612224565b600480546000906116ad908490600f0b6130cb565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506116dd8561115e565b600280546010906116ff908490600160801b90046001600160801b0316612f21565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806117438461173d8a888a611a7c565b906121e5565b9050611750888486611a7c565b61175a9082612e91565b90508681111561176a5786810391505b509695505050505050565b60006111168383670de0b6b3a7640000611a7c565b60006001600160701b038211156111885760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806117f657507f00000000000000000000000000000000000000000000000000000000000000006117f48583612e36565b105b1561180357611803612260565b6004549084900390600f0b6118188482612ee4565b90508361182486611587565b13801561185957507f00000000000000000000000000000000000000000000000000000000000000006118578383612097565b105b1561186657611866612260565b600354600160801b90046001600160801b03166118a861125e82611892670de0b6b3a7640000886130b4565b6005546001600160801b031691908c6000612132565b600580546001600160801b0319166001600160801b03929092169190911790556118d28882612e36565b90506118dd8161115e565b600380546001600160801b03928316600160801b0292169190911790556119038361115e565b600280546001600160801b0319166001600160801b039290921691909117905561192c82612224565b600480546001600160801b0319166001600160801b03929092169190911790556119558761115e565b60028054601090611977908490600160801b90046001600160801b0316612ec4565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546119c09061125e906001600160801b03168484612279565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a0a57611a0a6130f8565b6040519080825280601f01601f191660200182016040528015611a34576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611a55578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611a9357600080fd5b5091020490565b600080611aa78585611775565b9050611ab2816122e0565b945084600003611ac6576000915050611116565b849150611ad96040840160208501612d2f565b15611b0857611b0185611aef6020860186612d04565b611afc6040870187612d4c565b61230c565b9150611b2b565b611b2b85611b196020860186612d04565b611b266040870187612d4c565b6124f6565b509392505050565b60006111168383670de0b6b3a7640000612530565b6003546000908190611b63906001600160801b0316846121d0565b9050611b8f7f000000000000000000000000000000000000000000000000000000000000000082612e91565b6002546001600160801b031611156112d9576002547f000000000000000000000000000000000000000000000000000000000000000090611bda9083906001600160801b0316612e36565b6111169190612e36565b611bec612bc3565b600080611bf884611ef0565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c339190613075565b6040805180830381865af4158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190613084565b9350905082611c885750600091506100ad9050565b6000611caf611caa84610160015185610140015161177590919063ffffffff16565b611587565b611ccf611caa856101200151866101000151611b3390919063ffffffff16565b611cd99190612ee4565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190612ced565b935093509350935080611d1a5750600098975050505050505050565b868414611d4b57611d2a84611fa2565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611d7c57611d5b83611fcc565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611daa57611d8c82611fa2565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b6000611dc58284612d23565b6114c59084612c7a565b600254600454600091610f75916001600160801b0390911690600f0b61201a565b6000611e11878787611e0a88670de0b6b3a7640000612c7a565b8787612040565b979650505050505050565b6000611e3382611e2d858888611f56565b9061206e565b95945050505050565b6000611ea7611e7d611e5684670de0b6b3a7640000612c7a565b611149670de0b6b3a7640000611e6c818a611c0c565b611e769190612c7a565b8790611a0c565b611e8f90670de0b6b3a7640000612c8d565b611ea184670de0b6b3a7640000612c7a565b90611a58565b949350505050565b600080611ee685611ebe611dcf565b611ec89190612c8d565b6002546117ca908790600160801b90046001600160801b0316612c7a565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000806000806000611f1d8987896114cc565b9092509050611f2c8289612c7a565b97506000611f3b82888a611f56565b9050611f47818b612c7a565b9a989950979650505050505050565b6000826000190484118302158202611f6d57600080fd5b5091020490565b60006001600160ff1b03821115611f9e5760405163396ea70160e11b815260040160405180910390fd5b5090565b60006001600160801b03821115611f9e57604051630f0af95160e11b815260040160405180910390fd5b60006f7fffffffffffffffffffffffffffffff19821280611ffc57506f7fffffffffffffffffffffffffffffff82135b15611f9e5760405163a5353be560e01b815260040160405180910390fd5b60008061202784846120d9565b90925090508061203957612039611ef1565b5092915050565b600080612051888888888888612118565b90925090508061206357612063611ef1565b509695505050505050565b6000816000036120875750670de0b6b3a7640000610d9e565b8260000361209757506000610d9e565b60006120a283611f74565b905060006120b76120b286611f74565b6121e0565b90508181026120ce670de0b6b3a764000082612d37565b9050611c0281611a6d565b6000806000836120e886611f74565b6120f29190612ca0565b9050600081121561210a576000809250925050612111565b9150600190505b9250929050565b600080600061212a8989888888612406565b905061214486611e2d61213d8a8d612c8d565b8790611a43565b9850612151858a86611f56565b9850888110156121685760008092509250506121d5565b888103670de0b6b3a7640000811061219d5761219661218f670de0b6b3a764000089611c0c565b829061206e565b90506121b5565b6121b261218f670de0b6b3a764000089611a58565b90505b808910156121cb576000809350935050506121d5565b8803925060019150505b965096945050505050565b60008082136122025760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906122859084901c611f74565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000612412858561206e565b61242b61242386611e2d868b611a0c565b859085611a1d565b611c029190612c8d565b8183823760009101908152919050565b805160208201516001600160e01b031980821692919060048310156124745780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156124b6576124b661247c565b60405290565b60005b838110156124d75781810151838201526020016124bf565b50506000910152565b6000602082840312156124f257600080fd5b815167ffffffffffffffff8082111561250a57600080fd5b818401915084601f83011261251e57600080fd5b8151818111156125305761253061247c565b604051601f8201601f19908116603f011681019083821181831017156125585761255861247c565b8160405282815287602084870101111561257157600080fd5b611e118360208301602088016124bc565b6001600160a01b0381168114610e2557600080fd5b6000602082840312156125a957600080fd5b81356114c581612582565b8015158114610e2557600080fd5b80356125cd816125b4565b919050565b6000602082840312156125e457600080fd5b81356114c5816125b4565b600060608284031215610b8b57600080fd5b60008060006060848603121561261657600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561263b57600080fd5b612647868287016125ef565b9150509250925092565b60008083601f84011261266357600080fd5b50813567ffffffffffffffff81111561267b57600080fd5b6020830191508360208260051b850101111561211157600080fd5b600080600080600080608087890312156126af57600080fd5b86356126ba81612582565b955060208701356126ca81612582565b9450604087013567ffffffffffffffff808211156126e757600080fd5b6126f38a838b01612651565b9096509450606089013591508082111561270c57600080fd5b5061271989828a01612651565b979a9699509497509295939492505050565b6000806000806080858703121561274157600080fd5b84359350602085013561275381612582565b9250604085013561276381612582565b9396929550929360600135925050565b6000806000806080858703121561278957600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080608085870312156127bb57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156127e757600080fd5b6127f3878288016125ef565b91505092959194509250565b60006020828403121561281157600080fd5b813567ffffffffffffffff81111561282857600080fd5b611ea7848285016125ef565b6000806040838503121561284757600080fd5b50508035926020909101359150565b600080600080600060a0868803121561286e57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156128a157600080fd5b6128ad888289016125ef565b9150509295509295909350565b600080600080608085870312156128d057600080fd5b8435935060208501356128e281612582565b92506040850135915060608501356128f981612582565b939692955090935050565b600080600080600060a0868803121561291c57600080fd5b85359450602086013561292e81612582565b9350604086013561293e81612582565b925060608601359150608086013561295581612582565b809150509295509295909350565b60006020828403121561297557600080fd5b5035919050565b80356001600160801b03811681146125cd57600080fd5b600080604083850312156129a657600080fd5b6129af8361297c565b91506129bd6020840161297c565b90509250929050565b600080604083850312156129d957600080fd5b82356129e481612582565b915060208301356129f4816125b4565b809150509250929050565b600080600060608486031215612a1457600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215612a4057600080fd5b833592506020840135612a5281612582565b929592945050506040919091013590565b600080600080600080600060e0888a031215612a7e57600080fd5b8735612a8981612582565b96506020880135612a9981612582565b95506040880135612aa9816125b4565b945060608801359350608088013560ff81168114612ac657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215612af557600080fd5b6114c58261297c565b8035600f81900b81146125cd57600080fd5b80356001600160701b03811681146125cd57600080fd5b60006101808284031215612b3a57600080fd5b612b42612492565b612b4b8361297c565b8152612b596020840161297c565b6020820152612b6a6040840161297c565b6040820152612b7b6060840161297c565b6060820152612b8c60808401612afe565b6080820152612b9d60a0840161297c565b60a0820152612bae60c0840161297c565b60c0820152612bbf60e0840161297c565b60e0820152610100612bd28185016125c2565b90820152610120612be48482016125c2565b90820152610140612bf6848201612b10565b90820152610160612c0884820161297c565b908201529392505050565b600060208284031215612c2557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201612c5757612c57612c2c565b5060000390565b60008251612c708184602087016124bc565b9190910192915050565b81810381811115610d9e57610d9e612c2c565b80820180821115610d9e57610d9e612c2c565b818103600083128015838313168383128216171561203957612039612c2c565b8082028115828204841417610d9e57610d9e612c2c565b634e487b7160e01b600052601260045260246000fd5b60008060008060808587031215612d0357600080fd5b84519350602085015192506040850151915060608501516128f9816125b4565b600082612d3257612d32612cd7565b500690565b600082612d4657612d46612cd7565b600160ff1b821460001984141615612d6057612d60612c2c565b50059056fea264697066735822122018ff508a4cd8b9994c34af7ff126070c3507fcc8db7db00f456e3a2728dbe0bd64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004228380380620042288339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613da66200048260003960008181610dab01526123a7015260008181610d7c015261236a015260008181610c5601528181610edb01528181610f6b01528181610ffb0152818161108b0152818161168c01528181611724015281816118ed01528181611f2101528181611ff7015261214e01526000610e43015260008181610e1d015261255a015260008181610df70152612534015260008181610dd1015261250e01526000611198015260006111720152600061114c01526000611126015260008181610eb50152612580015260008181610e69015281816113130152612a9c015260008181610e8f0152612edb01526000818161061b0152610d4d01526000818161074b01528181610d1e015281816112c601528181611e95015281816126440152818161268d0152818161273f0152818161278801528181612c0101528181612cad01528181612d990152612e450152613da66000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c806360246c881161013b578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104f1578063d816574314610504578063e44808bc14610519578063e985e9c51461052c578063fba560081461053f57600080fd5b8063bd85b039146104a3578063becee9c3146104b6578063c55dae63146104d6578063c69e16ad14610434578063c6e6f592146104de57600080fd5b80639cd241af116100ff5780639cd241af14610444578063a22cb46514610457578063ab033ea91461046a578063b0d965801461047b578063b88fed9f1461049057600080fd5b806360246c88146103fa5780637180c8ca1461040f5780637ecebe00146104215780638e67f87e14610434578063950c5d031461043c57600080fd5b806320fc4881116101c95780633e691db91161018d5780633e691db91461039657806346fbf68e146103a95780634e41a1fb146103cc5780634ed2d6ac146103df57806354fd4d50146103f257600080fd5b806320fc4881146102fb57806321ff32a914610340578063313ce567146103615780633656eec21461037b5780633a98ef391461038e57600080fd5b806306fdde031161021057806306fdde031461029a5780630a4e1493146102a257806314e5f07b146102c257806317fad7fc146102d55780631c0f12b6146102e857600080fd5b8062ad800c1461024157806301681a621461026a57806302329a291461027f57806304baa00b14610292575b600080fd5b61025461024f36600461312c565b61056e565b6040516102619190613195565b60405180910390f35b61027d6102783660046131bd565b6105a5565b005b61027d61028d3660046131e8565b6105ae565b6102546105b7565b6102546105f6565b6102aa61060d565b6040516001600160a01b039091168152602001610261565b61027d6102d0366004613214565b61064d565b61027d6102e33660046132ef565b610669565b61027d6102f6366004613384565b61067f565b61030e61030936600461312c565b610692565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610261565b61035361034e3660046133cc565b6106fe565b604051908152602001610261565b610369610744565b60405160ff9091168152602001610261565b61035361038936600461340e565b6107df565b610353610818565b6103536103a436600461343e565b610837565b6103bc6103b73660046131bd565b610842565b6040519015158152602001610261565b6102546103da36600461312c565b610862565b61027d6103ed366004613479565b610870565b6102546108be565b6104026108f3565b60405161026191906134c3565b61027d61041d366004613564565b5050565b61035361042f3660046131bd565b610c02565b610353610c2e565b6102aa610c48565b61027d610452366004613592565b610c88565b61027d610465366004613564565b610c99565b61027d6104783660046131bd565b50565b610483610d05565b60405161026191906135ca565b61035361049e36600461312c565b6111cd565b6103536104b136600461312c565b6111db565b6104c96104c43660046136f0565b6111fd565b6040516102619190613732565b6102aa6112b8565b6103536104ec36600461312c565b6112f8565b6103536104ff36600461312c565b611306565b61050c61133d565b6040516102619190613776565b61027d610527366004613887565b611449565b6103bc61053a3660046138e6565b611491565b6105476114d5565b6040805182516001600160801b039081168252602093840151169281019290925201610261565b60606105a061057c83611534565b60405160200161058c9190613195565b60405160208183030381529060405261165c565b919050565b61047881611680565b610478816118eb565b60606105f36040518060400160405280600e81526020016d4d6f636b4879706572647269766560901b81525060405160200161058c9190613195565b90565b60606105f3600160405160200161058c9190613914565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b61065e898989898989898989611a05565b505050505050505050565b610677868686868686611bfc565b505050505050565b61068c8484848433611cb0565b50505050565b60408051606081018252600080825260208201819052918101919091526105a06008600084815260200190815260200160002060405160200161058c919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b038681168552908352818420908516845282528083205481519283015261073d910161058c565b9392505050565b60006105f37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb91906139c5565b6040805160ff90921660208301520161058c565b6000828152600a602090815260408083206001600160a01b0385168452825280832054815192830152610812910161058c565b92915050565b60006105f3610825611e71565b60405160200161058c91815260200190565b600061081282611f0a565b60006105a061085083612149565b6040805191151560208301520161058c565b60606105a061057c8361222e565b8361087a8161232c565b6001600160a01b0316336001600160a01b0316146108ab57604051632aab8bd360e01b815260040160405180910390fd5b6108b7858585856123e9565b5050505050565b60606105f360405180604001604052806007815260200166076312e302e32360cc1b81525060405160200161058c9190613195565b61096c604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000610976612456565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109e19190613a0e565b6109eb9190613a21565b905060008215610afd5773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a1885612469565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190613a34565b509050610afa81846125ff565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bce57610bc98486612614565b610bd1565b60005b81526003546001600160801b0316602091820152604051919250610bfb9161058c918491016134c3565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105a0910161058c565b60006105f360095460405160200161058c91815260200190565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b610c94838383336123e9565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d0d613045565b6105f36040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107b9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190613a64565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161058c91906135ca565b60006105a061082583612629565b6000818152600b60209081526040808320548151928301526105a0910161058c565b606060008267ffffffffffffffff81111561121a5761121a613a81565b604051908082528060200260200182016040528015611243578160200160208202803683370190505b50905060005b8381101561129c57600085858381811061126557611265613a97565b9050602002013590506000815490508084848151811061128757611287613a97565b60209081029190910101525050600101611249565b506112b18160405160200161058c9190613732565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b60006105a061082583612724565b60006105a06108256113387f000000000000000000000000000000000000000000000000000000000000000085613a0e565b61280d565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105f3600260405160200161058c919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b846114538161232c565b6001600160a01b0316336001600160a01b03161461148457604051632aab8bd360e01b815260040160405180910390fd5b6106778686868686611cb0565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff9091161515918101919091529091610812910161058c565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105f39060600161058c565b606060f882901c6001600160f81b038316600061155082612851565b90506000836003811115611566576115666139e2565b03611598576040518060400160405280600d81526020016c048797065726472697665204c5609c1b8152509350611654565b60018360038111156115ac576115ac6139e2565b036115d857806040516020016115c29190613aad565b6040516020818303038152906040529350611654565b60028360038111156115ec576115ec6139e2565b0361160257806040516020016115c29190613ae6565b6003836003811115611616576116166139e2565b03611654576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b81526004016116779190613195565b60405180910390fd5b611688612906565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190613a64565b9050336001600160a01b038216148015906117ba57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190613a64565b6001600160a01b0316336001600160a01b031614155b80156117cc57506117ca33612149565b155b156117e9576040516282b42960e81b815260040160405180910390fd5b60006117f3611e71565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561183d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118619190613b20565b90506118776001600160a01b0385168483612930565b81611880611e71565b1461189e576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104786001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190613a64565b6001600160a01b0316336001600160a01b031614158015611994575061199233612149565b155b156119b1576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119fa90831515815260200190565b60405180910390a150565b83421115611a265760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a4d5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b3b573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b7957604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c1957506001600160a01b038516155b15611c375760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c575760405163174861a760e31b815260040160405180910390fd5b60005b83811015611ca757611c9f858583818110611c7757611c77613a97565b905060200201358888868686818110611c9257611c92613a97565b9050602002013533611cb0565b600101611c5a565b50505050505050565b6001600160a01b0384161580611ccd57506001600160a01b038316155b15611ceb5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611daf576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611daf576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611dad576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611da7908490613a21565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611de1908490613a21565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e18908490613a0e565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b8152306004820152600090611f05906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f009190613b20565b612724565b905090565b6000611f14612906565b611f1d82612982565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa19190613a64565b90506001600160a01b038116611fba60208501856131bd565b6001600160a01b031614611fe157604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061208d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120779190613a64565b6001600160a01b0316336001600160a01b031614155b801561209f575061209d33612149565b155b156120bc576040516282b42960e81b815260040160405180910390fd5b60006120c6612456565b6009805460009091559091506120dd8183876129b8565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461211c60408a0160208b016131e8565b60408051938452602084019290925215159082015260600160405180910390a25050506105a06001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121d29190810190613b39565b905060005b815181101561222457836001600160a01b03168282815181106121fc576121fc613a97565b60200260200101516001600160a01b03160361221c575060019392505050565b6001016121d7565b5060009392505050565b606060f882901c6001600160f81b038316600061224a82612851565b90506000836003811115612260576122606139e2565b03612292576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b8152509350611654565b60018360038111156122a6576122a66139e2565b036122bc57806040516020016115c29190613bfe565b60028360038111156122d0576122d06139e2565b036122e657806040516020016115c29190613c36565b60038360038111156122fa576122fa6139e2565b0361165457505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611f05670de0b6b3a7640000612629565b6124cd6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125c59116612a51565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125f792900416612a51565b905292915050565b600061073d8383670de0b6b3a7640000612ac7565b600061073d83670de0b6b3a764000084612ac7565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612678575047612703565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190613b20565b90505b600f5460000361271457600061073d565b600f5461073d9084908390612ac7565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016127735750476127fe565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fb9190613b20565b90505b600f5461073d90849083612ac7565b6000612835600b6000612821600286612ae5565b815260200190815260200160002054612b1a565b612847600b6000612821600187612ae5565b6108129190613c62565b60408051604e80825260808201909252606091906000908260208201818036833701905050905060005b84156128f85761288c600a86613c98565b612897906030613a0e565b60f81b8260016128a78487613a21565b6128b19190613a21565b815181106128c1576128c1613a97565b60200101906001600160f81b031916908160001a905350806128e281613cac565b91506128f19050600a86613cc5565b945061287b565b918290030190815292915050565b60026000540361292957604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c94908490612b48565b600061299160208301836131bd565b6001600160a01b0316036104785760405163f0dd15fd60e01b815260040160405180910390fd5b6000806129c585856125ff565b90506129d081612724565b9450846000036129e457600091505061073d565b8491506129f760408401602085016131e8565b15612a2657612a1f85612a0d60208601866131bd565b612a1a6040870187613cd9565b612bab565b9150612a49565b612a4985612a3760208601866131bd565b612a446040870187613cd9565b612d45565b509392505050565b600080670de0b6b3a7640000612a65612ed3565b612a6f9190613d20565b9050808311612a7f576000612a89565b612a898184613a21565b915061073d612ac0670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613d20565b8390612614565b6000826000190484118302158202612ade57600080fd5b5091020490565b60006001600160f81b03821115612b0f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60006001600160ff1b03821115612b445760405163396ea70160e11b815260040160405180910390fd5b5090565b6000612b5d6001600160a01b03841683612eff565b90508051600014158015612b82575080806020019051810190612b809190613d37565b155b15610c9457604051635274afe760e01b81526001600160a01b0384166004820152602401611677565b6000600f548511612bbc5784612bc0565b600f545b94506000612bcd86612629565b905085600f6000828254612be19190613a21565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612c87576040516001600160a01b038716908390600081818185875af1925050503d8060008114612c77576040519150601f19603f3d011682016040523d82523d6000602084013e612c7c565b606091505b505080915050612d1d565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a9190613d37565b90505b80612d3b576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f548411612d545783612d58565b600f545b93506000612d6585612629565b905084600f6000828254612d799190613a21565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612e1f576040516001600160a01b038616908390600081818185875af1925050503d8060008114612e0f576040519150601f19603f3d011682016040523d82523d6000602084013e612e14565b606091505b505080915050612eb5565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb29190613d37565b90505b80610677576040516312171d8360e31b815260040160405180910390fd5b6000611f05427f0000000000000000000000000000000000000000000000000000000000000000612f0d565b606061073d83836000612f23565b6000612f198284613c98565b61073d9084613a21565b606081471015612f485760405163cd78605960e01b8152306004820152602401611677565b600080856001600160a01b03168486604051612f649190613d54565b60006040518083038185875af1925050503d8060008114612fa1576040519150601f19603f3d011682016040523d82523d6000602084013e612fa6565b606091505b5091509150612fb6868383612fc0565b9695505050505050565b606082612fd557612fd08261301c565b61073d565b8151158015612fec57506001600160a01b0384163b155b1561301557604051639996b31560e01b81526001600160a01b0385166004820152602401611677565b508061073d565b80511561302c5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016131276040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b60006020828403121561313e57600080fd5b5035919050565b60005b83811015613160578181015183820152602001613148565b50506000910152565b60008151808452613181816020860160208601613145565b601f01601f19169290920160200192915050565b60208152600061073d6020830184613169565b6001600160a01b038116811461047857600080fd5b6000602082840312156131cf57600080fd5b813561073d816131a8565b801515811461047857600080fd5b6000602082840312156131fa57600080fd5b813561073d816131da565b60ff8116811461047857600080fd5b60008060008060008060008060006101208a8c03121561323357600080fd5b8935985060208a0135975060408a013561324c816131a8565b965060608a013561325c816131a8565b955060808a013561326c816131da565b945060a08a0135935060c08a013561328381613205565b8093505060e08a013591506101008a013590509295985092959850929598565b60008083601f8401126132b557600080fd5b50813567ffffffffffffffff8111156132cd57600080fd5b6020830191508360208260051b85010111156132e857600080fd5b9250929050565b6000806000806000806080878903121561330857600080fd5b8635613313816131a8565b95506020870135613323816131a8565b9450604087013567ffffffffffffffff8082111561334057600080fd5b61334c8a838b016132a3565b9096509450606089013591508082111561336557600080fd5b5061337289828a016132a3565b979a9699509497509295939492505050565b6000806000806080858703121561339a57600080fd5b8435935060208501356133ac816131a8565b925060408501356133bc816131a8565b9396929550929360600135925050565b6000806000606084860312156133e157600080fd5b8335925060208401356133f3816131a8565b91506040840135613403816131a8565b809150509250925092565b6000806040838503121561342157600080fd5b823591506020830135613433816131a8565b809150509250929050565b60006020828403121561345057600080fd5b813567ffffffffffffffff81111561346757600080fd5b82016060818503121561073d57600080fd5b6000806000806080858703121561348f57600080fd5b8435935060208501356134a1816131a8565b92506040850135915060608501356134b8816131a8565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b6000806040838503121561357757600080fd5b8235613582816131a8565b91506020830135613433816131da565b6000806000606084860312156135a757600080fd5b8335925060208401356135b9816131a8565b929592945050506040919091013590565b81516001600160a01b03168152610260810160208301516135f660208401826001600160a01b03169052565b50604083015161361160408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151613683828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b6000806020838503121561370357600080fd5b823567ffffffffffffffff81111561371a57600080fd5b613726858286016132a3565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561376a5783518352928401929184019160010161374e565b50909695505050505050565b81516001600160801b03168152610180810160208301516137a260208401826001600160801b03169052565b5060408301516137bd60408401826001600160801b03169052565b5060608301516137d860608401826001600160801b03169052565b5060808301516137ed6080840182600f0b9052565b5060a083015161380860a08401826001600160801b03169052565b5060c083015161382360c08401826001600160801b03169052565b5060e083015161383e60e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b038116828501526136e8565b600080600080600060a0868803121561389f57600080fd5b8535945060208601356138b1816131a8565b935060408601356138c1816131a8565b92506060860135915060808601356138d8816131a8565b809150509295509295909350565b600080604083850312156138f957600080fd5b8235613904816131a8565b91506020830135613433816131a8565b60006020808352600084548160018260011c9150600183168061393857607f831692505b60208310810361395657634e487b7160e01b85526022600452602485fd5b6020880183905260408801818015613975576001811461398b576139b6565b60ff198616825284151560051b820196506139b6565b60008b81526020902060005b868110156139b057815484820152908501908901613997565b83019750505b50949998505050505050505050565b6000602082840312156139d757600080fd5b815161073d81613205565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610812576108126139f8565b81810381811115610812576108126139f8565b60008060408385031215613a4757600080fd5b825191506020830151613433816131da565b80516105a0816131a8565b600060208284031215613a7657600080fd5b815161073d816131a8565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b700243cb832b9323934bb32902637b7339d1607d1b815260008251613ad9816011850160208701613145565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b815260008251613b13816012850160208701613145565b9190910160120192915050565b600060208284031215613b3257600080fd5b5051919050565b60006020808385031215613b4c57600080fd5b825167ffffffffffffffff80821115613b6457600080fd5b818501915085601f830112613b7857600080fd5b815181811115613b8a57613b8a613a81565b8060051b604051601f19603f83011681018181108582111715613baf57613baf613a81565b604052918252848201925083810185019188831115613bcd57600080fd5b938501935b82851015613bf257613be385613a59565b84529385019392850192613bd2565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b815260008251613c29816010850160208701613145565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b815260008251613ad9816011850160208701613145565b81810360008312801583831316838312821617156112b1576112b16139f8565b634e487b7160e01b600052601260045260246000fd5b600082613ca757613ca7613c82565b500690565b600060018201613cbe57613cbe6139f8565b5060010190565b600082613cd457613cd4613c82565b500490565b6000808335601e19843603018112613cf057600080fd5b83018035915067ffffffffffffffff821115613d0b57600080fd5b6020019150368190038213156132e857600080fd5b8082028115828204841417610812576108126139f8565b600060208284031215613d4957600080fd5b815161073d816131da565b60008251613d66818460208701613145565b919091019291505056fea2646970667358221220fc48960ebfc2d4107101b2838d672c46d78b8028720f78fd5c6c25fae03caf1064736f6c634300081600336102806040523480156200001257600080fd5b506040516200425c3803806200425c8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613da1620004bb60003960005050600050506000610b650152600050506000818160af01528181610325015261301c0152600081816113eb015281816117fc0152818161185f01528181612bfa01528181612c3601528181612e350152612ff601526000818161071301528181610de801528181610e2f01528181610ff401528181611661015281816116af0152612fd001526000611c1f015260008181611d45015281816123a801526124210152600081816108d701528181610f8c01528181611d1901526123f5015260008181610e81015261236e01526000818161073401528181610dc601528181610e50015281816110150152818161163f015281816116d0015261304201526000818161080f01528181610f0b015281816117580152818161224301526135760152600081816105d20152818161064d015281816106c30152818161078f01526107c7015260005050600081816119f101528181611a3a01528181612697015281816126e0015281816127bb015281816128670152818161295301526129ff0152613da16000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806329b23fc11461003b578063ded0623114610060575b600080fd5b61004e610049366004613824565b610073565b60405190815260200160405180910390f35b61004e61006e366004613824565b61008c565b60006100818585858561009a565b90505b949350505050565b600061008185858585610310565b60006100a461054f565b6100ad82610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156100ee5760405163211ddda360e11b815260040160405180910390fd5b60006100f86105b2565b90508542101561011d5761011761010d6105ca565b82600460016105f6565b5061012d565b61012b8682600460016105f6565b505b61014261013b600288610c73565b3387610ca8565b6000806000806000806101568b888e610d81565b95509550955095509550955060008c90508c4210156102165782600960008282546101819190613899565b9091555061019990506101926105ca565b4284611075565b6101a68c888787856111b3565b60006101b18e61132d565b90506101cf6101bf8e611377565b6101c990836138ac565b826113a5565b6101d8896113e4565b6101e4576101e4611444565b60006101ef8a61145d565b90508061020f57604051638bdf918d60e01b815260040160405180910390fd5b505061022d565b610220868961146a565b955061022b8861145d565b505b600061023a878a8d61154b565b90508b81101561025d5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61026d600288610c73565b61027a60208301836138e1565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102b86040890160208a0161390c565b6102cc8a6102c68d8f613899565b906115e5565b8d6102da60408c018c613929565b6040516102ee989796959493929190613999565b60405180910390a450939c505050505050505050505050506100846001600055565b600061031a61054f565b61032382610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156103645760405163211ddda360e11b815260040160405180910390fd5b600061036e6105b2565b9050854210156103895761038361010d6105ca565b50610399565b6103978682600460016105f6565b505b6103a761013b600188610c73565b6000806000806000806103bb8b888e6115fa565b95509550955095509550955060008c90508c42101561046e5782600960008282546103e69190613899565b909155506103f790506101926105ca565b6104048c888787856117e5565b600061040f8261132d565b905061042761041d8e611377565b6101c990836139e1565b610430896113e4565b61043c5761043c611444565b60006104478a61145d565b90508061046757604051638bdf918d60e01b815260040160405180910390fd5b5050610485565b610478868961146a565b95506104838861145d565b505b6000610492878a8d61154b565b90508b8110156104b55760405163c972651760e01b815260040160405180910390fd5b8c898c6104c3600186610c73565b6104d060208301836138e1565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee526788888761050e6040890160208a0161390c565b8a61051c60408b018b613929565b60405161052f9796959493929190613a09565b60405180910390a450919a50505050505050505050506100846001600055565b60026000540361057257604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600061058860208301836138e1565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b60006105c5670de0b6b3a76400006119d6565b905090565b60006105c5427f0000000000000000000000000000000000000000000000000000000000000000611ad1565b600084815260086020526040812060018101546001600160801b031615158061061e57504286115b1561063757600101546001600160801b03169050610084565b60008060006106446105ca565b905060006106727f00000000000000000000000000000000000000000000000000000000000000008b613899565b90505b818110156106e8576000818152600860205260409020600101546001600160801b031680156106c0576000828152600860205260409020549094506001600160801b031692506106e8565b507f000000000000000000000000000000000000000000000000000000000000000001610675565b8360000361075b578893506107586106fe611ae7565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b92505b5061076583611b1f565b6001850180546001600160801b0319166001600160801b03929092169190911790556107bb6107b47f00000000000000000000000000000000000000000000000000000000000000008b613a4a565b8a84611075565b6107f9896107f36107ec7f000000000000000000000000000000000000000000000000000000000000000083613899565b4290611b49565b84611075565b61080288611b5e565b50600090506008816108347f00000000000000000000000000000000000000000000000000000000000000008d613a4a565b815260208101919091526040016000908120600101546001600160801b0316915061086060028c610c73565b6000818152600b60205260408120549192508c8c83156109a6576001925060008061088f86898d866000611d02565b9150915080600960008282546108a59190613899565b909155506108c19050866000846108bb81611377565b886111b3565b6108cb8183613899565b91506108fb86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611dd1565b915061090f61090a83856115e5565b611e1b565b600680546002906109309084906201000090046001600160701b0316613a5d565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061095d82611b1f565b6006805460109061097f908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b60006109b3600184610c73565b6000818152600b60205260409020549091508015610ac257600194506000806109e0838b8f886001611d02565b9150915080600960008282546109f69190613899565b90915550610a12905083600084610a0c81611377565b8a6117e5565b610a1c8183613a4a565b9150610a2b61090a83876115e5565b60068054600290610a4c9084906201000090046001600160701b0316613a5d565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7982611b1f565b60068054601090610a9b908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610afc57610aee610ad487611377565b610add83611377565b610ae791906138ac565b60006113a5565b8e610af98482611e45565b50505b6000610b078461203f565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190613a9d565b90506001600160a01b03811615610c5a57610c575a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061218b565b50505b509b9d5050505050505050505050505050949350505050565b60006001600160f81b03821115610c9d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610ceb57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610d2e908490613a4a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600080600080600080600080610d95611ae7565b90506000610da28a612216565b6002549091508c908c90610e0c908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f0000000000000000000000000000000000000000000000000000000000000000612267565b600254919d509a50909550610e74908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b9550610eaa858c610ea5897f00000000000000000000000000000000000000000000000000000000000000006122d7565b612307565b15610eb757610eb7611444565b6000806000610ec885878b87612349565b9c5091945092509050610edb8184613a4a565b610ee59089613899565b9750610ef18284613899565b610efb908d613899565b9b505050505050506000600860007f00000000000000000000000000000000000000000000000000000000000000008c610f359190613a4a565b815260208101919091526040016000908120600101546001600160801b03169150428b11610f7d5760008b8152600860205260409020600101546001600160801b0316610f7f565b8b5b90508b610fb08e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611dd1565b9950610fbc878a613a4a565b9850670de0b6b3a7640000611039610fd48787613899565b600254610ff2908f90600160801b90046001600160801b0316613a4a565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b111561104757611047611444565b6110578a8a878a8787600061245d565b939d50919b5090995090975050505050505093975093979195509350565b600083815260086020526040902054600160801b90046001600160801b03168083036110a15750505050565b6000848152600860205260408120546001600160801b0316908190036110fb576110ca83611b1f565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611179565b61114c611147670de0b6b3a76400006111148886613a4a565b61111e9190613aba565b85670de0b6b3a7640000611132878a613a4a565b61113c9190613aba565b8592919060016124fc565b611b1f565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61118284611b1f565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111fc611147826111df670de0b6b3a764000086613aba565b600554600160801b90046001600160801b031691908a60006124fc565b600580546001600160801b03928316600160801b02921691909117905561122286611b1f565b61122c9082613ad1565b600480546001600160801b03928316600160801b02921691909117905561125284611b1f565b6002805460009061126d9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061129a836125a6565b600480546000906112af908490600f0b613af1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506112df85611b1f565b60028054601090611301908490600160801b90046001600160801b0316613ad1565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000611355600b6000611341600286610c73565b815260200190815260200160002054611377565b611367600b6000611341600187610c73565b61137191906138ac565b92915050565b60006001600160ff1b038211156113a15760405163396ea70160e11b815260040160405180910390fd5b5090565b6003546113c090611147906001600160801b031684846125e2565b600380546001600160801b0319166001600160801b03929092169190911790555050565b60006114107f000000000000000000000000000000000000000000000000000000000000000083612649565b60035461142691906001600160801b0316613899565b60025461143c906001600160801b0316846115e5565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000611371826004611e45565b600080600061147884611b5e565b9092509050600061148986866115e5565b9050818311156114a15761149e86838561265e565b95505b828110156114b35780830392506114b8565b600092505b6114c183611e1b565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b909104168087101561151457869003611518565b5060005b61152181611b1f565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b60008061155885856115e5565b90506115638161267c565b9450846000036115775760009150506115de565b84915061158a604084016020850161390c565b156115b9576115b2856115a060208601866138e1565b6115ad6040870187613929565b612765565b91506115dc565b6115dc856115ca60208601866138e1565b6115d76040870187613929565b6128ff565b505b9392505050565b60006115de8383670de0b6b3a764000061265e565b60008060008060008060008061160e611ae7565b9050600061161b8a612216565b6002549091508b908d90611685908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f0000000000000000000000000000000000000000000000000000000000000000612a95565b600254919d509b50909550600090819081906116f4908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b985061170284878b88612349565b9c5091945090925090506117168284613a4a565b6117209089613a4a565b975061172c8184613899565b611736908e613a4a565b9c506117428a8e613899565b9b50505050505050506117cf86868386600860007f00000000000000000000000000000000000000000000000000000000000000008f6117829190613a4a565b81526020810191909152604001600020600101546001600160801b0316428e116117c65760008e8152600860205260409020600101546001600160801b03166117c8565b8e5b600161245d565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b03168381108061182757507f00000000000000000000000000000000000000000000000000000000000000006118258583613a4a565b105b1561183457611834611444565b6004549084900390600f0b61184984826138ac565b90508361185586611377565b13801561188a57507f00000000000000000000000000000000000000000000000000000000000000006118888383612ae9565b105b1561189757611897611444565b600354600160801b90046001600160801b03166118d9611147826118c3670de0b6b3a764000088613aba565b6005546001600160801b031691908c60006124fc565b600580546001600160801b0319166001600160801b03929092169190911790556119038882613a4a565b905061190e81611b1f565b600380546001600160801b03928316600160801b02921691909117905561193483611b1f565b600280546001600160801b0319166001600160801b039290921691909117905561195d826125a6565b600480546001600160801b0319166001600160801b039290921691909117905561198687611b1f565b600280546010906119a8908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a25575047611ab0565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad9190613b1e565b90505b600f54600003611ac15760006115de565b600f546115de908490839061265e565b6000611add8284613b4d565b6115de9084613a4a565b6002546004546000916105c5916001600160801b0390911690600f0b612ae9565b600061008182611b1985888861265e565b90612b0f565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611b5857826115de565b50919050565b6006546000908190611b81908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611cfd576000611bab8383613a4a565b9050611bba6111478286612b84565b60068054601090611bdc908490600160801b90046001600160801b0316613ad1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611c158583612b9990919063ffffffff16565b90506000611c43827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611c579190613899565b90915550611c6790508183613a4a565b9150611c7282611b1f565b60028054600090611c8d9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611cba82612bae565b60048054600090611ccf908490600f0b613af1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611d0f8785612b99565b91506000611d3d837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611d69817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611d8c57611d7b8282613a4a565b611d859084613a4a565b9250611da3565b611d968282613a4a565b611da09084613899565b92505b86861015611dc657611db683878961265e565b9250611dc382878961265e565b91505b509550959350505050565b600080611de984611de38a888a61265e565b90612b99565b9050611df688848661265e565b611e009082613899565b905086811115611e105786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611e90916001600160801b031690613a4a565b905080600003611ea4576001915050611371565b6000611eaf85612bd8565b905080600003611ec457600192505050611371565b600080611ed2838589612c74565b9150915080611ee8576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611f24929190613bdf565b6040805180830381865af4158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190613c55565b91509150611f82611f7482611377565b611f7d90613c79565b612def565b925082611f985760009650505050505050611371565b611fa182611b1f565b60078054600090611fbc9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611fe981611b1f565b6007805460109061200b908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61206887612f87565b6040518263ffffffff1660e01b81526004016120849190613c95565b6040805180830381865af41580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190613ca4565b91509150806120da575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161214091613899565b61214a9190613a4a565b90508060000361216257506000958695509350505050565b600080871161217257600061217d565b61217d84888461265e565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156121b1576121b1613cd4565b6040519080825280601f01601f1916602001820160405280156121db576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156121fc578692505b828152826000602083013e90999098509650505050505050565b6000806122216105ca565b905080831161223157600061223b565b61223b8184613a4a565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612b99565b6000808061228861228088670de0b6b3a7640000613a4a565b8990876130c1565b905086156122ca5761229a8888612649565b91506122bb8a8a846122b48a670de0b6b3a7640000613a4a565b89896130e7565b92506122c78382613899565b90505b9750975097945050505050565b60006122f56122ee84670de0b6b3a7640000613a4a565b8390612649565b6115de90670de0b6b3a7640000613a4a565b60008061233e85612316611ae7565b6123209190613899565b600254610ff2908790600160801b90046001600160801b0316613a4a565b909210949350505050565b60008080806123a087866123998b61239361236c8c670de0b6b3a7640000613a4a565b7f000000000000000000000000000000000000000000000000000000000000000090612649565b90612649565b91906130c1565b93506123cc847f00000000000000000000000000000000000000000000000000000000000000006115e5565b915060006123ed6123e589670de0b6b3a7640000613a4a565b8a90886130c1565b9050612419817f0000000000000000000000000000000000000000000000000000000000000000612649565b9350612445847f00000000000000000000000000000000000000000000000000000000000000006115e5565b61244f9084613899565b915050945094509450949050565b600080600080600080888810156124cc5786156124825761247f8d898b61265e565b9c505b61248d8c898b61265e565b9b506124988b611377565b6124a18d611377565b6124ab91906138ac565b90506124b88b898b61265e565b9a506124c58a898b61265e565b99506124eb565b6124d58b611377565b6124de8d611377565b6124e891906138ac565b90505b9b9c9a9b999a975050505050505050565b60008260000361250d57508461259d565b81156125605761253e6125208487613899565b61252a85876115e5565b612534888a6115e5565b611de39190613899565b9050600061254c8588611b49565b90508082101561255a578091505b5061259d565b82850361256f5750600061259d565b61259a61257c8487613a4a565b6125868587612649565b612590888a6115e5565b611de39190613a4a565b90505b95945050505050565b600060016001607f1b03198212806125c4575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b6000806125f084600061310a565b6125fb84600061310a565b61260591906138ac565b905060008113156126215761261a8186613899565b9450612640565b60008112156126405761263381613c79565b61263d9086613a4a565b94505b50929392505050565b60006115de8383670de0b6b3a76400006130c1565b600082600019048411830215820261267557600080fd5b5091020490565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016126cb575047612756565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561272f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127539190613b1e565b90505b600f546115de9084908361265e565b6000600f548511612776578461277a565b600f545b94506000612787866119d6565b905085600f600082825461279b9190613a4a565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612841576040516001600160a01b038716908390600081818185875af1925050503d8060008114612831576040519150601f19603f3d011682016040523d82523d6000602084013e612836565b606091505b5050809150506128d7565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190613cea565b90505b806128f5576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f54841161290e5783612912565b600f545b9350600061291f856119d6565b905084600f60008282546129339190613a4a565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016129d9576040516001600160a01b038616908390600081818185875af1925050503d80600081146129c9576040519150601f19603f3d011682016040523d82523d6000602084013e6129ce565b606091505b505080915050612a6f565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190613cea565b90505b80612a8d576040516312171d8360e31b815260040160405180910390fd5b505050505050565b60008080612ab6612aae88670de0b6b3a7640000613a4a565b89908761265e565b905086156122ca57612ac888886115e5565b91506122bb8a8a84612ae28a670de0b6b3a7640000613a4a565b8989613120565b600080612af68484613131565b909250905080612b0857612b08611444565b5092915050565b600081600003612b285750670de0b6b3a7640000611371565b82600003612b3857506000611371565b6000612b4383611377565b90506000612b58612b5386611377565b613170565b9050818102612b6f670de0b6b3a764000082613d07565b9050612b7a81613396565b9695505050505050565b60006115de83670de0b6b3a7640000846130c1565b60006115de83670de0b6b3a76400008461265e565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612bf3906001600160801b031684612b84565b9050612c1f7f000000000000000000000000000000000000000000000000000000000000000082613899565b6002546001600160801b03161115611b58576002547f000000000000000000000000000000000000000000000000000000000000000090612c6a9083906001600160801b0316613a4a565b6115de9190613a4a565b612c7c613771565b600080612c8884612f87565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612cc39190613c95565b6040805180830381865af4158015612cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d039190613ca4565b9350905082612d18575060009150612de79050565b6000612d3f612d3a8461016001518561014001516115e590919063ffffffff16565b611377565b612d5f612d3a85610120015186610100015161264990919063ffffffff16565b612d6991906138ac565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecc9190613d35565b935093509350935080612ee85750600098975050505050505050565b868414612f1957612ef884611b1f565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612f4a57612f29836125a6565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612f7857612f5a82611b1f565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612f8f6137c3565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191613087911661352b565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926130b99290041661352b565b905292915050565b60008260001904841183021582026130d857600080fd5b50910281810615159190040190565b6000806130f88888888888886135a1565b909250905080611e1057611e10611444565b600081831361311957816115de565b5090919050565b6000806130f8888888888888613682565b60008060008361314086611377565b61314a91906138ac565b90506000811215613162576000809250925050613169565b9150600190505b9250929050565b60008082136131925760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132159084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133b157506000919050565b680755bf798b4a1bf1e582126133da576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612b7a74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a764000061353f6105ca565b6135499190613aba565b9050808311613559576000613563565b6135638184613a4a565b91506115de61359a670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613aba565b8390612b99565b60008060006135b38989888888613742565b9050868810156135ca576000809250925050613677565b96869003966135d98887612b0f565b9750878110156135f0576000809250925050613677565b8781036135fe8186886130c1565b9050670de0b6b3a764000081106136325761362b613624670de0b6b3a764000089612b84565b8290612b0f565b905061364a565b613647613624670de0b6b3a764000089612b99565b90505b6136548186612b84565b90508981101561366c57600080935093505050613677565b899003925060019150505b965096945050505050565b60008060006136948989888888613742565b90506136a486611b19898b613899565b9750878110156136bb576000809250925050613677565b8781036136c98186886130c1565b9050670de0b6b3a764000081106136f6576136ef613624670de0b6b3a764000089612b84565b905061370e565b61370b613624670de0b6b3a764000089612b99565b90505b6137188186612b84565b9050808a101561373057600080935093505050613677565b90980398600198509650505050505050565b600061374e8585612b0f565b61376761375f86611b19868b612649565b8590856130c1565b61259a9190613899565b6040518061012001604052806137856137c3565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561383a57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561386657600080fd5b85016060818803121561387857600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561137157611371613883565b8181036000831280158383131683831282161715612b0857612b08613883565b6001600160a01b03811681146105af57600080fd5b6000602082840312156138f357600080fd5b81356115de816138cc565b80151581146105af57600080fd5b60006020828403121561391e57600080fd5b81356115de816138fe565b6000808335601e1984360301811261394057600080fd5b83018035915067ffffffffffffffff82111561395b57600080fd5b60200191503681900382131561316957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c082015260006139d360e083018486613970565b9a9950505050505050505050565b8082018281126000831280158216821582161715613a0157613a01613883565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613a3d60c083018486613970565b9998505050505050505050565b8181038181111561137157611371613883565b6001600160701b03818116838216019080821115612b0857612b08613883565b6001600160801b03818116838216019080821115612b0857612b08613883565b600060208284031215613aaf57600080fd5b81516115de816138cc565b808202811582820484141761137157611371613883565b6001600160801b03828116828216039080821115612b0857612b08613883565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561137157611371613883565b600060208284031215613b3057600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613b5c57613b5c613b37565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613bf3828551613b61565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613c6857600080fd5b505080516020909101519092909150565b6000600160ff1b8201613c8e57613c8e613883565b5060000390565b61018081016113718284613b61565b60008060408385031215613cb757600080fd5b825191506020830151613cc9816138fe565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613cfc57600080fd5b81516115de816138fe565b600082613d1657613d16613b37565b600160ff1b821460001984141615613d3057613d30613883565b500590565b60008060008060808587031215613d4b57600080fd5b8451935060208501519250604085015191506060850151613878816138fe56fea2646970667358221220f9ef548db7c21532cc739261166f101bdecf1359ce98920f224ede3dbee2f56464736f6c634300081600336102806040523480156200001257600080fd5b50604051620044da380380620044da8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613fe6620004f460003960005050600050506000610cab0152600050506000818161010001528181610310015261322a01526000818161164f01528181612175015281816121d80152818161298a01528181612e0f01528181612e4b01528181613043015261320401526000818161085901528181610e0b01528181610e4d01528181610f3f015281816113b501528181611414015281816119fb01528181611a8e01526131de01526000611d94015260008181611eba01528181612a7f01528181612af80152613344015260008181610a1d01528181610ec0015281816114af01528181611e8e0152612acc015260008181610e9f01528181612a4b015261330001526000818161087a01528181610de901528181610e6e01528181610f60015281816113930152818161143501526132500152600081816101de015281816103a80152818161095501526137d40152600081816107130152818161079301528181610809015281816108d5015261090d015260005050600081816105750152818161151a01528181611563015281816117f901528181611842015281816118d40152818161195501528181611afc01528181611b7d01528181612be70152612c300152613fe66000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c366004613a69565b61006d565b6040805192835260208301919091520160405180910390f35b610041610068366004613a69565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a4610549565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610573565b6100de836105df565b6000806100eb8886610618565b909250905060006100fc83836106ed565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a61070b565b905061017a81846004600161073c565b50600080600061018a8787610dba565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c89190613ade565b909155506101d99050844283610f9c565b6102037f000000000000000000000000000000000000000000000000000000000000000085613ade565b98506102118389888c6110da565b600061021e60018b611274565b90506102378161023160208e018e613b06565b8b6112a9565b8d8a8a898e8561024a6020830183613b06565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a8688866102876040880160208901613b31565b8961029560408a018a613b4e565b6040516102a89796959493929190613bbe565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d4610549565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610573565b61030e836105df565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b6000610359611351565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b600061038661070b565b9050600061039f61039561070b565b846004600161073c565b905060006103cd7f000000000000000000000000000000000000000000000000000000000000000084613ade565b90506000806000806103e08e8988611364565b60098054949850929650909450925083916000906103ff908490613ade565b909155506104109050874283610f9c565b61042261041d858a6114ea565b6114ff565b61042d906001613ade565b935050600061043d84898d611601565b9050808d10156104605760405163c972651760e01b815260040160405180910390fd5b61046a818c610618565b508e905061047a81858b89611629565b6000610487600288611274565b90508c6104a18261049b6020840184613b06565b856112a9565b858b86846104b26020860186613b06565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104ef60408b0160208c01613b31565b610503896104fd8a8d613bff565b906106ed565b8d61051160408e018e613b4e565b604051610525989796959493929190613c12565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361056c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015906105bf57503415155b156105dd57604051631574f9f360e01b815260040160405180910390fd5b565b60006105ee6020830183613b06565b6001600160a01b0316036106155760405163f0dd15fd60e01b815260040160405180910390fd5b50565b8160008061062c6040850160208601613b31565b1561065157610647856106426040870187613b4e565b6117dd565b9093509050610669565b5034610669856106646040870187613b4e565b611a71565b610671611351565b915080156106e457604051600090339083908381818185875af1925050503d80600081146106bb576040519150601f19603f3d011682016040523d82523d6000602084013e6106c0565b606091505b50509050806106e2576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006107028383670de0b6b3a7640000611c1b565b90505b92915050565b6000610737427f0000000000000000000000000000000000000000000000000000000000000000611c39565b905090565b600084815260086020526040812060018101546001600160801b031615158061076457504286115b1561077d57600101546001600160801b03169050610db2565b600080600061078a61070b565b905060006107b87f00000000000000000000000000000000000000000000000000000000000000008b613ade565b90505b8181101561082e576000818152600860205260409020600101546001600160801b03168015610806576000828152600860205260409020549094506001600160801b0316925061082e565b507f0000000000000000000000000000000000000000000000000000000000000000016107bb565b836000036108a15788935061089e610844611c4f565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b92505b506108ab83611c90565b6001850180546001600160801b0319166001600160801b03929092169190911790556109016108fa7f00000000000000000000000000000000000000000000000000000000000000008b613bff565b8a84610f9c565b61093f896109396109327f000000000000000000000000000000000000000000000000000000000000000083613ade565b4290611cbe565b84610f9c565b61094888611cd3565b506000905060088161097a7f00000000000000000000000000000000000000000000000000000000000000008d613bff565b815260208101919091526040016000908120600101546001600160801b031691506109a660028c611274565b6000818152600b60205260408120549192508c8c8315610aec57600192506000806109d586898d866000611e77565b9150915080600960008282546109eb9190613ade565b90915550610a07905086600084610a0181611f46565b88611f70565b610a118183613ade565b9150610a4186838a8e877f00000000000000000000000000000000000000000000000000000000000000006120ea565b9150610a55610a5083856106ed565b612134565b60068054600290610a769084906201000090046001600160701b0316613c5a565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610aa382611c90565b60068054601090610ac5908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610af9600184611274565b6000818152600b60205260409020549091508015610c085760019450600080610b26838b8f886001611e77565b915091508060096000828254610b3c9190613ade565b90915550610b58905083600084610b5281611f46565b8a61215e565b610b628183613bff565b9150610b71610a5083876106ed565b60068054600290610b929084906201000090046001600160701b0316613c5a565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610bbf82611c90565b60068054601090610be1908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610c4257610c34610c1a87611f46565b610c2383611f46565b610c2d9190613c9a565b600061234f565b8e610c3f848261238e565b50505b6000610c4d84612588565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190613cba565b90506001600160a01b03811615610da057610d9d5a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906126d4565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610dca611c4f565b600254909150610e2f908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f000000000000000000000000000000000000000000000000000000000000000061275f565b600254909450610e92908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b9150610ee98785610ee4857f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061278b565b6127f0565b15610ef657610ef6612832565b610f028785888561284b565b91965094509250670de0b6b3a7640000610f84610f1f8784613ade565b600254610f3d908890600160801b90046001600160801b0316613bff565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b1115610f9257610f92612832565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610fc85750505050565b6000848152600860205260408120546001600160801b03169081900361102257610ff183611c90565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790556110a0565b61107361106e670de0b6b3a764000061103b8886613bff565b6110459190613cd7565b85670de0b6b3a7640000611059878a613bff565b6110639190613cd7565b859291906001612897565b611c90565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6110a984611c90565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b031661111c61106e82611106670de0b6b3a764000086613cd7565b6005546001600160801b03169190886001612897565b600580546001600160801b0319166001600160801b039290921691909117905561114585611c90565b600280546000906111609084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061118d84611c90565b600280546010906111af908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506111dc84611c90565b6111e69082613c7a565b600380546001600160801b03808416600160801b0291161790559050600061120d8361293f565b905061122b8161121c87611f46565b6112269084613d0e565b61234f565b61123484612983565b61124057611240612832565b600061124b856129e3565b90508061126b57604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b0382111561129e5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906112db908490613ade565b90915550506000838152600b6020526040812080548392906112fe908490613ade565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b6000610737670de0b6b3a76400006114ff565b6000806000806000611374611c4f565b6002549091506113d9908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f00000000000000000000000000000000000000000000000000000000000000006129f0565b9350876113e68589612a11565b11156113f4576113f4612832565b6002546000908190611459908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c70565b935061146f8a670de0b6b3a7640000868c612a26565b5091935090915061148290508183613bff565b61148c9087613bff565b9550886114d9816114d38d6114a1868c613bff565b8d6114ac8782612b34565b877f0000000000000000000000000000000000000000000000000000000000000000612b4a565b90612a11565b975090945050505093509350935093565b600061070283670de0b6b3a764000084612b6b565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161154e5750476115d9565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156115b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d69190613d36565b90505b600f546000036115ea5760006115fa565b600f546115fa9084908390611c1b565b9392505050565b60006116136040830160208401613b31565b1561161f5750826115fa565b610db28484612b91565b6002546001600160801b03168381101561164557611645612832565b60045490849003907f00000000000000000000000000000000000000000000000000000000000000009061167d908390600f0b612ba6565b101561168b5761168b612832565b6004546116d59061106e90600160801b90046001600160801b03166116b8670de0b6b3a764000086613cd7565b600554600160801b90046001600160801b03169190896001612897565b600580546001600160801b03928316600160801b0292169190911790556116fb81611c90565b600280546001600160801b0319166001600160801b039290921691909117905561172485611c90565b60028054601090611746908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061177385611c90565b60048054601090611795908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006117c48361293f565b905061122b816117d388611f46565b6112269084613c9a565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161182d5750476118b8565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b59190613d36565b90505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016119335787341015611922576040516312171d8360e31b815260040160405180910390fd5b61192c8834613bff565b90506119cd565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190613d4f565b91505b816119eb576040516312171d8360e31b815260040160405180910390fd5b600f54600003611a3057611a1f887f0000000000000000000000000000000000000000000000000000000000000000612b91565b600f81905594509250611a69915050565b600f54600090611a42908a9086611c1b565b905080600f6000828254611a569190613ade565b90915550909550909350611a6992505050565b935093915050565b6000611a7c846114ff565b9050600f54600003611aba57611ab2817f0000000000000000000000000000000000000000000000000000000000000000612b91565b600f55611ae0565b6000611ac582612bcc565b905080600f6000828254611ad99190613ade565b9091555050505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611b5b5782341015611b4a576040516312171d8360e31b815260040160405180910390fd5b611b548334613bff565b9050611bf5565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf29190613d4f565b91505b81611c13576040516312171d8360e31b815260040160405180910390fd5b505050505050565b6000826000190484118302158202611c3257600080fd5b5091020490565b6000611c458284613d82565b6107029084613bff565b600254600454600091610737916001600160801b0390911690600f0b612ba6565b6000611c8782611c81858888611c1b565b90612cb5565b95945050505050565b60006001600160801b03821115611cba57604051630f0af95160e11b815260040160405180910390fd5b5090565b6000818311611ccd5782610702565b50919050565b6006546000908190611cf6908490600160801b90046001600160801b03166106ed565b6006546201000090046001600160701b03169250905081811115611e72576000611d208383613bff565b9050611d2f61106e82866114ea565b60068054601090611d51908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611d8a8583612b9190919063ffffffff16565b90506000611db8827f00000000000000000000000000000000000000000000000000000000000000006106ed565b90508060096000828254611dcc9190613ade565b90915550611ddc90508183613bff565b9150611de782611c90565b60028054600090611e029084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611e2f82612d20565b60048054600090611e44908490600f0b613d96565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611e848785612b91565b91506000611eb2837f00000000000000000000000000000000000000000000000000000000000000006106ed565b9050611ede817f00000000000000000000000000000000000000000000000000000000000000006106ed565b91508315611f0157611ef08282613bff565b611efa9084613bff565b9250611f18565b611f0b8282613bff565b611f159084613ade565b92505b86861015611f3b57611f2b838789611c1b565b9250611f38828789611c1b565b91505b509550959350505050565b60006001600160ff1b03821115611cba5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611fb961106e82611f9c670de0b6b3a764000086613cd7565b600554600160801b90046001600160801b031691908a6000612897565b600580546001600160801b03928316600160801b029216919091179055611fdf86611c90565b611fe99082613cee565b600480546001600160801b03928316600160801b02921691909117905561200f84611c90565b6002805460009061202a9084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061205783612d4a565b6004805460009061206c908490600f0b613d96565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061209c85611c90565b600280546010906120be908490600160801b90046001600160801b0316613cee565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080612102846120fc8a888a611c1b565b90612b91565b905061210f888486611c1b565b6121199082613ade565b9050868111156121295786810391505b509695505050505050565b60006001600160701b03821115611cba5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806121a057507f000000000000000000000000000000000000000000000000000000000000000061219e8583613bff565b105b156121ad576121ad612832565b6004549084900390600f0b6121c28482613c9a565b9050836121ce86611f46565b13801561220357507f00000000000000000000000000000000000000000000000000000000000000006122018383612ba6565b105b1561221057612210612832565b600354600160801b90046001600160801b031661225261106e8261223c670de0b6b3a764000088613cd7565b6005546001600160801b031691908c6000612897565b600580546001600160801b0319166001600160801b039290921691909117905561227c8882613bff565b905061228781611c90565b600380546001600160801b03928316600160801b0292169190911790556122ad83611c90565b600280546001600160801b0319166001600160801b03929092169190911790556122d682612d4a565b600480546001600160801b0319166001600160801b03929092169190911790556122ff87611c90565b60028054601090612321908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461236a9061106e906001600160801b03168484612d86565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e754354909182916123d9916001600160801b031690613bff565b9050806000036123ed576001915050610705565b60006123f885612ded565b90508060000361240d57600192505050610705565b60008061241b838589612e89565b9150915080612431576000945050505050610705565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161246d929190613e41565b6040805180830381865af4158015612489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ad9190613eb7565b915091506124cb6124bd82611f46565b6124c690613edb565b612ffd565b9250826124e15760009650505050505050610705565b6124ea82611c90565b600780546000906125059084906001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061253281611c90565b60078054601090612554908490600160801b90046001600160801b0316613c7a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125b187613195565b6040518263ffffffff1660e01b81526004016125cd9190613ef7565b6040805180830381865af41580156125e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260d9190613f06565b9150915080612623575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161268991613ade565b6126939190613bff565b9050806000036126ab57506000958695509350505050565b60008087116126bb5760006126c6565b6126c6848884611c1b565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126fa576126fa613f36565b6040519080825280601f01601f191660200182016040528015612724576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612745578692505b828152826000602083013e90999098509650505050505050565b600061278087878761277988670de0b6b3a7640000613bff565b87876132cf565b979650505050505050565b6000610db26127cc6127a584670de0b6b3a7640000613bff565b6114d3670de0b6b3a76400006127bb818a6114ea565b6127c59190613bff565b8790612a11565b6127de90670de0b6b3a7640000613ade565b6120fc84670de0b6b3a7640000613bff565b600080612827856127ff611c4f565b6128099190613ade565b600254610f3d908790600160801b90046001600160801b0316613bff565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061285e8987896132f2565b909250905061286d8289613bff565b9750600061287c82888a611c1b565b9050612888818b613bff565b9a989950979650505050505050565b6000826000036128a8575084611c87565b81156128fb576128d96128bb8487613ade565b6128c585876106ed565b6128cf888a6106ed565b6120fc9190613ade565b905060006128e78588611cbe565b9050808210156128f5578091505b50611c87565b82850361290a57506000611c87565b6129356129178487613bff565b6129218587612a11565b61292b888a6106ed565b6120fc9190613bff565b9695505050505050565b6000612967600b6000612953600286611274565b815260200190815260200160002054611f46565b612979600b6000612953600187611274565b6107059190613c9a565b60006129af7f000000000000000000000000000000000000000000000000000000000000000083612a11565b6003546129c591906001600160801b0316613ade565b6002546129db906001600160801b0316846106ed565b101592915050565b600061070582600461238e565b6000612780878787612a0a88670de0b6b3a7640000613bff565b8787613372565b60006107028383670de0b6b3a7640000612b6b565b6000808080612a778786612a708b6114d3612a498c670de0b6b3a7640000613bff565b7f000000000000000000000000000000000000000000000000000000000000000090612a11565b9190612b6b565b9350612aa3847f00000000000000000000000000000000000000000000000000000000000000006106ed565b91506000612ac4612abc89670de0b6b3a7640000613bff565b8a9088612b6b565b9050612af0817f0000000000000000000000000000000000000000000000000000000000000000612a11565b9350612b1c847f00000000000000000000000000000000000000000000000000000000000000006106ed565b612b269084613ade565b915050945094509450949050565b6000818311612b435781610702565b5090919050565b600080612b6284612b5c8a888a612b6b565b906114ea565b905061210f8884865b6000826000190484118302158202612b8257600080fd5b50910281810615159190040190565b600061070283670de0b6b3a764000084611c1b565b600080612bb38484613383565b909250905080612bc557612bc5612832565b5092915050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612c1b575047612ca6565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca39190613d36565b90505b600f546115fa90849083611c1b565b600081600003612cce5750670de0b6b3a7640000610705565b82600003612cde57506000610705565b6000612ce983611f46565b90506000612cfe612cf986611f46565b6133bf565b9050818102612d15670de0b6b3a764000082613f4c565b9050612935816135e5565b600060016001607f1b03821115611cba5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612d68575060016001607f1b0382135b15611cba5760405163a5353be560e01b815260040160405180910390fd5b600080612d9484600061377a565b612d9f84600061377a565b612da99190613c9a565b90506000811315612dc557612dbe8186613ade565b9450612de4565b6000811215612de457612dd781613edb565b612de19086613bff565b94505b50929392505050565b6003546000908190612e08906001600160801b0316846114ea565b9050612e347f000000000000000000000000000000000000000000000000000000000000000082613ade565b6002546001600160801b03161115611ccd576002547f000000000000000000000000000000000000000000000000000000000000000090612e7f9083906001600160801b0316613bff565b6115fa9190613bff565b612e916139b6565b600080612e9d84613195565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612ed89190613ef7565b6040805180830381865af4158015612ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f189190613f06565b9350905082612f2d575060009150611a699050565b6000612f54612f4f8461016001518561014001516106ed90919063ffffffff16565b611f46565b612f74612f4f856101200151866101000151612a1190919063ffffffff16565b612f7e9190613c9a565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af41580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190613f7a565b9350935093509350806130f65750600098975050505050505050565b8684146131275761310684611c90565b600280546001600160801b0319166001600160801b03929092169190911790555b8583146131585761313783612d4a565b600480546001600160801b0319166001600160801b03929092169190911790555b8482146131865761316882611c90565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b61319d613a08565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916132959116613789565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926132c792900416613789565b905292915050565b6000806132e08888888888886137ff565b90925090508061212957612129612832565b60008061333c856114d385817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613332818c6114ea565b6114d39190613bff565b9150613368827f00000000000000000000000000000000000000000000000000000000000000006106ed565b9050935093915050565b6000806132e08888888888886138c7565b60008060008361339286611f46565b61339c9190613c9a565b905060008112156133b45760008092509250506106e6565b946001945092505050565b60008082136133e15760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906134649084901c611f46565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361360057506000919050565b680755bf798b4a1bf1e58212613629576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061293574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611f46565b6000818313612b435781610702565b600080670de0b6b3a764000061379d61070b565b6137a79190613cd7565b90508083116137b75760006137c1565b6137c18184613bff565b91506115fa6137f8670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613cd7565b8390612b91565b60008060006138118989888888613987565b905061382b86611c816138248a8d613ade565b87906106ed565b9850613838858a86611c1b565b98508881101561384f5760008092509250506138bc565b888103670de0b6b3a764000081106138845761387d613876670de0b6b3a7640000896114ea565b8290612cb5565b905061389c565b613899613876670de0b6b3a764000089612b91565b90505b808910156138b2576000809350935050506138bc565b8803925060019150505b965096945050505050565b60008060006138d98989888888613987565b90506138e986611c81898b613ade565b9750878110156139005760008092509250506138bc565b87810361390e818688612b6b565b9050670de0b6b3a7640000811061393b57613934613876670de0b6b3a7640000896114ea565b9050613953565b613950613876670de0b6b3a764000089612b91565b90505b61395d81866114ea565b9050808a1015613975576000809350935050506138bc565b90980398600198509650505050505050565b60006139938585612cb5565b6139ac6139a486611c81868b612a11565b859085612b6b565b6129359190613ade565b6040518061012001604052806139ca613a08565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060008060808587031215613a7f57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613aab57600080fd5b850160608188031215613abd57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561070557610705613ac8565b6001600160a01b038116811461061557600080fd5b600060208284031215613b1857600080fd5b81356115fa81613af1565b801515811461061557600080fd5b600060208284031215613b4357600080fd5b81356115fa81613b23565b6000808335601e19843603018112613b6557600080fd5b83018035915067ffffffffffffffff821115613b8057600080fd5b6020019150368190038213156106e657600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613bf260c083018486613b95565b9998505050505050505050565b8181038181111561070557610705613ac8565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613c4c60e083018486613b95565b9a9950505050505050505050565b6001600160701b03818116838216019080821115612bc557612bc5613ac8565b6001600160801b03818116838216019080821115612bc557612bc5613ac8565b8181036000831280158383131683831282161715612bc557612bc5613ac8565b600060208284031215613ccc57600080fd5b81516115fa81613af1565b808202811582820484141761070557610705613ac8565b6001600160801b03828116828216039080821115612bc557612bc5613ac8565b8082018281126000831280158216821582161715613d2e57613d2e613ac8565b505092915050565b600060208284031215613d4857600080fd5b5051919050565b600060208284031215613d6157600080fd5b81516115fa81613b23565b634e487b7160e01b600052601260045260246000fd5b600082613d9157613d91613d6c565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561070557610705613ac8565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613e55828551613dc3565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613eca57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ef057613ef0613ac8565b5060000390565b61018081016107058284613dc3565b60008060408385031215613f1957600080fd5b825191506020830151613f2b81613b23565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613f5b57613f5b613d6c565b600160ff1b821460001984141615613f7557613f75613ac8565b500590565b60008060008060808587031215613f9057600080fd5b8451935060208501519250604085015191506060850151613abd81613b2356fea2646970667358221220fb7a66d46205e232b0da254da366eea72f07f76b944c3a356b67d4d40b49401f64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004483380380620044838339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613f7f620005046000396000505060005050600061134401526000818161030301528181610332015261035f01526000818160de015281816105a9015261176b01526000818161085601528181610941015281816109d401528181610add0152818161163c0152818161174501528181612474015281816124d701528181612db60152818161327901526132b501526000818161013f015281816108c601528181610ef20152818161150001528181611564015281816115ab0152818161171f01528181611c220152611cb5015260006120790152600081816121d4015261350e0152600081816110b601526121a8015260006134c40152600081816101810152818161091901528181610f13015281816114d001528181611534015281816115cc015261179101526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fee0152612d4c01526000818161029701528181610db101528181610e2c01528181610ea201528181610f6e0152610fa601526000505060008181610be501528181611a2001528181611a6901528181611afb01528181611b7c01528181611d2301528181611da401528181612fb101528181612ffa015281816130ac01526130f50152613f7f6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c3660046139d2565b610066565b60405190815260200160405180910390f35b610041610061366004613a36565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c4f565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c88565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610cae565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610cd4565b9150915060006101ed610da9565b90506101fd818360046001610dd5565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b613a9c565b611453565b61149d565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f000000000000000000000000000000000000000000000000000000000000000089613aaf565b81526020810191909152604001600020546001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006116aa565b90506103287f000000000000000000000000000000000000000000000000000000000000000082613a9c565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f000000000000000000000000000000000000000000000000000000000000000082613aaf565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b0390911690613aaf565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c908390613a9c565b9050600080600061043c8a6116d6565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa15690610476908490600401613b40565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190613b4f565b91506104ca6104c58c611810565b61183e565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b91859101613b40565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190613b4f565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613aaf565b9190611864565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611882565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613b7d565b8e611897565b61063a8961193f565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d9190613a9c565b9b5090508a158061073757506107348c600061194c565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611864565b610770565b60005b905061077f6020850185613b7d565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613ba8565b866107ca60408c018c613bc5565b6040516107dd9796959493929190613c0c565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c4f565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610cd4565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613c60565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063b29e1d1e9060c401606060405180830381865af41580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190613c77565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006109fd8484611961565b1015610a1c5760405163216f4ab160e21b815260040160405180910390fd5b600080610a2e8585858960008061149d565b91509150801580610a3f5750600082125b15610a5d57604051630552b01360e31b815260040160405180910390fd5b610a6685611987565b600280546001600160801b0319166001600160801b0392909216919091179055610a8f846119b1565b600480546001600160801b0319166001600160801b0392909216919091179055610ab883611987565b600280546001600160801b03928316600160801b029216919091179055610b016000807f0000000000000000000000000000000000000000000000000000000000000000611897565b610b196000610b1360208c018c613b7d565b8a611897565b610b2e610b24610da9565b8760046001610dd5565b508a8a8a610b3f6020820182613b7d565b6001600160a01b03167f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af38c858c610b7c6040870160208801613ba8565b87610b8a6040890189613bc5565b604051610b9d9796959493929190613c0c565b60405180910390a2505050505050505050506100916001600055565b600260005403610bdc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14801590610c2f57503415155b15610c4d57604051631574f9f360e01b815260040160405180910390fd5b565b6000610c5e6020830183613b7d565b6001600160a01b031603610c855760405163f0dd15fd60e01b815260040160405180910390fd5b50565b600254600454600091610ca9916001600160801b0390911690600f0b611961565b905090565b600080610cbd878787866119ed565b9050610cc981856116aa565b979650505050505050565b81600080610ce86040850160208601613ba8565b15610d0d57610d0385610cfe6040870187613bc5565b611a04565b9093509050610d25565b5034610d2585610d206040870187613bc5565b611c98565b610d2d611e42565b91508015610da057604051600090339083908381818185875af1925050503d8060008114610d77576040519150601f19603f3d011682016040523d82523d6000602084013e610d7c565b606091505b5050905080610d9e576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b6000610ca9427f0000000000000000000000000000000000000000000000000000000000000000611e55565b600084815260086020526040812060018101546001600160801b0316151580610dfd57504286115b15610e1657600101546001600160801b0316905061144b565b6000806000610e23610da9565b90506000610e517f00000000000000000000000000000000000000000000000000000000000000008b613a9c565b90505b81811015610ec7576000818152600860205260409020600101546001600160801b03168015610e9f576000828152600860205260409020549094506001600160801b03169250610ec7565b507f000000000000000000000000000000000000000000000000000000000000000001610e54565b83600003610f3a57889350610f37610edd610c88565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ed565b92505b50610f4483611987565b6001850180546001600160801b0319166001600160801b0392909216919091179055610f9a610f937f00000000000000000000000000000000000000000000000000000000000000008b613aaf565b8a84611e6b565b610fd889610fd2610fcb7f000000000000000000000000000000000000000000000000000000000000000083613a9c565b4290611fa9565b84611e6b565b610fe188611fb8565b50600090506008816110137f00000000000000000000000000000000000000000000000000000000000000008d613aaf565b815260208101919091526040016000908120600101546001600160801b0316915061103f60028c61215c565b6000818152600b60205260408120549192508c8c8315611185576001925060008061106e86898d866000612191565b9150915080600960008282546110849190613a9c565b909155506110a090508660008461109a81611810565b88612260565b6110aa8183613a9c565b91506110da86838a8e877f00000000000000000000000000000000000000000000000000000000000000006123da565b91506110ee6110e9838561241e565b612433565b6006805460029061110f9084906201000090046001600160701b0316613ca5565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061113c82611987565b6006805460109061115e908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061119260018461215c565b6000818152600b602052604090205490915080156112a157600194506000806111bf838b8f886001612191565b9150915080600960008282546111d59190613a9c565b909155506111f19050836000846111eb81611810565b8a61245d565b6111fb8183613aaf565b915061120a6110e9838761241e565b6006805460029061122b9084906201000090046001600160701b0316613ca5565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061125882611987565b6006805460109061127a908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156112db576112cd6112b387611810565b6112bc83611810565b6112c69190613ce5565b600061264e565b8e6112d8848261268d565b50505b60006112e684612887565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c49190613d05565b90506001600160a01b03811615611439576114365a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906129d3565b50505b509b9d50505050505050505050505050505b949350505050565b600061147b600b600061146760028661215c565b815260200190815260200160002054611810565b61148d600b600061146760018761215c565b6114979190613ce5565b92915050565b6000806000806114ad8a8a612a60565b91509150806114c45760008093509350505061169f565b6000611524838a6114fd7f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613aaf565b8b7f0000000000000000000000000000000000000000000000000000000000000000612a9c565b5090506000611588848b846115617f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613aaf565b8d7f0000000000000000000000000000000000000000000000000000000000000000612b59565b509050811580611596575080155b156115a2575060009050805b60006115f0858c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ed565b90506115fe83838c84612c17565b5090935060009050611610848f613a9c565b905060006116318b8b61162287611810565b61162c908e613d22565b612c63565b90508b6116666116617f000000000000000000000000000000000000000000000000000000000000000083612cca565b611810565b61166f83611810565b61167c611661868561241e565b6116869190613ce5565b6116909190613ce5565b60019950995050505050505050505b965096945050505050565b60006100916116be84846301e13380612cdb565b6116d085670de0b6b3a7640000613aaf565b90611882565b6116de61390d565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916117d69116612d01565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261180892900416612d01565b905292915050565b60006001600160ff1b0382111561183a5760405163396ea70160e11b815260040160405180910390fd5b5090565b61184781612d70565b610c8557604051635044b7f560e01b815260040160405180910390fd5b600082600019048411830215820261187b57600080fd5b5091020490565b600061009183670de0b6b3a764000084611864565b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906118c9908490613a9c565b90915550506000838152600b6020526040812080548392906118ec908490613a9c565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600061149782600461268d565b600081831361195b5782610091565b50919050565b60008061196e8484612a60565b90925090508061198057611980612f08565b5092915050565b60006001600160801b0382111561183a57604051630f0af95160e11b815260040160405180910390fd5b600060016001607f1b03198212806119cf575060016001607f1b0382135b1561183a5760405163a5353be560e01b815260040160405180910390fd5b6000610078826119fe858888611864565b90612f21565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a54575047611adf565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190613b4f565b90505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611b5a5787341015611b49576040516312171d8360e31b815260040160405180910390fd5b611b538834613aaf565b9050611bf4565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190613d4a565b91505b81611c12576040516312171d8360e31b815260040160405180910390fd5b600f54600003611c5757611c46887f0000000000000000000000000000000000000000000000000000000000000000611882565b600f81905594509250611c90915050565b600f54600090611c69908a9086611864565b905080600f6000828254611c7d9190613a9c565b90915550909550909350611c9092505050565b935093915050565b6000611ca384612f96565b9050600f54600003611ce157611cd9817f0000000000000000000000000000000000000000000000000000000000000000611882565b600f55611d07565b6000611cec82613091565b905080600f6000828254611d009190613a9c565b9091555050505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611d825782341015611d71576040516312171d8360e31b815260040160405180910390fd5b611d7b8334613aaf565b9050611e1c565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613d4a565b91505b81611e3a576040516312171d8360e31b815260040160405180910390fd5b505050505050565b6000610ca9670de0b6b3a7640000612f96565b6000611e618284613d7d565b6100919084613aaf565b600083815260086020526040902054600160801b90046001600160801b0316808303611e975750505050565b6000848152600860205260408120546001600160801b031690819003611ef157611ec083611987565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611f6f565b611f42611f3d670de0b6b3a7640000611f0a8886613aaf565b611f149190613c60565b85670de0b6b3a7640000611f28878a613aaf565b611f329190613c60565b85929190600161317a565b611987565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b611f7884611987565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600081831161195b5782610091565b6006546000908190611fdb908490600160801b90046001600160801b031661241e565b6006546201000090046001600160701b031692509050818111156121575760006120058383613aaf565b9050612014611f3d8286613218565b60068054601090612036908490600160801b90046001600160801b0316613d91565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061206f858361188290919063ffffffff16565b9050600061209d827f000000000000000000000000000000000000000000000000000000000000000061241e565b905080600960008282546120b19190613a9c565b909155506120c190508183613aaf565b91506120cc82611987565b600280546000906120e79084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506121148261322d565b60048054600090612129908490600f0b613db1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156121865760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60008061219e8785611882565b915060006121cc837f000000000000000000000000000000000000000000000000000000000000000061241e565b90506121f8817f000000000000000000000000000000000000000000000000000000000000000061241e565b9150831561221b5761220a8282613aaf565b6122149084613aaf565b9250612232565b6122258282613aaf565b61222f9084613a9c565b92505b8686101561225557612245838789611864565b9250612252828789611864565b91505b509550959350505050565b600454600160801b90046001600160801b03166122a9611f3d8261228c670de0b6b3a764000086613c60565b600554600160801b90046001600160801b031691908a600061317a565b600580546001600160801b03928316600160801b0292169190911790556122cf86611987565b6122d99082613d91565b600480546001600160801b03928316600160801b0292169190911790556122ff84611987565b6002805460009061231a9084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612347836119b1565b6004805460009061235c908490600f0b613db1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061238c85611987565b600280546010906123ae908490600160801b90046001600160801b0316613d91565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806123ec846116d08a888a611864565b90506123f9888486611864565b6124039082613a9c565b9050868111156124135786810391505b509695505050505050565b60006100918383670de0b6b3a7640000611864565b60006001600160701b0382111561183a5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061249f57507f000000000000000000000000000000000000000000000000000000000000000061249d8583613aaf565b105b156124ac576124ac612f08565b6004549084900390600f0b6124c18482613ce5565b9050836124cd86611810565b13801561250257507f00000000000000000000000000000000000000000000000000000000000000006125008383611961565b105b1561250f5761250f612f08565b600354600160801b90046001600160801b0316612551611f3d8261253b670de0b6b3a764000088613c60565b6005546001600160801b031691908c600061317a565b600580546001600160801b0319166001600160801b039290921691909117905561257b8882613aaf565b905061258681611987565b600380546001600160801b03928316600160801b0292169190911790556125ac83611987565b600280546001600160801b0319166001600160801b03929092169190911790556125d5826119b1565b600480546001600160801b0319166001600160801b03929092169190911790556125fe87611987565b60028054601090612620908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461266990611f3d906001600160801b03168484612c63565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e754354909182916126d8916001600160801b031690613aaf565b9050806000036126ec576001915050611497565b60006126f785613257565b90508060000361270c57600192505050611497565b60008061271a8385896132f3565b9150915080612730576000945050505050611497565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161276c929190613dde565b6040805180830381865af4158015612788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ac9190613e54565b915091506127ca6127bc82611810565b6127c590613e78565b612d70565b9250826127e05760009650505050505050611497565b6127e982611987565b600780546000906128049084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061283181611987565b60078054601090612853908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6128b0876116d6565b6040518263ffffffff1660e01b81526004016128cc9190613b40565b6040805180830381865af41580156128e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290c9190613e94565b9150915080612922575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161298891613a9c565b6129929190613aaf565b9050806000036129aa57506000958695509350505050565b60008087116129ba5760006129c5565b6129c5848884611864565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156129f9576129f9613ec4565b6040519080825280601f01601f191660200182016040528015612a23576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612a44578692505b828152826000602083013e9093509150505b9550959350505050565b600080600083612a6f86611810565b612a799190613ce5565b90506000811215612a91576000809250925050610da2565b946001945092505050565b6000806000612aae8888888888613462565b90506000612ad9670de0b6b3a7640000612ac88888613218565b612ad29190613a9c565b8390611882565b9050670de0b6b3a76400008110612b0d57612b06612aff670de0b6b3a764000089611882565b8290612f21565b9050612b25565b612b22612aff670de0b6b3a764000089613218565b90505b612b2f8186611882565b905088811015612b4757600080935093505050612a56565b97909703976001975095505050505050565b6000806000612b6b8989888888613491565b9050612b85866119fe612b7e8a8d613a9c565b879061241e565b9850612b92858a86611864565b985088811015612ba957600080925092505061169f565b888103670de0b6b3a76400008110612bd757612bd0612aff670de0b6b3a764000089613218565b9050612bef565b612bec612aff670de0b6b3a764000089611882565b90505b80891015612c055760008093509350505061169f565b90970398600198509650505050505050565b6000806000806000612c2a8987896134b6565b9092509050612c398289613aaf565b97506000612c4882888a611864565b9050612c54818b613aaf565b9a989950979650505050505050565b600080612c7184600061353c565b612c7c84600061353c565b612c869190613ce5565b90506000811315612ca257612c9b8186613a9c565b9450612cc1565b6000811215612cc157612cb481613e78565b612cbe9086613aaf565b94505b50929392505050565b60006100918383670de0b6b3a76400005b6000826000190484118302158202612cf257600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612d15610da9565b612d1f9190613c60565b9050808311612d2f576000612d39565b612d398184613aaf565b9150610091612ad2670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613c60565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4d9190613eda565b935093509350935080612e695750600098975050505050505050565b868414612e9a57612e7984611987565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612ecb57612eaa836119b1565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612ef957612edb82611987565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612f3a5750670de0b6b3a7640000611497565b82600003612f4a57506000611497565b6000612f5583611810565b90506000612f6a612f6586611810565b613552565b9050818102612f81670de0b6b3a764000082613f1b565b9050612f8c81613778565b9695505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612fe5575047613070565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306d9190613b4f565b90505b600f54600003613081576000610091565b600f546100919084908390611864565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016130e057504761316b565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131689190613b4f565b90505b600f5461009190849083611864565b60008260000361318b575084610078565b81156131de576131bc61319e8487613a9c565b6131a8858761241e565b6131b2888a61241e565b6116d09190613a9c565b905060006131ca8588611fa9565b9050808210156131d8578091505b50610078565b8285036131ed57506000610078565b6100756131fa8487613aaf565b6132048587612cca565b61320e888a61241e565b6116d09190613aaf565b600061009183670de0b6b3a764000084612cdb565b600060016001607f1b0382111561183a5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190613272906001600160801b031684613218565b905061329e7f000000000000000000000000000000000000000000000000000000000000000082613a9c565b6002546001600160801b0316111561195b576002547f0000000000000000000000000000000000000000000000000000000000000000906132e99083906001600160801b0316613aaf565b6100919190613aaf565b6132fb61396e565b600080613307846116d6565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016133429190613b40565b6040805180830381865af415801561335e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133829190613e94565b9350905082613397575060009150611c909050565b60006133b961166184610160015185610140015161241e90919063ffffffff16565b6133d9611661856101200151866101000151612cca90919063ffffffff16565b6133e39190613ce5565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b600061346e8585612f21565b61348761347f866119fe868b61241e565b859085611864565b6100759190613a9c565b600061349d8585612f21565b6134876134ae866119fe868b612cca565b859085612cdb565b6000806135068561350085817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006134f6818c613218565b6135009190613aaf565b90612cca565b9150613532827f000000000000000000000000000000000000000000000000000000000000000061241e565b9050935093915050565b600081831361354b5781610091565b5090919050565b60008082136135745760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906135f79084901c611810565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361379357506000919050565b680755bf798b4a1bf1e582126137bc576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612f8c74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611810565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610120016040528061398261390d565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561195b57600080fd5b600080600080600060a086880312156139ea57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115613a1d57600080fd5b613a29888289016139c0565b9150509295509295909350565b600080600060608486031215613a4b57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613a7057600080fd5b613a7c868287016139c0565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561149757611497613a86565b8181038181111561149757611497613a86565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b61018081016114978284613ac2565b600060208284031215613b6157600080fd5b5051919050565b6001600160a01b0381168114610c8557600080fd5b600060208284031215613b8f57600080fd5b813561009181613b68565b8015158114610c8557600080fd5b600060208284031215613bba57600080fd5b813561009181613b9a565b6000808335601e19843603018112613bdc57600080fd5b83018035915067ffffffffffffffff821115613bf757600080fd5b602001915036819003821315610da257600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761149757611497613a86565b600080600060608486031215613c8c57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561198057611980613a86565b6001600160801b0381811683821601908082111561198057611980613a86565b818103600083128015838313168383128216171561198057611980613a86565b600060208284031215613d1757600080fd5b815161009181613b68565b8082018281126000831280158216821582161715613d4257613d42613a86565b505092915050565b600060208284031215613d5c57600080fd5b815161009181613b9a565b634e487b7160e01b600052601260045260246000fd5b600082613d8c57613d8c613d67565b500690565b6001600160801b0382811682821603908082111561198057611980613a86565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561149757611497613a86565b60006102a082019050613df2828551613ac2565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613e6757600080fd5b505080516020909101519092909150565b6000600160ff1b8201613e8d57613e8d613a86565b5060000390565b60008060408385031215613ea757600080fd5b825191506020830151613eb981613b9a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613ef057600080fd5b8451935060208501519250604085015191506060850151613f1081613b9a565b939692955090935050565b600082613f2a57613f2a613d67565b600160ff1b821460001984141615613f4457613f44613a86565b50059056fea2646970667358221220541f9e554db40562ff6b861912e73df93593ecf212647e656b5b9f9472f1664364736f6c634300081600336102806040523480156200001257600080fd5b5060405162003661380380620036618339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161322d62000434600039600050506000505060006109c10152600050506000818161026d015261205401526000818161189a015281816118fd01528181611c3901528181611c7501528181611e6d015261202e01526000818161056f01526120080152600061146f015260006115ca015260008181610733015261159e01526000505060008181610590015261207a01526000818161066b01526127cc0152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb0152610623015260005050600081816110ef015281816111380152818161235d015281816123a6015281816124810152818161252d0152818161261901526126c5015261322d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612cba565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612d11565b6100b5565b005b610059610095366004612cba565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612d48565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612d73565b61017160408c018c612d90565b60405161018396959493929190612e00565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612e50565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612d48565b88610ee8565b60006103066102fd6020870187612d48565b88848989610ad0565b90945090506103158188612e7a565b9250600061032283610f88565b5090506103326020870187612d48565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612d73565b8a888e80604001906103829190612d90565b604051610396989796959493929190612e8d565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612d48565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f00000000000000000000000000000000000000000000000000000000000000006111d6565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612ed5565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a6111ec565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061120d565b92505b506105c18361122d565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612e7a565b8a8461125b565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612ed5565b4290611399565b8461125b565b61065e886113ae565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612e7a565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c611552565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d866000611587565b9150915080600960008282546107019190612ed5565b9091555061071d90508660008461071781611656565b88611680565b6107278183612ed5565b915061075786838a8e877f00000000000000000000000000000000000000000000000000000000000000006117fa565b915061076b6107668385611844565b611859565b6006805460029061078c9084906201000090046001600160701b0316612ee8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261122d565b600680546010906107db908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f600184611552565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f886001611587565b9150915080600960008282546108529190612ed5565b9091555061086e90508360008461086881611656565b8a611883565b6108788183612e7a565b91506108876107668387611844565b600680546002906108a89084906201000090046001600160701b0316612ee8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261122d565b600680546010906108f7908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a61093087611656565b61093983611656565b6109439190612f28565b6000611a74565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612f48565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611ab3565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611b3e565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611b4b565b9050610b568361122d565b610b609083612f65565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161122d565b60078054601090610bab908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611b69565b9350610be68684611c02565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612e7a565b905080600003610c72576001915050610e08565b6000610c7d85611c17565b905080600003610c9257600192505050610e08565b600080610ca0838589611cb3565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190613003565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190613079565b91509150610d50610d4282611656565b610d4b9061309d565b611e27565b925082610d665760009650505050505050610e08565b610d6f8261122d565b60078054600090610d8a9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161122d565b60078054601090610dd9908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612e7a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612ed5565b90915550506000838152600b602052604081208054839290610f3d908490612ed5565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611fbf565b6040518263ffffffff1660e01b8152600401610fcd91906130b9565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d91906130c8565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612ed5565b6110939190612e7a565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611b4b565b976001975095505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016111235750476111ae565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab91906130f8565b90505b600f546000036111bf5760006111cf565b600f546111cf9084908390611b4b565b9392505050565b60006111e28284612e50565b6111cf9084612e7a565b600254600454600091610421916001600160801b0390911690600f0b6120f9565b60006112248261121e858888611b4b565b9061211f565b95945050505050565b60006001600160801b0382111561125757604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036112875750505050565b6000848152600860205260408120546001600160801b0316908190036112e1576112b08361122d565b600086815260086020526040902080546001600160801b0319166001600160801b039290921691909117905561135f565b61133261132d670de0b6b3a76400006112fa8886612e7a565b6113049190613111565b85670de0b6b3a7640000611318878a612e7a565b6113229190613111565b859291906001612194565b61122d565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6113688461122d565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116113a857826111cf565b50919050565b60065460009081906113d1908490600160801b90046001600160801b0316611844565b6006546201000090046001600160701b0316925090508181111561154d5760006113fb8383612e7a565b905061140a61132d8286612232565b6006805460109061142c908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611465858361224790919063ffffffff16565b90506000611493827f0000000000000000000000000000000000000000000000000000000000000000611844565b905080600960008282546114a79190612ed5565b909155506114b790508183612e7a565b91506114c28261122d565b600280546000906114dd9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061150a8261225c565b6004805460009061151f908490600f0b613128565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b0382111561157c5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806115948785612247565b915060006115c2837f0000000000000000000000000000000000000000000000000000000000000000611844565b90506115ee817f0000000000000000000000000000000000000000000000000000000000000000611844565b91508315611611576116008282612e7a565b61160a9084612e7a565b9250611628565b61161b8282612e7a565b6116259084612ed5565b92505b8686101561164b5761163b838789611b4b565b9250611648828789611b4b565b91505b509550959350505050565b60006001600160ff1b038211156112575760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166116c961132d826116ac670de0b6b3a764000086613111565b600554600160801b90046001600160801b031691908a6000612194565b600580546001600160801b03928316600160801b0292169190911790556116ef8661122d565b6116f99082612f65565b600480546001600160801b03928316600160801b02921691909117905561171f8461122d565b6002805460009061173a9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061176783612286565b6004805460009061177c908490600f0b613128565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506117ac8561122d565b600280546010906117ce908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806118128461180c8a888a611b4b565b90612247565b905061181f888486611b4b565b6118299082612ed5565b9050868111156118395786810391505b509695505050505050565b60006111cf8383670de0b6b3a7640000611b4b565b60006001600160701b038211156112575760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806118c557507f00000000000000000000000000000000000000000000000000000000000000006118c38583612e7a565b105b156118d2576118d26122c2565b6004549084900390600f0b6118e78482612f28565b9050836118f386611656565b13801561192857507f000000000000000000000000000000000000000000000000000000000000000061192683836120f9565b105b15611935576119356122c2565b600354600160801b90046001600160801b031661197761132d82611961670de0b6b3a764000088613111565b6005546001600160801b031691908c6000612194565b600580546001600160801b0319166001600160801b03929092169190911790556119a18882612e7a565b90506119ac8161122d565b600380546001600160801b03928316600160801b0292169190911790556119d28361122d565b600280546001600160801b0319166001600160801b03929092169190911790556119fb82612286565b600480546001600160801b0319166001600160801b0392909216919091179055611a248761122d565b60028054601090611a46908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a8f9061132d906001600160801b031684846122db565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611ad957611ad9613155565b6040519080825280601f01601f191660200182016040528015611b03576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611b24578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611b6257600080fd5b5091020490565b600080611b768585611844565b9050611b8181612342565b945084600003611b955760009150506111cf565b849150611ba86040840160208501612d73565b15611bd757611bd085611bbe6020860186612d48565b611bcb6040870187612d90565b61242b565b9150611bfa565b611bfa85611be86020860186612d48565b611bf56040870187612d90565b6125c5565b509392505050565b60006111cf8383670de0b6b3a764000061275b565b6003546000908190611c32906001600160801b031684612232565b9050611c5e7f000000000000000000000000000000000000000000000000000000000000000082612ed5565b6002546001600160801b031611156113a8576002547f000000000000000000000000000000000000000000000000000000000000000090611ca99083906001600160801b0316612e7a565b6111cf9190612e7a565b611cbb612c07565b600080611cc784611fbf565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611d0291906130b9565b6040805180830381865af4158015611d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4291906130c8565b9350905082611d575750600091506100ad9050565b6000611d7e611d7984610160015185610140015161184490919063ffffffff16565b611656565b611d9e611d79856101200151866101000151611c0290919063ffffffff16565b611da89190612f28565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = ERC4626DeployerCoordinatorTestContractFunctions(erc4626deployercoordinatortest_abi, self.w3, address)  # type: ignore
        self.events = ERC4626DeployerCoordinatorTestContractEvents(erc4626deployercoordinatortest_abi, self.w3, address)  # type: ignore
        self.errors = ERC4626DeployerCoordinatorTestContractErrors()

    events: ERC4626DeployerCoordinatorTestContractEvents

    errors: ERC4626DeployerCoordinatorTestContractErrors = (
        ERC4626DeployerCoordinatorTestContractErrors()
    )

    functions: ERC4626DeployerCoordinatorTestContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ERC4626DeployerCoordinatorTestContractFunctions(
            erc4626deployercoordinatortest_abi, w3, None
        )
        contract.errors = ERC4626DeployerCoordinatorTestContractErrors()

        return contract
