"""A web3.py Contract class for the NonPayableDeployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolDeployConfig": IHyperdrive.PoolDeployConfig,
    "IHyperdrive.Options": IHyperdrive.Options,
}

nonpayabledeployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "deployAndInitialize",
            "inputs": [
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "contract HyperdriveFactory",
                },
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployerCoordinator",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_fixedAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_timeStretchAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "contract HyperdriveFactory",
                },
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployerCoordinator",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_fixedAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_timeStretchAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_targetIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class NonPayableDeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the NonPayableDeployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class NonPayableDeployerDeployAndInitializeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployAndInitialize(str,bytes,str,str,IHyperdrive.PoolDeployConfig,bytes,int,int,int,IHyperdrive.Options,bytes) method."""

    _function_name = "deployAndInitialize"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "bytes",
                "str",
                "str",
                "IHyperdrive.PoolDeployConfig",
                "bytes",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "bytes",
            ]
        ),
        structs,
    )
    _error_class = NonPayableDeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class NonPayableDeployerDeployAndInitializeContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployAndInitialize method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployAndInitialize"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _factory: str, _deploymentId: bytes, __name: str, _deployerCoordinator: str, _config: IHyperdrive.PoolDeployConfig, _extraData: bytes, _contribution: int, _fixedAPR: int, _timeStretchAPR: int, _options: IHyperdrive.Options, _salt: bytes) -> NonPayableDeployerDeployAndInitializeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> NonPayableDeployerDeployAndInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            NonPayableDeployerDeployAndInitializeContractFunction0._type_signature: NonPayableDeployerDeployAndInitializeContractFunction0.factory(
                "NonPayableDeployerDeployAndInitializeContractFunction0",
                **kwargs,
            ),
        }
        return out


class NonPayableDeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(str,bytes,str,IHyperdrive.PoolDeployConfig,bytes,int,int,int,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "bytes",
                "str",
                "IHyperdrive.PoolDeployConfig",
                "bytes",
                "int",
                "int",
                "int",
                "bytes",
            ]
        ),
        structs,
    )
    _error_class = NonPayableDeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class NonPayableDeployerDeployTargetContractFunction(PypechainContractFunction):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _factory: str, _deploymentId: bytes, _deployerCoordinator: str, _config: IHyperdrive.PoolDeployConfig, _extraData: bytes, _fixedAPR: int, _timeStretchAPR: int, _targetIndex: int, _salt: bytes) -> NonPayableDeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> NonPayableDeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            NonPayableDeployerDeployTargetContractFunction0._type_signature: NonPayableDeployerDeployTargetContractFunction0.factory(
                "NonPayableDeployerDeployTargetContractFunction0", **kwargs
            ),
        }
        return out


class NonPayableDeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the NonPayableDeployer contract."""

    deployAndInitialize: NonPayableDeployerDeployAndInitializeContractFunction

    deployTarget: NonPayableDeployerDeployTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployAndInitialize = (
            NonPayableDeployerDeployAndInitializeContractFunction.factory(
                "deployAndInitialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployAndInitialize",
            )
        )
        self.deployTarget = (
            NonPayableDeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )


class NonPayableDeployerContract(Contract):
    """A web3.py Contract class for the NonPayableDeployer contract."""

    abi: ABI = nonpayabledeployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b506108c9806100206000396000f3fe6080604052600436106100295760003560e01c8063606b55631461002e57806373c871b314610043575b600080fd5b61004161003c366004610462565b610063565b005b34801561004f57600080fd5b5061004161005e36600461055a565b6100f4565b604051632e7cd97160e01b81526001600160a01b038c1690632e7cd9719034906100a3908e908d908f908e908e908e908e908e908e908e90600401610758565b60206040518083038185885af11580156100c1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906100e6919061080c565b505050505050505050505050565b6040516349f13de760e01b81526001600160a01b038a16906349f13de79061012e908b908b908b908b908b908b908b908b90600401610830565b6020604051808303816000875af115801561014d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610171919061080c565b50505050505050505050565b6001600160a01b038116811461019257600080fd5b50565b80356101a08161017d565b919050565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156101df576101df6101a5565b60405290565b600082601f8301126101f657600080fd5b813567ffffffffffffffff80821115610211576102116101a5565b604051601f8301601f19908116603f01168101908282118183101715610239576102396101a5565b8160405283815286602085880101111561025257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006080828403121561028457600080fd5b6040516080810181811067ffffffffffffffff821117156102a7576102a76101a5565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600061024082840312156102eb57600080fd5b6102f36101bb565b90506102fe82610195565b815261030c60208301610195565b602082015261031d60408301610195565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014061037a818401610195565b9082015261016061038c838201610195565b9082015261018061039e838201610195565b908201526101a06103b0838201610195565b908201526101c06103c384848301610272565b9082015292915050565b6000606082840312156103df57600080fd5b6040516060810167ffffffffffffffff8282108183111715610403576104036101a5565b81604052829350843591506104178261017d565b908252602084013590811515821461042e57600080fd5b816020840152604085013591508082111561044857600080fd5b50610455858286016101e5565b6040830152505092915050565b60008060008060008060008060008060006103808c8e03121561048457600080fd5b61048d8c610195565b9a5060208c0135995067ffffffffffffffff8060408e013511156104b057600080fd5b6104c08e60408f01358f016101e5565b99506104ce60608e01610195565b98506104dd8e60808f016102d8565b9750806102c08e013511156104f157600080fd5b6105028e6102c08f01358f016101e5565b96506102e08d013595506103008d013594506103208d01359350806103408e0135111561052e57600080fd5b506105408d6103408e01358e016103cd565b91506103608c013590509295989b509295989b9093969950565b60008060008060008060008060006103408a8c03121561057957600080fd5b89356105848161017d565b985060208a0135975060408a013561059b8161017d565b96506105aa8b60608c016102d8565b95506102a08a013567ffffffffffffffff8111156105c757600080fd5b6105d38c828d016101e5565b999c989b5096999598976102c087013597506102e08701359661030081013596506103200135945092505050565b6000815180845260005b818110156106275760208185018101518683018201520161060b565b506000602082860101526020601f19601f83011685010191505092915050565b80516001600160a01b03168252602081015161066e60208401826001600160a01b03169052565b50604081015161068960408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516106ef828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b8a81526001600160a01b038a81166020830152610360604083018190526000916107848483018d610601565b9150610793606085018c610647565b8382036102a08501526107a6828b610601565b9150886102c0850152876102e085015286610300850152838203610320850152808651168252506020850151151560208201526040850151606060408301526107f26060830182610601565b92505050826103408301529b9a5050505050505050505050565b60006020828403121561081e57600080fd5b81516108298161017d565b9392505050565b8881526001600160a01b03881660208201526000610320610854604084018a610647565b8061028084015261086781840189610601565b915050856102a0830152846102c0830152836102e083015282610300830152999850505050505050505056fea2646970667358221220f01766ca062a52ebcc1a84c3d4cace783efbd02bc36bcc899b9d4f6ac96582cc64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = NonPayableDeployerContractFunctions(nonpayabledeployer_abi, self.w3, address)  # type: ignore

    functions: NonPayableDeployerContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = NonPayableDeployerContractFunctions(
            nonpayabledeployer_abi, w3, None
        )

        return contract
