"""A web3.py Contract class for the PoolLogic contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import PypechainBaseContractErrors, combomethod_typed
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, TxReceipt

from .PoolLogicTypes import (
    IsolationModeTotalDebtUpdatedEvent,
    MintedToTreasuryEvent,
)

structs = {}

poollogic_abi: ABI = cast(
    ABI,
    [
        {
            "type": "event",
            "name": "IsolationModeTotalDebtUpdated",
            "inputs": [
                {
                    "name": "asset",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "totalDebt",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MintedToTreasury",
            "inputs": [
                {
                    "name": "reserve",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amountMinted",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
    ],
)


class PoolLogicContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the PoolLogic contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class PoolLogicContractFunctions(ContractFunctions):
    """ContractFunctions for the PoolLogic contract."""

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)


class PoolLogicIsolationModeTotalDebtUpdatedContractEvent(ContractEvent):
    """ContractEvent for IsolationModeTotalDebtUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[IsolationModeTotalDebtUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            IsolationModeTotalDebtUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=IsolationModeTotalDebtUpdatedEvent.IsolationModeTotalDebtUpdatedEventArgs(
                    asset=abi_event.args["asset"],
                    totalDebt=abi_event.args["totalDebt"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[IsolationModeTotalDebtUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            IsolationModeTotalDebtUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=IsolationModeTotalDebtUpdatedEvent.IsolationModeTotalDebtUpdatedEventArgs(
                    asset=abi_event.args["asset"],
                    totalDebt=abi_event.args["totalDebt"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class PoolLogicMintedToTreasuryContractEvent(ContractEvent):
    """ContractEvent for MintedToTreasury."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MintedToTreasuryEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MintedToTreasuryEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MintedToTreasuryEvent.MintedToTreasuryEventArgs(
                    reserve=abi_event.args["reserve"],
                    amountMinted=abi_event.args["amountMinted"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MintedToTreasuryEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MintedToTreasuryEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MintedToTreasuryEvent.MintedToTreasuryEventArgs(
                    reserve=abi_event.args["reserve"],
                    amountMinted=abi_event.args["amountMinted"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class PoolLogicContractEvents(ContractEvents):
    """ContractEvents for the PoolLogic contract."""

    IsolationModeTotalDebtUpdated: Type[
        PoolLogicIsolationModeTotalDebtUpdatedContractEvent
    ]

    MintedToTreasury: Type[PoolLogicMintedToTreasuryContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.IsolationModeTotalDebtUpdated = cast(
            Type[PoolLogicIsolationModeTotalDebtUpdatedContractEvent],
            PoolLogicIsolationModeTotalDebtUpdatedContractEvent.factory(
                "IsolationModeTotalDebtUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="IsolationModeTotalDebtUpdated",
            ),
        )
        self.MintedToTreasury = cast(
            Type[PoolLogicMintedToTreasuryContractEvent],
            PoolLogicMintedToTreasuryContractEvent.factory(
                "MintedToTreasury",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MintedToTreasury",
            ),
        )


class PoolLogicContract(Contract):
    """A web3.py Contract class for the PoolLogic contract."""

    abi: ABI = poollogic_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x611d0361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c806369fc1bdf1161006557806369fc1bdf146101135780636ae438131461014357806387b322b2146101a25780639cf57023146101c257600080fd5b80631e3b41451461008c57806326ec273f146100ae57806348c2ca8c146100f3575b600080fd5b81801561009857600080fd5b506100ac6100a7366004611820565b6101e2565b005b6100c16100bc3660046118e5565b6102b3565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0015b60405180910390f35b8180156100ff57600080fd5b506100ac61010e3660046119a0565b6102f0565b81801561011f57600080fd5b5061013361012e366004611a31565b61046b565b60405190151581526020016100ea565b81801561014f57600080fd5b506100ac61015e366004611aee565b6001600160a01b0390911660009081526020929092526040909120600301805464ffffffffff909216600160b81b0264ffffffffff60b81b19909216919091179055565b8180156101ae57600080fd5b506100ac6101bd366004611b38565b6106d2565b8180156101ce57600080fd5b506100ac6101dd366004611b74565b6106eb565b6001600160a01b03811660009081526020838152604091829020825191820190925290549081905260d41c64ffffffffff16604080518082019091526002815261383160f01b602082015290156102555760405162461bcd60e51b815260040161024c9190611ba9565b60405180910390fd5b506001600160a01b03811660008181526020848152604080832060090180546001600160801b0319169055519182527faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5910160405180910390a25050565b6000806000806000806102c88a8a8a8a6107af565b50939950919750909450925090506102e1868684610c96565b93509499939850945094509450565b60005b8181101561046557600083838381811061030f5761030f611bf8565b90506020020160208101906103249190611c0e565b6001600160a01b038116600090815260208781526040918290208251918201909252815490819052919250906701000000000000001661036557505061045d565b60088101546001600160801b03168015610459576008820180546001600160801b0319169055600061039683610cca565b905060006103a48383610d2d565b600480860154604051637df5bd3b60e01b81529293506001600160a01b031691637df5bd3b916103e1918591879101918252602082015260400190565b600060405180830381600087803b1580156103fb57600080fd5b505af115801561040f573d6000803e3d6000fd5b50505050846001600160a01b03167fbfa21aa5d5f9a1f0120a95e7c0749f389863cbdbfff531aa7339077a5bc919de8260405161044e91815260200190565b60405180910390a250505b5050505b6001016102f3565b50505050565b80516040805180820190915260018152603960f81b60208201526000913b6104a65760405162461bcd60e51b815260040161024c9190611ba9565b506020808301516040808501516060860151608087015187516001600160a01b03166000908152958a9052929094206104e194909392610d71565b81516001600160a01b0316600090815260208590526040812060030154600160a81b900461ffff16151580610531575082516000808052602086905260409020546001600160a01b039081169116145b90508015604051806040016040528060028152602001610c4d60f21b8152509061056e5760405162461bcd60e51b815260040161024c9190611ba9565b5060005b8360a0015161ffff168161ffff1610156106145761ffff81166000908152602086905260409020546001600160a01b031661060c5783516001600160a01b03908116600090815260208881526040808320600301805461ffff60a81b1916600160a81b61ffff97909716968702179055875194835290889052812080546001600160a01b0319169390921692909217905591506106cb9050565b600101610572565b508260c0015161ffff168360a0015161ffff161060405180604001604052806002815260200161313560f01b815250906106615760405162461bcd60e51b815260040161024c9190611ba9565b50505060a08101805182516001600160a01b03908116600090815260208781526040808320600301805461ffff60a81b1916600160a81b61ffff978816021790558651955190941682528690529190912080546001600160a01b0319169290911691909117905560015b9392505050565b6106e66001600160a01b0384168383610e45565b505050565b6001600160a01b038116600090815260208490526040902061070e838284610ed0565b506001600160a01b0316600081815260208481526040808320600381018054600160a81b900461ffff16855295835290832080546001600160a01b0319908116909155938352949052808455600184018190556002840181905582546001600160e01b031916909255600483018054821690556005830180548216905560068301805482169055600783018054909116905560088201819055600990910155565b6000806000806000806107c58760000151511590565b156107e3575060009450849350839250829150600019905081610c89565b6108856040518061026001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581526020016000151581525090565b608088015160ff16156108ca57608088015160ff16600090815260208a90526040902060608901516108b791906111a3565b6101808401526101c08301526101a08201525b87602001518160c001511015610ba95760c081015188516108ea9161124f565b6108fe5760c08101805160010190526108ca565b60c0810151600090815260208b905260409020546001600160a01b031661020082018190526109375760c08101805160010190526108ca565b6102008101516001600160a01b0316600090815260208c8152604091829020825180830190935280549283905260ff60a884901c81166101e0860152603084901c166060850181905261ffff601085901c811660a08701529093166080850152600a9290920a90830152610180820151158015906109c05750816101e00151896080015160ff16145b610a3e57606089015161020083015160405163b3596f0760e01b81526001600160a01b03918216600482015291169063b3596f0790602401602060405180830381865afa158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190611c29565b610a45565b8161018001515b825260a082015115801590610a65575060c08201518951610a65916112a2565b15610b5557610a82896040015182846000015185602001516112f1565b6040830181905261010083018051610a9b908390611c58565b90525060808901516101e0830151610ab69160ff16906113a4565b1515610240830152608082015115610b0c57816102400151610adc578160800151610ae3565b816101a001515b8260400151610af29190611c6b565b8261014001818151610b049190611c58565b905250610b15565b60016102208301525b816102400151610b29578160a00151610b30565b816101c001515b8260400151610b3f9190611c6b565b8261016001818151610b519190611c58565b9052505b60c08201518951610b65916113b5565b15610b9857610b8289604001518284600001518560200151611402565b8261012001818151610b949190611c58565b9052505b5060c08101805160010190526108ca565b806101000151600003610bbd576000610bd8565b80610100015181610140015181610bd657610bd6611c82565b045b610140820152610100810151600003610bf2576000610c0d565b80610100015181610160015181610c0b57610c0b611c82565b045b61016082015261012081015115610c4f57610c4a816101200151610c4483610160015184610100015161153690919063ffffffff16565b9061155c565b610c53565b6000195b60e0820181905261010082015161012083015161014084015161016085015161022090950151929a509098509650919450925090505b9499939850945094509450565b600080610ca38584611536565b905083811015610cb75760009150506106cb565b610cc18482611c98565b95945050505050565b6003810154600090600160801b900464ffffffffff16428103610cf9575050600101546001600160801b031690565b60018301546106cb906001600160801b0380821691610d2191600160801b9091041684611593565b90610d2d565b50919050565b600081156b019d971e4fe8401e740000001983900484111517610d4f57600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b6004850154604080518082019091526002815261363160f01b6020820152906001600160a01b031615610db75760405162461bcd60e51b815260040161024c9190611ba9565b506001850180546b033b2e3c9fd0803ce80000006001600160801b0319918216811790925560028701805490911690911790556004850180546001600160a01b03199081166001600160a01b03968716179091556005860180548216948616949094179093556006850180548416928516929092179091556007909301805490911692909116919091179055565b60405163a9059cbb60e01b8082526001600160a01b0384166004830152602482018390529060008060448382895af1610e82573d6000803e3d6000fd5b50610e8c846115d8565b6104655760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b604482015260640161024c565b604080518082019091526002815261373760f01b60208201526001600160a01b038216610f105760405162461bcd60e51b815260040161024c9190611ba9565b506003820154600160a81b900461ffff16151580610f4757506000808052602084905260409020546001600160a01b038281169116145b604051806040016040528060028152602001611c1960f11b81525090610f805760405162461bcd60e51b815260040161024c9190611ba9565b508160050160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa9190611c29565b604080518082019091526002815261353560f01b602082015290156110325760405162461bcd60e51b815260040161024c9190611ba9565b508160060160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190611c29565b6040805180820190915260028152611a9b60f11b602082015290156110e45760405162461bcd60e51b815260040161024c9190611ba9565b50600480830154604080516318160ddd60e01b815290516001600160a01b03909216926318160ddd9282820192602092908290030181865afa15801561112e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111529190611c29565b15801561116a575060088201546001600160801b0316155b604051806040016040528060028152602001610d4d60f21b815250906104655760405162461bcd60e51b815260040161024c9190611ba9565b8154600090819081908190660100000000000090046001600160a01b031680156112345760405163b3596f0760e01b81526001600160a01b03828116600483015287169063b3596f0790602401602060405180830381865afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190611c29565b91505b50945461ffff80821697620100009092041695945092505050565b6040805180820190915260028152610dcd60f21b60208201526000906080831061128c5760405162461bcd60e51b815260040161024c9190611ba9565b50508151600182901b1c60031615155b92915050565b6040805180820190915260028152610dcd60f21b6020820152600090608083106112df5760405162461bcd60e51b815260040161024c9190611ba9565b50509051600191821b82011c16151590565b6000806112fd85610cca565b600486810154604051630ed1279f60e11b81526001600160a01b038a811693820193909352929350600092879261137d928692911690631da24f3e90602401602060405180830381865afa158015611359573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611c29565b6113879190611c6b565b905083818161139857611398611c82565b04979650505050505050565b600082158015906106cb5750501490565b6040805180820190915260028152610dcd60f21b6020820152600090608083106113f25760405162461bcd60e51b815260040161024c9190611ba9565b50509051600191821b1c16151590565b6006830154604051630ed1279f60e11b81526001600160a01b0386811660048301526000928392911690631da24f3e90602401602060405180830381865afa158015611452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114769190611c29565b905080156114945761149161148a8661167e565b8290610d2d565b90505b60058501546040516370a0823160e01b81526001600160a01b038881166004830152909116906370a0823190602401602060405180830381865afa1580156114e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115049190611c29565b61150e9082611c58565b905061151a8185611c6b565b905082818161152b5761152b611c82565b049695505050505050565b60008115611388198390048411151761154e57600080fd5b506127109102611388010490565b60008115670de0b6b3a76400006002840419048411171561157c57600080fd5b50670de0b6b3a76400009190910260028204010490565b6000806115a764ffffffffff841642611c98565b6115b19085611c6b565b6301e13380900490506115d0816b033b2e3c9fd0803ce8000000611c58565b949350505050565b60006115fd565b62461bcd60e51b600052602060045280602452508060445260646000fd5b3d801561163c576020811461166d576116377f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6115df565b610d27565b823b611664576116647311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b60146115df565b60019150610d27565b3d6000803e50506000511515919050565b6003810154600090600160801b900464ffffffffff164281036116ad575050600201546001600160801b031690565b60028301546106cb906001600160801b0380821691610d2191600160801b909104168460006106cb8383426000806116ec64ffffffffff851684611c98565b90508060000361170b576b033b2e3c9fd0803ce80000009150506106cb565b60001981016000808060028511611723576000611728565b600285035b925066038882915c400061173c8a80610d2d565b8161174957611749611c82565b0491506301e1338061175b838b610d2d565b8161176857611768611c82565b0490506000826117788688611c6b565b6117829190611c6b565b60029004905060008285611796888a611c6b565b6117a09190611c6b565b6117aa9190611c6b565b60069004905080826301e133806117c18a8f611c6b565b6117cb9190611cab565b6117e1906b033b2e3c9fd0803ce8000000611c58565b6117eb9190611c58565b6117f59190611c58565b9b9a5050505050505050505050565b80356001600160a01b038116811461181b57600080fd5b919050565b6000806040838503121561183357600080fd5b8235915061184360208401611804565b90509250929050565b60405160a0810167ffffffffffffffff8111828210171561187d57634e487b7160e01b600052604160045260246000fd5b60405290565b6040516020810167ffffffffffffffff8111828210171561187d57634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561187d57634e487b7160e01b600052604160045260246000fd5b6000806000808486036101008112156118fd57600080fd5b853594506020860135935060408601359250605f190160a081121561192157600080fd5b61192961184c565b602082121561193757600080fd5b61193f611883565b9150606087013582528181526080870135602082015261196160a08801611804565b604082015261197260c08801611804565b606082015260e0870135915060ff8216821461198d57600080fd5b6080810191909152939692955090935050565b6000806000604084860312156119b557600080fd5b83359250602084013567ffffffffffffffff808211156119d457600080fd5b818601915086601f8301126119e857600080fd5b8135818111156119f757600080fd5b8760208260051b8501011115611a0c57600080fd5b6020830194508093505050509250925092565b803561ffff8116811461181b57600080fd5b6000806000838503610120811215611a4857600080fd5b843593506020850135925060e0603f1982011215611a6557600080fd5b50611a6e6118b4565b611a7a60408601611804565b8152611a8860608601611804565b6020820152611a9960808601611804565b6040820152611aaa60a08601611804565b6060820152611abb60c08601611804565b6080820152611acc60e08601611a1f565b60a0820152611ade6101008601611a1f565b60c0820152809150509250925092565b600080600060608486031215611b0357600080fd5b83359250611b1360208501611804565b9150604084013564ffffffffff81168114611b2d57600080fd5b809150509250925092565b600080600060608486031215611b4d57600080fd5b611b5684611804565b9250611b6460208501611804565b9150604084013590509250925092565b600080600060608486031215611b8957600080fd5b8335925060208401359150611ba060408501611804565b90509250925092565b60006020808352835180602085015260005b81811015611bd757858101830151858201604001528201611bbb565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611c2057600080fd5b6106cb82611804565b600060208284031215611c3b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561129c5761129c611c42565b808202811582820484141761129c5761129c611c42565b634e487b7160e01b600052601260045260246000fd5b8181038181111561129c5761129c611c42565b600082611cc857634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122097eedbbe40cf72bf399725b2dde94541bf0ec7e135aad05044149ccf0ebb5cff64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = PoolLogicContractFunctions(poollogic_abi, self.w3, address)  # type: ignore
        self.events = PoolLogicContractEvents(poollogic_abi, self.w3, address)  # type: ignore

    events: PoolLogicContractEvents

    functions: PoolLogicContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = PoolLogicContractFunctions(poollogic_abi, w3, None)

        return contract
