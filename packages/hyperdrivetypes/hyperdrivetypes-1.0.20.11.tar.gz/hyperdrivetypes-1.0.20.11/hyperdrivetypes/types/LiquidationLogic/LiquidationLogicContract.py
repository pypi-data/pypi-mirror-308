"""A web3.py Contract class for the LiquidationLogic contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Iterable, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from .LiquidationLogicTypes import (
    IsolationModeTotalDebtUpdatedEvent,
    LiquidationCallEvent,
    ReserveDataUpdatedEvent,
    ReserveUsedAsCollateralDisabledEvent,
    ReserveUsedAsCollateralEnabledEvent,
)

structs = {}

liquidationlogic_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "CLOSE_FACTOR_HF_THRESHOLD",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "MAX_LIQUIDATION_CLOSE_FACTOR",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "IsolationModeTotalDebtUpdated",
            "inputs": [
                {
                    "name": "asset",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "totalDebt",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LiquidationCall",
            "inputs": [
                {
                    "name": "collateralAsset",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "debtAsset",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "user",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "debtToCover",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "liquidatedCollateralAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "liquidator",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "receiveAToken",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ReserveDataUpdated",
            "inputs": [
                {
                    "name": "reserve",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "liquidityRate",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "stableBorrowRate",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "variableBorrowRate",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "liquidityIndex",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "variableBorrowIndex",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ReserveUsedAsCollateralDisabled",
            "inputs": [
                {
                    "name": "reserve",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "user",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ReserveUsedAsCollateralEnabled",
            "inputs": [
                {
                    "name": "reserve",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "user",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
    ],
)


class LiquidationLogicContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the LiquidationLogic contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the CLOSE_FACTOR_HF_THRESHOLD() method."""

    _function_name = "CLOSE_FACTOR_HF_THRESHOLD"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = LiquidationLogicContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the CLOSE_FACTOR_HF_THRESHOLD method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "CLOSE_FACTOR_HF_THRESHOLD"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction0._type_signature: LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction0.factory(
                "LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction0",
                **kwargs,
            ),
        }
        return out


class LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the MAX_LIQUIDATION_CLOSE_FACTOR() method."""

    _function_name = "MAX_LIQUIDATION_CLOSE_FACTOR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = LiquidationLogicContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the MAX_LIQUIDATION_CLOSE_FACTOR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "MAX_LIQUIDATION_CLOSE_FACTOR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction0._type_signature: LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction0.factory(
                "LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction0",
                **kwargs,
            ),
        }
        return out


class LiquidationLogicContractFunctions(ContractFunctions):
    """ContractFunctions for the LiquidationLogic contract."""

    CLOSE_FACTOR_HF_THRESHOLD: (
        LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction
    )

    MAX_LIQUIDATION_CLOSE_FACTOR: (
        LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction
    )

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.CLOSE_FACTOR_HF_THRESHOLD = (
            LiquidationLogicCLOSE_FACTOR_HF_THRESHOLDContractFunction.factory(
                "CLOSE_FACTOR_HF_THRESHOLD",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="CLOSE_FACTOR_HF_THRESHOLD",
            )
        )
        self.MAX_LIQUIDATION_CLOSE_FACTOR = LiquidationLogicMAX_LIQUIDATION_CLOSE_FACTORContractFunction.factory(
            "MAX_LIQUIDATION_CLOSE_FACTOR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="MAX_LIQUIDATION_CLOSE_FACTOR",
        )


class LiquidationLogicIsolationModeTotalDebtUpdatedContractEvent(ContractEvent):
    """ContractEvent for IsolationModeTotalDebtUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[IsolationModeTotalDebtUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            IsolationModeTotalDebtUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=IsolationModeTotalDebtUpdatedEvent.IsolationModeTotalDebtUpdatedEventArgs(
                    asset=abi_event.args["asset"],
                    totalDebt=abi_event.args["totalDebt"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[IsolationModeTotalDebtUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            IsolationModeTotalDebtUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=IsolationModeTotalDebtUpdatedEvent.IsolationModeTotalDebtUpdatedEventArgs(
                    asset=abi_event.args["asset"],
                    totalDebt=abi_event.args["totalDebt"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class LiquidationLogicLiquidationCallContractEvent(ContractEvent):
    """ContractEvent for LiquidationCall."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LiquidationCallEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LiquidationCallEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LiquidationCallEvent.LiquidationCallEventArgs(
                    collateralAsset=abi_event.args["collateralAsset"],
                    debtAsset=abi_event.args["debtAsset"],
                    user=abi_event.args["user"],
                    debtToCover=abi_event.args["debtToCover"],
                    liquidatedCollateralAmount=abi_event.args[
                        "liquidatedCollateralAmount"
                    ],
                    liquidator=abi_event.args["liquidator"],
                    receiveAToken=abi_event.args["receiveAToken"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LiquidationCallEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LiquidationCallEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LiquidationCallEvent.LiquidationCallEventArgs(
                    collateralAsset=abi_event.args["collateralAsset"],
                    debtAsset=abi_event.args["debtAsset"],
                    user=abi_event.args["user"],
                    debtToCover=abi_event.args["debtToCover"],
                    liquidatedCollateralAmount=abi_event.args[
                        "liquidatedCollateralAmount"
                    ],
                    liquidator=abi_event.args["liquidator"],
                    receiveAToken=abi_event.args["receiveAToken"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class LiquidationLogicReserveDataUpdatedContractEvent(ContractEvent):
    """ContractEvent for ReserveDataUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ReserveDataUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveDataUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveDataUpdatedEvent.ReserveDataUpdatedEventArgs(
                    reserve=abi_event.args["reserve"],
                    liquidityRate=abi_event.args["liquidityRate"],
                    stableBorrowRate=abi_event.args["stableBorrowRate"],
                    variableBorrowRate=abi_event.args["variableBorrowRate"],
                    liquidityIndex=abi_event.args["liquidityIndex"],
                    variableBorrowIndex=abi_event.args["variableBorrowIndex"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ReserveDataUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveDataUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveDataUpdatedEvent.ReserveDataUpdatedEventArgs(
                    reserve=abi_event.args["reserve"],
                    liquidityRate=abi_event.args["liquidityRate"],
                    stableBorrowRate=abi_event.args["stableBorrowRate"],
                    variableBorrowRate=abi_event.args["variableBorrowRate"],
                    liquidityIndex=abi_event.args["liquidityIndex"],
                    variableBorrowIndex=abi_event.args["variableBorrowIndex"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class LiquidationLogicReserveUsedAsCollateralDisabledContractEvent(
    ContractEvent
):
    """ContractEvent for ReserveUsedAsCollateralDisabled."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ReserveUsedAsCollateralDisabledEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveUsedAsCollateralDisabledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveUsedAsCollateralDisabledEvent.ReserveUsedAsCollateralDisabledEventArgs(
                    reserve=abi_event.args["reserve"],
                    user=abi_event.args["user"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ReserveUsedAsCollateralDisabledEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveUsedAsCollateralDisabledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveUsedAsCollateralDisabledEvent.ReserveUsedAsCollateralDisabledEventArgs(
                    reserve=abi_event.args["reserve"],
                    user=abi_event.args["user"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class LiquidationLogicReserveUsedAsCollateralEnabledContractEvent(
    ContractEvent
):
    """ContractEvent for ReserveUsedAsCollateralEnabled."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ReserveUsedAsCollateralEnabledEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveUsedAsCollateralEnabledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveUsedAsCollateralEnabledEvent.ReserveUsedAsCollateralEnabledEventArgs(
                    reserve=abi_event.args["reserve"],
                    user=abi_event.args["user"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ReserveUsedAsCollateralEnabledEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ReserveUsedAsCollateralEnabledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ReserveUsedAsCollateralEnabledEvent.ReserveUsedAsCollateralEnabledEventArgs(
                    reserve=abi_event.args["reserve"],
                    user=abi_event.args["user"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class LiquidationLogicContractEvents(ContractEvents):
    """ContractEvents for the LiquidationLogic contract."""

    IsolationModeTotalDebtUpdated: Type[
        LiquidationLogicIsolationModeTotalDebtUpdatedContractEvent
    ]

    LiquidationCall: Type[LiquidationLogicLiquidationCallContractEvent]

    ReserveDataUpdated: Type[LiquidationLogicReserveDataUpdatedContractEvent]

    ReserveUsedAsCollateralDisabled: Type[
        LiquidationLogicReserveUsedAsCollateralDisabledContractEvent
    ]

    ReserveUsedAsCollateralEnabled: Type[
        LiquidationLogicReserveUsedAsCollateralEnabledContractEvent
    ]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.IsolationModeTotalDebtUpdated = cast(
            Type[LiquidationLogicIsolationModeTotalDebtUpdatedContractEvent],
            LiquidationLogicIsolationModeTotalDebtUpdatedContractEvent.factory(
                "IsolationModeTotalDebtUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="IsolationModeTotalDebtUpdated",
            ),
        )
        self.LiquidationCall = cast(
            Type[LiquidationLogicLiquidationCallContractEvent],
            LiquidationLogicLiquidationCallContractEvent.factory(
                "LiquidationCall",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="LiquidationCall",
            ),
        )
        self.ReserveDataUpdated = cast(
            Type[LiquidationLogicReserveDataUpdatedContractEvent],
            LiquidationLogicReserveDataUpdatedContractEvent.factory(
                "ReserveDataUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ReserveDataUpdated",
            ),
        )
        self.ReserveUsedAsCollateralDisabled = cast(
            Type[LiquidationLogicReserveUsedAsCollateralDisabledContractEvent],
            LiquidationLogicReserveUsedAsCollateralDisabledContractEvent.factory(
                "ReserveUsedAsCollateralDisabled",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ReserveUsedAsCollateralDisabled",
            ),
        )
        self.ReserveUsedAsCollateralEnabled = cast(
            Type[LiquidationLogicReserveUsedAsCollateralEnabledContractEvent],
            LiquidationLogicReserveUsedAsCollateralEnabledContractEvent.factory(
                "ReserveUsedAsCollateralEnabled",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ReserveUsedAsCollateralEnabled",
            ),
        )


class LiquidationLogicContract(Contract):
    """A web3.py Contract class for the LiquidationLogic contract."""

    abi: ABI = liquidationlogic_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x6135bf61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806383c1087d14610050578063a18964a514610072578063d246754414610093575b600080fd5b81801561005c57600080fd5b5061007061006b36600461311a565b61009c565b005b610081670d2f13f7789f000081565b60405190815260200160405180910390f35b61008161271081565b6100a4612f62565b6040808301516001600160a01b039081166000908152602089815283822060608701518416835284832060808801519094168352908890529290206100e8826106e5565b61016085018190526100fb9083906108b5565b6101678989886040518060a001604052808660405180602001604052908160008201548152505081526020018a6000015181526020018a608001516001600160a01b031681526020018a60c001516001600160a01b031681526020018a60e0015160ff1681525061090d565b5060c08901819052610160890151610186955093508992509050610df4565b8660200187604001886060018381525083815250838152505050506101e881848460405180608001604052808961016001518152602001896040015181526020018960c0015181526020018a61010001516001600160a01b0316815250610e7a565b6101f38684876111e6565b60a08801526001600160a01b03908116610120880152908116610100870152908116610140860181905260808701516040516370a0823160e01b815292166004830152906370a0823190602401602060405180830381865afa15801561025d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102819190613205565b808552610160850151610100860151610120870151606088015160a089015160c08b01516102b6968a969594939290916112e6565b60e08701526060860181905260808601919091526040850151036102f15760038201546102f1908290600160a81b900461ffff1660006115fa565b835160e085015160808601516103079190613234565b03610372576003830154610329908290600160a81b900461ffff16600061165a565b84608001516001600160a01b031685604001516001600160a01b03167f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd60405160405180910390a35b61037c85856116ae565b6101608401516060808701519086015161039b928592909160006118c1565b6103b18989838761016001518860600151611be2565b8460a00151156103ce576103c9898989868989611d6f565b6103d9565b6103d9838686611f02565b60e0840151156105965760006103ee84611fb4565b90506000610409828760e0015161201e90919063ffffffff16565b6101408701516080890151604051630ed1279f60e11b81526001600160a01b039182166004820152929350600092911690631da24f3e90602401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190613205565b90508082111561049e57610498818461205d565b60e08801525b8661014001516001600160a01b031663f866c31989608001518961014001516001600160a01b031663ae1673356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190613247565b8a60e001516040518463ffffffff1660e01b8152600401610560939291906001600160a01b039384168152919092166020820152604081019190915260600190565b600060405180830381600087803b15801561057a57600080fd5b505af115801561058e573d6000803e3d6000fd5b505050505050505b6105c8338561016001516101e00151866060015188606001516001600160a01b03166120a1909392919063ffffffff16565b6101608401516101e00151608086015160608601516040516337ecbb3b60e11b81523360048201526001600160a01b0392831660248201526044810191909152911690636fd9767690606401600060405180830381600087803b15801561062e57600080fd5b505af1158015610642573d6000803e3d6000fd5b5050505084608001516001600160a01b031685606001516001600160a01b031686604001516001600160a01b03167fe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e00528687606001518860800151338b60a001516040516106d2949392919093845260208401929092526001600160a01b031660408301521515606082015260800190565b60405180910390a4505050505050505050565b6106ed612fe3565b6106f5612fe3565b60408051602081018252845481526101c0830181905251901c61ffff166101a082015260018301546001600160801b03808216610100840181905260e084015260028501548082166101408501819052610120850152600160801b928390048216610160850152829004166101808301526004808501546001600160a01b039081166101e085015260058601548116610200850152600686015416610220840181905260038601549290920464ffffffffff166102408401526040805163b1bf962d60e01b8152905163b1bf962d928281019260209291908290030181865afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190613205565b81602001818152508160000181815250508061020001516001600160a01b031663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190613264565b64ffffffffff166102608501526060840181905260808401829052604084019290925260c083015260a082015292915050565b600382015464ffffffffff428116600160801b90920416036108d5575050565b6108df8282612143565b6108e98282612223565b50600301805464ffffffffff60801b1916600160801b4264ffffffffff1602179055565b6000806000806000806109238760000151511590565b15610941575060009450849350839250829150600019905081610de7565b6109e36040518061026001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581526020016000151581525090565b608088015160ff1615610a2857608088015160ff16600090815260208a9052604090206060890151610a15919061238b565b6101808401526101c08301526101a08201525b87602001518160c001511015610d075760c08101518851610a4891612437565b610a5c5760c0810180516001019052610a28565b60c0810151600090815260208b905260409020546001600160a01b03166102008201819052610a955760c0810180516001019052610a28565b6102008101516001600160a01b0316600090815260208c8152604091829020825180830190935280549283905260ff60a884901c81166101e0860152603084901c166060850181905261ffff601085901c811660a08701529093166080850152600a9290920a9083015261018082015115801590610b1e5750816101e00151896080015160ff16145b610b9c57606089015161020083015160405163b3596f0760e01b81526001600160a01b03918216600482015291169063b3596f0790602401602060405180830381865afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190613205565b610ba3565b8161018001515b825260a082015115801590610bc3575060c08201518951610bc39161248a565b15610cb357610be0896040015182846000015185602001516124d9565b6040830181905261010083018051610bf9908390613234565b90525060808901516101e0830151610c149160ff169061258e565b1515610240830152608082015115610c6a57816102400151610c3a578160800151610c41565b816101a001515b8260400151610c5091906132af565b8261014001818151610c629190613234565b905250610c73565b60016102208301525b816102400151610c87578160a00151610c8e565b816101c001515b8260400151610c9d91906132af565b8261016001818151610caf9190613234565b9052505b60c08201518951610cc39161259f565b15610cf657610ce0896040015182846000015185602001516125ec565b8261012001818151610cf29190613234565b9052505b5060c0810180516001019052610a28565b806101000151600003610d1b576000610d36565b80610100015181610140015181610d3457610d346132c6565b045b610140820152610100810151600003610d50576000610d6b565b80610100015181610160015181610d6957610d696132c6565b045b61016082015261012081015115610dad57610da8816101200151610da283610160015184610100015161272090919063ffffffff16565b90612746565b610db1565b6000195b60e0820181905261010082015161012083015161014084015161016085015161022090950151929a509098509650919450925090505b9499939850945094509450565b6000806000806000610e0a87608001518961277d565b90925090506000610e1b8284613234565b90506000670d2f13f7789f00008811610e3657612710610e3a565b6113885b90506000610e488383612720565b90506000818b6020015111610e61578a60200151610e63565b815b949850929650929450505050505b93509350939050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152604080516020810190915284548152610ebd9061286e565b151560208601525050501515815281516101c00151610edb9061286e565b151560608601525050501515604082015280518015610efb575080604001515b60405180604001604052806002815260200161323760f01b81525090610f3d5760405162461bcd60e51b8152600401610f3491906132dc565b60405180910390fd5b508060200151158015610f5257508060600151155b60405180604001604052806002815260200161323960f01b81525090610f8b5760405162461bcd60e51b8152600401610f3491906132dc565b5060608201516001600160a01b03161580610fb15750670d2f13f7789f00008260400151105b8061101d575081606001516001600160a01b0316637a5d20ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d919061332b565b60405180604001604052806002815260200161353960f01b815250906110565760405162461bcd60e51b8152600401610f3491906132dc565b50600384015464ffffffffff428116600160b81b9092041610801561108f5750600383015464ffffffffff428116600160b81b90920416105b60405180604001604052806002815260200161393760f01b815250906110c85760405162461bcd60e51b8152600401610f3491906132dc565b50670de0b6b3a764000082604001511060405180604001604052806002815260200161343560f01b815250906111115760405162461bcd60e51b8152600401610f3491906132dc565b50604080516020810190915284549081905260101c61ffff161580159061115b5750600384015460408051602081019091528654815261115b91600160a81b900461ffff1661248a565b1515608082018190526040805180820190915260028152611a1b60f11b60208201529061119b5760405162461bcd60e51b8152600401610f3491906132dc565b5081602001516000141560405180604001604052806002815260200161343760f01b815250906111de5760405162461bcd60e51b8152600401610f3491906132dc565b505050505050565b6004820154604080516020808201835285549182905291840151606085015160e08601516000958695869586956001600160a01b0390931694911c61ffff169260ff16156112d55760e08901805160ff908116600090815260208e815260409182902054935182519182019092528d549081905266010000000000009093046001600160a01b031692611283929182169160a89190911c1661258e565b156112c05760e08a015160ff16600090815260208d90526040902054640100000000900461ffff1693506001600160a01b038116156112c0578092505b6001600160a01b038116156112d3578091505b505b929a90995091975095509350505050565b6000806000611356604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405163b3596f0760e01b81526001600160a01b038b8116600483015286169063b3596f0790602401602060405180830381865afa15801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c09190613205565b815260405163b3596f0760e01b81526001600160a01b038a8116600483015286169063b3596f0790602401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c9190613205565b6020828101919091526040805191820190528c549081905260301c60ff1660c08201526101c08b01515160301c60ff1660a0820181905260c0820151600a90810a60e08401520a61010082015260408051602081019091528c549081905260981c61ffff1661016082015261010081015181516114a991906132af565b8160e001518983602001516114be91906132af565b6114c891906132af565b6114d29190613348565b606082018190526114e39087612720565b6040820181905287101561155057610120810187905260e0810151602082015161154591889161151391906132af565b610100840151610120850151855161152b91906132af565b61153591906132af565b61153f9190613348565b906128b6565b610140820152611564565b604081015161012082015261014081018890525b610160810151156115d65761012081015161157f90876128b6565b81610120015161158f919061336a565b608082018190526101608201516115a69190612720565b61018082018190526101208201516115be919061336a565b816101400151826101800151935093509350506115ec565b8061012001518161014001516000935093509350505b985098509895505050505050565b6040805180820190915260028152610dcd60f21b6020820152608083106116345760405162461bcd60e51b8152600401610f3491906132dc565b50600182811b1b811561164c57835481178455611654565b835481191684555b50505050565b6040805180820190915260028152610dcd60f21b6020820152608083106116945760405162461bcd60e51b8152600401610f3491906132dc565b50600182811b81011b811561164c57835481178455611654565b8060600151816020015110611760576101608101516102208101516080840151606084015161014090930151604051637a94c56560e11b81526001600160a01b03928316600482015260248101949094526044840152169063f5298aca906064016020604051808303816000875af115801561172e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117529190613205565b610160820151602001525050565b60208101511561180a576101608101516102208101516080840151602084015161014090930151604051637a94c56560e11b81526001600160a01b03928316600482015260248101949094526044840152169063f5298aca906064016020604051808303816000875af11580156117db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ff9190613205565b610160820151602001525b80610160015161020001516001600160a01b0316639dc29fac83608001518360200151846060015161183c919061336a565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160408051808303816000875af1158015611886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118aa919061337d565b61016083015160a081019190915260c001525b5050565b6118ec6040518060800160405280600081526020016000815260200160008152602001600081525090565b61014085015160208601516119009161205d565b60608281019182526007880154604080516101408101825260088b01546001600160801b03600160801b918290048116835260208084018b90528385018a905260c08d810151978501979097529651608084015260a0808d0151908401526101a08c0151958301959095526001600160a01b038a811660e0840152835196870184528c5496879052600160fc1b909616151561010083015260098c01540490931661012084015251637b424dcf60e11b815292169163f6849b9e916119c7916004016133a1565b606060405180830381865afa1580156119e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a089190613424565b60408401526020830152808252611a1e906128e1565b6001870180546001600160801b03928316600160801b0292169190911790556020810151611a4b906128e1565b6003870180546001600160801b0319166001600160801b03929092169190911790556040810151611a7b906128e1565b6002870180546001600160801b03928316600160801b029216919091179055604080516020810190915286548152611ab99051600160fc1b16151590565b15611b6e578215611b1657611acd836128e1565b600987018054601090611af1908490600160801b90046001600160801b0316613452565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b8115611b6e57611b25826128e1565b600987018054601090611b49908490600160801b90046001600160801b0316613479565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b80516020808301516040808501516101008a01516101408b015183519687529486019390935290840152606083015260808201526001600160a01b038516907f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a9060a00160405180910390a2505050505050565b6040805160208101909152835481526000908190611c0190888861294e565b50915091508115611d66576001600160a01b0381166000908152602088905260408120600901546101c0860151516001600160801b039091169190611c6d9060029060301c60ff16611c53919061336a565b611c5e90600a61357d565b611c689087613348565b6128e1565b9050806001600160801b0316826001600160801b031611611ce6576001600160a01b038316600081815260208b8152604080832060090180546001600160801b0319169055519182527faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5910160405180910390a2611d63565b6000611cf28284613479565b6001600160a01b038516600081815260208d815260409182902060090180546001600160801b0319166001600160801b03959095169485179055905183815292935090917faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5910160405180910390a2505b50505b50505050505050565b6101408101516040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddf9190613205565b6101408301516080808601519085015160405163f866c31960e01b81526001600160a01b0392831660048201523360248201526044810191909152929350169063f866c31990606401600060405180830381600087803b158015611e4257600080fd5b505af1158015611e56573d6000803e3d6000fd5b5050505080600003611d665733600090815260208681526040918290208251918201909252855481526004860154611e9c918a918a9185916001600160a01b03166129f6565b15611ef8576003850154611ebe908290600160a81b900461ffff16600161165a565b604080850151905133916001600160a01b0316907e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f290600090a35b5050505050505050565b6000611f0d846106e5565b9050611f1984826108b5565b60408301516080830151611f349186918491906000906118c1565b61014082015160808085015190840151610100840151604051636b81068560e11b81526001600160a01b0393841660048201523360248201526044810192909252606482015291169063d7020d0a90608401600060405180830381600087803b158015611fa057600080fd5b505af1158015611ef8573d6000803e3d6000fd5b6003810154600090600160801b900464ffffffffff16428103611fe3575050600101546001600160801b031690565b6001830154612011906001600160801b038082169161200b91600160801b9091041684612beb565b9061205d565b9392505050565b50919050565b600081156b033b2e3c9fd0803ce80000006002840419048411171561204257600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b600081156b019d971e4fe8401e74000000198390048411151761207f57600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af16120e6573d6000803e3d6000fd5b506120f085612c28565b61213c5760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610f34565b5050505050565b610160810151156121b2576000612164826101600151836102400151612beb565b905061217d8260e001518261205d90919063ffffffff16565b610100830181905261218e906128e1565b6001840180546001600160801b0319166001600160801b0392909216919091179055505b8051156118bd5760006121cf826101800151836102400151612cce565b90506121e98261012001518261205d90919063ffffffff16565b61014083018190526121fa906128e1565b6002840180546001600160801b03929092166001600160801b0319909216919091179055505050565b61225c6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b816101a0015160000361226e57505050565b610120820151825161227f9161205d565b602082015261014082015182516122959161205d565b604082015260608201516102608301516102408401516122bd92919064ffffffffff16612cd7565b6060820181905260408301516122d29161205d565b8082526020820151608084015160408401516122ee9190613234565b6122f8919061336a565b612302919061336a565b608082018190526101a08301516123199190612720565b60a082018190521561238657612344611c688361010001518360a0015161201e90919063ffffffff16565b6008840180546000906123619084906001600160801b0316613452565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b505050565b8154600090819081908190660100000000000090046001600160a01b0316801561241c5760405163b3596f0760e01b81526001600160a01b03828116600483015287169063b3596f0790602401602060405180830381865afa1580156123f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124199190613205565b91505b50945461ffff80821697620100009092041695945092505050565b6040805180820190915260028152610dcd60f21b6020820152600090608083106124745760405162461bcd60e51b8152600401610f3491906132dc565b50508151600182901b1c60031615155b92915050565b6040805180820190915260028152610dcd60f21b6020820152600090608083106124c75760405162461bcd60e51b8152600401610f3491906132dc565b50509051600191821b82011c16151590565b6000806124e585611fb4565b600486810154604051630ed1279f60e11b81526001600160a01b038a8116938201939093529293506000928792612565928692911690631da24f3e90602401602060405180830381865afa158015612541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200b9190613205565b61256f91906132af565b9050838181612580576125806132c6565b04925050505b949350505050565b600082158015906120115750501490565b6040805180820190915260028152610dcd60f21b6020820152600090608083106125dc5760405162461bcd60e51b8152600401610f3491906132dc565b50509051600191821b1c16151590565b6006830154604051630ed1279f60e11b81526001600160a01b0386811660048301526000928392911690631da24f3e90602401602060405180830381865afa15801561263c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126609190613205565b9050801561267e5761267b61267486612e03565b829061205d565b90505b60058501546040516370a0823160e01b81526001600160a01b038881166004830152909116906370a0823190602401602060405180830381865afa1580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee9190613205565b6126f89082613234565b905061270481856132af565b9050828181612715576127156132c6565b049695505050505050565b60008115611388198390048411151761273857600080fd5b506127109102611388010490565b60008115670de0b6b3a76400006002840419048411171561276657600080fd5b50670de0b6b3a76400009190910260028204010490565b6102008101516040516370a0823160e01b81526001600160a01b03848116600483015260009283929116906370a0823190602401602060405180830381865afa1580156127ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f29190613205565b6102208401516040516370a0823160e01b81526001600160a01b038781166004830152909116906370a0823190602401602060405180830381865afa15801561283f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128639190613205565b915091509250929050565b51670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b60008115612710600284041904841117156128d057600080fd5b506127109190910260028204010490565b60006001600160801b0382111561294a5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610f34565b5090565b600080600061295c86612e5a565b156129e657600061298d877faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa612e9e565b600081815260208781526040808320546001600160a01b03168084528a8352818420825193840190925290549182905292935060d41c64ffffffffff16905080156129e257600195509093509150610e719050565b5050505b5060009586955085945092505050565b815160009060d41c64ffffffffff1615612bd3576000826001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6e9190613247565b6001600160a01b0316630542975c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612acf9190613247565b9050806001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b339190613247565b604051632474521560e21b81527fd1d2cf869016112a9af1107bcf43c3759daf22cf734aad47d0c9c726e33bc78260048201523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc3919061332b565b612bd1576000915050612be2565b505b612bdf86868686612ec4565b90505b95945050505050565b600080612bff64ffffffffff84164261336a565b612c0990856132af565b6301e1338090049050612586816b033b2e3c9fd0803ce8000000613234565b6000612c4d565b62461bcd60e51b600052602060045280602452508060445260646000fd5b3d8015612c8c5760208114612cbd57612c877f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612c2f565b612018565b823b612cb457612cb47311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014612c2f565b60019150612018565b3d6000803e50506000511515919050565b60006120118383425b600080612ceb64ffffffffff85168461336a565b905080600003612d0a576b033b2e3c9fd0803ce8000000915050612011565b60001981016000808060028511612d22576000612d27565b600285035b925066038882915c4000612d3b8a8061205d565b81612d4857612d486132c6565b0491506301e13380612d5a838b61205d565b81612d6757612d676132c6565b049050600082612d7786886132af565b612d8191906132af565b60029004905060008285612d95888a6132af565b612d9f91906132af565b612da991906132af565b60069004905080826301e13380612dc08a8f6132af565b612dca9190613348565b612de0906b033b2e3c9fd0803ce8000000613234565b612dea9190613234565b612df49190613234565b9b9a5050505050505050505050565b6003810154600090600160801b900464ffffffffff16428103612e32575050600201546001600160801b031690565b6002830154612011906001600160801b038082169161200b91600160801b9091041684612cce565b80516000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1680158015906120115750612e9660018261336a565b161592915050565b815160009082166000198101198116825b60029190911c908115612be257600101612eaf565b6000612ed2825161ffff1690565b600003612ee157506000612586565b60408051602081019091528354908190527faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa16612f2057506001612586565b604080516020810190915283548152600090612f3d90878761294e565b5050905080158015612f585750825160d41c64ffffffffff16155b9695505050505050565b604051806101800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001612fde612fe3565b905290565b60405180610280016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016130676040518060200160405280600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b604051610120810167ffffffffffffffff811182821017156130c257634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b03811681146130dd57600080fd5b50565b80356130eb816130c8565b919050565b80151581146130dd57600080fd5b80356130eb816130f0565b803560ff811681146130eb57600080fd5b60008060008060008587036101a081121561313457600080fd5b8635955060208701359450604087013593506060870135925061012080607f198301121561316157600080fd5b613169613090565b91506080880135825260a0880135602083015261318860c089016130e0565b604083015261319960e089016130e0565b60608301526101006131ac818a016130e0565b60808401526131bc828a016130fe565b60a08401526131ce6101408a016130e0565b60c08401526131e06101608a01613109565b60e08401526131f26101808a016130e0565b9083015250949793965091945092919050565b60006020828403121561321757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156124845761248461321e565b60006020828403121561325957600080fd5b8151612011816130c8565b6000806000806080858703121561327a57600080fd5b845193506020850151925060408501519150606085015164ffffffffff811681146132a457600080fd5b939692955090935050565b80820281158282048414176124845761248461321e565b634e487b7160e01b600052601260045260246000fd5b60006020808352835180602085015260005b8181101561330a578581018301518582016040015282016132ee565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561333d57600080fd5b8151612011816130f0565b60008261336557634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156124845761248461321e565b6000806040838503121561339057600080fd5b505080516020909101519092909150565b600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161340460e08401826001600160a01b03169052565b506101008381015180151584830152505061012092830151919092015290565b60008060006060848603121561343957600080fd5b8351925060208401519150604084015190509250925092565b6001600160801b038181168382160190808211156134725761347261321e565b5092915050565b6001600160801b038281168282160390808211156134725761347261321e565b600181815b808511156134d45781600019048211156134ba576134ba61321e565b808516156134c757918102915b93841c939080029061349e565b509250929050565b6000826134eb57506001612484565b816134f857506000612484565b816001811461350e576002811461351857613534565b6001915050612484565b60ff8411156135295761352961321e565b50506001821b612484565b5060208310610133831016604e8410600b8410161715613557575081810a612484565b6135618383613499565b80600019048211156135755761357561321e565b029392505050565b600061201183836134dc56fea264697066735822122059852395e4737ae4c05e7afb926c92f257bf60919e9f182d13fa17dfb8a45f3464736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = LiquidationLogicContractFunctions(liquidationlogic_abi, self.w3, address)  # type: ignore
        self.events = LiquidationLogicContractEvents(liquidationlogic_abi, self.w3, address)  # type: ignore

    events: LiquidationLogicContractEvents

    functions: LiquidationLogicContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = LiquidationLogicContractFunctions(
            liquidationlogic_abi, w3, None
        )

        return contract
