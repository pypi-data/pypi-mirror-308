"""A web3.py Contract class for the EzETHTarget2Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.47.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

ezethtarget2deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_restakeManager",
                    "type": "address",
                    "internalType": "contract IRestakeManager",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {"name": "", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "restakeManager",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IRestakeManager",
                }
            ],
            "stateMutability": "view",
        },
    ],
)


class EzETHTarget2DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the EzETHTarget2Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class EzETHTarget2DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )
    _error_class = EzETHTarget2DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHTarget2DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, arg3: bytes, _salt: bytes) -> EzETHTarget2DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EzETHTarget2DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EzETHTarget2DeployerDeployTargetContractFunction0._type_signature: EzETHTarget2DeployerDeployTargetContractFunction0.factory(
                "EzETHTarget2DeployerDeployTargetContractFunction0", **kwargs
            ),
        }
        return out


class EzETHTarget2DeployerRestakeManagerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the restakeManager() method."""

    _function_name = "restakeManager"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EzETHTarget2DeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHTarget2DeployerRestakeManagerContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the restakeManager method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "restakeManager"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EzETHTarget2DeployerRestakeManagerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EzETHTarget2DeployerRestakeManagerContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            EzETHTarget2DeployerRestakeManagerContractFunction0._type_signature: EzETHTarget2DeployerRestakeManagerContractFunction0.factory(
                "EzETHTarget2DeployerRestakeManagerContractFunction0", **kwargs
            ),
        }
        return out


class EzETHTarget2DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the EzETHTarget2Deployer contract."""

    deployTarget: EzETHTarget2DeployerDeployTargetContractFunction

    restakeManager: EzETHTarget2DeployerRestakeManagerContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            EzETHTarget2DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )
        self.restakeManager = (
            EzETHTarget2DeployerRestakeManagerContractFunction.factory(
                "restakeManager",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="restakeManager",
            )
        )


class EzETHTarget2DeployerContract(Contract):
    """A web3.py Contract class for the EzETHTarget2Deployer contract."""

    abi: ABI = ezethtarget2deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612013929190613a37565b6040805180830381865af415801561202f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120539190613aad565b9150915061207161206382611aec565b61206c90613ad1565b612c0c565b92508261208757600096505050505050506106ba565b61209082611836565b600780546000906120ab9084906001600160801b0316613889565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506120d881611836565b600780546010906120fa908490600160801b90046001600160801b0316613889565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61215787612da4565b6040518263ffffffff1660e01b81526004016121739190613aed565b6040805180830381865af415801561218f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b39190613afc565b91509150806121c9575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161222f916136ed565b612239919061380e565b90508060000361225157506000958695509350505050565b600080871161226157600061226c565b61226c8488846117c1565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156122a0576122a0613b2c565b6040519080825280601f01601f1916602001820160405280156122ca576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156122eb578692505b828152826000602083013e90999098509650505050505050565b600061232687878761231f88670de0b6b3a764000061380e565b8787612ede565b979650505050505050565b600061154a61237261234b84670de0b6b3a764000061380e565b611488670de0b6b3a7640000612361818a61149f565b61236b919061380e565b87906125b7565b61238490670de0b6b3a76400006136ed565b611ca284670de0b6b3a764000061380e565b6000806123cd856123a56117f5565b6123af91906136ed565b600254610ef2908790600160801b90046001600160801b031661380e565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000806000806000612404898789612f01565b9092509050612413828961380e565b9750600061242282888a6117c1565b905061242e818b61380e565b9a989950979650505050505050565b60008260000361244e57508461182d565b81156124a15761247f61246184876136ed565b61246b85876106a2565b612475888a6106a2565b611ca291906136ed565b9050600061248d8588611864565b90508082101561249b578091505b5061182d565b8285036124b05750600061182d565b6124db6124bd848761380e565b6124c785876125b7565b6124d1888a6106a2565b611ca2919061380e565b9695505050505050565b600061250d600b60006124f9600286611229565b815260200190815260200160002054611aec565b61251f600b60006124f9600187611229565b6106ba91906138a9565b60006125557f0000000000000000000000000000000000000000000000000000000000000000836125b7565b60035461256b91906001600160801b03166136ed565b600254612581906001600160801b0316846106a2565b101592915050565b60006106ba826004611f34565b60006123268787876125b088670de0b6b3a764000061380e565b8787612f81565b60006106b78383670de0b6b3a7640000612711565b600080808061261d87866126168b6114886125ef8c670de0b6b3a764000061380e565b7f0000000000000000000000000000000000000000000000000000000000000000906125b7565b9190612711565b9350612649847f00000000000000000000000000000000000000000000000000000000000000006106a2565b9150600061266a61266289670de0b6b3a764000061380e565b8a9088612711565b9050612696817f00000000000000000000000000000000000000000000000000000000000000006125b7565b93506126c2847f00000000000000000000000000000000000000000000000000000000000000006106a2565b6126cc90846136ed565b915050945094509450949050565b60008183116126e957816106b7565b5090919050565b600080612708846127028a888a612711565b9061149f565b9050611cb58884865b600082600019048411830215820261272857600080fd5b50910281810615159190040190565b600080846001600160a01b031663ff9969cd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612778573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127a09190810190613bfb565b925050506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128089190613cdb565b604051630c5c83cb60e41b81526004810186905260248101829052604481018490529091506001600160a01b0388169063c5c83cb090606401602060405180830381865afa15801561285e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123269190613cdb565b60006106b783670de0b6b3a7640000846117c1565b6000806128a48484612f92565b9092509050806128b6576128b66123d8565b5092915050565b6000816000036128d65750670de0b6b3a76400006106ba565b826000036128e6575060006106ba565b60006128f183611aec565b9050600061290661290186611aec565b612fce565b905081810261291d670de0b6b3a764000082613cf4565b90506124db816131f4565b600060016001607f1b038211156118605760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612970575060016001607f1b0382135b156118605760405163a5353be560e01b815260040160405180910390fd5b60008061299c846000613389565b6129a7846000613389565b6129b191906138a9565b905060008113156129cd576129c681866136ed565b94506129ec565b60008112156129ec576129df81613ad1565b6129e9908661380e565b94505b50929392505050565b6003546000908190612a10906001600160801b03168461149f565b9050612a3c7f0000000000000000000000000000000000000000000000000000000000000000826136ed565b6002546001600160801b03161115611873576002547f000000000000000000000000000000000000000000000000000000000000000090612a879083906001600160801b031661380e565b61154d919061380e565b612a996135c5565b600080612aa584612da4565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612ae09190613aed565b6040805180830381865af4158015612afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b209190613afc565b9350905082612b35575060009150612c049050565b6000612b5c612b578461016001518561014001516106a290919063ffffffff16565b611aec565b612b7c612b578561012001518661010001516125b790919063ffffffff16565b612b8691906138a9565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = EzETHTarget2DeployerContractFunctions(ezethtarget2deployer_abi, self.w3, address)  # type: ignore

    functions: EzETHTarget2DeployerContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        restakeManager: str

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, restakeManager: str, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(dataclass_to_tuple(restakeManager))

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args, link_references
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = EzETHTarget2DeployerContractFunctions(
            ezethtarget2deployer_abi, w3, None
        )

        return contract
