[tool.poetry]
name = "pipekit-sdk"
version = "2.1.0"
description = "Pipekit Python SDK"
authors = ["Pipekit <ci@pipekit.io>"]
license = "BSD-3-Clause"
readme = "README.md"
homepage = "https://pipekit.io"
documentation = "https://docs.pipekit.io/"
keywords = [
    "pipekit",
    "hera",
    "argo",
    "workflows",
    "orchestration",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
packages = [
    { include = "pipekit_sdk", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.8,<4"
hera = ">=5.5.2"
pydantic = "<3"
responses = "^0.25.3"
pyjwt = "^2.9.0"

[tool.poetry.group.dev.dependencies]
ruff = "*"
mypy = "^1.11.0"
pytest = "^8.3.1"
hera = {extras = ["cli"], version = "^5.16.1"}
types-requests = "^2.32.0.20240712"
datamodel-code-generator = {extras = ["http"], version = "^0.26.0"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 119
show-fixes = true
target-version = "py38"
src = ["src"]

[tool.ruff.lint]
select = ["E", "F", "D", "I"]  # Use pycodestyle, pyflakes, pydocstyle and isort rules https://docs.astral.sh/ruff/rules/
ignore = ["E501"]  # ignore line too long (80 chars)

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D"]
"examples/**" = ["D"]
"src/pipekit_sdk/models/**" = ["D"]
"*.ipynb" = ["D"]
"**/__init__.py" = ["F401", "D107"]

[tool.mypy]
mypy_path = "src"