# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-10-29T13:57:28+00:00

from __future__ import annotations

import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field, RootModel
from typing_extensions import Annotated, Literal


class Account(BaseModel):
    alias: Annotated[str, Field(title="Alias")]
    public_key: Annotated[str, Field(title="Public Key")]
    org: Annotated[Optional[str], Field(None, title="Org")]


class AccountOwner(BaseModel):
    type: Annotated[str, Field(title="Type")]
    identifier: Annotated[str, Field(title="Identifier")]


class AddAccount(BaseModel):
    """
    - `address`: str that specifies the address to be added to the DID
    - `transfer`: bool that specifies whether ownership of the DID should be transferred to the 'address' field
    """

    address: Annotated[str, Field(title="Address")]
    transfer: Annotated[Optional[bool], Field(False, title="Transfer")]


class BlocksAccount(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    network: Annotated[str, Field(title="Network")]
    nickname: Annotated[str, Field(title="Nickname")]
    alias: Annotated[str, Field(title="Alias")]
    public_key: Annotated[str, Field(title="Public Key")]
    owner: AccountOwner
    created_by: Annotated[Optional[str], Field(None, title="Created By")]
    modified_by: Annotated[Optional[str], Field(None, title="Modified By")]
    created_on: Annotated[datetime.datetime, Field(title="Created On")]
    updated_on: Annotated[datetime.datetime, Field(title="Updated On")]


class Claim(BaseModel):
    subject: Annotated[str, Field(title="Subject")]
    property: Annotated[str, Field(title="Property")]
    value: Annotated[
        Optional[Union[Dict[str, Any], str, int, bool]], Field(None, title="Value")
    ]
    claim_schema: Annotated[Optional[str], Field(None, title="Claim Schema")]


class ClaimAttribute(BaseModel):
    id: Annotated[str, Field(title="Id")]
    name: Annotated[str, Field(title="Name")]
    type: Annotated[str, Field(title="Type")]
    hash: Annotated[str, Field(title="Hash")]
    suggestedValues: Annotated[
        Optional[List[Union[str, int]]], Field(None, title="Suggestedvalues")
    ]


class ClaimSchemaInfo(BaseModel):
    name: Annotated[str, Field(title="Name")]
    id: Annotated[str, Field(title="Id")]
    hash: Annotated[str, Field(title="Hash")]
    attributes: Annotated[Optional[List[ClaimAttribute]], Field([], title="Attributes")]


class CreateAccountHttp(BaseModel):
    domain: Annotated[
        str,
        Field(
            examples=["[str] Domain name to be used to look up the blockchain."],
            title="Domain",
        ),
    ]
    trust_profile: Annotated[
        Optional[str],
        Field(
            None,
            examples=[
                "Optional[str] TrustProfile name to be used to look up the blockchain."
            ],
            title="Trust Profile",
        ),
    ]
    nickname: Annotated[
        str, Field(examples=["[str] A name for your new account."], title="Nickname")
    ]
    alias: Annotated[
        Optional[str],
        Field(
            None,
            examples=[
                "Optional[str] An alternate name by which this account will be known."
            ],
            title="Alias",
        ),
    ]


class PublicName(RootModel[str]):
    root: Annotated[
        str, Field(max_length=40, min_length=4, pattern="^[^#]*$", title="Public Name")
    ]


class CreateVCHttp(BaseModel):
    """
    Input model for VC creation:

    - `tags`: Tags are lower-case keywords used to aid object searching and grouping.
    - `material`: Proof challenge inputs, used to add the proof to the VC:
    - `context`: A list of IRIs that define the JSON-LD schema definitions used by this VC, including the
    claim schemas for the included claims.
    - `issuer`: The issuer DID-string ID.
    - `subject`: The `credentialSubject` DID-string ID.
    - `valid_from`: Date-time from which this VC is valid.
    - `valid_until`: Expiry date-time of this VC.
    - `type`: Optional a list of identifiers that detail the type of this `verifiableCredential`. Defaults to `["VerifiableCredential"]`
    - `claims`: A dictionary of `{property:` [ClaimValue][credential_service.domain.models.ClaimValue]`}` that represent
    individual claims about the `credentialSubject`. **Property** is the type of claim being made, e.g., **familyName**
    or **degree** and `ClaimValue` is the property's attribute value, (type: _bool_, _numeric_, _string_ or
    _Dict[str, str]_) and associated `claim_schema`.

        Example:

        ```
        "claims"={
            "degree": {
                "value": {
                "name": "Bachelor of Science and Arts",
                "type": "BachelorDegree"
              },
              "claim_schema": null
            }
        }
        ```
    """

    field_context: Annotated[
        Optional[List[Union[str, Dict[str, Any]]]],
        Field(
            ["https://www.w3.org/2018/credentials/v1"],
            alias="@context",
            title="@Context",
        ),
    ]
    id: Annotated[
        Optional[str],
        Field(
            None, examples=["http://university.example/credentials/1872"], title="Id"
        ),
    ]
    subject: Annotated[
        str,
        Field(
            examples=[
                "did:smb1:1337:0xfc98c982ca22ea0141c3452325c372ff728e9ccd:18322500091651578819492444870201097984271428616569706638674662898632050307982"
            ],
            title="Subject",
        ),
    ]
    valid_from: Annotated[
        Optional[datetime.datetime],
        Field(
            "2024-10-28T18:07:31.165662+00:00",
            examples=["2024-03-08T01:37:35.899Z"],
            title="Valid From",
        ),
    ]
    valid_until: Annotated[
        Optional[datetime.datetime],
        Field(
            "9999-12-31T23:59:59.999999+00:00",
            examples=["2026-03-08T01:37:35.899Z"],
            title="Valid Until",
        ),
    ]
    type: Annotated[Optional[List[str]], Field(["VerifiableCredential"], title="Type")]
    claims: Annotated[
        Optional[Dict[str, Dict[str, Any]]],
        Field(
            None,
            examples=[
                {
                    "https://www.w3.org/2018/credentials/examples/v1": {
                        "degree": {
                            "name": "Bachelor of Science and Arts",
                            "type": "BachelorDegree",
                        }
                    }
                }
            ],
            title="Claims",
        ),
    ]
    tags: Annotated[Optional[List[str]], Field(None, title="Tags")]
    issuer: Annotated[
        str,
        Field(
            examples=[
                "did:smb1:1337:0xea0fc982ca22ea0141c3452325c372ff728e9ccd:18322500091651578819492444870201097984271428616569706638674662898632050307001"
            ],
            title="Issuer",
        ),
    ]
    material: Annotated[Optional[Dict[str, Any]], Field({}, title="Material")]


class CreateVPHttp(BaseModel):
    """
    Input model for create_vp:

    - `vc_id`: the MongoDB ObjectID of the [VC][credential_service.domain.models.VerifiableCredential] being presented.
    - `proof_type`: The type of cryptographic proof that should be generated.
    - `material`: Proof challenge inputs, used to add the proof to the VP.
    - `claims`: An optional set of claims to include in the VP.
    """

    vc_id: Annotated[str, Field(title="Vc Id")]
    proof_type: Annotated[str, Field(title="Proof Type")]
    material: Annotated[Optional[Dict[str, Any]], Field({}, title="Material")]
    claims: Annotated[Optional[List[str]], Field(None, title="Claims")]


class CredReg(str, Enum):
    inmemory = "inmemory"
    FederatedRegistry = "FederatedRegistry"
    MSCRegistry = "MSCRegistry"
    NFTRegistry = "NFTRegistry"
    STDRegistry = "STDRegistry"
    WalletRegistry = "WalletRegistry"


class CredentialSchema(BaseModel):
    """
    both the @context and credentialSchema properties in a VC
    say where the definitions of VC properties can be found on the internet.
    credential_schema may be preferable to @context for non JSON-LD users
    """

    id: Annotated[str, Field(title="Id")]
    type: Annotated[str, Field(title="Type")]


class CredentialStatus(BaseModel):
    """
    id: property is the unique URL for this credential status instance:
        it is where the verifier can get the status information for this VC
    type: states the type of credential status, which in turn dictates
        what other properties this property should have
        NOTE: in actual object, this is called "type"
    """

    id: Annotated[str, Field(title="Id")]
    type: Annotated[str, Field(title="Type")]


class CredentialSubject(BaseModel):
    """
    This object contains the actual claims in a verifiable credential

    id: id of the subject of the credential
    current_status: this is mainly used for disputes, eg "Disputed"
    status_reason: this is main used for disputes, and explains reason for current_status

    NOTE: many more fields are allowable in CredentialSubject
    """

    id: Annotated[str, Field(title="Id")]
    type: Annotated[Optional[Union[List[str], str]], Field(None, title="Type")]
    currentStatus: Annotated[Optional[str], Field(None, title="Currentstatus")]
    statusReason: Annotated[Optional[str], Field(None, title="Statusreason")]
    claims: Annotated[Optional[Dict[str, Claim]], Field({}, title="Claims")]


class DIDAddedAccount(BaseModel):
    address: Annotated[str, Field(title="Address")]
    key_ref: Annotated[str, Field(title="Key Ref")]


class DIDResponseType(str, Enum):
    """
    Enum:
        - `SIMPLE`: Includes, DID-String, nickname, public_name and, if requested, usage counts.
        - `DETAILED`: Returns the full DID object and, if requested, usage counts.
    """

    SIMPLE = "SIMPLE"
    DETAILED = "DETAILED"


class DIDService(BaseModel):
    """
    id: must confirm to DID syntax
    type: different constraints depending on context
    service_endpoint: The value of the serviceEndpoint property MUST be a string, a map, or a set composed of one or more strings and/or maps. All string values MUST be valid URIs conforming to [RFC3986] and normalized according to the Normalization and Comparison rules in RFC3986 and to any normalization rules in its applicable URI scheme specification.s
    """

    id: Annotated[str, Field(title="Id")]
    type: Annotated[Union[str, List[str]], Field(title="Type")]
    serviceEndpoint: Annotated[
        Union[str, Dict[str, Any], List[str]], Field(title="Serviceendpoint")
    ]


class DidDocStatus(str, Enum):
    """
    Enum:
        - `PRE`: Initial state of a DID in the process of being created.
        - `ACCEPTED`: Request to create a DID accepted.
        - `SUBMITTED`: Create DID request submitted.
        - `COMPLETED`: DID has been successfully created and published to the registry.
        - `FAILED`: An error occurred, and the DID was not created or published.
    """

    PRE = "PRE"
    ACCEPTED = "ACCEPTED"
    SUBMITTED = "SUBMITTED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"


class DidPermission(str, Enum):
    """
    Enum: Defines the type of operations the DID can participate in.
        - `ISSUER`: DIDs can be used to issue VCs and be the credentialSubject of a VC.
        - `HOLDER`: DIDs can only be used is the credentialSubject/object of a VC.
    """

    HOLDER = "HOLDER"
    ISSUER = "ISSUER"


class DomainRegistry(BaseModel):
    schemas: Annotated[Dict[str, ClaimSchemaInfo], Field(title="Schemas")]


class DraftStatus(str, Enum):
    """
    Enum:
    - `DRAFT`: Initial state of a DID/VC at the start of DID/VC create/update operations.
    - `FINAL`: Set to FINAL after successful create/update operation on a DID/VC is complete.
    """

    DRAFT = "DRAFT"
    FINAL = "FINAL"


class Evidence(BaseModel):
    """
    Designed for the issuer to help the verifier determine level of confidence
    it can have in claims inside the VC. Basically the VC version of a level of assurance (LOA)
    in a more traditional authentication system

    type (type): determines what type of evidence it is, eg "IssuerPolicy"
    id: should point to where more information about evidence can be found
    verifier: eg "https://example.edu/issuers/14"
    evidence_document: eg "DriverLicense"
    subject_presenec: eg "Physical"
    document_presence: eg "Physical"
    """

    type: Annotated[List[str], Field(title="Type")]
    id: Annotated[Optional[str], Field(None, title="Id")]
    verifier: Annotated[Optional[str], Field(None, title="Verifier")]
    evidenceDocument: Annotated[Optional[str], Field(None, title="Evidencedocument")]
    subjectPresence: Annotated[Optional[str], Field(None, title="Subjectpresence")]
    documentPresence: Annotated[Optional[str], Field(None, title="Documentpresence")]


class GithubDIDDocCreationParams(BaseModel):
    self_sign: Annotated[Optional[bool], Field(False, title="Self Sign")]
    creation_type: Annotated[Literal["github"], Field("github", title="Creation Type")]
    context: Annotated[Optional[List[str]], Field(None, title="Context")]
    controller: Annotated[Optional[str], Field(None, title="Controller")]
    aka: Annotated[Optional[str], Field(None, title="Aka")]
    did_service: Annotated[Optional[List[DIDService]], Field(None, title="Did Service")]
    key_name: Annotated[Optional[str], Field(None, title="Key Name")]
    required_diddoc_fields: Annotated[
        Optional[List[str]], Field(["id", "context"], title="Required Diddoc Fields")
    ]


class GithubSimbaTrustConfig(BaseModel):
    handler_type: Annotated[Optional[str], Field("live", title="Handler Type")]
    seed_type: Annotated[Optional[str], Field("DidSeed", title="Seed Type")]
    secondary_method: Annotated[
        Optional[str], Field("github", title="Secondary Method")
    ]
    max_create_wait_time: Annotated[
        Optional[int], Field(90, title="Max Create Wait Time")
    ]
    interval_wait_time: Annotated[Optional[int], Field(1, title="Interval Wait Time")]
    blockchain: Annotated[str, Field(title="Blockchain")]
    blockchain_type: Annotated[str, Field(title="Blockchain Type")]
    blockchain_subtype: Annotated[str, Field(title="Blockchain Subtype")]
    proof_in_sig: Annotated[Optional[bool], Field(False, title="Proof In Sig")]
    key_class: Annotated[Optional[str], Field(None, title="Key Class")]
    registry_type: Optional[CredReg] = CredReg.inmemory
    config_type: Annotated[Literal["github"], Field("github", title="Config Type")]
    key_name: Annotated[Optional[str], Field(None, title="Key Name")]


class ListAccounts(BaseModel):
    count: Annotated[Optional[int], Field(0, title="Count")]
    next: Annotated[Optional[str], Field(None, title="Next")]
    previous: Annotated[Optional[str], Field(None, title="Previous")]
    results: Annotated[Optional[List[BlocksAccount]], Field([], title="Results")]


class MSCSimbaTrustConfig(BaseModel):
    handler_type: Annotated[Optional[str], Field("live", title="Handler Type")]
    seed_type: Annotated[Optional[str], Field("DidSeed", title="Seed Type")]
    secondary_method: Annotated[Optional[str], Field(None, title="Secondary Method")]
    max_create_wait_time: Annotated[
        Optional[int], Field(90, title="Max Create Wait Time")
    ]
    interval_wait_time: Annotated[Optional[int], Field(1, title="Interval Wait Time")]
    blockchain: Annotated[str, Field(title="Blockchain")]
    blockchain_type: Annotated[str, Field(title="Blockchain Type")]
    blockchain_subtype: Annotated[str, Field(title="Blockchain Subtype")]
    proof_in_sig: Annotated[Optional[bool], Field(False, title="Proof In Sig")]
    key_class: Annotated[Optional[str], Field(None, title="Key Class")]
    registry_type: Optional[CredReg] = CredReg.MSCRegistry
    org: Annotated[Optional[str], Field("trust", title="Org")]
    app: Annotated[Optional[str], Field("registry", title="App")]
    contract_api: Annotated[str, Field(title="Contract Api")]
    registrar_address: Annotated[Optional[str], Field(None, title="Registrar Address")]
    registrar_alias: Annotated[Optional[str], Field(None, title="Registrar Alias")]
    config_type: Annotated[
        Literal["msc-simba"], Field("msc-simba", title="Config Type")
    ]


class MethodSpecUpdate(BaseModel):
    """
    - `set_controller_did`: did string for the new controller
    - `set_owner_account`: blockchain account/pub key of new owner
    - `remove_controller`: bool for whether controller is being removed. defaults controller to owner. Note that 'owner' here is different than metadata.owner, which is a DB uid
    - `suspend_did`: bool for whether the did is being suspended (opposite of activated)
    - `activate_did`: bool for whether the did is being activated (opposite of suspend)
    - `add_account`: str to specify blockchain address to be added to DID
    - `self_sign`: bool to specify whether a transaction should be signed client side (True = yes). If True, then a raw_transaction comes back as part of the transaction_resul, which should then be signed and submitted
    - `remove_account`:
        - `did_id`: did string for the account to be removed
        - `did_url`: key reference for the did's public key

        Example:
            {
                "did_id": "did:smb1:1337:0x60CdD5a24b252fA10ebb13b16b535A3f37a11d2C:95505238475697238796840016547104729168318614476902574113341208239676579705294",
                "did_url": "did:smb1:1337:0x60CdD5a24b252fA10ebb13b16b535A3f37a11d2C:95505238475697238796840016547104729168318614476902574113341208239676579705294#2",
            }
    """

    did_method: Annotated[Optional[str], Field("test", title="Did Method")]
    set_controller_did: Annotated[
        Optional[str], Field(None, title="Set Controller Did")
    ]
    set_owner_account: Annotated[Optional[str], Field(None, title="Set Owner Account")]
    remove_controller: Annotated[
        Optional[bool], Field(False, title="Remove Controller")
    ]
    suspend_did: Annotated[Optional[bool], Field(False, title="Suspend Did")]
    activate_did: Annotated[Optional[bool], Field(False, title="Activate Did")]
    add_account: Optional[AddAccount] = None
    remove_account_key_ref: Annotated[
        Optional[str], Field(None, title="Remove Account Key Ref")
    ]
    controller_id: Annotated[Optional[int], Field(None, title="Controller Id")]
    revoke_did: Annotated[Optional[bool], Field(False, title="Revoke Did")]
    self_sign: Annotated[Optional[bool], Field(False, title="Self Sign")]


class NFTSimbaTrustConfig(BaseModel):
    handler_type: Annotated[Optional[str], Field("live", title="Handler Type")]
    seed_type: Annotated[Optional[str], Field("DidSeed", title="Seed Type")]
    secondary_method: Annotated[Optional[str], Field(None, title="Secondary Method")]
    max_create_wait_time: Annotated[
        Optional[int], Field(90, title="Max Create Wait Time")
    ]
    interval_wait_time: Annotated[Optional[int], Field(1, title="Interval Wait Time")]
    blockchain: Annotated[str, Field(title="Blockchain")]
    blockchain_type: Annotated[str, Field(title="Blockchain Type")]
    blockchain_subtype: Annotated[str, Field(title="Blockchain Subtype")]
    proof_in_sig: Annotated[Optional[bool], Field(False, title="Proof In Sig")]
    key_class: Annotated[Optional[str], Field(None, title="Key Class")]
    registry_type: Optional[CredReg] = CredReg.NFTRegistry
    org: Annotated[Optional[str], Field("trust", title="Org")]
    app: Annotated[Optional[str], Field("registry", title="App")]
    contract_api: Annotated[str, Field(title="Contract Api")]
    registrar_address: Annotated[Optional[str], Field(None, title="Registrar Address")]
    registrar_alias: Annotated[Optional[str], Field(None, title="Registrar Alias")]
    config_type: Annotated[
        Literal["nft-simba"], Field("nft-simba", title="Config Type")
    ]


class Page(RootModel[int]):
    root: Annotated[int, Field(ge=1, title="Page")]


class Size(RootModel[int]):
    root: Annotated[int, Field(ge=1, title="Size")]


class Pages(RootModel[int]):
    root: Annotated[int, Field(ge=0, title="Pages")]


class PageStr(BaseModel):
    items: Annotated[List[str], Field(title="Items")]
    total: Annotated[int, Field(ge=0, title="Total")]
    page: Annotated[Optional[Page], Field(title="Page")]
    size: Annotated[Optional[Size], Field(title="Size")]
    pages: Annotated[Optional[Pages], Field(None, title="Pages")]


class PendingTxn(BaseModel):
    """
    Object containing txn_id and raw_txn for a blocks blockchain txn

    We make both fields optional so that we can return an empty object when nothing is pending
    """

    txn_id: Annotated[Optional[str], Field(None, title="Txn Id")]
    raw_txn: Annotated[Optional[Dict[str, Any]], Field(None, title="Raw Txn")]


class Prohibition(BaseModel):
    """
    Need to research
    """

    assigner: Annotated[str, Field(title="Assigner")]
    assignee: Annotated[str, Field(title="Assignee")]
    target: Annotated[str, Field(title="Target")]
    action: Annotated[List[str], Field(title="Action")]


class Proof(BaseModel):
    """
    spec: https://www.w3.org/TR/vc-data-model/#proofs-signatures
    """

    type: Annotated[
        str, Field(description="String identifying the proof type.", title="Type")
    ]
    created: Annotated[
        datetime.datetime,
        Field(description="When the proof was created.", title="Created"),
    ]
    proofPurpose: Annotated[
        str,
        Field(
            description="The purpose of the proof. Typically this is `assertionMethod` which means the proof is used to assert a proof value.",
            title="Proofpurpose",
        ),
    ]
    verificationMethod: Annotated[
        str,
        Field(
            description="DID url pointing to a public key in a DID document to use in verifying this proof.",
            title="Verificationmethod",
        ),
    ]
    cryptosuite: Annotated[Optional[str], Field(None, title="Cryptosuite")]


class ProofDigest(BaseModel):
    digest: Annotated[Optional[str], Field(None, title="Digest")]


class PubKeyAccountInfo(BaseModel):
    """
    Input model to be used when creating a DID:
        - `public_key`: public key to use for DID
        - `org`: Optional - used for org scoped blocks platform accounts
        - `alias`: Optional - DO NOT SPECIFY if creating a client-side-signing DID
        - `is_client_sign_key`: User DOES NOT NEED to define. Get set by backend
    """

    public_key: Annotated[str, Field(title="Public Key")]
    org: Annotated[Optional[str], Field(None, title="Org")]
    alias: Annotated[Optional[str], Field(None, title="Alias")]
    is_client_sign_key: Annotated[
        Optional[bool], Field(False, title="Is Client Sign Key")
    ]


class PublicKeyInfo(BaseModel):
    """
    A Helper class to describe the type of PublicKey contained in a payload:
    - `type`: PublicKey type.
    - `public_key`: PublicKey value.
    """

    type: Annotated[str, Field(description="PublicKey type.", title="Type")]
    public_key: Annotated[
        str, Field(description="PublicKey value.", title="Public Key")
    ]


class RefreshService(BaseModel):
    """
    Allows an issuer to control and provide details about how
    the current VC can be refreshed or updated

    There are issues with privacy and other matters with refreshService property;
    hence, the practice of including in a VC is discouraged

    id: URL where enquirer can obtain the refreshed VC
    type: says what type of refresh service this is, and controls
        what other properties the refresh_service property should contain
    """

    id: Annotated[str, Field(title="Id")]
    type: Annotated[str, Field(title="Type")]


class SMB1MSCDIDDocCreationParams(BaseModel):
    self_sign: Annotated[Optional[bool], Field(False, title="Self Sign")]
    creation_type: Annotated[Literal["msc"], Field("msc", title="Creation Type")]
    signers: Annotated[List[str], Field(title="Signers")]
    threshold: Annotated[int, Field(title="Threshold")]


class SMB1NFTDIDDocCreationParams(BaseModel):
    self_sign: Annotated[Optional[bool], Field(False, title="Self Sign")]
    creation_type: Annotated[Literal["nft"], Field("nft", title="Creation Type")]
    collection: Annotated[str, Field(title="Collection")]
    token_id: Annotated[int, Field(title="Token Id")]


class SMB1STDDIDDocCreationParams(BaseModel):
    self_sign: Annotated[Optional[bool], Field(False, title="Self Sign")]
    creation_type: Annotated[Literal["std"], Field("std", title="Creation Type")]
    controller: Annotated[Optional[str], Field(None, title="Controller")]
    controller_seed: Annotated[Optional[str], Field(None, title="Controller Seed")]
    controller_did_id: Annotated[Optional[int], Field(None, title="Controller Did Id")]


class STDSimbaTrustConfig(BaseModel):
    handler_type: Annotated[Optional[str], Field("live", title="Handler Type")]
    seed_type: Annotated[Optional[str], Field("DidSeed", title="Seed Type")]
    secondary_method: Annotated[Optional[str], Field(None, title="Secondary Method")]
    max_create_wait_time: Annotated[
        Optional[int], Field(90, title="Max Create Wait Time")
    ]
    interval_wait_time: Annotated[Optional[int], Field(1, title="Interval Wait Time")]
    blockchain: Annotated[str, Field(title="Blockchain")]
    blockchain_type: Annotated[str, Field(title="Blockchain Type")]
    blockchain_subtype: Annotated[str, Field(title="Blockchain Subtype")]
    proof_in_sig: Annotated[Optional[bool], Field(False, title="Proof In Sig")]
    key_class: Annotated[Optional[str], Field(None, title="Key Class")]
    registry_type: Optional[CredReg] = CredReg.STDRegistry
    org: Annotated[Optional[str], Field("trust", title="Org")]
    app: Annotated[Optional[str], Field("registry", title="App")]
    contract_api: Annotated[str, Field(title="Contract Api")]
    registrar_address: Annotated[Optional[str], Field(None, title="Registrar Address")]
    registrar_alias: Annotated[Optional[str], Field(None, title="Registrar Alias")]
    config_type: Annotated[
        Literal["std-simba"], Field("std-simba", title="Config Type")
    ]


class SchemaTypes(str, Enum):
    string = "string"
    int = "int"
    boolean = "boolean"
    uri = "uri"
    date = "date"
    date_time = "date_time"


class SignedTxn(BaseModel):
    rawTransaction: Annotated[str, Field(title="Rawtransaction")]
    hash: Annotated[str, Field(title="Hash")]
    r: Annotated[int, Field(title="R")]
    s: Annotated[int, Field(title="S")]
    v: Annotated[int, Field(title="V")]


class SubmitSignedCredentialHTTP(BaseModel):
    """
    Model for submitting a signed VC/proof:
        - `signature`: signature created by signing VC with private key
        - `domain`: not required, but can be specified by user

    NOTE: do NOT include other fields in this model, such as issuer or subject,
    since this model gets passed to update_vc and update_vp
    """

    signature: Annotated[str, Field(title="Signature")]
    domain: Annotated[Optional[str], Field(None, title="Domain")]


class TaskStatus(str, Enum):
    INITED = "INITED"
    RUNNING = "RUNNING"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    ABORTED = "ABORTED"


class TaskType(str, Enum):
    SYNCHRONOUS_TASK = "SYNCHRONOUS_TASK"
    UNPUBLISH_CLAIM = "UNPUBLISH_CLAIM"
    PUBLISH_CLAIM = "PUBLISH_CLAIM"
    CREATE_DID = "CREATE_DID"
    CREATE_VC = "CREATE_VC"
    CREATE_VP = "CREATE_VP"
    UPDATE_DID = "UPDATE_DID"
    REVOKE_DID = "REVOKE_DID"
    REVOKE_VC = "REVOKE_VC"
    VERIFY = "VERIFY"


class TermsOfUse(BaseModel):
    """
    type (type): governs contents, eg "IssuerPolicy"
    id: should point to a web page where terms of use for VC or VP can be found
    profile: need to research
    prohibtion: need to research
    """

    type: Annotated[str, Field(title="Type")]
    id: Annotated[Optional[str], Field(None, title="Id")]
    profile: Annotated[Optional[str], Field(None, title="Profile")]
    prohibition: Annotated[
        Optional[List[Prohibition]], Field(None, title="Prohibition")
    ]


class TestTrustConfig(BaseModel):
    handler_type: Annotated[Optional[str], Field("test", title="Handler Type")]
    seed_type: Annotated[Optional[str], Field("TestSeed", title="Seed Type")]
    secondary_method: Annotated[Optional[str], Field(None, title="Secondary Method")]
    max_create_wait_time: Annotated[
        Optional[int], Field(90, title="Max Create Wait Time")
    ]
    interval_wait_time: Annotated[Optional[int], Field(1, title="Interval Wait Time")]
    config_type: Annotated[Literal["test"], Field("test", title="Config Type")]
    registry_type: Annotated[Optional[str], Field("inmemory", title="Registry Type")]
    blockchain: Annotated[Optional[str], Field(None, title="Blockchain")]
    blockchain_type: Annotated[Optional[str], Field(None, title="Blockchain Type")]
    blockchain_subtype: Annotated[
        Optional[str], Field(None, title="Blockchain Subtype")
    ]
    app: Annotated[Optional[str], Field(None, title="App")]
    contract_api: Annotated[Optional[str], Field(None, title="Contract Api")]
    org: Annotated[Optional[str], Field(None, title="Org")]
    key_class: Annotated[Optional[str], Field(None, title="Key Class")]
    proof_in_sig: Annotated[Optional[bool], Field(False, title="Proof In Sig")]


class TrustProfile(BaseModel):
    """
    TrustProfiles are scoped by `Domain` and contain the information necessary to define and configure a ProfileService
    instance that controls the type of DID created and subsequent operations on the DID/DIDDocument, VCs and VPs.

    - `name`: Name of the TrustProfile (unique within a Domain).
    - `domain`: Name of the Domain to which this TrustProfile belongs.
    - `did_method`: The name of DID infrastructures used for DID/VC/VP operations.
    - `cryptosuite`: The crypto suite used by this did_method.
    - `config`: did_method specific constants and implementation info used by this did_method.
    """

    name: Annotated[
        str,
        Field(
            examples=["Name of the TrustProfile (unique within a Domain)."],
            title="Name",
        ),
    ]
    did_method: Annotated[
        str,
        Field(
            examples=["The name of DID infrastructures used for DID/VC/VP operations."],
            title="Did Method",
        ),
    ]
    cryptosuite: Annotated[
        str,
        Field(
            examples=["The crypto suite used by this did_method."], title="Cryptosuite"
        ),
    ]
    config: Annotated[
        Union[
            STDSimbaTrustConfig,
            MSCSimbaTrustConfig,
            NFTSimbaTrustConfig,
            GithubSimbaTrustConfig,
            TestTrustConfig,
        ],
        Field(
            discriminator="config_type",
            examples=[
                "did_method specific constants and implementation info used by this did_method."
            ],
            title="Config",
        ),
    ]
    created_at: Annotated[Optional[datetime.datetime], Field(None, title="Created At")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    field_id: Annotated[
        Optional[str],
        Field(
            None,
            alias="_id",
            description="MongoDB ObjectID of this object.",
            title=" Id",
        ),
    ]
    domain: Annotated[
        str,
        Field(
            description="Name of the Domain to which this TrustProfile belongs.",
            title="Domain",
        ),
    ]


class Nickname(RootModel[str]):
    root: Annotated[str, Field(max_length=40, min_length=4, title="Nickname")]


class UpdateDIDMetadataFromUser(BaseModel):
    tags: Annotated[Optional[List[str]], Field(None, title="Tags")]
    nickname: Annotated[Optional[Nickname], Field(None, title="Nickname")]
    public_name: Annotated[Optional[PublicName], Field(None, title="Public Name")]


class UpdateDidHttp(BaseModel):
    """
    metadata:
        - `owner`: The entity that owns this DID.
        - `trust_profile`: TrustProfile name, determines the type of DID created and controls subsequent DID operations on DIDS, VCs and VPs.
        - `permission`: Defines the DID's capabilities. An ISSUER DID can be used to create VCs. A HOLDER DID can be used as the credentialSubject in a VC.
        - `domain`: The domain within which this DID operates or is recognized.
        - `alias`: A human-readable name or identifier for this DID.
        - `seed`: A cryptographic seed from which keys associated with this DID can be derived.
        - `register_status`: Enumerated field indicating the current status of the DID Document.
            - `PRE`:Default state of a DID in the process of being created.
            - `ACCEPTED`: Request to create a DID accepted.
            - `SUBMITTED`: Create DID request submitted.
            - `COMPLETED`: DID has been successfully created and published to the registry.
            - `FAILED`: An error occurred, and the DID was not created or published.
        - `revoke_status`: Enumerated field indicating the current status of the DID Document.
            - `PRE`:Default state, no revoke operations have been carried out on this DID.
            - `ACCEPTED`: Request to revoke the DID accepted.
            - `SUBMITTED`: Revoke DID request submitted.
            - `COMPLETED`: DID has been successfully revoked and is unusable in the future.
            - `FAILED`: An error occurred, and the DID was not created or published.
        - `draft_status`: Indicates whether the DID Document is in a draft or final state.
            - `DRAFT`: The state of the DID is changing.
            - `FINAL`: The state of the DID is complete/valid.
        - `account_verified`: A boolean indicating whether the DID owner's account has been verified.
    method_spec_updates: fields to specify if the did being updated is SMB1, and requires blockchain transactions for update
        - Examples:
            [
                {
                    "set_controller": None,
                    "set_owner_id": None,
                    "remove_controller": False,
                    "suspend_did": False,
                    "activate_did": False,
                    "remove_account": {
                        "did_id": "did:smb1:1337:0x60CdD5a24b252fA10ebb13b16b535A3f37a11d2C:95505238475697238796840016547104729168318614476902574113341208239676579705294",
                        "did_url": "did:smb1:1337:0x60CdD5a24b252fA10ebb13b16b535A3f37a11d2C:95505238475697238796840016547104729168318614476902574113341208239676579705294#2",
                    }
                },
            ]
    """

    method_spec_updates: Optional[MethodSpecUpdate] = None
    metadata: Optional[UpdateDIDMetadataFromUser] = None


class UpdateTrustProfileInput(BaseModel):
    config: Annotated[
        Optional[
            Union[
                STDSimbaTrustConfig,
                MSCSimbaTrustConfig,
                NFTSimbaTrustConfig,
                GithubSimbaTrustConfig,
                TestTrustConfig,
            ]
        ],
        Field(
            None,
            examples=[
                "did_method specific constants and implementation info used by this did_method."
            ],
            title="Config",
        ),
    ]


class User(BaseModel):
    """
    Pydantic model for representing a User.

    - `member_svc_id`: member-service ID.
    - `email`: Email address
    - `permissions`: Users [permission][credential_service.domain.models.Holder] set.
    - `domains`: List of [Domains][credential_service.domain.models.Domain] to which the user belongs.
    """

    created_at: Annotated[Optional[datetime.datetime], Field(None, title="Created At")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    field_id: Annotated[
        Optional[str],
        Field(
            None,
            alias="_id",
            description="MongoDB ObjectID of this object.",
            title=" Id",
        ),
    ]
    simba_id: Annotated[Optional[str], Field(None, title="Simba Id")]
    member_svc_id: Annotated[Optional[UUID], Field(None, title="Member Svc Id")]
    email: Annotated[
        EmailStr, Field(description="User's email address.", title="Email")
    ]
    permissions: Annotated[Optional[List[str]], Field(None, title="Permissions")]
    domains: Annotated[Optional[List[str]], Field(None, title="Domains")]


class ValidationError(BaseModel):
    loc: Annotated[List[Union[str, int]], Field(title="Location")]
    msg: Annotated[str, Field(title="Message")]
    type: Annotated[str, Field(title="Error Type")]


class VcRevokeStatus(str, Enum):
    """
    Enum:
        - `PRE`: Initial state of a VC in the process of being created.
        - `ACCEPTED`: Request to create a VC accepted.
        - `SUBMITTED`: Create VC request submitted.
        - `COMPLETED`: VC has been successfully created, published to the registry and accepted by the
        credentialSubject.
        - `FAILED`: An error occurred, and the VC was not created or published.
        - `UNSIGNED`: The transaction has been initiated, but needs to be signed
    """

    PRE = "PRE"
    ACCEPTED = "ACCEPTED"
    SUBMITTED = "SUBMITTED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    UNSIGNED = "UNSIGNED"


class VcStatus(str, Enum):
    """
    Enum:
        - `PRE`: Initial state of a VC in the process of being created.
        - `ACCEPTED`: Request to create a VC accepted.
        - `SUBMITTED`: Create VC request submitted.
        - `COMPLETED`: VC has been successfully created, published to the registry and accepted by the
        credentialSubject.
        - `FAILED`: An error occurred, and the VC was not created or published.
        - `SUBJECT_PENDING`: The VC is created and waiting for the credentialSubject to accept/acknowledge the VC.
        - `SUBJECT_ACCEPTED`: The VC has been accepted/acknowledged by the credentialSubject.
        - `SUBJECT_REJECTED`: The VC has been acknowledged but rejected by the credentialSubject.
    """

    PRE = "PRE"
    ACCEPTED = "ACCEPTED"
    SUBMITTED = "SUBMITTED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    SUBJECT_PENDING = "SUBJECT_PENDING"
    SUBJECT_ACCEPTED = "SUBJECT_ACCEPTED"
    SUBJECT_REJECTED = "SUBJECT_REJECTED"
    UNSIGNED = "UNSIGNED"


class VerificationMethod(BaseModel):
    """
    specs: https://www.w3.org/TR/did-core/#verification-method-properties

    id must conform to DID syntax
    controller must conform to DID syntax
    - The value of the type property MUST be a string that references exactly one verification method type. In order to maximize global interoperability, the verification method type SHOULD be registered in the DID Specification Registries [DID-SPEC-REGISTRIES].
    public_key_jwk: A map representing a JSON Web Key that conforms to [RFC7517]. See definition of publicKeyJwk for additional constraints.
        - https://python-jose.readthedocs.io/en/latest/jwk/
    public_key_multibase: a string that conforms to a [MULTIBASE] encoded public key
    """

    id: Annotated[str, Field(title="Id")]
    controller: Annotated[str, Field(title="Controller")]
    type: Annotated[str, Field(title="Type")]


class VerificationResult(BaseModel):
    """
    Verification result:

    - `success`: True - successfully verified
    - `error`: Contains the error description when verify fails.
    - `proof_key`: PublicKey value.
    """

    success: Annotated[bool, Field(description="Verify pass or fail.", title="Success")]
    error: Annotated[
        Optional[str],
        Field(None, description="Error messages on Failure.", title="Error"),
    ]
    proof_key: Annotated[
        Optional[PublicKeyInfo], Field(None, description="PublicKey Value.")
    ]


class VpMetadata(BaseModel):
    """
    Defines the metadata used by `credential-service` to manage VCs

    - `domain`: VPs are Domain scoped.
    - `owner`: The MongoDB ObjectID of the issuing entity (user_id or the Issuer DID).
    - `vc_ids`: A list of MongoDB ObjectIDs that point at the VCs contrained in this VP.
    """

    created_at: Annotated[Optional[datetime.datetime], Field(None, title="Created At")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    domain: Annotated[str, Field(title="Domain")]
    owner: Annotated[str, Field(title="Owner")]
    vc_ids: Annotated[Optional[List[str]], Field([], title="Vc Ids")]
    digest: Annotated[Optional[Union[bytes, str]], Field(None, title="Digest")]
    material: Annotated[Optional[Dict[str, Any]], Field(None, title="Material")]


class WalletType(str, Enum):
    EXTERNAL = "EXTERNAL"
    CUSTODIAL_SERVER_SIGN = "CUSTODIAL_SERVER_SIGN"
    CUSTODIAL_CLIENT_SIGN = "CUSTODIAL_CLIENT_SIGN"


class CredentialServiceDomainModelsVerifiablePresentation(BaseModel):
    """
    A Verifiable Presentation (VP) is a digital communication method by which a holder can prove to a verifier that they
    possess certain Verifiable Credentials (VCs) without necessarily disclosing the credentials themselves. It is a
    critical component in the Self-Sovereign Identity (SSI) ecosystem, enabling individuals to share proof of their
    identity or other claims in a privacy-preserving and secure manner. Verifiable Presentations leverage Decentralized
    Identifiers (DIDs) and cryptographic proofs to ensure the integrity, authenticity, and selective disclosure of the
    information they convey.

    ##Intended Use:

    - **Privacy-Preserving Verification**: VPs allow credential holders to share evidence of their qualifications, rights,
    or personal attributes without revealing the actual information contained in their Verifiable Credentials. This
    supports data minimization and privacy by only disclosing the information that is strictly necessary for the
    verification process.
    - **Secure and Trustworthy Transactions**: By providing a mechanism for individuals to prove the authenticity of
    their claims cryptographically, VPs facilitate secure and trustworthy interactions online, bridging the trust gap
    in digital communications.
    - **Interoperability Across Different Systems**: The use of standardized formats and protocols (such as DIDs and
    VC data models) enables VPs to be used across various platforms and services, enhancing their utility and adoption
    in diverse applications from finance and education to healthcare and beyond.

    ##Modus Operandi:

    - **Holder Generates VP**: The holder, who is the subject of one or more Verifiable Credentials, constructs a
    Verifiable Presentation. This process involves selecting which credentials or parts thereof to present and applying
    a cryptographic proof that links the VP to their DID, thereby asserting control and legitimacy.
    - **Selective Disclosure**: VPs can be tailored to include only the specific attributes or claims required by the
    verifier, rather than sharing the full content of the underlying VCs. This selective disclosure is facilitated by
    zero-knowledge proofs or similar cryptographic techniques, further protecting the holder's privacy.
    - **Verification by the Recipient**: Upon receiving a VP, the verifier uses the cryptographic proof contained within
    it, along with the public DID documents of the issuer and holder, to verify the authenticity of the presentation.
    This includes confirming that the VP has not been tampered with, that it was indeed created by the holder, and that
    the underlying VCs were issued by a trusted authority.

    Verifiable Presentations thus serve as a powerful tool in the SSI landscape, enabling secure, privacy-respecting,
    and verifiable sharing of credentials in digital environments. They embody the shift towards more user-centric
    models of identity and personal data management, where trust and control are paramount.

    ## Model details

    The model consists of two parts,

    - `metadata`: Used for credential-service management of the VP
    - `vp`: Implements the W3C [VerifiablePresentation](https://www.w3.org/TR/vc-data-model-2.0/#presentations) model.

    ### Metadata
    - `domain`: VPs are Domain scoped.
    - `owner`: The MongoDB ObjectID of the user that owns the credentialSubject DID in the VC from which this VP
    is generated.
    - `vc_ids`: A list of the MongoDB ObjectIDs contained in this VP.


    ### VerifiablePresentation model

    A [VerifiablePresentation](https://www.w3.org/TR/vc-data-model-2.0/#presentations) wraps one or more
    VerifiableCredentials that can be revised or redacted.

    VP fields are,

    - [@context property](https://www.w3.org/TR/vc-data-model/#contexts) A list of IRIs that define the JSON-LD schema
    definitions used by this VP.
    - A [VP proof][vp-proof] signed by the credentialSubject DID's private key.
    - `type`: Optional a list of identifiers that detail the type of this `verifiablePresentation`. Defaults to
    `["VerifiablePresentation"]`.
    - `verifiableCredential`: A list of, possibly redacted,
    [verifiableCredentials][credential_service.domain.models.VerifiableCredential] including their associated
    [VC proofs][vc-proof].

    Example:
    ```
    {
      "@context": [
        "https://www.w3.org/2018/credentials/v1",
        "https://www.w3.org/2018/credentials/examples/v1"
      ],
      "proof": {
        "type": "SparseMerkleTreePresentationMethod2023",
        "created": "2024-03-17T23:09:36.793120+00:00",
        "proofPurpose": "assertionMethod",
        "verificationMethod": "did:smb1:1337:0xfc98c982ca22ea0141c3452325c372ff728e9ccd:28679616904316701770790799279165101395297571430403036280334086149810916751023#1",
        "proofValue": "0xeea446e34172e3979c37f893cdbdf3fad5edb04bf6f0d915802b84679d06c8e26de27ab444a90f8302caa2fadb55026933782cc5a7ad7a8a59fa304b81f6abbe1b",
        "challenge": "0x18",
        "domain": "0x8d242e4bc081e2eeD5eb9d6BF734DdF5d2F435e0",
        "signedRoot": "0x534f17403e949df6c957aada7e2573ef48ac8f5a4adbbe2f848909122d1f44ca5ac4fb9abe0edc04554dab0ca039630d264134b965cad55c81c7743e268f1d3b1c",
        "presentationTime": 1698232514
      },
      "type": ["VerifiablePresentation"],
      "verifiableCredential": [
        {
          "@context": [
            "https://www.w3.org/2018/credentials/v1",
            "https://www.w3.org/2018/credentials/examples/v1"
          ],
          "credentialSubject": {
            "id": "did:smb1:1337:0xfc98c982ca22ea0141c3452325c372ff728e9ccd:28679616904316701770790799279165101395297571430403036280334086149810916751023",
            "degree": {
              "type": "BachelorDegree",
              "name": "Bachelor of Science and Arts"
            }
          },
          "issuer": "did:smb1:1337:0xfc98c982ca22ea0141c3452325c372ff728e9ccd:39517405560208510513658073967297468008711112795722749167466577185994559263742",
          "proof": {
            "type": "SparseMerkleTreeMethod2023",
            "created": "2024-03-17T23:08:55.437921+00:00",
            "proofPurpose": "assertionMethod",
            "verificationMethod": "did:smb1:1337:0xfc98c982ca22ea0141c3452325c372ff728e9ccd:39517405560208510513658073967297468008711112795722749167466577185994559263742#1",
            "root": "0x5dfaa3e1b5af69c3a2a51a7707b6b7990353d38314afd4403affbf5c2cdef70c",
            "proofValue": "0x534f17403e949df6c957aada7e2573ef48ac8f5a4adbbe2f848909122d1f44ca5ac4fb9abe0edc04554dab0ca039630d264134b965cad55c81c7743e268f1d3b1c",
            "blockchainMaterial": {
              "root": 5865698791693812260658107850804060579880447127172688873622067536095890111069,
              "issuer": 39517405560208510513658073967297468008711112795722749167466577185994559263742,
              "subject": 28679616904316701770790799279165101395297571430403036280334086149810916751023,
              "validFrom": 1692197338,
              "validTo": 1756392538,
              "0xe40583ebbd9fcb6fa3f43180c2c7f5ed": "Bachelor of Science and Arts",
              "circomProof": {
                "pA": [1, 2],
                "pB": [[1, 2], [1, 2]],
                "pC": [1, 2]
              },
              "circuitName": "SMTInclusionSingleClaim"
            }
          },
          "type": ["VerifiableCredential"],
          "validFrom": "2023-08-16T14:48:58.980888+00:00",
          "validUntil": "2025-08-28T14:48:58.980888+00:00"
        }
      ]
    }
    ```
    """

    field_id: Annotated[
        Optional[str],
        Field(
            None,
            alias="_id",
            description="MongoDB ObjectID of this object.",
            title=" Id",
        ),
    ]
    vp: Union[Dict[str, Any], str, int, bool]
    metadata: VpMetadata


class DidlibModelsVcVerifiableCredential(BaseModel):
    """
    see following for data model: https://www.w3.org/TR/vc-data-model-2.0/
    id:
        if present:
            The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.
            The id property MUST NOT have more than one value.
            The value of the id property MUST be a URL which MAY be dereferenced.
    type:
        The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URIs. If more than one URI is provided, the URIs MUST be interpreted as an unordered set. Syntactic conveniences SHOULD be used to ease developer usage. Such conveniences might include JSON-LD terms. It is RECOMMENDED that each URI in the type be one which, if dereferenced, results in a document containing machine-readable information about the type.
    issuer:
        The value of the issuer property MUST be either a URI or an object containing an id property. It is RECOMMENDED that the URI in the issuer or its id be one which, if dereferenced, results in a document containing machine-readable information about the issuer that can be used to verify the information expressed in the credential.

        The value of the issuer property can also be a JWK (for example, "https://example.com/keys/foo.jwk") or a DID (for example, "did:example:abfe13f712120431c276e12ecab").
    validFrom
        If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future. Note that this value represents the earliest point in time at which the information associated with the credentialSubject property becomes valid.
    validUntil
        If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past. Note that this value represents the latest point in time at which the information associated with the credentialSubject property is valid. If a validFrom value exists, the validUntil value MUST be temporally greater than the validFrom value.
    credential_status:
        If present, the value of the credentialStatus property MUST include the following:
            - id property, which MUST be a URI.
            - type property, which expresses the credential status type (also referred to as the credential status method). It is expected that the value will provide enough information to determine the current status of the credential and that machine readable information needs to be retrievable from the URI. For example, the object could contain a link to an external document noting whether or not the credential is suspended or revoked.
    terms_of_use:
        The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation. If the recipient (a holder or verifier) is not willing to adhere to the specified terms of use, then they do so on their own responsibility and might incur legal liability if they violate the stated terms of use. Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id. The precise contents of each term of use is determined by the specific termsOfUse type definition.
    credential_schema:
        The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine if the provided data conforms to the provided schema. Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property that MUST be a URI identifying the schema file. The precise contents of each data schema is determined by the specific type definition.
    evidence:
        The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential. Each evidence scheme is identified by its type. The id property is optional, but if present, SHOULD contain a URL that points to where more information about this instance of evidence can be found. The precise content of each evidence scheme is determined by the specific evidence type definition.
    refresh_service:
        The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential. Each refreshService value MUST specify its type (for example, ManualRefreshService2018) and its id, which is the URI of the service. There is an expectation that machine readable information needs to be retrievable from the URI. The precise content of each refresh service is determined by the specific refreshService type definition.
    """

    field_context: Annotated[
        Optional[List[Union[str, Dict[str, Any]]]],
        Field(
            ["https://www.w3.org/2018/credentials/v1"],
            alias="@context",
            title="@Context",
        ),
    ]
    proof: Optional[Proof] = None
    id: Annotated[Optional[str], Field(None, title="Id")]
    type: Annotated[Union[List[str], str], Field(title="Type")]
    issuer: Annotated[Union[str, Dict[str, Any]], Field(title="Issuer")]
    credentialSubject: Optional[CredentialSubject] = None
    validFrom: Annotated[Optional[datetime.datetime], Field(None, title="Validfrom")]
    validUntil: Annotated[Optional[datetime.datetime], Field(None, title="Validuntil")]
    credentialStatus: Optional[CredentialStatus] = None
    termsOfUse: Optional[TermsOfUse] = None
    credentialSchema: Optional[CredentialSchema] = None
    evidence: Annotated[Optional[List[Evidence]], Field(None, title="Evidence")]
    refreshService: Optional[RefreshService] = None
    name: Annotated[Optional[str], Field(None, title="Name")]
    relatedLink: Annotated[
        Optional[List[Dict[str, Any]]], Field(None, title="Relatedlink")
    ]


class DidlibModelsVcVerifiablePresentation(BaseModel):
    """
    see here for @context property: https://www.w3.org/TR/vc-data-model/#contexts

    VerifiablePresentation will contain revised/redacted version of a
    verifiable credential
    """

    field_context: Annotated[
        Optional[List[Union[str, Dict[str, Any]]]],
        Field([], alias="@context", title="@Context"),
    ]
    proof: Optional[Proof] = None
    type: Annotated[
        Optional[List[str]], Field(["VerifiablePresentation"], title="Type")
    ]
    verifiableCredential: Annotated[
        Optional[List[DidlibModelsVcVerifiableCredential]],
        Field(None, title="Verifiablecredential"),
    ]


class AttributeValue(BaseModel):
    schema_type: SchemaTypes
    description: Annotated[Optional[str], Field(None, title="Description")]
    suggested_values: Annotated[
        Optional[List[Union[str, int]]], Field(None, title="Suggested Values")
    ]


class BaseDIDDocument(BaseModel):
    """
    id: must conform to DID syntax
        - specs: https://www.w3.org/TR/did-core/#did-subject
        - The id property only denotes the DID of the DID subject when it is present in the topmost map of the DID document.
        - a DID subject is the entity identified by a DID and described by a DID document
    controller: must conform to DID syntax
    verification_method: The verificationMethod property is OPTIONAL. If present, the value MUST be a set of verification methods, where each verification
        method is expressed using a map. The verification method map MUST include the id, type, controller, and specific verification material properties that are determined by the value of type and are defined in 5.2.1 Verification Material. A verification method MAY include additional properties. Verification methods SHOULD be registered in the DID Specification Registries [DID-SPEC-REGISTRIES].
    authentication: The authentication verification relationship is used to specify how the DID subject is expected to be authenticated, for purposes such as logging into a website or engaging in any sort of challenge-response protocol. If present, the associated value MUST be a set of one or more verification methods. Each verification method MAY be embedded or referenced.
        - see https://www.w3.org/TR/did-core/#authentication
    assertion_method: A set of either Verification Method maps that conform to the rules in Verification Method properties) or strings that conform to the rules in 3.2 DID URL Syntax.
    key_agreement: The keyAgreement property is OPTIONAL. If present, the associated value MUST be a set of one or more verification methods. Each verification method MAY be embedded or referenced.
    capability_invocation: If present, the associated value MUST be a set of one or more verification methods. Each verification method MAY be embedded or referenced.
    capability_delegation: If present, the associated value MUST be a set of one or more verification methods. Each verification method MAY be embedded or referenced.
    service: A set of Service Endpoint maps that conform to the rules in Service properties.
    """

    field_context: Annotated[
        Optional[Union[List[str], str]], Field(alias="@context", title="@Context")
    ]
    id: Annotated[Optional[str], Field(None, title="Id")]
    alsoKnownAs: Annotated[Optional[List[str]], Field(None, title="Alsoknownas")]
    controller: Annotated[
        Optional[Union[List[str], str]], Field(None, title="Controller")
    ]
    verificationMethod: Annotated[
        Optional[List[VerificationMethod]], Field(None, title="Verificationmethod")
    ]
    authentication: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Authentication"),
    ]
    assertionMethod: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Assertionmethod"),
    ]
    keyAgreement: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Keyagreement"),
    ]
    capabilityInvocation: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Capabilityinvocation"),
    ]
    capabilityDelegation: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Capabilitydelegation"),
    ]
    service: Annotated[Optional[List[DIDService]], Field(None, title="Service")]


class CreateDidHttp(BaseModel):
    """
    Input model for DID creation:
        - `trust_profile`: TrustProfile name, determines the type of DID created and controls subsequent DID operations
        on DIDS, VCs and VPs.
        - `account`: PubKeyAccountInfo, which inherits from Account in didlib. Can either contain JUST a public_key if it's for client side signing, or can contain info for Blocks account if using a client side signing key
        - `permission`: Defines the DID's capabilities. An ISSUER DID can be used to create VCs.
        A HOLDER DID can be used as the credentialSubject in a VC.
        - `alias`: A human-readable name or identifier for this DID.
        - `seed`: A user-defined seed to enhance DID uniqueness. Allows multiple DIDs per user+alias within this domain.
        Could be a document ID or part-number. Example: `document_id | part-number`
        - `tags`: Tags are lower-case keywords used to aid object searching and grouping.
        - `controller`: An existing **DID.id** that will act as the authorizer for changes to this new DID/DIDDocument.
        - `did_doc_creation_params`: not required when creating an SMB1 DID with STD registry. Optional for github DIDs. Required for all other method / registry combos. See examples below:

            Examples:

            ```
            {
                "signers": [
                    "0xd4039eB67CBB36429Ad9DD30187B94f6A5122215",
                    "0x7633Fe8542c2218B5A25777477F63D395aA5aFB4",
                    "0xd5cC383881D6d9A7dc1891A0235E11D03Cb992d3",
                ],
                "threshold": 2,
            },
            {
                "collection": "0x2e3e124bc2Cc43Bc3A8FA8D87322057eD3bB4a5f",
                "token_id": 1234,
            },
            {
                "controller": "did:web:SIMBAChain.github.io:context:diddoc:5fb976f5697fe769a054f516377491c1eadd0f3e51bb58f26990035afa474465",
                "aka": "did is also known as",
                "key_name": "public key name to use instead of just #1",
            }
            ```

                In the examples, the first example is for SMB1MSCDIDDocCreationParams, the second is for SMB1NFTDIDDocCreationParams, and the third is for GithubDIDDocCreationParams
    """

    trust_profile: Annotated[str, Field(title="Trust Profile")]
    account: PubKeyAccountInfo
    permission: Annotated[DidPermission, Field(examples=["HOLDER | ISSUER"])]
    alias: Annotated[str, Field(title="Alias")]
    did_doc_creation_params: Annotated[
        Optional[
            Union[
                SMB1STDDIDDocCreationParams,
                SMB1MSCDIDDocCreationParams,
                SMB1NFTDIDDocCreationParams,
                GithubDIDDocCreationParams,
            ]
        ],
        Field(
            None,
            examples=[
                {
                    "signers": [
                        "0xd4039eB67CBB36429Ad9DD30187B94f6A5122215",
                        "0x7633Fe8542c2218B5A25777477F63D395aA5aFB4",
                        "0xd5cC383881D6d9A7dc1891A0235E11D03Cb992d3",
                    ],
                    "threshold": 2,
                },
                {
                    "collection": "0x2e3e124bc2Cc43Bc3A8FA8D87322057eD3bB4a5f",
                    "token_id": 1234,
                },
                {
                    "aka": "did is also known as",
                    "controller": "did:web:SIMBAChain.github.io:context:diddoc:5fb976f5697fe769a054f516377491c1eadd0f3e51bb58f26990035afa474465",
                    "key_name": "public key name to use instead of just #1",
                },
                {
                    "controller": "did:smb1:1337:0x1e1a08635650ba7dbf50e288ec6fe1f0cdd589c8:39963865611866724509013579633969640489790058083737555399194048102476795238657",
                    "controller_seed": "some seed for controller",
                },
            ],
            title="Did Doc Creation Params",
        ),
    ]
    nickname: Annotated[Optional[str], Field(None, title="Nickname")]
    public_name: Annotated[Optional[PublicName], Field(None, title="Public Name")]
    seed: Annotated[str, Field(title="Seed")]
    tags: Annotated[Optional[List[str]], Field(None, title="Tags")]


class CreateSchemaHttp(BaseModel):
    schema_name: Annotated[str, Field(title="Schema Name")]
    schema_description: Annotated[
        Optional[str], Field(None, title="Schema Description")
    ]
    attributes: Annotated[Dict[str, AttributeValue], Field(title="Attributes")]


class CreateTrustProfileInput(BaseModel):
    """
    Used to create new TrustProfiles. TrustProfiles are scoped by `Domain` which is sent as a pass parameter.
    The TrustProfile contains the information necessary to define and configure a ProfileService
    instance that controls the type of DID created and subsequent operations on the DID/DIDDocument, VCs and VPs.

    - `name`: Name of the TrustProfile (unique within a Domain).
    - `domain`: Name of the Domain to which this TrustProfile belongs.
    - `did_method`: The name of DID infrastructures used for DID/VC/VP operations.
    - `cryptosuite`: The crypto suite used by this did_method.
    - `config`: did_method specific constants and implementation info used by this did_method.
    """

    name: Annotated[
        str,
        Field(
            examples=["Name of the TrustProfile (unique within a Domain)."],
            title="Name",
        ),
    ]
    did_method: Annotated[
        str,
        Field(
            examples=["The name of DID infrastructures used for DID/VC/VP operations."],
            title="Did Method",
        ),
    ]
    cryptosuite: Annotated[
        str,
        Field(
            examples=["The crypto suite used by this did_method."], title="Cryptosuite"
        ),
    ]
    config: Annotated[
        Union[
            STDSimbaTrustConfig,
            MSCSimbaTrustConfig,
            NFTSimbaTrustConfig,
            GithubSimbaTrustConfig,
            TestTrustConfig,
        ],
        Field(
            discriminator="config_type",
            examples=[
                "did_method specific constants and implementation info used by this did_method."
            ],
            title="Config",
        ),
    ]


class DIDDocument(BaseModel):
    field_context: Annotated[
        Union[List[str], str], Field(alias="@context", title="@Context")
    ]
    id: Annotated[Optional[str], Field(None, title="Id")]
    alsoKnownAs: Annotated[Optional[List[str]], Field(None, title="Alsoknownas")]
    controller: Annotated[
        Optional[Union[List[str], str]], Field(None, title="Controller")
    ]
    verificationMethod: Annotated[
        Optional[List[VerificationMethod]], Field(None, title="Verificationmethod")
    ]
    authentication: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Authentication"),
    ]
    assertionMethod: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Assertionmethod"),
    ]
    keyAgreement: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Keyagreement"),
    ]
    capabilityInvocation: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Capabilityinvocation"),
    ]
    capabilityDelegation: Annotated[
        Optional[List[Union[str, VerificationMethod]]],
        Field(None, title="Capabilitydelegation"),
    ]
    service: Annotated[Optional[List[DIDService]], Field(None, title="Service")]


class DIDMetadata(BaseModel):
    """
    The `DIDMetadata` provides additional context and status information about the DID within the ecosystem and
    includes,

    - `nickname`:  Owner's familiar DID name. Must be case-insensitive unique for this user.
    - `public_name`: The public name of the entity represented by this DID. Must be case-insensitive unique for this user.
    - `owner`: The entity that owns this DID.
    - `trust_profile`: TrustProfile name, determines the type of DID created and controls subsequent DID operations on DIDS, VCs and VPs.
    - `permission`: Defines the DID's capabilities. An ISSUER DID can be used to create VCs. A HOLDER DID can be used as the credentialSubject in a VC.
    - `domain`: The domain within which this DID operates or is recognized.
    - `alias`: A human-readable name or identifier for this DID.
    - `seed`: A cryptographic seed from which keys associated with this DID can be derived.
    - `tags`: Tags are lower-case keywords used to aid object searching and grouping.
    - `register_status`: Enumerated field indicating the current status of the DID Document.
        - `PRE`:Default state of a DID in the process of being created.
        - `ACCEPTED`: Request to create a DID accepted.
        - `SUBMITTED`: Create DID request submitted.
        - `COMPLETED`: DID has been successfully created and published to the registry.
        - `FAILED`: An error occurred, and the DID was not created or published.
    - `revoke_status`: Enumerated field indicating the current status of the DID Document.
        - `PRE`:Default state, no revoke operations have been carried out on this DID.
        - `ACCEPTED`: Request to revoke the DID accepted.
        - `SUBMITTED`: Revoke DID request submitted.
        - `COMPLETED`: DID has been successfully revoked and is unusable in the future.
        - `FAILED`: An error occurred, and the DID was not created or published.
    - `draft_status`: Indicates whether the DID Document is in a draft or final state.
        - `DRAFT`: The state of the DID is changing.
        - `FINAL`: The state of the DID is complete/valid.
    - `account_verified`: A boolean indicating whether the DID owner's account has been verified.
    - `suspended`: bool indicating whether the DID has been suspended
    - `added_accounts`: list of blockchain addresses that have been added to the DID
    - `did_owner_address`: blockchain address that gets set if setOwner is called in registry contract
    - `pending_transaction`: transaction that needs to be completed before any other transactions
    - `external_public_key`: public key that is separate from blocks account public key
    - `controller_public_key`: public key for controller, if controller is different than owner
    - `pending_controller_user_id`: we set this when changing the controller; then set as controller_user_id after task completes
    - `wallet_type`: specifies how transactions should be signed for blockchain DIDs
    - `controller_account`: used when we transfer control of DID, and an external public key is not used for the controller DID
    """

    tags: Annotated[Optional[List[str]], Field(None, title="Tags")]
    register_status: Annotated[
        Optional[DidDocStatus],
        Field(
            DidDocStatus.PRE,
            examples=["default=PRE | ACCEPTED | SUBMITTED | COMPLETED | FAILED"],
        ),
    ]
    revoke_status: Annotated[
        Optional[DidDocStatus],
        Field(
            DidDocStatus.PRE,
            examples=["default=PRE | ACCEPTED | SUBMITTED | COMPLETED | FAILED"],
        ),
    ]
    draft_status: Annotated[
        Optional[DraftStatus],
        Field(DraftStatus.DRAFT, examples=["default=DRAFT | FINAL"]),
    ]
    account_verified: Annotated[Optional[bool], Field(False, title="Account Verified")]
    permission: Optional[DidPermission] = DidPermission.HOLDER
    holder_count: Annotated[Optional[int], Field(None, title="Holder Count")]
    issuer_count: Annotated[Optional[int], Field(None, title="Issuer Count")]
    created_at: Annotated[Optional[datetime.datetime], Field(None, title="Created At")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    nickname: Annotated[Optional[str], Field(None, title="Nickname")]
    public_name: Annotated[Optional[str], Field(None, title="Public Name")]
    owner: Annotated[str, Field(title="Owner")]
    controller_user_id: Annotated[
        Optional[str], Field(None, title="Controller User Id")
    ]
    trust_profile: Annotated[str, Field(title="Trust Profile")]
    domain: Annotated[str, Field(title="Domain")]
    alias: Annotated[str, Field(title="Alias")]
    seed: Annotated[str, Field(title="Seed")]
    account: Optional[Account] = None
    contract_did_id: Annotated[Optional[int], Field(None, title="Contract Did Id")]
    contract_controller_id: Annotated[
        Optional[int], Field(None, title="Contract Controller Id")
    ]
    suspended: Annotated[Optional[bool], Field(False, title="Suspended")]
    added_accounts: Annotated[
        Optional[List[DIDAddedAccount]], Field([], title="Added Accounts")
    ]
    did_owner_address: Annotated[Optional[str], Field(None, title="Did Owner Address")]
    pending_transaction: Annotated[
        Optional[Dict[str, Any]], Field({}, title="Pending Transaction")
    ]
    external_public_key: Annotated[
        Optional[str], Field(None, title="External Public Key")
    ]
    controller_public_key: Annotated[
        Optional[str], Field(None, title="Controller Public Key")
    ]
    pending_controller_user_id: Annotated[
        Optional[str], Field(None, title="Pending Controller User Id")
    ]
    wallet_type: Optional[WalletType] = None
    controller_account: Optional[Account] = None


class DIDMetadataOptional(BaseModel):
    """
    The `DIDMetadata` provides additional context and status information about the DID within the ecosystem and
    includes,

    - `nickname`:  Owner's familiar DID name. Must be case-insensitive unique for this user.
    - `public_name`: The public name of the entity represented by this DID. Must be case-insensitive unique for this user.
    - `owner`: The entity that owns this DID.
    - `trust_profile`: TrustProfile name, determines the type of DID created and controls subsequent DID operations on DIDS, VCs and VPs.
    - `permission`: Defines the DID's capabilities. An ISSUER DID can be used to create VCs. A HOLDER DID can be used as the credentialSubject in a VC.
    - `domain`: The domain within which this DID operates or is recognized.
    - `alias`: A human-readable name or identifier for this DID.
    - `seed`: A cryptographic seed from which keys associated with this DID can be derived.
    - `tags`: Tags are lower-case keywords used to aid object searching and grouping.
    - `register_status`: Enumerated field indicating the current status of the DID Document.
        - `PRE`:Default state of a DID in the process of being created.
        - `ACCEPTED`: Request to create a DID accepted.
        - `SUBMITTED`: Create DID request submitted.
        - `COMPLETED`: DID has been successfully created and published to the registry.
        - `FAILED`: An error occurred, and the DID was not created or published.
    - `revoke_status`: Enumerated field indicating the current status of the DID Document.
        - `PRE`:Default state, no revoke operations have been carried out on this DID.
        - `ACCEPTED`: Request to revoke the DID accepted.
        - `SUBMITTED`: Revoke DID request submitted.
        - `COMPLETED`: DID has been successfully revoked and is unusable in the future.
        - `FAILED`: An error occurred, and the DID was not created or published.
    - `draft_status`: Indicates whether the DID Document is in a draft or final state.
        - `DRAFT`: The state of the DID is changing.
        - `FINAL`: The state of the DID is complete/valid.
    - `account_verified`: A boolean indicating whether the DID owner's account has been verified.
    """

    tags: Annotated[Optional[List[str]], Field(None, title="Tags")]
    register_status: Annotated[
        Optional[DidDocStatus],
        Field(
            None, examples=["default=PRE | ACCEPTED | SUBMITTED | COMPLETED | FAILED"]
        ),
    ]
    revoke_status: Annotated[
        Optional[DidDocStatus],
        Field(
            None, examples=["default=PRE | ACCEPTED | SUBMITTED | COMPLETED | FAILED"]
        ),
    ]
    draft_status: Annotated[
        Optional[DraftStatus], Field(None, examples=["default=DRAFT | FINAL"])
    ]
    account_verified: Annotated[Optional[bool], Field(None, title="Account Verified")]
    permission: Optional[DidPermission] = None
    holder_count: Annotated[Optional[int], Field(None, title="Holder Count")]
    issuer_count: Annotated[Optional[int], Field(None, title="Issuer Count")]
    created_at: Annotated[Optional[datetime.datetime], Field(None, title="Created At")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    nickname: Annotated[Optional[str], Field(None, title="Nickname")]
    public_name: Annotated[Optional[str], Field(None, title="Public Name")]
    owner: Annotated[Optional[str], Field(None, title="Owner")]
    trust_profile: Annotated[Optional[str], Field(None, title="Trust Profile")]
    domain: Annotated[Optional[str], Field(None, title="Domain")]
    alias: Annotated[Optional[str], Field(None, title="Alias")]
    seed: Annotated[Optional[str], Field(None, title="Seed")]
    contract_did_id: Annotated[Optional[int], Field(None, title="Contract Did Id")]


class DIDResponseModel(BaseModel):
    field_id: Annotated[
        Optional[str],
        Field(
            None,
            alias="_id",
            description="MongoDB ObjectID of this object.",
            title=" Id",
        ),
    ]
    did_document: Optional[Union[Dict[str, Any], str, int, bool]] = None
    metadata: DIDMetadataOptional


class DIDSignedTxn(BaseModel):
    """
    Object to be submitted when signing a DID transaction or revoking a VC:
        - `txn_id`: Not required. The txn_id is stored in DID metadata. txn_id is allowed to be included here because there may be cases in which a user knows the txn_id of a pending transaction that needs to be submitted, and they can actually sign and submit a transaction for that id if they know it
        - `signed_txn`: SignedTxn object, which contains the signed, raw transaction
    """

    txn_id: Annotated[Optional[str], Field(None, title="Txn Id")]
    signed_txn: SignedTxn


class HTTPValidationError(BaseModel):
    detail: Annotated[Optional[List[ValidationError]], Field(None, title="Detail")]


class PageDIDResponseModel(BaseModel):
    items: Annotated[List[DIDResponseModel], Field(title="Items")]
    total: Annotated[int, Field(ge=0, title="Total")]
    page: Annotated[Optional[Page], Field(title="Page")]
    size: Annotated[Optional[Size], Field(title="Size")]
    pages: Annotated[Optional[Pages], Field(None, title="Pages")]


class PageTrustProfile(BaseModel):
    items: Annotated[List[TrustProfile], Field(title="Items")]
    total: Annotated[int, Field(ge=0, title="Total")]
    page: Annotated[Optional[Page], Field(title="Page")]
    size: Annotated[Optional[Size], Field(title="Size")]
    pages: Annotated[Optional[Pages], Field(None, title="Pages")]


class PageVerifiablePresentation(BaseModel):
    items: Annotated[
        List[CredentialServiceDomainModelsVerifiablePresentation], Field(title="Items")
    ]
    total: Annotated[int, Field(ge=0, title="Total")]
    page: Annotated[Optional[Page], Field(title="Page")]
    size: Annotated[Optional[Size], Field(title="Size")]
    pages: Annotated[Optional[Pages], Field(None, title="Pages")]


class Task(BaseModel):
    field_id: Annotated[
        Optional[str],
        Field(
            None,
            alias="_id",
            description="MongoDB ObjectID of this object.",
            title=" Id",
        ),
    ]
    created_at: Annotated[Optional[datetime.datetime], Field(None, title="Created At")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    object_id: Annotated[
        Optional[str], Field("671fd2e2012d8b6f4158a215", title="Object Id")
    ]
    domain: Annotated[str, Field(title="Domain")]
    owner: Annotated[str, Field(title="Owner")]
    type: TaskType
    error: Annotated[Optional[str], Field(None, title="Error")]
    error_details: Annotated[
        Optional[Dict[str, Any]],
        Field(None, description="Error details on failure.", title="Error Details"),
    ]
    result: Annotated[Optional[Dict[str, Any]], Field({}, title="Result")]
    status: Optional[TaskStatus] = TaskStatus.INITED
    data: Annotated[Optional[Dict[str, Any]], Field({}, title="Data")]


class VcMetaData(BaseModel):
    """
    Defines the metadata used by `credential-service` to manage VCs

    - `domain`: VCs are Domain scoped.
    - `owner`: The MongoDB ObjectID of the issuing entity (user_id or the Issuer DID).
    - `holder`: The MongoDB ObjectID of the entity to which this VC's claims are attested (the user_id of the
    - `owner_alias`: The `DID.alais` of the issuing entity.
    - `holder_alias`: The `DID.alais` of the entity to which this VC's claims are attested.
    - `tags`: Tags are lower-case keywords used to aid object searching and grouping.
    - `digest`: digest is what gets signed when self-signing a proof
    - `issue_status`: Enumerated field indicating the current status of the VC document, see
    [VcStatus][credential_service.domain.models.VcStatus].
        - `PRE`:Default state of a VC in the process of being created.
        - `ACCEPTED`: Request to create a VC accepted.
        - `SUBMITTED`: Create VC request submitted.
        - `COMPLETED`: VC has been successfully created and published to the registry.
        - `FAILED`: An error occurred, and the VC was not created or published.
        - `SUBJECT_PENDING`: The VC is created and waiting for the credentialSubject to accept it.
        - `SUBJECT_ACCEPTED`: The VC has been accepted/acknowledged by the credentialSubject.
        - `SUBJECT_REJECTED`: The VC has been accepted/acknowledged by the credentialSubject.

    - `revoke_status`: Enumerated field indicating the current status of the VC Document.
        - `PRE`:Default state, no revoke operations have been carried out on this VC.
        - `ACCEPTED`: Request to revoke the VC accepted.
        - `SUBMITTED`: Revoke VC request submitted.
        - `COMPLETED`: The VC has been successfully revoked and is unusable in the future.
        - `FAILED`: An error occurred, and the VC was not created or published.
    - `draft_status`: Indicates whether the VC Document is in a draft or final state.
        - `DRAFT`: The state of the VC is changing.
        - `FINAL`: The state of the VC is complete/valid.
    """

    tags: Annotated[Optional[List[str]], Field(None, title="Tags")]
    created_at: Annotated[Optional[datetime.datetime], Field(None, title="Created At")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    domain: Annotated[str, Field(title="Domain")]
    owner: Annotated[str, Field(title="Owner")]
    holder: Annotated[str, Field(title="Holder")]
    owner_alias: Annotated[str, Field(title="Owner Alias")]
    holder_alias: Annotated[str, Field(title="Holder Alias")]
    issue_status: Annotated[
        Optional[VcStatus],
        Field(
            VcStatus.PRE,
            examples=[
                "default=PRE | ACCEPTED | SUBMITTED | COMPLETED | FAILED | SUBJECT_PENDING | SUBJECT_ACCEPTED | SUBJECT_REJECTED | UNSIGNED"
            ],
        ),
    ]
    revoke_status: Annotated[
        Optional[VcRevokeStatus],
        Field(
            VcRevokeStatus.PRE,
            examples=[
                "default=PRE | ACCEPTED | SUBMITTED | COMPLETED | FAILED | UNSIGNED"
            ],
        ),
    ]
    draft_status: Annotated[
        Optional[DraftStatus],
        Field(DraftStatus.DRAFT, examples=["default=DRAFT | FINAL"]),
    ]
    issuer_nickname: Annotated[Optional[str], Field(None, title="Issuer Nickname")]
    issuer_public_name: Annotated[
        Optional[str], Field(None, title="Issuer Public Name")
    ]
    subject_nickname: Annotated[Optional[str], Field(None, title="Subject Nickname")]
    subject_public_name: Annotated[
        Optional[str], Field(None, title="Subject Public Name")
    ]
    digest: Annotated[Optional[Union[bytes, str]], Field(None, title="Digest")]
    material: Annotated[Optional[Dict[str, Any]], Field(None, title="Material")]
    pending_transaction: Annotated[
        Optional[Dict[str, Any]], Field({}, title="Pending Transaction")
    ]


class CredentialServiceDomainModelsVerifiableCredential(BaseModel):
    """
    A W3C Verifiable Credential (VC) is a cornerstone in the Self-Sovereign Identity (SSI) ecosystem, offering a
    mechanism for individuals or entities to securely and autonomously manage proofs of qualifications, affiliations,
    privileges, or competencies. These digital credentials are issued by trusted authorities and held by the credential
    subject, who can then share them as needed, retaining control over their personal data. The use of Decentralized
    Identifiers (DIDs) for both the issuer and credential subject underpins the decentralized nature of these
    credentials, promoting privacy, security, and interoperability.

    ##Intended Use:

    - **Supports the decentralization of identity management** by enabling individuals to control their identity
    attributes, share them securely, and prove their authenticity without constant reliance on the issuing authority.
    - **Applicable across diverse domains** such as education, employment, access rights, and identity verification,
    Verifiable Credentials are foundational to the realization of a user-centric digital world that prioritizes
    privacy and data minimization.

    ##Key Details:

    - **Issuer ID (DID)**: A Decentralized Identifier (DID) uniquely represents the issuer of the credential, ensuring
    the source's trustworthiness and facilitating verification without centralized registries.
    - **Credential Subject ID (DID)**: The DID associated with the credential subject enables self-sovereign control
    over identity and data, making it clear who or what the credential is about and ensuring the subject's autonomy in
    managing their credentials.
    - **Proof Mechanism**: Employs cryptographic proofs, such as digital signatures, to guarantee the credential's
    security and immutability. These proofs bind the credential to its issuer and subject through DIDs, safeguarding
    against unauthorized changes and asserting the authenticity of the credential in a decentralized manner.

    By leveraging DIDs, Verifiable Credentials embody the principles of Self-Sovereign Identity, empowering users with
    greater control over their personal information, enhancing privacy, and enabling a more secure and interoperable
    digital identity framework.

    ## Model details

    The model consists of two parts,

    - ` metadata`: Used for credential-service managment of the VC, see
    [VcMetaData][credential_service.domain.models.VcMetaData]
    - `vc`: Used to contain the W3C [VerificableCredential](https://www.w3.org/TR/vc-data-model-2.0/) claim details.

    ### Metadata
    - `domain`: VCs are Domain scoped.
    - `owner`: The MongoDB ObjectID of the issuing entity (user_id or the Issuer DID).
    - `holder`: The MongoDB ObjectID of the entity to which this VC's claims are attested (the user_id of the
    - `owner_alias`: The `DID.alais` of the issuing entity.
    - `holder_alias`: The `DID.alais` of the entity to which this VC's claims are attested.
    - `tags`: Tags are lower-case keywords used to aid object searching and grouping.
    - `issue_status`: Enumerated field indicating the current status of the VC document, see
    [VcStatus][credential_service.domain.models.VcStatus].
        - `PRE`:Default state of a VC in the process of being created.
        - `ACCEPTED`: Request to create a VC accepted.
        - `SUBMITTED`: Create VC request submitted.
        - `COMPLETED`: VC has been successfully created and published to the registry.
        - `FAILED`: An error occurred, and the VC was not created or published.
        - `SUBJECT_PENDING`: The VC is created and waiting for the credentialSubject to accept it.
        - `SUBJECT_ACCEPTED`: The VC has been accepted/acknowledged by the credentialSubject.
        - `SUBJECT_REJECTED`: The VC has been accepted/acknowledged by the credentialSubject.

    - `revoke_status`: Enumerated field indicating the current status of the VC document.
        - `PRE`:Default state, no revoke operations have been carried out on this VC.
        - `ACCEPTED`: Request to revoke the VC accepted.
        - `SUBMITTED`: Revoke VC request submitted.
        - `COMPLETED`: VC has been successfully revoked and is unusable in the future.
        - `FAILED`: An error occurred, and the VC was not created or published.
    - `draft_status`: Indicates whether the VC document is in a draft or final state.
        - `DRAFT`: The state of the VC is changing.
        - `FINAL`: The state of the VC is complete/valid.


    ### VerifiableCredential model

    See [specification details](https://www.w3.org/TR/vc-data-model-2.0/) for more information about the data model.

    - `id`: If present, the `id` property MUST express an identifier that others are expected to use when expressing
    statements about a specific thing identified by that identifier. The `id` property MUST NOT have more than one value.
    The value of the `id` property MUST be a URL which MAY be dereferenced.
    - `type`: The value of the type property MUST be, or map to (through interpretation of the @context property),
    one or more URIs. If more than one URI is provided, the URIs MUST be interpreted as an unordered set. Syntactic
    conveniences SHOULD be used to ease developer usage. Such conveniences might include JSON-LD terms. It is
    RECOMMENDED that each URI in the type be one which, if dereferenced, results in a document containing
    machine-readable information about the type.
    - `issuer`: The [DID identity][credential_service.domain.models.DID] of the trusted party that issued this VCs.
    - `credentialSubject`: This is a dictionary of Claims containing an `id` field which is the
    [DID identity][credential_service.domain.models.DID] of the entity to which the claims are being attested as
    well as a list of claims about the `credentialSubject` identified by the `id` field. For example,

    ```
    "credentialSubject":
        {
        "id": "did:smb1:1337:0xfc98c982ca22ea0141c3452325c372ff728e9ccd:18322500091651578819492444870201097984271428616569706638674662898632050307982",
        "degree": {
            "value": {
                "name": "Bachelor of Science and Arts",
                "type": "BachelorDegree",
            },
            "claim_schema": None,
        }
    }
    ```

    - `validFrom`: The date-time this VC is valid from.
    - `validUntil`: The expiry date-time of this VC.
    - `credentialStatus`: If present, the value of the credentialStatus property MUST include the following:

        - `id` property, which MUST be a URI.
        - `type` property, which expresses the credential status type (also referred to as the credential status method).
        It is expected that the value will provide enough information to determine the current status of the credential
        and that machine readable information needs to be retrievable from the URI. For example, the object could
        contain a link to an external document noting whether or not the credential is suspended or revoked.


    ## VC fields not currently implemented:
    - `termsOfUse`: The value of the termsOfUse property MUST specify one or more terms of use policies under which the
    creator issued the credential or presentation. If the recipient (a holder or verifier) is not willing to adhere to
    the specified terms of use, then they do so on their own responsibility and might incur legal liability if they
    violate the stated terms of use. Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY
    specify its instance id. The precise contents of each term of use is determined by the specific termsOfUse type
    definition.
    - `credential_schema`: The value of the credentialSchema property MUST be one or more data schemas that provide
    verifiers with enough information to determine if the provided data conforms to the provided schema. Each
    credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property that MUST be a
    URI identifying the schema file. The precise contents of each data schema is determined by the specific type
    definition.
    - `evidence`: The value of the evidence property MUST be one or more evidence schemes providing enough information
    for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying
    on the credential. Each evidence scheme is identified by its type. The id property is optional, but if present,
    SHOULD contain a URL that points to where more information about this instance of evidence can be found. The precise
    content of each evidence scheme is determined by the specific evidence type definition.
    - `refresh_service`: The value of the refreshService property MUST be one or more refresh services that provides
    enough information to the recipient's software such that the recipient can refresh the verifiable credential. Each
    refreshService value MUST specify its type (for example, ManualRefreshService2018) and its id, which is the URI of
    the service. There is an expectation that machine readable information needs to be retrievable from the URI. The
    precise content of each refresh service is determined by the specific refreshService type definition.
    """

    field_id: Annotated[
        Optional[str],
        Field(
            None,
            alias="_id",
            description="MongoDB ObjectID of this object.",
            title=" Id",
        ),
    ]
    vc: Union[Dict[str, Any], str, int, bool]
    metadata: VcMetaData


class DID(BaseModel):
    """
    The class represents a digital identity within a system that uses Decentralized Identifiers (DIDs) and DID Documents.
    DIDs and DID Documents are fundamental components in decentralized identity systems, facilitating a trust framework
    where entities such as individuals, organizations, resources, or physical objects can be uniquely identified and
    interact securely.

    ### What is a DID?

    A DID enables a verifiable, self-sovereign identity.  DIDs are fully under the control of the DID subject,
    independent of any centralized registry, identity provider, or certificate authority. DIDs are used to create
    a secure and interoperable identity layer for the internet.

    ### What is a DID Document?

    The DID Document is a JSON document that describes the DID subject and contains cryptographic material,
    such as public keys and service endpoints, which enable secure, direct communication with the DID subject.
    This document plays a critical role in the decentralized identity ecosystem, as it facilitates trust by ensuring
    that interactions with the DID subject can be authenticated and verified. The DID Document is stored in a public
    registry, for example, a blockchain, making it accessible for verification by anyone in the network.

    ### The `DID` Class Overview

    This class encapsulates a DIDDocument and associated metadata, defined by the `DIDMetadata` class.
    The `DIDMetadata` provides additional context and status information about the DID within the ecosystem and
    includes,

    - `nickname`:  Owner's familiar DID name. Must be case-insensitive unique for this user.
    - `public_name`: The public name of the entity represented by this DID. Must be case-insensitive unique for this user.
    - `owner`: The entity that owns this DID.
    - `trust_profile`: TrustProfile name, determines the type of DID created and controls subsequent DID operations on DIDS, VCs and VPs.
    - `permission`: Defines the DID's capabilities. An ISSUER DID can be used to create VCs. A HOLDER DID can be used as the credentialSubject in a VC.
    - `domain`: The domain within which this DID operates or is recognized.
    - `alias`: A human-readable name or identifier for this DID.
    - `seed`: A cryptographic seed from which keys associated with this DID can be derived.
    - `register_status` and `revoke_status`: Enumerated fields indicating the current status of the DID Document in terms of registration or revocation within a registry or system.
    - `draft_status`: Indicates whether the DID Document is in a draft or final state.
    - `account_verified`: A boolean indicating whether the DID owner's account has been verified.

    ### Significance in a Trust System

    In a system of trust the DID and the associated DID Document serve as the primary representation
    of an entity. This setup enables a decentralized, secure, and verifiable method of identity assertion and
    interaction between entities. By leveraging cryptographic proofs, such as digital signatures,
    entities can prove control over their DIDs and the information within their DID Documents,
    thereby facilitating trusted interactions without the need for a central authority.
    """

    field_id: Annotated[
        Optional[str],
        Field(
            None,
            alias="_id",
            description="MongoDB ObjectID of this object.",
            title=" Id",
        ),
    ]
    did_document: Optional[Union[Dict[str, Any], str, int, bool]] = None
    metadata: DIDMetadata


class PageTask(BaseModel):
    items: Annotated[List[Task], Field(title="Items")]
    total: Annotated[int, Field(ge=0, title="Total")]
    page: Annotated[Optional[Page], Field(title="Page")]
    size: Annotated[Optional[Size], Field(title="Size")]
    pages: Annotated[Optional[Pages], Field(None, title="Pages")]


class PageVerifiableCredential(BaseModel):
    items: Annotated[
        List[CredentialServiceDomainModelsVerifiableCredential], Field(title="Items")
    ]
    total: Annotated[int, Field(ge=0, title="Total")]
    page: Annotated[Optional[Page], Field(title="Page")]
    size: Annotated[Optional[Size], Field(title="Size")]
    pages: Annotated[Optional[Pages], Field(None, title="Pages")]
