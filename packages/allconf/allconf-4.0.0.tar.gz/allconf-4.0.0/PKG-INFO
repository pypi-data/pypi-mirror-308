Metadata-Version: 2.1
Name: allconf
Version: 4.0.0
Summary: Configuration file reader with some nifty bells and whistles added
Author-email: Thordur Matthiasson <doddi79@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Thordur Matthiasson
        Copyright (c) 2019-2024 CCP Games
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/doddi79/allconf
Project-URL: Documentation, https://github.com/doddi79/allconf/blob/main/README.md
Project-URL: Repository, https://github.com/doddi79/allconf.git
Project-URL: Issues, https://github.com/doddi79/allconf/issues
Project-URL: Changelog, https://github.com/doddi79/allconf/blob/main/CHANGELOG.md
Keywords: config,configuration,json,yaml,tools,utils
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: MIT License
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyYAML<7,>=6.0.1
Requires-Dist: batutils<3,>=2
Provides-Extra: fidelius
Requires-Dist: fidelius<2,>=1.0; extra == "fidelius"

# AllConf the All-Knowing Config Reader

Generic Configuration file reader/parser with a bunch of nifty extra 
features, most notably:

- File Inclusion & Extension
- Internal variable reference parsing
- Nested fault-tolerant fetching of non-existing values
- Environment variable embedding
- On-demand external secret credential embedding _(untested in this new fork thus far)_
- Python script result embedding
- Single-file rendering of parsed config file (via CLI)
- Python dataclass stub generation (via CLI)
- JSON, YAML & custom support
- ...and more


## Note

This was forked from the [`alviss`](https://github.com/ccpgames/allconf) package
in order to continue development and support. 

## The TL;DR...

Given this `my_cfg.yaml` config file example:

```yaml
app:
  name: MyApp
  environment: dev
  log_level: INFO
```

This is how you load and use it with `allconf`:

```python
from allconf import quickloader

cfg = quickloader.autoload('my_cfg.yaml')

assert cfg.app.name == 'MyApp'
assert cfg.app.environment == 'dev'
assert cfg.app.log_level == 'INFO'
```

And that's basically it really!

Read on for description of more features in order of "quality of life" impact 
for you as a programmer _(as gauged by myself)_ and it goes more or less like this:

1. File Inclusion & Extension
2. Internal variable reference parsing
3. Nested fault-tolerant fetching of non-existing values
4. Environment variable embedding
5. On-demand external secret credential embedding _(untested in this new fork thus far)_
6. Python script result embedding
7. Single-file rendering of parsed config file (via CLI)
8. Python dataclass stub generation (via CLI)
9. JSON, YAML & custom support

...I'll document this later!

Check out the (`_OLD_README.md`)[_OLD_README.md] file for the old documentation (which may or may not be up to date)!
